<Type Name="Enumerable" FullName="System.Linq.Enumerable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d784f7085ee5c91b69f527975ecebf8715b7afc6" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52231341" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Enumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Enumerable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Enumerable" />
  <TypeSignature Language="VB.NET" Value="Public Module Enumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enumerable abstract sealed" />
  <TypeSignature Language="F#" Value="type Enumerable = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="62df5-101">Fournit un jeu de méthodes <see langword="static" /> (<see langword="Shared" /> en Visual Basic) permettant d'exécuter une requête d'objets qui implémentent <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="62df5-101">Provides a set of <see langword="static" /> (<see langword="Shared" /> in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-102">Les méthodes de cette classe fournissent une implémentation des opérateurs de requête standard pour interroger des données sources qui implémentent <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="62df5-102">The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="62df5-103">Les opérateurs de requête standard sont des méthodes à usage général qui suivent le [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] de modèle et vous permettent d’exprimer des opérations de parcours, de filtre et de projection sur les données dans les. Langage de programmation NET.</span><span class="sxs-lookup"><span data-stu-id="62df5-103">The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</span></span>  
  
 <span data-ttu-id="62df5-104">La plupart des méthodes dans cette classe sont définies en tant que méthodes d’extension qui étendent <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="62df5-104">The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="62df5-105">Cela signifie qu’ils peuvent être appelées comme une méthode d’instance sur n’importe quel objet qui implémente <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="62df5-105">This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="62df5-106">Les méthodes qui sont utilisés dans une requête qui retourne une séquence de valeurs n’utilisent pas les données cibles jusqu'à ce que l’objet de requête est énumérée.</span><span class="sxs-lookup"><span data-stu-id="62df5-106">Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</span></span> <span data-ttu-id="62df5-107">Il s’agit en tant que l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-107">This is known as deferred execution.</span></span> <span data-ttu-id="62df5-108">Les méthodes qui sont utilisés dans une requête qui retourne une valeur singleton exécuteront et consomment les données cibles immédiatement.</span><span class="sxs-lookup"><span data-stu-id="62df5-108">Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2">
      <span data-ttu-id="62df5-109">Vue d'ensemble des opérateurs de requête standard</span>
      <span class="sxs-lookup">
        <span data-stu-id="62df5-109">Standard Query Operators Overview</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/175ce3ff-9bbf-4e64-8421-faeb81a0bb51">
      <span data-ttu-id="62df5-110">Méthodes d’extension (Guide de programmation C#)</span>
      <span class="sxs-lookup">
        <span data-stu-id="62df5-110">Extension Methods (C# Programming Guide)</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/b8020aae-374d-46a9-bcb7-8cc2390b93b6">
      <span data-ttu-id="62df5-111">Méthodes d'extension (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="62df5-111">Extension Methods (Visual Basic)</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="Aggregate&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Aggregate&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource) (source As IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TSource, TSource&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * Func&lt;'Source, 'Source, 'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Aggregate (source, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-112">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-112">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-113">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> pour l'agrégat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-113">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="62df5-114">Fonction d'accumulation à appeler sur chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-114">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-115">Applique une fonction d'accumulation sur une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-115">Applies an accumulator function over a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-116">Valeur d'accumulation finale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-116">The final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-117">Le <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> méthode permet de réagir facilement effectuer un calcul sur une séquence de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-117">The <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="62df5-118">Cette méthode fonctionne en appelant `func` une fois pour chaque élément dans `source` à l’exception de la première condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-118">This method works by calling `func` one time for each element in `source` except the first one.</span></span> <span data-ttu-id="62df5-119">Chaque fois `func` est appelée, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passe l’élément à partir de la séquence et une valeur agrégée (en tant que premier argument de `func`).</span><span class="sxs-lookup"><span data-stu-id="62df5-119">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="62df5-120">Le premier élément du `source` est utilisé comme valeur d’agrégation initiale.</span><span class="sxs-lookup"><span data-stu-id="62df5-120">The first element of `source` is used as the initial aggregate value.</span></span> <span data-ttu-id="62df5-121">Le résultat de `func` remplace la valeur agrégée précédente.</span><span class="sxs-lookup"><span data-stu-id="62df5-121">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="62df5-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> Retourne le résultat final de `func`.</span><span class="sxs-lookup"><span data-stu-id="62df5-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="62df5-123">Cette surcharge de la <xref:System.Linq.Enumerable.Aggregate%2A> méthode n’est pas adaptée pour tous les cas, car elle utilise le premier élément du `source` en tant que valeur d’agrégation initiale.</span><span class="sxs-lookup"><span data-stu-id="62df5-123">This overload of the <xref:System.Linq.Enumerable.Aggregate%2A> method isn't suitable for all cases because it uses the first element of `source` as the initial aggregate value.</span></span> <span data-ttu-id="62df5-124">Vous devez choisir une autre surcharge si la valeur de retour doit inclure uniquement les éléments de `source` qui remplissent une certaine condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-124">You should choose another overload if the return value should include only the elements of `source` that meet a certain condition.</span></span> <span data-ttu-id="62df5-125">Par exemple, cette surcharge n’est pas fiable si vous souhaitez calculer la somme des nombres pairs dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-125">For example, this overload isn't reliable if you want to calculate the sum of the even numbers in `source`.</span></span> <span data-ttu-id="62df5-126">Le résultat sera incorrect si le premier élément est impair, au lieu de même.</span><span class="sxs-lookup"><span data-stu-id="62df5-126">The result will be incorrect if the first element is odd instead of even.</span></span>  
  
 <span data-ttu-id="62df5-127">Pour simplifier les opérations d’agrégation courantes, les opérateurs de requête standard incluent également une méthode count à usage général, <xref:System.Linq.Enumerable.Count%2A>et quatre méthodes d’agrégation numériques, à savoir <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, et <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-127">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-128">L’exemple de code suivant montre comment inverser l’ordre des mots dans une chaîne à l’aide de <xref:System.Linq.Enumerable.Aggregate%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-128">The following code example demonstrates how to reverse the order of words in a string by using <xref:System.Linq.Enumerable.Aggregate%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#1)]
 [!code-vb[System.Linq.Enumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-129">
            <paramref name="source" /> ou <paramref name="func" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-129">
              <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-130">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-130">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TSource, TAccumulate&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TAccumulate Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; -&gt; 'Accumulate" Usage="System.Linq.Enumerable.Aggregate (source, seed, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TAccumulate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-131">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-131">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TAccumulate">
          <span data-ttu-id="62df5-132">Type de la valeur d'accumulation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-132">The type of the accumulator value.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-133">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> pour l'agrégat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-133">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="seed">
          <span data-ttu-id="62df5-134">Valeur d'accumulation initiale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-134">The initial accumulator value.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="62df5-135">Fonction d'accumulation à appeler sur chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-135">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-136">Applique une fonction d'accumulation sur une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-136">Applies an accumulator function over a sequence.</span>
          </span>
          <span data-ttu-id="62df5-137">La valeur initiale spécifiée est utilisée comme valeur d'accumulation initiale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-137">The specified seed value is used as the initial accumulator value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-138">Valeur d'accumulation finale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-138">The final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-139">Le <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> méthode permet de réagir facilement effectuer un calcul sur une séquence de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-139">The <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="62df5-140">Cette méthode fonctionne en appelant `func` une fois pour chaque élément dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-140">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="62df5-141">Chaque fois `func` est appelée, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passe l’élément à partir de la séquence et une valeur agrégée (en tant que premier argument de `func`).</span><span class="sxs-lookup"><span data-stu-id="62df5-141">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="62df5-142">La valeur de la `seed` paramètre est utilisé comme valeur d’agrégation initiale.</span><span class="sxs-lookup"><span data-stu-id="62df5-142">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="62df5-143">Le résultat de `func` remplace la valeur agrégée précédente.</span><span class="sxs-lookup"><span data-stu-id="62df5-143">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="62df5-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> Retourne le résultat final de `func`.</span><span class="sxs-lookup"><span data-stu-id="62df5-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="62df5-145">Pour simplifier les opérations d’agrégation courantes, les opérateurs de requête standard incluent également une méthode count à usage général, <xref:System.Linq.Enumerable.Count%2A>et quatre méthodes d’agrégation numériques, à savoir <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, et <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-145">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-146">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Aggregate%2A> pour appliquer une fonction d’accumulation et utiliser une valeur de départ.</span><span class="sxs-lookup"><span data-stu-id="62df5-146">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and use a seed value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#2)]
 [!code-vb[System.Linq.Enumerable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-147">
            <paramref name="source" /> ou <paramref name="func" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-147">
              <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate, TResult) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func, Func&lt;TAccumulate, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; * Func&lt;'Accumulate, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Aggregate (source, seed, func, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-148">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-148">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TAccumulate">
          <span data-ttu-id="62df5-149">Type de la valeur d'accumulation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-149">The type of the accumulator value.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-150">Type de la valeur résultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-150">The type of the resulting value.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-151">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> pour l'agrégat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-151">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="seed">
          <span data-ttu-id="62df5-152">Valeur d'accumulation initiale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-152">The initial accumulator value.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="62df5-153">Fonction d'accumulation à appeler sur chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-153">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-154">Fonction permettant de transformer la valeur d'accumulation finale en valeur de résultat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-154">A function to transform the final accumulator value into the result value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-155">Applique une fonction d'accumulation sur une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-155">Applies an accumulator function over a sequence.</span>
          </span>
          <span data-ttu-id="62df5-156">La valeur initiale spécifiée est utilisée comme valeur d'accumulation initiale et la fonction spécifiée permet de sélectionner la valeur de résultat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-156">The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-157">Valeur d'accumulation finale transformée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-157">The transformed final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-158">Le <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> méthode permet de réagir facilement effectuer un calcul sur une séquence de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-158">The <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="62df5-159">Cette méthode fonctionne en appelant `func` une fois pour chaque élément dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-159">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="62df5-160">Chaque fois `func` est appelée, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passe l’élément à partir de la séquence et une valeur agrégée (en tant que premier argument de `func`).</span><span class="sxs-lookup"><span data-stu-id="62df5-160">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="62df5-161">La valeur de la `seed` paramètre est utilisé comme valeur d’agrégation initiale.</span><span class="sxs-lookup"><span data-stu-id="62df5-161">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="62df5-162">Le résultat de `func` remplace la valeur agrégée précédente.</span><span class="sxs-lookup"><span data-stu-id="62df5-162">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="62df5-163">Le résultat final de `func` est passé à `resultSelector` pour obtenir le résultat final de <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="62df5-163">The final result of `func` is passed to `resultSelector` to obtain the final result of <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.</span></span>  
  
 <span data-ttu-id="62df5-164">Pour simplifier les opérations d’agrégation courantes, les opérateurs de requête standard incluent également une méthode count à usage général, <xref:System.Linq.Enumerable.Count%2A>et quatre méthodes d’agrégation numériques, à savoir <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, et <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-164">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-165">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Aggregate%2A> pour appliquer une fonction d’accumulation et un sélecteur de résultat.</span><span class="sxs-lookup"><span data-stu-id="62df5-165">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and a result selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#3)]
 [!code-vb[System.Linq.Enumerable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-166">
            <paramref name="source" /> ou <paramref name="func" /> ou <paramref name="resultSelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-166">
              <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="All&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool All(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member All : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.All (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-167">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-167">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-168">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments auxquels appliquer le prédicat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-168">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-169">Fonction permettant de tester chaque élément par rapport à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-169">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-170">Détermine si tous les éléments d'une séquence satisfont à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-170">Determines whether all elements of a sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-171">
            <see langword="true" /> si tous les éléments de la séquence source réussissent le test dans le prédicat spécifié ou si la séquence est vide ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-171">
              <see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="62df5-172">Cette méthode ne retourne pas de tous les éléments d’une collection.</span><span class="sxs-lookup"><span data-stu-id="62df5-172">This method does not return all the elements of a collection.</span></span> <span data-ttu-id="62df5-173">Au lieu de cela, il détermine si tous les éléments d’une collection remplissent une condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-173">Instead, it determines whether all the elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="62df5-174">L’énumération de `source` est arrêtée dès que le résultat peut être déterminé.</span><span class="sxs-lookup"><span data-stu-id="62df5-174">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="62df5-175">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into All()` clause se traduit par un appel à <xref:System.Linq.Enumerable.All%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-175">In Visual Basic query expression syntax, an `Aggregate Into All()` clause translates to an invocation of <xref:System.Linq.Enumerable.All%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-176">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.All%2A> pour déterminer si tous les éléments d’une séquence remplissent une condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-176">The following code example demonstrates how to use <xref:System.Linq.Enumerable.All%2A> to determine whether all the elements in a sequence satisfy a condition.</span></span> <span data-ttu-id="62df5-177">Variable `allStartWithB` a la valeur true si tous les noms de pet commence par « B », ou si le `pets` tableau est vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-177">Variable `allStartWithB` is true if all the pet names start with "B" or if the `pets` array is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#4)]
 [!code-vb[System.Linq.Enumerable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#4)]  
  
 <span data-ttu-id="62df5-178">La valeur booléenne qui le <xref:System.Linq.Enumerable.All%2A> méthode retourne est généralement utilisée dans le prédicat d’une `where` clause (`Where` clause en Visual Basic) ou un appel direct à la <xref:System.Linq.Enumerable.Where%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-178">The Boolean value that the <xref:System.Linq.Enumerable.All%2A> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%2A> method.</span></span> <span data-ttu-id="62df5-179">L’exemple suivant illustre cette utilisation de la `All` (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-179">The following example demonstrates this use of the `All` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#129](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#129)]
 [!code-vb[System.Linq.Enumerable#129](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#129)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-180">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-180">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-181">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-181">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Any&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-182">Détermine si les éléments d'une séquence existent ou satisfont à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-182">Determines whether any element of a sequence exists or satisfies a condition.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-183">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-183">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-184">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à vérifier pour savoir si des éléments y sont présents.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-184">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-185">Détermine si une séquence contient des éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-185">Determines whether a sequence contains any elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-186">
            <see langword="true" /> si la séquence source contient des éléments ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-186">
              <see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="62df5-187">Cette méthode ne retourne pas de tout élément d’une collection.</span><span class="sxs-lookup"><span data-stu-id="62df5-187">This method does not return any one element of a collection.</span></span> <span data-ttu-id="62df5-188">Au lieu de cela, il détermine si la collection contient des éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-188">Instead, it determines whether the collection contains any elements.</span></span>  
  
 <span data-ttu-id="62df5-189">L’énumération de `source` est arrêtée dès que le résultat peut être déterminé.</span><span class="sxs-lookup"><span data-stu-id="62df5-189">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="62df5-190">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Any()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Any%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-190">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-191">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Any%2A> pour déterminer si une séquence contient des éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-191">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether a sequence contains any elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#5)]
 [!code-vb[System.Linq.Enumerable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#5)]  
  
 <span data-ttu-id="62df5-192">La valeur booléenne qui le <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode retourne est généralement utilisée dans le prédicat d’une `where` clause (`Where` clause en Visual Basic) ou un appel direct à la <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-192">The Boolean value that the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method.</span></span> <span data-ttu-id="62df5-193">L’exemple suivant illustre cette utilisation de la `Any` (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-193">The following example demonstrates this use of the `Any` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#130](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#130)]
 [!code-vb[System.Linq.Enumerable#130](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#130)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-194">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-194">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-195">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-195">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-196">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-196">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-197">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments auxquels appliquer le prédicat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-197">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-198">Fonction permettant de tester chaque élément par rapport à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-198">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-199">Détermine si des éléments d'une séquence satisfont à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-199">Determines whether any element of a sequence satisfies a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-200">
            <see langword="true" /> si des éléments de la séquence source réussissent le test dans le prédicat spécifié ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-200">
              <see langword="true" /> if any elements in the source sequence pass the test in the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="62df5-201">Cette méthode ne retourne pas de tout élément d’une collection.</span><span class="sxs-lookup"><span data-stu-id="62df5-201">This method does not return any one element of a collection.</span></span> <span data-ttu-id="62df5-202">Au lieu de cela, il détermine si tous les éléments d’une collection remplissent une condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-202">Instead, it determines whether any elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="62df5-203">L’énumération de `source` est arrêtée dès que le résultat peut être déterminé.</span><span class="sxs-lookup"><span data-stu-id="62df5-203">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="62df5-204">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Any()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Any%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-204">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-205">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Any%2A> pour déterminer si des éléments d’une séquence satisfont à une condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-205">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether any element in a sequence satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#6)]
 [!code-vb[System.Linq.Enumerable#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-206">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-206">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-207">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-207">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Append&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Append&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Append(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Append : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Append (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-208">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-208">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-209">Séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-209">A sequence of values.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="62df5-210">Valeur à ajouter à <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-210">The value to append to <paramref name="source" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-211">Ajoute une valeur à la fin de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-211">Appends a value to the end of the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-212">Séquence qui se termine par <paramref name="element" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-212">A new sequence that ends with <paramref name="element" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="62df5-213">Cette méthode ne modifie pas les éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="62df5-213">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="62df5-214">Au lieu de cela, il crée une copie de la collection avec le nouvel élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-214">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="62df5-215">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Append%2A> pour ajouter une valeur à la fin de la séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-215">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Append%2A> to append a value to the end of the sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#201](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#201)]
 [!code-vb[System.Linq.Enumerable#201](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#201)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-216">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-216">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsEnumerable&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; AsEnumerable&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ AsEnumerable(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-217">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-217">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-218">Séquence à saisir comme <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-218">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-219">Retourne l’entrée typée comme <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-219">Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-220">Séquence d'entrées typées comme <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-220">The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-221">Le <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode n’a aucun effet autre que pour modifier le type de compilation de `source` à partir d’un type qui implémente <xref:System.Collections.Generic.IEnumerable%601> à <xref:System.Collections.Generic.IEnumerable%601> lui-même.</span><span class="sxs-lookup"><span data-stu-id="62df5-221">The <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method has no effect other than to change the compile-time type of `source` from a type that implements <xref:System.Collections.Generic.IEnumerable%601> to <xref:System.Collections.Generic.IEnumerable%601> itself.</span></span>  
  
 <span data-ttu-id="62df5-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> peut être utilisé pour choisir entre les implémentations de requête lorsqu’une séquence implémente <xref:System.Collections.Generic.IEnumerable%601> mais possède également un ensemble différent de méthodes de requête publiques disponibles.</span><span class="sxs-lookup"><span data-stu-id="62df5-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> can be used to choose between query implementations when a sequence implements <xref:System.Collections.Generic.IEnumerable%601> but also has a different set of public query methods available.</span></span> <span data-ttu-id="62df5-223">Par exemple, prenons une classe générique `Table` qui implémente <xref:System.Collections.Generic.IEnumerable%601> et possède ses propres méthodes comme `Where`, `Select`, et `SelectMany`, un appel à `Where` appellerait public `Where` méthode de `Table`.</span><span class="sxs-lookup"><span data-stu-id="62df5-223">For example, given a generic class `Table` that implements <xref:System.Collections.Generic.IEnumerable%601> and has its own methods such as `Where`, `Select`, and `SelectMany`, a call to `Where` would invoke the public `Where` method of `Table`.</span></span> <span data-ttu-id="62df5-224">Un `Table` type qui représente une table de base de données peut avoir un `Where` méthode qui traite l’argument de prédicat comme une arborescence d’expression et convertit l’arborescence en SQL pour l’exécution à distance.</span><span class="sxs-lookup"><span data-stu-id="62df5-224">A `Table` type that represents a database table could have a `Where` method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</span></span> <span data-ttu-id="62df5-225">Si l’exécution à distance n’est pas souhaitée, par exemple, car le prédicat appelle une méthode locale, le <xref:System.Linq.Enumerable.AsEnumerable%2A> méthode peut être utilisée pour masquer les méthodes personnalisées et à la place les opérateurs de requête standard disponibles.</span><span class="sxs-lookup"><span data-stu-id="62df5-225">If remote execution is not desired, for example because the predicate invokes a local method, the <xref:System.Linq.Enumerable.AsEnumerable%2A> method can be used to hide the custom methods and instead make the standard query operators available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-226">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour masquer un type personnalisée du `Where` méthode lors de l’implémentation d’opérateur de requête standard est souhaitée.</span><span class="sxs-lookup"><span data-stu-id="62df5-226">The following code example demonstrates how to use <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to hide a type's custom `Where` method when the standard query operator implementation is desired.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#108](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#108)]
 [!code-vb[System.Linq.Enumerable#108](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Average">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-227">Calcule la moyenne d'une séquence de valeurs numériques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-227">Computes the average of a sequence of numeric values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static decimal Average (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-228">Séquence de valeurs <see cref="T:System.Decimal" /> dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-228">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-229">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-229">Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-230">Moyenne de la séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-230">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-231">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-231">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-232">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> pour calculer la moyenne d’une séquence de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-232">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-233">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-233">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-234">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-234">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-235">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-235">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-236">Séquence de valeurs <see cref="T:System.Double" /> dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-236">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-237">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-237">Computes the average of a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-238">Moyenne de la séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-238">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-239">Si la somme des éléments est trop grande pour être représenté comme un <xref:System.Double>, cette méthode retourne l’infini positif ou négatif.</span><span class="sxs-lookup"><span data-stu-id="62df5-239">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="62df5-240">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-240">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-241">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-241">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-242">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-242">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-243">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-243">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-244">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-244">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-245">Séquence de valeurs <see cref="T:System.Int32" /> dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-245">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-246">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-246">Computes the average of a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-247">Moyenne de la séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-247">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-248">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-248">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-249">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-249">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-250">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-250">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-251">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-251">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-252">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-252">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-253">Séquence de valeurs <see cref="T:System.Int64" /> dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-253">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-254">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-254">Computes the average of a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-255">Moyenne de la séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-255">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-256">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-256">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-257">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-257">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-258">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-258">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-259">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-259">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-260">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-260">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-261">Une séquence de valeurs <see cref="T:System.Decimal" /> de type Null dont il faut calculer la moyenne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-261">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-262">Calcule la moyenne d’une séquence de valeurs <see cref="T:System.Decimal" /> de type Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-262">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-263">La moyenne de la séquence de valeurs, ou <see langword="null" /> si la séquence source est vide ou contient uniquement des valeurs <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-263">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-264">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-264">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-265">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-265">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-266">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-266">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-267">La somme des éléments dans la séquence est supérieure à <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-267">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-268">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-268">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-269">Une séquence de valeurs <see cref="T:System.Double" /> de type Null dont il faut calculer la moyenne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-269">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-270">Calcule la moyenne d’une séquence de valeurs <see cref="T:System.Double" /> de type Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-270">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-271">La moyenne de la séquence de valeurs, ou <see langword="null" /> si la séquence source est vide ou contient uniquement des valeurs <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-271">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-272">Si la somme des éléments est trop grande pour être représenté comme un <xref:System.Double>, cette méthode retourne l’infini positif ou négatif.</span><span class="sxs-lookup"><span data-stu-id="62df5-272">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="62df5-273">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-273">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-274">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-274">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-275">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-275">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-276">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-276">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-277">Une séquence de valeurs <see cref="T:System.Int32" /> de type Null dont il faut calculer la moyenne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-277">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-278">Calcule la moyenne d’une séquence de valeurs <see cref="T:System.Int32" /> de type Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-278">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-279">La moyenne de la séquence de valeurs, ou <see langword="null" /> si la séquence source est vide ou contient uniquement des valeurs <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-279">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-280">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-280">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-281">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-281">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-282">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-282">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-283">La somme des éléments dans la séquence est supérieure à <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-283">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-284">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-284">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-285">Une séquence de valeurs <see cref="T:System.Int64" /> de type Null dont il faut calculer la moyenne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-285">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-286">Calcule la moyenne d’une séquence de valeurs <see cref="T:System.Int64" /> de type Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-286">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-287">La moyenne de la séquence de valeurs, ou <see langword="null" /> si la séquence source est vide ou contient uniquement des valeurs <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-287">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-288">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-288">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-289">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-289">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-290">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-290">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-291">La somme des éléments dans la séquence est supérieure à <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-291">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-292">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-292">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-293">Une séquence de valeurs <see cref="T:System.Single" /> de type Null dont il faut calculer la moyenne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-293">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-294">Calcule la moyenne d’une séquence de valeurs <see cref="T:System.Single" /> de type Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-294">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-295">La moyenne de la séquence de valeurs, ou <see langword="null" /> si la séquence source est vide ou contient uniquement des valeurs <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-295">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-296">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-296">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-297">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-297">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-298">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-298">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-299">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-299">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static float Average (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-300">Séquence de valeurs <see cref="T:System.Single" /> dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-300">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-301">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-301">Computes the average of a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-302">Moyenne de la séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-302">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-303">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-303">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-304">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-304">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-305">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-305">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-306">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-306">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-307">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-307">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-308">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-308">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-309">Séquence de valeurs utilisées pour calculer une moyenne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-309">A sequence of values that are used to calculate an average.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-310">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-310">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-311">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Decimal" /> obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-311">Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-312">Moyenne de la séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-312">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-313">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-313">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-314">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-314">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-315">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-315">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-316">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-316">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-317">La somme des éléments dans la séquence est supérieure à <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-317">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-318">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-318">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-319">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-319">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-320">Séquence de valeurs dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-320">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-321">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-321">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-322">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Double" /> obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-322">Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-323">Moyenne de la séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-323">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-324">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-324">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-325">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-325">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-326">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-326">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-327">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-327">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-328">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-328">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-329">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-329">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-330">Séquence de valeurs dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-330">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-331">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-331">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-332">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Int32" /> obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-332">Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-333">Moyenne de la séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-333">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-334">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-334">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-335">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-335">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-336">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-336">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-337">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-337">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-338">La somme des éléments dans la séquence est supérieure à <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-338">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-339">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-339">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-340">Type des éléments de la source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-340">The type of the elements of source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-341">Séquence de valeurs dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-341">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-342">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-342">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-343">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Int64" /> obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-343">Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-344">Moyenne de la séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-344">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-345">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-345">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-346">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-346">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-347">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-347">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-348">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-348">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-349">La somme des éléments dans la séquence est supérieure à <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-349">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-350">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-350">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-351">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-351">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-352">Séquence de valeurs dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-352">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-353">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-353">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-354">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Decimal" /> nullables obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-354">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-355">La moyenne de la séquence de valeurs, ou <see langword="null" /> si la séquence source est vide ou contient uniquement des valeurs <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-355">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-356">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-356">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-357">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-357">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-358">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-358">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-359">La somme des éléments dans la séquence est supérieure à <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-359">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-360">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-360">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-361">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-361">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-362">Séquence de valeurs dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-362">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-363">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-363">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-364">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Double" /> nullables obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-364">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-365">La moyenne de la séquence de valeurs, ou <see langword="null" /> si la séquence source est vide ou contient uniquement des valeurs <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-365">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-366">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-366">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-367">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-367">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-368">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-368">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-369">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-369">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-370">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-370">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-371">Séquence de valeurs dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-371">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-372">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-372">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-373">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Int32" /> nullables obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-373">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-374">La moyenne de la séquence de valeurs, ou <see langword="null" /> si la séquence source est vide ou contient uniquement des valeurs <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-374">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-375">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-375">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-376">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-376">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-377">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-377">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-378">La somme des éléments dans la séquence est supérieure à <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-378">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-379">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-379">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-380">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-380">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-381">Séquence de valeurs dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-381">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-382">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-382">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-383">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Int64" /> nullables obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-383">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-384">La moyenne de la séquence de valeurs, ou <see langword="null" /> si la séquence source est vide ou contient uniquement des valeurs <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-384">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-385">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-385">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-386">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-386">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-387">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-387">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-388">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-388">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-389">Séquence de valeurs dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-389">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-390">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-390">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-391">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Single" /> nullables obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-391">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-392">La moyenne de la séquence de valeurs, ou <see langword="null" /> si la séquence source est vide ou contient uniquement des valeurs <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-392">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-393">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-393">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-394">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-394">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-395">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-395">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-396">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-396">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-397">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-397">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-398">Séquence de valeurs dont la moyenne doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-398">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-399">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-399">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-400">Calcule la moyenne d'une séquence de valeurs <see cref="T:System.Single" /> obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-400">Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-401">Moyenne de la séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-401">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-402">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Average()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-402">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-403">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour calculer une moyenne.</span><span class="sxs-lookup"><span data-stu-id="62df5-403">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-404">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-404">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-405">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-405">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-406">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-406">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Cast(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Cast(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member Cast : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Cast source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-407">Type pour lequel effectuer un cast pour les éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-407">The type to cast the elements of <paramref name="source" /> to.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-408">
            <see cref="T:System.Collections.IEnumerable" /> qui contient les éléments devant faire l’objet d’un cast en type <c>TResult</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-408">The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be cast to type <c>TResult</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-409">Effectue un cast des éléments d'un <see cref="T:System.Collections.IEnumerable" /> vers le type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-409">Casts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-410">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient chaque élément de la séquence source casté vers le type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-410">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence cast to the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-411">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-411">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-412">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-412">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-413">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-413">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-414">Le <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> méthode permet d’opérateurs de requête standard à appeler sur des collections non génériques en fournissant les informations de type nécessaires.</span><span class="sxs-lookup"><span data-stu-id="62df5-414">The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</span></span> <span data-ttu-id="62df5-415">Par exemple, <xref:System.Collections.ArrayList> n’implémente pas <xref:System.Collections.Generic.IEnumerable%601>, mais en appelant <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> sur la <xref:System.Collections.ArrayList> de l’objet, les opérateurs de requête standard peuvent ensuite être utilisés pour interroger la séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-415">For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence.</span></span>  
  
 <span data-ttu-id="62df5-416">Si un élément ne peut pas être converti en type `TResult`, cette méthode lève un <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="62df5-416">If an element cannot be converted to type `TResult`, this method throws a <xref:System.InvalidCastException>.</span></span>

 <span data-ttu-id="62df5-417">La séquence source pour cette méthode est <xref:System.Collections.IEnumerable>, ce qui signifie que les éléments ont le type statique de la compilation de `object`.</span><span class="sxs-lookup"><span data-stu-id="62df5-417">The source sequence for this method is <xref:System.Collections.IEnumerable>, which means the elements have the compile-time static type of `object`.</span></span> <span data-ttu-id="62df5-418">Les seules les conversions qui sont effectuées par cette méthode sont des conversions de référence et des conversions unboxing.</span><span class="sxs-lookup"><span data-stu-id="62df5-418">The only type conversions that are performed by this method are reference conversions and unboxing conversions.</span></span> <span data-ttu-id="62df5-419">Le type de runtime des éléments dans la collection doit correspondre au type de cible, ou dans le cas des types valeur, le type de runtime d’éléments doit être le résultat d’une conversion boxing du type cible.</span><span class="sxs-lookup"><span data-stu-id="62df5-419">The runtime type of the elements in the collection must match the target type, or in the case of value types, the runtime type of elements must be the result of a boxing conversion of the target type.</span></span> <span data-ttu-id="62df5-420">Autres types de conversion, telles que celles entre les différents types numériques, ne sont pas autorisés.</span><span class="sxs-lookup"><span data-stu-id="62df5-420">Other conversion types, such as those between different numeric types, are not allowed.</span></span> 
 
 <span data-ttu-id="62df5-421">Pour obtenir uniquement les éléments qui peuvent être convertis en type `TResult`, utilisez le <xref:System.Linq.Enumerable.OfType%2A> méthode au lieu de <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span><span class="sxs-lookup"><span data-stu-id="62df5-421">To obtain only those elements that can be converted to type `TResult`, use the <xref:System.Linq.Enumerable.OfType%2A> method instead of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="62df5-422">Dans une expression de requête, une variable d’itération explicitement typée se traduit par l’appel de <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span><span class="sxs-lookup"><span data-stu-id="62df5-422">In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span> <span data-ttu-id="62df5-423">Cet exemple montre la syntaxe d’une variable de portée explicitement typée.</span><span class="sxs-lookup"><span data-stu-id="62df5-423">This example shows the syntax for an explicitly typed range variable.</span></span>  
  
```csharp  
from int i in objects  
```  
  
```vb  
From i As Integer In objects  
```  

<span data-ttu-id="62df5-424">Utilisez le `select` clause d’une requête pour effectuer d’autres types de conversion, comme les conversions numériques implicites.</span><span class="sxs-lookup"><span data-stu-id="62df5-424">Use the `select` clause of a query to perform other conversion types, like the implicit numeric conversions.</span></span> <span data-ttu-id="62df5-425">L’exemple suivant utilise à la fois le `Cast` (méthode) et un `select` instruction pour convertir une séquence d’entiers boxed en une séquence de valeurs de type double.</span><span class="sxs-lookup"><span data-stu-id="62df5-425">The following example uses both the `Cast` method and a `select` statement to convert a sequence of boxed integers to a sequence of doubles.</span></span>

```csharp
IEnumerable sequence = Enumerable.Range(0, 10);
var doubles = from int item in sequence
                select (double)item;
``` 

```vb
Dim sequence As IEnumerable = Enumerable.Range(0, 10)
Dim doubles = From item As Integer In sequence
                Select CType(item, Double)
```

## Examples  
 <span data-ttu-id="62df5-426">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> pour activer l’utilisation des opérateurs de requête standard sur un <xref:System.Collections.ArrayList>.</span><span class="sxs-lookup"><span data-stu-id="62df5-426">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> to enable the use of the standard query operators on an <xref:System.Collections.ArrayList>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#19)]
 [!code-vb[System.Linq.Enumerable#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-427">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-427">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="62df5-428">Impossible de caster un élément de la séquence en type <paramref name="TResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-428">An element in the sequence cannot be cast to type <paramref name="TResult" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1aefd18c-1314-47f8-99ec-9bcefb09e699">
          <span data-ttu-id="62df5-429">from, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-429">from clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/83e3665e-68a0-4540-a3a3-3d777a0f95d5">
          <span data-ttu-id="62df5-430">From, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-430">From Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Concat(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Concat(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Concat (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-431">Type des éléments des séquences d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-431">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="62df5-432">Première séquence à concaténer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-432">The first sequence to concatenate.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="62df5-433">Séquence à concaténer à la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-433">The sequence to concatenate to the first sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-434">Concatène deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-434">Concatenates two sequences.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-435">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments concaténés des deux séquences d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-435">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-436">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-436">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-437">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-437">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-438">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-438">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-439">Le <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode diffère de la <xref:System.Linq.Enumerable.Union%2A> (méthode), car le <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode retourne tous les éléments d’origine dans les séquences d’entrée.</span><span class="sxs-lookup"><span data-stu-id="62df5-439">The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences.</span></span> <span data-ttu-id="62df5-440">Le <xref:System.Linq.Enumerable.Union%2A> méthode retourne uniquement les éléments uniques.</span><span class="sxs-lookup"><span data-stu-id="62df5-440">The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-441">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour concaténer deux séquences.</span><span class="sxs-lookup"><span data-stu-id="62df5-441">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to concatenate two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#20)]
 [!code-vb[System.Linq.Enumerable#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#20)]  
  
 <span data-ttu-id="62df5-442">Une autre façon de concaténer deux séquences consiste à construire une collection, par exemple un tableau, de séquences, puis appliquez le <xref:System.Linq.Enumerable.SelectMany%2A> méthode, en lui passant la fonction de sélecteur d’identité.</span><span class="sxs-lookup"><span data-stu-id="62df5-442">An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <xref:System.Linq.Enumerable.SelectMany%2A> method, passing it the identity selector function.</span></span> <span data-ttu-id="62df5-443">L’exemple suivant illustre cette utilisation de <xref:System.Linq.Enumerable.SelectMany%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-443">The following example demonstrates this use of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#112](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#112)]
 [!code-vb[System.Linq.Enumerable#112](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-444">
            <paramref name="first" /> ou <paramref name="second" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-444">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-445">Détermine si une séquence contient un élément spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-445">Determines whether a sequence contains a specified element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-446">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-446">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-447">Séquence dans laquelle localiser une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-447">A sequence in which to locate a value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="62df5-448">Valeur à localiser dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-448">The value to locate in the sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-449">Détermine si une séquence contient un élément spécifié à l'aide du comparateur d'égalité par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-449">Determines whether a sequence contains a specified element by using the default equality comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-450">
            <see langword="true" /> si la séquence source contient un élément avec la valeur spécifiée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-450">
              <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-451">Si le type de `source` implémente <xref:System.Collections.Generic.ICollection%601>, le `Contains` méthode dans cette implémentation est appelée pour obtenir le résultat.</span><span class="sxs-lookup"><span data-stu-id="62df5-451">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, the `Contains` method in that implementation is invoked to obtain the result.</span></span> <span data-ttu-id="62df5-452">Sinon, cette méthode détermine si `source` contient l’élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="62df5-452">Otherwise, this method determines whether `source` contains the specified element.</span></span>  
  
 <span data-ttu-id="62df5-453">L’énumération se termine dès qu’un élément correspondant est trouvé.</span><span class="sxs-lookup"><span data-stu-id="62df5-453">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="62df5-454">Les éléments sont comparés à la valeur spécifiée à l’aide du comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-454">Elements are compared to the specified value by using the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-455">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> pour déterminer si un tableau contient un élément spécifique.</span><span class="sxs-lookup"><span data-stu-id="62df5-455">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to determine whether an array contains a specific element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#21)]
 [!code-vb[System.Linq.Enumerable#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-456">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-456">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-457">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-457">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-458">Séquence dans laquelle localiser une valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-458">A sequence in which to locate a value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="62df5-459">Valeur à localiser dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-459">The value to locate in the sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-460">Comparateur d'égalité à l'aide duquel comparer des valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-460">An equality comparer to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-461">Détermine si une séquence contient un élément spécifié à l'aide du <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> indiqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-461">Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-462">
            <see langword="true" /> si la séquence source contient un élément avec la valeur spécifiée ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-462">
              <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-463">L’énumération se termine dès qu’un élément correspondant est trouvé.</span><span class="sxs-lookup"><span data-stu-id="62df5-463">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="62df5-464">Si `comparer` est `null`, le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour comparer les éléments à la valeur spécifiée.</span><span class="sxs-lookup"><span data-stu-id="62df5-464">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements to the specified value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-465">L’exemple suivant montre comment implémenter un comparateur d’égalité qui peut être utilisé dans le <xref:System.Linq.Enumerable.Contains%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-465">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Contains%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="62df5-466">Une fois que vous implémentez ce comparateur, vous pouvez utiliser une séquence de `Product` des objets dans le <xref:System.Linq.Enumerable.Contains%2A> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="62df5-466">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Contains%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#6)]
 [!code-vb[CSLINQCustomComparer#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-467">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-467">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Count&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-468">Retourne le nombre total d'éléments dans une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-468">Returns the number of elements in a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; -&gt; int" Usage="System.Linq.Enumerable.Count source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-469">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-469">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-470">Séquence qui contient les éléments à compter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-470">A sequence that contains elements to be counted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-471">Retourne le nombre total d'éléments dans une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-471">Returns the number of elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-472">Nombre total d'éléments dans la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-472">The number of elements in the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-473">Si le type de `source` implémente <xref:System.Collections.Generic.ICollection%601>, cette implémentation est utilisée pour obtenir le nombre d’éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-473">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="62df5-474">Sinon, cette méthode détermine le nombre.</span><span class="sxs-lookup"><span data-stu-id="62df5-474">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="62df5-475">Utilisez le <xref:System.Linq.Enumerable.LongCount%2A> méthode si vous souhaitez autoriser le résultat peut être supérieur à <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="62df5-475">Use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="62df5-476">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Count()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-476">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-477">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour compter les éléments dans un tableau.</span><span class="sxs-lookup"><span data-stu-id="62df5-477">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#22)]
 [!code-vb[System.Linq.Enumerable#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-478">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-478">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-479">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-479">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-480">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-480">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int" Usage="System.Linq.Enumerable.Count (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-481">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-481">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-482">Séquence qui contient les éléments à tester et à compter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-482">A sequence that contains elements to be tested and counted.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-483">Fonction permettant de tester chaque élément par rapport à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-483">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-484">Retourne un nombre qui représente les éléments de la séquence spécifiée qui satisfont à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-484">Returns a number that represents how many elements in the specified sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-485">Nombre qui représente les éléments de la séquence spécifiée qui satisfont à la condition dans la fonction de prédicat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-485">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-486">Si le type de `source` implémente <xref:System.Collections.Generic.ICollection%601>, cette implémentation est utilisée pour obtenir le nombre d’éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-486">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="62df5-487">Sinon, cette méthode détermine le nombre.</span><span class="sxs-lookup"><span data-stu-id="62df5-487">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="62df5-488">Vous devez utiliser le <xref:System.Linq.Enumerable.LongCount%2A> méthode si vous souhaitez autoriser le résultat peut être supérieur à <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="62df5-488">You should use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="62df5-489">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Count()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-489">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-490">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> pour compter les éléments dans un tableau qui remplissent une condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-490">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#23)]
 [!code-vb[System.Linq.Enumerable#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-491">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-491">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-492">Le nombre d'éléments dans <paramref name="source" /> est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-492">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-493">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-493">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-494">Retourne les éléments d'un <see cref="T:System.Collections.Generic.IEnumerable`1" /> ou une collection de singletons avec les valeurs par défaut si la séquence est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-494">Returns the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, or a default valued singleton collection if the sequence is empty.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-495">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-495">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-496">Séquence pour laquelle retourner une valeur par défaut si aucun élément n'y figure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-496">The sequence to return a default value for if it is empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-497">Retourne les éléments de la séquence spécifiée ou la valeur par défaut du paramètre de type dans une collection de singletons si la séquence est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-497">Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-498">Objet <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient la valeur par défaut pour le type <paramref name="TSource" /> si <paramref name="source" /> est vide ; sinon, <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-498">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that contains the default value for the <paramref name="TSource" /> type if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-499">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-499">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-500">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-500">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-501">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-501">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-502">La valeur par défaut pour les types référence et nullables est `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-502">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="62df5-503">Cette méthode peut être utilisée pour produire une jointure externe gauche lorsqu’il est combiné avec le <xref:System.Linq.Enumerable.GroupJoin%2A>) méthode.</span><span class="sxs-lookup"><span data-stu-id="62df5-503">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-504">Les exemples de code suivants montrent comment utiliser <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour fournir une valeur par défaut au cas où la séquence source est vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-504">The following code examples demonstrate how to use <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to provide a default value in case the source sequence is empty.</span></span>  
  
 <span data-ttu-id="62df5-505">Cet exemple utilise une séquence non vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-505">This example uses a non-empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#24)]
 [!code-vb[System.Linq.Enumerable#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#24)]  
  
 <span data-ttu-id="62df5-506">Cet exemple utilise une séquence vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-506">This example uses an empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#25)]
 [!code-vb[System.Linq.Enumerable#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-507">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-507">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="62df5-508">Jointure</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-508">Joining</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource), defaultValue As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource defaultValue);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty (source, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-509">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-509">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-510">Séquence pour laquelle retourner la valeur spécifiée si aucun élément n'y figure.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-510">The sequence to return the specified value for if it is empty.</span>
          </span>
        </param>
        <param name="defaultValue">
          <span data-ttu-id="62df5-511">Valeur à retourner si la séquence est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-511">The value to return if the sequence is empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-512">Retourne les éléments de la séquence spécifiée ou la valeur indiquée dans une collection de singletons si la séquence est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-512">Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-513">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient <paramref name="defaultValue" /> si <paramref name="source" /> est vide ; sinon, <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-513">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-514">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-514">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-515">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-515">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-516">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-516">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-517">Cette méthode peut être utilisée pour produire une jointure externe gauche lorsqu’il est combiné avec le <xref:System.Linq.Enumerable.GroupJoin%2A>) méthode.</span><span class="sxs-lookup"><span data-stu-id="62df5-517">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-518">L’exemple de code suivant montre comment utiliser le <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> (méthode) et spécifiez une valeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="62df5-518">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method and specify a default value.</span></span> <span data-ttu-id="62df5-519">La première séquence n’est pas vide et la deuxième séquence est vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-519">The first sequence is not empty and the second sequence is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#26)]
 [!code-vb[System.Linq.Enumerable#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#26)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="62df5-520">Jointure</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-520">Joining</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Distinct&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-521">Retourne des éléments distincts d'une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-521">Returns distinct elements from a sequence.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-522">La séquence de résultat n’est pas ordonnée.</span><span class="sxs-lookup"><span data-stu-id="62df5-522">The result sequence is unordered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-523">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-523">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-524">Séquence de laquelle supprimer les éléments en double.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-524">The sequence to remove duplicate elements from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-525">Retourne des éléments distincts d'une séquence et utilise le comparateur d'égalité par défaut pour comparer les valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-525">Returns distinct elements from a sequence by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-526">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient des éléments distincts de la séquence source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-526">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-527">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-527">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-528">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-528">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-529">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-529">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-530">Le <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode retourne une séquence non ordonnée qui ne contient aucune valeur en double.</span><span class="sxs-lookup"><span data-stu-id="62df5-530">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="62df5-531">Elle utilise le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, pour comparer les valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-531">It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values.</span></span>  
  
 <span data-ttu-id="62df5-532">Dans la syntaxe d’expression de requête Visual Basic, un `Distinct` clause se traduit par un appel à <xref:System.Linq.Enumerable.Distinct%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-532">In Visual Basic query expression syntax, a `Distinct` clause translates to an invocation of <xref:System.Linq.Enumerable.Distinct%2A>.</span></span>  
  
 <span data-ttu-id="62df5-533">Le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour comparer les valeurs des types qui implémentent le <xref:System.IEquatable%601> interface générique.</span><span class="sxs-lookup"><span data-stu-id="62df5-533">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="62df5-534">Pour comparer un type de données personnalisé, vous devez implémenter cette interface et fournir votre propre <xref:System.Object.GetHashCode%2A> et <xref:System.Object.Equals%2A> méthodes pour le type.</span><span class="sxs-lookup"><span data-stu-id="62df5-534">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="62df5-535">Pour obtenir un exemple qui utilise <xref:System.Collections.Generic.IEqualityComparer%601> pour définir un comparateur personnalisé, consultez <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="62df5-535">For an example that uses <xref:System.Collections.Generic.IEqualityComparer%601> to define a custom comparer, see <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-536">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour retourner des éléments distincts d’une séquence d’entiers.</span><span class="sxs-lookup"><span data-stu-id="62df5-536">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return distinct elements from a sequence of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#27)]
 [!code-vb[System.Linq.Enumerable#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#27)]  
  
 <span data-ttu-id="62df5-537">Si vous souhaitez retourner des éléments distincts de séquences d’objets d’un type de données personnalisées, vous devrez implémenter le <xref:System.IEquatable%601> interface générique dans la classe.</span><span class="sxs-lookup"><span data-stu-id="62df5-537">If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in the class.</span></span> <span data-ttu-id="62df5-538">L’exemple de code suivant montre comment implémenter cette interface dans un type de données personnalisé et fournir <xref:System.Object.GetHashCode%2A> et <xref:System.Object.Equals%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-538">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#1)]
 [!code-vb[CSLINQEncapsulatedComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#1)]  
  
 <span data-ttu-id="62df5-539">Une fois que vous implémentez cette interface, vous pouvez utiliser une séquence de `Product` des objets dans le <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="62df5-539">After you implement this interface, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#5)]
 [!code-vb[CSLINQEncapsulatedComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-540">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-540">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/86f42614-0d8f-4ffc-b888-ce8a37a8d36a">
          <span data-ttu-id="62df5-541">Distinct, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-541">Distinct Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-542">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-542">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-543">Séquence de laquelle supprimer les éléments en double.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-543">The sequence to remove duplicate elements from.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-544">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-544">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-545">Retourne des éléments distincts d'une séquence et utilise le <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié pour comparer les valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-545">Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-546">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient des éléments distincts de la séquence source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-546">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-547">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-547">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-548">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-548">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-549">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-549">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-550">Le <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> méthode retourne une séquence non ordonnée qui ne contient aucune valeur en double.</span><span class="sxs-lookup"><span data-stu-id="62df5-550">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="62df5-551">Si `comparer` est `null`, le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-551">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-552">L’exemple suivant montre comment implémenter un comparateur d’égalité qui peut être utilisé dans le <xref:System.Linq.Enumerable.Distinct%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-552">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="62df5-553">Une fois que vous implémentez ce comparateur, vous pouvez utiliser une séquence de `Product` des objets dans le <xref:System.Linq.Enumerable.Distinct%2A> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="62df5-553">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#5)]
 [!code-vb[CSLINQCustomComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-554">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-554">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAt&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAt&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAt(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAt(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAt : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAt (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-555">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-555">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-556">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel retourner un élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-556">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="62df5-557">Index de base zéro de l'élément à récupérer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-557">The zero-based index of the element to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-558">Retourne l'élément à une position d'index spécifiée dans une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-558">Returns the element at a specified index in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-559">Élément situé à la position spécifiée dans la séquence source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-559">The element at the specified position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-560">Si le type de `source` implémente <xref:System.Collections.Generic.IList%601>, cette implémentation est utilisée pour obtenir l’élément à l’index spécifié.</span><span class="sxs-lookup"><span data-stu-id="62df5-560">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="62df5-561">Sinon, cette méthode obtient l’élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="62df5-561">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="62df5-562">Cette méthode lève une exception si `index` est hors limites.</span><span class="sxs-lookup"><span data-stu-id="62df5-562">This method throws an exception if `index` is out of range.</span></span> <span data-ttu-id="62df5-563">Pour retourner à la place une valeur par défaut lorsque l’index spécifié est hors limites, utilisez le <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-563">To instead return a default value when the specified index is out of range, use the <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-564">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.ElementAt%2A> pour retourner un élément à une position spécifique.</span><span class="sxs-lookup"><span data-stu-id="62df5-564">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAt%2A> to return an element at a specific position.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#28)]
 [!code-vb[System.Linq.Enumerable#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-565">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-565">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="62df5-566">
            <paramref name="index" /> est inférieur à 0 ou supérieur ou égal au nombre d'éléments contenus dans <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-566">
              <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAtOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefault(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAtOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAtOrDefault : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAtOrDefault (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-567">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-567">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-568">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel retourner un élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-568">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="62df5-569">Index de base zéro de l'élément à récupérer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-569">The zero-based index of the element to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-570">Retourne l’élément situé à un index spécifié dans une séquence ou une valeur par défaut si l’index est hors limites.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-570">Returns the element at a specified index in a sequence or a default value if the index is out of range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-571">
            <see langword="default" /> (<paramref name="TSource" />) si l'index est en dehors des limites de la séquence source ; sinon, l'élément situé à la position spécifiée dans la séquence source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-571">
              <see langword="default" />(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-572">Si le type de `source` implémente <xref:System.Collections.Generic.IList%601>, cette implémentation est utilisée pour obtenir l’élément à l’index spécifié.</span><span class="sxs-lookup"><span data-stu-id="62df5-572">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="62df5-573">Sinon, cette méthode obtient l’élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="62df5-573">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="62df5-574">La valeur par défaut pour les types référence et nullables est `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-574">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-575">L'exemple de code suivant illustre l'utilisation de <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-575">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>.</span></span> <span data-ttu-id="62df5-576">Cet exemple utilise un index est en dehors des limites du tableau.</span><span class="sxs-lookup"><span data-stu-id="62df5-576">This example uses an index that is outside the bounds of the array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#29)]
 [!code-vb[System.Linq.Enumerable#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-577">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-577">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Empty&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Empty&lt;TResult&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Empty&lt;TResult&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Empty``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Empty(Of TResult) () As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-578">Type à assigner au paramètre de type du <see cref="T:System.Collections.Generic.IEnumerable`1" /> générique retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-578">The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="62df5-579">Retourne un <see cref="T:System.Collections.Generic.IEnumerable`1" /> vide qui a l'argument de type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-579">Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-580">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> vide dont l'argument de type est <paramref name="TResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-580">An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-581">Le <xref:System.Linq.Enumerable.Empty%60%601> méthode met en cache une séquence vide de type `TResult`.</span><span class="sxs-lookup"><span data-stu-id="62df5-581">The <xref:System.Linq.Enumerable.Empty%60%601> method caches an empty sequence of type `TResult`.</span></span> <span data-ttu-id="62df5-582">Lorsque l’objet retourné est énumérée, il ne génère aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-582">When the object it returns is enumerated, it yields no elements.</span></span>  
  
 <span data-ttu-id="62df5-583">Dans certains cas, cette méthode est utile pour le passage d’une séquence vide à une méthode définie par l’utilisateur qui prend un <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="62df5-583">In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="62df5-584">Il peut également servir à générer un élément neutre pour les méthodes telles que <xref:System.Linq.Enumerable.Union%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-584">It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>.</span></span> <span data-ttu-id="62df5-585">Consultez la section exemple pour obtenir un exemple de cette utilisation de <xref:System.Linq.Enumerable.Empty%60%601>.</span><span class="sxs-lookup"><span data-stu-id="62df5-585">See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-586">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Empty%60%601> pour générer un vide <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="62df5-586">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Empty%60%601> to generate an empty <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#30)]
 [!code-vb[System.Linq.Enumerable#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#30)]  
  
 <span data-ttu-id="62df5-587">L’exemple de code suivant illustre une application possible du <xref:System.Linq.Enumerable.Empty%60%601> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-587">The following code example demonstrates a possible application of the <xref:System.Linq.Enumerable.Empty%60%601> method.</span></span> <span data-ttu-id="62df5-588">Le <xref:System.Linq.Enumerable.Aggregate%2A> méthode est appliquée à une collection de tableaux de chaînes.</span><span class="sxs-lookup"><span data-stu-id="62df5-588">The <xref:System.Linq.Enumerable.Aggregate%2A> method is applied to a collection of string arrays.</span></span> <span data-ttu-id="62df5-589">Les éléments de chaque tableau dans la collection sont ajoutés à résultant <xref:System.Collections.Generic.IEnumerable%601> uniquement si ce tableau contient quatre éléments ou plus.</span><span class="sxs-lookup"><span data-stu-id="62df5-589">The elements of each array in the collection are added to the resulting <xref:System.Collections.Generic.IEnumerable%601> only if that array contains four or more elements.</span></span> <span data-ttu-id="62df5-590"><xref:System.Linq.Enumerable.Empty%2A> est utilisé pour générer la valeur de départ pour <xref:System.Linq.Enumerable.Aggregate%2A> , car si aucun tableau dans la collection n’a quatre éléments ou plus, seule la séquence vide est retournée.</span><span class="sxs-lookup"><span data-stu-id="62df5-590"><xref:System.Linq.Enumerable.Empty%2A> is used to generate the seed value for <xref:System.Linq.Enumerable.Aggregate%2A> because if no array in the collection has four or more elements, only the empty sequence is returned.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#31)]
 [!code-vb[System.Linq.Enumerable#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Except&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-591">Produit la différence entre deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-591">Produces the set difference of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-592">Type des éléments des séquences d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-592">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="62df5-593">Un <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments ne se trouvent pas également dans <paramref name="second" /> sera retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-593">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="62df5-594">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments qui figurent également dans la première séquence seront supprimés de la séquence retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-594">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-595">Produit la différence entre deux séquences à l'aide du comparateur d'égalité par défaut pour comparer les valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-595">Produces the set difference of two sequences by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-596">Séquence qui contient la différence entre les éléments de deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-596">A sequence that contains the set difference of the elements of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-597">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-597">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-598">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-598">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-599">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-599">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-600">La différence entre deux ensembles est défini en tant que les membres du premier jeu qui n’apparaissent pas dans le deuxième jeu.</span><span class="sxs-lookup"><span data-stu-id="62df5-600">The set difference of two sets is defined as the members of the first set that do not appear in the second set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-601">Cette méthode retourne les éléments de `first` qui n’apparaissent pas dans `second`.</span><span class="sxs-lookup"><span data-stu-id="62df5-601">This method returns those elements in `first` that do not appear in `second`.</span></span> <span data-ttu-id="62df5-602">Elle ne retourne pas ces éléments dans `second` qui n’apparaissent pas dans `first`.</span><span class="sxs-lookup"><span data-stu-id="62df5-602">It does not also return those elements in `second` that do not appear in `first`.</span></span>  
  
 <span data-ttu-id="62df5-603">Le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour comparer les valeurs des types qui implémentent le <xref:System.Collections.Generic.IEqualityComparer%601> interface générique.</span><span class="sxs-lookup"><span data-stu-id="62df5-603">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="62df5-604">Pour comparer un type de données personnalisé, vous devez implémenter cette interface et fournir votre propre <xref:System.Object.GetHashCode%2A> et <xref:System.Object.Equals%2A> méthodes pour le type.</span><span class="sxs-lookup"><span data-stu-id="62df5-604">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-605">L’exemple de code suivant montre comment utiliser le <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode pour comparer deux séquences de nombres et de retourner les éléments qui apparaissent uniquement dans la première séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-605">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method to compare two sequences of numbers and return elements that appear only in the first sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#34)]
 [!code-vb[System.Linq.Enumerable#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#34)]  
  
 <span data-ttu-id="62df5-606">Si vous souhaitez comparer des séquences d’objets d’un type de données personnalisées, vous devrez implémenter le <xref:System.Collections.Generic.IEqualityComparer%601> interface générique dans un helperclass.</span><span class="sxs-lookup"><span data-stu-id="62df5-606">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helperclass.</span></span> <span data-ttu-id="62df5-607">L’exemple de code suivant montre comment implémenter cette interface dans un type de données personnalisé et fournir <xref:System.Object.GetHashCode%2A> et <xref:System.Object.Equals%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-607">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="62df5-608">Une fois que vous implémentez cette interface, vous pouvez utiliser des séquences de `ProductA` des objets dans le <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="62df5-608">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#7)]
 [!code-vb[CSLINQEncapsulatedComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-609">
            <paramref name="first" /> ou <paramref name="second" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-609">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-610">Type des éléments des séquences d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-610">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="62df5-611">Un <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments ne se trouvent pas également dans <paramref name="second" /> sera retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-611">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="62df5-612">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments qui figurent également dans la première séquence seront supprimés de la séquence retournée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-612">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-613">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-613">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-614">Produit la différence entre deux séquences à l'aide du <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié pour comparer les valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-614">Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-615">Séquence qui contient la différence entre les éléments de deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-615">A sequence that contains the set difference of the elements of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-616">Si `comparer` est `null`, le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-616">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-617">L’exemple suivant montre comment implémenter un comparateur d’égalité qui peut être utilisé dans le <xref:System.Linq.Enumerable.Except%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-617">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Except%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="62df5-618">Une fois que vous implémentez ce comparateur, vous pouvez utiliser des séquences de `Product` des objets dans le <xref:System.Linq.Enumerable.Except%2A> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="62df5-618">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Except%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#7)]
 [!code-vb[CSLINQCustomComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-619">
            <paramref name="first" /> ou <paramref name="second" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-619">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="First&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-620">Retourne le premier élément d'une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-620">Returns the first element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-621">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-621">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-622">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> duquel retourner le premier élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-622">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-623">Retourne le premier élément d'une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-623">Returns the first element of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-624">Premier élément de la séquence spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-624">The first element in the specified sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-625">Le <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode lève une exception si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-625">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="62df5-626">Pour retourner à la place une valeur par défaut lorsque la séquence source est vide, utilisez le <xref:System.Linq.Enumerable.FirstOrDefault%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-626">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-627">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour retourner le premier élément d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="62df5-627">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the first element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#35)]
 [!code-vb[System.Linq.Enumerable#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-628">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-628">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-629">La séquence source est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-629">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-630">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-630">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-631">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel retourner un élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-631">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-632">Fonction permettant de tester chaque élément par rapport à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-632">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-633">Retourne le premier élément d’une séquence à satisfaire à la condition spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-633">Returns the first element in a sequence that satisfies a specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-634">Premier élément d’une séquence qui réussit le test dans la fonction de prédicat spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-634">The first element in the sequence that passes the test in the specified predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-635">Le <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> méthode lève une exception si aucun élément correspondant est trouvé dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-635">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="62df5-636">Pour retourner à la place une valeur par défaut lorsque aucun élément correspondant est trouvé, utilisez le <xref:System.Linq.Enumerable.FirstOrDefault%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-636">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-637">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> pour retourner le premier élément d’un tableau qui remplit une condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-637">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the first element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#36)]
 [!code-vb[System.Linq.Enumerable#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-638">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-638">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-639">Aucun élément ne satisfait la condition dans <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-639">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="62df5-640">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-640">-or-</span>
          </span>
          <span data-ttu-id="62df5-641">La séquence source est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-641">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FirstOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-642">Retourne le premier élément d'une séquence ou une valeur par défaut si aucun élément n'est trouvé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-642">Returns the first element of a sequence, or a default value if no element is found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-643">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-643">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-644">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> duquel retourner le premier élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-644">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-645">Retourne le premier élément d’une séquence ou une valeur par défaut si la séquence ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-645">Returns the first element of a sequence, or a default value if the sequence contains no elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-646">
            <see langword="default" /> (<paramref name="TSource" />) si <paramref name="source" /> est vide ; sinon, le premier élément de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-646">
              <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-647">La valeur par défaut pour les types référence et nullables est `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-647">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="62df5-648">Le <xref:System.Linq.Enumerable.FirstOrDefault%2A> méthode ne fournit pas un moyen de spécifier une valeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="62df5-648">The <xref:System.Linq.Enumerable.FirstOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="62df5-649">Si vous souhaitez spécifier une valeur par défaut autre que `default(TSource)`, utilisez le <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> méthode comme décrit dans la section exemple.</span><span class="sxs-lookup"><span data-stu-id="62df5-649">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-650">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> sur un tableau vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-650">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#37)]
 [!code-vb[System.Linq.Enumerable#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#37)]  
  
 <span data-ttu-id="62df5-651">Parfois, la valeur de `default(TSource)` n’est pas la valeur par défaut que vous souhaitez utiliser si la collection ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-651">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="62df5-652">Au lieu de vérifier le résultat de la valeur par défaut indésirables, puis de la modifier si nécessaire, vous pouvez utiliser la <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> méthode pour spécifier la valeur par défaut que vous souhaitez utiliser si la collection est vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-652">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="62df5-653">Ensuite, appelez <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour obtenir le premier élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-653">Then, call <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the first element.</span></span> <span data-ttu-id="62df5-654">L’exemple de code suivant utilise ces deux techniques pour obtenir une valeur par défaut de 1 si une collection de mois numériques est vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-654">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</span></span> <span data-ttu-id="62df5-655">Étant donné que la valeur par défaut pour un entier est 0, ce qui ne correspond pas à un mois, la valeur par défaut doit être spécifiée comme 1.</span><span class="sxs-lookup"><span data-stu-id="62df5-655">Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="62df5-656">La première variable de résultat est vérifiée pour la valeur par défaut indésirables après l’exécution est terminée pour la requête.</span><span class="sxs-lookup"><span data-stu-id="62df5-656">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="62df5-657">La deuxième variable de résultat est obtenue à l’aide de <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> pour spécifier une valeur par défaut de 1.</span><span class="sxs-lookup"><span data-stu-id="62df5-657">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#126](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#126)]
 [!code-vb[System.Linq.Enumerable#126](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#126)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-658">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-658">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-659">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-659">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-660">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel retourner un élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-660">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-661">Fonction permettant de tester chaque élément par rapport à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-661">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-662">Retourne le premier élément de la séquence à satisfaire à une condition ou une valeur par défaut si aucun élément correspondant n’est trouvé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-662">Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-663">
            <see langword="default" /> (<paramref name="TSource" />) si <paramref name="source" /> est vide ou si aucun élément ne réussit le test spécifié par <paramref name="predicate" /> ; sinon, le premier élément de <paramref name="source" /> qui réussit le test spécifié par <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-663">
              <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-664">La valeur par défaut pour les types référence et nullables est `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-664">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-665">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> en passant un prédicat.</span><span class="sxs-lookup"><span data-stu-id="62df5-665">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="62df5-666">Dans le deuxième appel à la méthode, aucun élément n’existe dans le tableau qui satisfait la condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-666">In the second call to the method, there is no element in the array that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#38)]
 [!code-vb[System.Linq.Enumerable#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-667">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-667">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-668">Regroupe les éléments d'une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-668">Groups the elements of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-669">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-669">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-670">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-670">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-671">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments doivent être regroupés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-671">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-672">Fonction permettant d'extraire la clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-672">A function to extract the key for each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-673">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-673">Groups the elements of a sequence according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-674">
            <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> en C# ou <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> en Visual Basic où chaque objet <see cref="T:System.Linq.IGrouping`2" /> contient une séquence d’objets et une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-674">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-675">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-675">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-676">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-676">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-677">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-677">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-678">Pour obtenir des exemples de `GroupBy`, consultez les rubriques suivantes.</span><span class="sxs-lookup"><span data-stu-id="62df5-678">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="62df5-679">Le <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> méthode retourne une collection de <xref:System.Linq.IGrouping%602> objets, un pour chaque clé distincte qui a été rencontrée.</span><span class="sxs-lookup"><span data-stu-id="62df5-679">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="62df5-680">Un <xref:System.Linq.IGrouping%602> est un <xref:System.Collections.Generic.IEnumerable%601> qui possède également une clé associée à ses éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-680">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="62df5-681">Le <xref:System.Linq.IGrouping%602> objets sont rapportés dans un ordre basé sur l’ordre des éléments dans `source` qui produit la première clé de chaque <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="62df5-681">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="62df5-682">Éléments d’un regroupement sont rapportés dans l’ordre d’apparition dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-682">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="62df5-683">Le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-683">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="62df5-684">Dans la syntaxe d’expression de requête, un `group by` (Visual c#) ou `Group By Into` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-684">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="62df5-685">Pour plus d’informations et des exemples d’utilisation, consultez [group, clause](~/docs/csharp/language-reference/keywords/group-clause.md) et [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="62df5-685">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-686">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-686">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="62df5-687">group, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-687">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="62df5-688">Group By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-688">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-689">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-689">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-690">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-690">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-691">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments doivent être regroupés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-691">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-692">Fonction permettant d'extraire la clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-692">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-693">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-693">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-694">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et compare les clés à l'aide du comparateur indiqué.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-694">Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-695">
            <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> en C# ou <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> en Visual Basic où chaque objet <see cref="T:System.Linq.IGrouping`2" /> contient une collection d’objets et une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-695">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-696">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-696">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-697">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-697">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-698">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-698">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-699">Pour obtenir des exemples de `GroupBy`, consultez les rubriques suivantes.</span><span class="sxs-lookup"><span data-stu-id="62df5-699">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="62df5-700">Le <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> méthode retourne une collection de <xref:System.Linq.IGrouping%602> objets, un pour chaque clé distincte qui a été rencontrée.</span><span class="sxs-lookup"><span data-stu-id="62df5-700">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="62df5-701">Un <xref:System.Linq.IGrouping%602> est un <xref:System.Collections.Generic.IEnumerable%601> qui possède également une clé associée à ses éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-701">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="62df5-702">Le <xref:System.Linq.IGrouping%602> objets sont rapportés dans un ordre basé sur l’ordre des éléments dans `source` qui produit la première clé de chaque <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="62df5-702">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="62df5-703">Éléments d’un regroupement sont rapportés dans l’ordre d’apparition dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-703">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="62df5-704">Si `comparer` est `null`, le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-704">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="62df5-705">Si deux clés sont considérés comme égaux selon `comparer`, la première est choisie comme clé pour ce regroupement.</span><span class="sxs-lookup"><span data-stu-id="62df5-705">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="62df5-706">Dans la syntaxe d’expression de requête, un `group by` (Visual c#) ou `Group By Into` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-706">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="62df5-707">Pour plus d’informations et des exemples d’utilisation, consultez [group, clause](~/docs/csharp/language-reference/keywords/group-clause.md) et [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="62df5-707">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-708">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-708">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="62df5-709">group, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-709">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="62df5-710">Group By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-710">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-711">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-711">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-712">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-712">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="62df5-713">Type des éléments dans le <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-713">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-714">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments doivent être regroupés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-714">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-715">Fonction permettant d'extraire la clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-715">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="62df5-716">Fonction permettant de mapper chaque élément source à un élément de <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-716">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-717">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et projette les éléments de chaque groupe à l'aide de la fonction indiquée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-717">Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-718">
            <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> en C# ou <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> en Visual Basic où chaque objet <see cref="T:System.Linq.IGrouping`2" /> contient une collection d’objets de type <paramref name="TElement" /> et une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-718">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-719">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-719">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-720">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-720">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-721">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-721">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-722">Le <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> méthode retourne une collection de <xref:System.Linq.IGrouping%602> objets, un pour chaque clé distincte qui a été rencontrée.</span><span class="sxs-lookup"><span data-stu-id="62df5-722">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="62df5-723">Un <xref:System.Linq.IGrouping%602> est un <xref:System.Collections.Generic.IEnumerable%601> qui possède également une clé associée à ses éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-723">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="62df5-724">Le <xref:System.Linq.IGrouping%602> objets sont rapportés dans un ordre basé sur l’ordre des éléments dans `source` qui produit la première clé de chaque <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="62df5-724">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="62df5-725">Éléments d’un regroupement sont rapportés dans l’ordre où les éléments qui a produit les apparaissent dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-725">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="62df5-726">Le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-726">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-727">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> pour regrouper les éléments d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-727">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to group the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#39)]
 [!code-vb[System.Linq.Enumerable#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#39)]  
  
 <span data-ttu-id="62df5-728">Dans la syntaxe d’expression de requête, un `group by` (Visual c#) ou `Group By Into` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-728">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="62df5-729">La traduction de l’expression de requête dans l’exemple suivant est équivalente à la requête dans l’exemple ci-dessus.</span><span class="sxs-lookup"><span data-stu-id="62df5-729">The translation of the query expression in the following example is equivalent to the query in the example above.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#122](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#122)]
 [!code-vb[System.Linq.Enumerable#122](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#122)]  
  
> [!NOTE]
>  <span data-ttu-id="62df5-730">Dans une expression de requête Visual c# ou Visual Basic, les expressions de sélection d’élément et la clé se produisent dans l’ordre inverse à partir de leurs positions d’argument dans un appel à la <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-730">In a Visual C# or Visual Basic query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-731">
            <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-731">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="62df5-732">group, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-732">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="62df5-733">Group By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-733">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-734">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-734">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-735">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-735">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="62df5-736">Type des éléments dans le <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-736">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-737">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments doivent être regroupés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-737">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-738">Fonction permettant d'extraire la clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-738">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="62df5-739">Fonction permettant de mapper chaque élément source à un élément de <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-739">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-740">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-740">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-741">Regroupe les éléments d'une séquence selon une fonction de sélection de clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-741">Groups the elements of a sequence according to a key selector function.</span>
          </span>
          <span data-ttu-id="62df5-742">Les clés sont comparées à l'aide d'un comparateur et les éléments de chaque groupe sont projetés à l'aide d'une fonction spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-742">The keys are compared by using a comparer and each group's elements are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-743">
            <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> en C# ou <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> en Visual Basic où chaque objet <see cref="T:System.Linq.IGrouping`2" /> contient une collection d’objets de type <paramref name="TElement" /> et une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-743">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-744">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-744">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-745">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-745">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-746">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-746">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-747">Pour obtenir des exemples de `GroupBy`, consultez les rubriques suivantes.</span><span class="sxs-lookup"><span data-stu-id="62df5-747">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="62df5-748">Le <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> méthode retourne une collection de <xref:System.Linq.IGrouping%602> objets, un pour chaque clé distincte qui a été rencontrée.</span><span class="sxs-lookup"><span data-stu-id="62df5-748">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="62df5-749">Un <xref:System.Linq.IGrouping%602> est un <xref:System.Collections.Generic.IEnumerable%601> qui possède également une clé associée à ses éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-749">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="62df5-750">Le <xref:System.Linq.IGrouping%602> objets sont rapportés dans un ordre basé sur l’ordre des éléments dans `source` qui produit la première clé de chaque <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="62df5-750">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="62df5-751">Éléments d’un regroupement sont rapportés dans l’ordre où les éléments qui a produit les apparaissent dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-751">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="62df5-752">Si `comparer` est `null`, le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-752">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="62df5-753">Si deux clés sont considérés comme égaux selon `comparer`, la première est choisie comme clé pour ce regroupement.</span><span class="sxs-lookup"><span data-stu-id="62df5-753">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="62df5-754">Dans la syntaxe d’expression de requête, un `group by` (Visual c#) ou `Group By Into` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-754">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="62df5-755">Pour plus d’informations et des exemples d’utilisation, consultez [group, clause](~/docs/csharp/language-reference/keywords/group-clause.md) et [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="62df5-755">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-756">
            <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-756">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="62df5-757">group, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-757">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="62df5-758">Group By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-758">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-759">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-759">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-760">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-760">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-761">Type de la valeur de résultat retournée par <paramref name="resultSelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-761">The type of the result value returned by <paramref name="resultSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-762">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments doivent être regroupés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-762">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-763">Fonction permettant d'extraire la clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-763">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-764">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-764">A function to create a result value from each group.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-765">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-765">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-766">Collection d'éléments de type <paramref name="TResult" /> où chaque élément représente une projection sur un groupe et sa clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-766">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-767">Dans la syntaxe d’expression de requête, un `group by` (Visual c#) ou `Group By Into` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-767">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-768">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> pour regrouper les éléments d’une séquence et une séquence de résultats de type de projet `TResult`.</span><span class="sxs-lookup"><span data-stu-id="62df5-768">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#15)]
 [!code-vb[System.Linq.Enumerable#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="62df5-769">group, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-769">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="62df5-770">Group By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-770">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-771">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-771">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-772">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-772">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-773">Type de la valeur de résultat retournée par <paramref name="resultSelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-773">The type of the result value returned by <paramref name="resultSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-774">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments doivent être regroupés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-774">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-775">Fonction permettant d'extraire la clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-775">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-776">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-776">A function to create a result value from each group.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-777">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> avec lequel comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-777">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-778">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-778">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="62df5-779">Les clés sont comparées à l'aide d'un comparateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-779">The keys are compared by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-780">Collection d'éléments de type <paramref name="TResult" /> où chaque élément représente une projection sur un groupe et sa clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-780">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="62df5-781">group, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-781">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="62df5-782">Group By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-782">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-783">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-783">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-784">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-784">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="62df5-785">Type des éléments de chaque <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-785">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-786">Type de la valeur de résultat retournée par <paramref name="resultSelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-786">The type of the result value returned by <paramref name="resultSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-787">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments doivent être regroupés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-787">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-788">Fonction permettant d'extraire la clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-788">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="62df5-789">Fonction permettant de mapper chaque élément source à un élément de <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-789">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-790">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-790">A function to create a result value from each group.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-791">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-791">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="62df5-792">Les éléments de chaque groupe sont projetés à l'aide d'une fonction spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-792">The elements of each group are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-793">Collection d'éléments de type <paramref name="TResult" /> où chaque élément représente une projection sur un groupe et sa clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-793">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-794">Dans la syntaxe d’expression de requête, un `group by` (Visual c#) ou `Group By Into` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-794">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-795">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> pour regrouper les éléments projetés d’une séquence et projeter ensuite une séquence de résultats de type `TResult`.</span><span class="sxs-lookup"><span data-stu-id="62df5-795">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> to group the projected elements of a sequence and then project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#125](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#125)]
 [!code-vb[System.Linq.Enumerable#125](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#125)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="62df5-796">group, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-796">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="62df5-797">Group By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-797">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-798">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-798">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-799">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-799">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="62df5-800">Type des éléments de chaque <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-800">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-801">Type de la valeur de résultat retournée par <paramref name="resultSelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-801">The type of the result value returned by <paramref name="resultSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-802">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments doivent être regroupés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-802">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-803">Fonction permettant d'extraire la clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-803">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="62df5-804">Fonction permettant de mapper chaque élément source à un élément de <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-804">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-805">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-805">A function to create a result value from each group.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-806">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> avec lequel comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-806">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-807">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-807">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="62df5-808">Les valeurs de clé sont comparées à l'aide du comparateur spécifié et les éléments de chaque groupe sont projetés à l'aide d'une fonction spécifique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-808">Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-809">Collection d'éléments de type <paramref name="TResult" /> où chaque élément représente une projection sur un groupe et sa clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-809">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="62df5-810">group, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-810">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="62df5-811">Group By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-811">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-812">Met en corrélation les éléments de deux séquences en fonction de l'égalité des clés et regroupe les résultats.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-812">Correlates the elements of two sequences based on key equality, and groups the results.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="62df5-813">Type des éléments de la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-813">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="62df5-814">Type des éléments de la deuxième séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-814">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-815">Type des clés retournées par les fonctions de sélecteur de clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-815">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-816">Type des éléments de résultat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-816">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="62df5-817">Première séquence à joindre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-817">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="62df5-818">Séquence à joindre à la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-818">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="62df5-819">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-819">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="62df5-820">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-820">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-821">Fonction permettant de créer un élément de résultat à partir d’un élément de la première séquence, ainsi qu’une collection d’éléments correspondants à partir de la deuxième séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-821">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-822">Met en corrélation les éléments de deux séquences en fonction de l'égalité des clés et regroupe les résultats.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-822">Correlates the elements of two sequences based on equality of keys and groups the results.</span>
          </span>
          <span data-ttu-id="62df5-823">Le comparateur d'égalité par défaut est utilisé pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-823">The default equality comparer is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-824">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient des éléments de type <paramref name="TResult" /> obtenus à la suite d'une jointure groupée de deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-824">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-825">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-825">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-826">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-826">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-827">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-827">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-828">Le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour hacher et comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-828">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="62df5-829"><xref:System.Linq.Enumerable.GroupJoin%2A> produit des résultats hiérarchiques, ce qui signifie que les éléments à partir de `outer` sont associés à des collections d’éléments correspondants de `inner`.</span><span class="sxs-lookup"><span data-stu-id="62df5-829"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="62df5-830">`GroupJoin` vous permet de baser vos résultats sur un ensemble complet de correspondances pour chaque élément de `outer`.</span><span class="sxs-lookup"><span data-stu-id="62df5-830">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-831">Si aucun élément corrélé dans `inner` pour un élément donné de `outer`, la séquence de correspondances pour cet élément sera vide mais continuera d’apparaître dans les résultats.</span><span class="sxs-lookup"><span data-stu-id="62df5-831">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="62df5-832">Le `resultSelector` fonction est appelée qu’une seule fois pour chaque `outer` élément avec une collection de tous les `inner` éléments qui correspondent à la `outer` élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-832">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="62df5-833">Cela diffère la <xref:System.Linq.Enumerable.Join%2A> méthode, dans lequel la fonction de sélecteur de résultat est appelée sur des paires qui contiennent un élément à partir de `outer` et un élément de `inner`.</span><span class="sxs-lookup"><span data-stu-id="62df5-833">This differs from the <xref:System.Linq.Enumerable.Join%2A> method, in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="62df5-834">`GroupJoin` conserve l’ordre des éléments de `outer`et pour chaque élément de `outer`, l’ordre des éléments correspondants de `inner`.</span><span class="sxs-lookup"><span data-stu-id="62df5-834">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="62df5-835"><xref:System.Linq.Enumerable.GroupJoin%2A> en termes de base de données relationnelle traditionnel n’a aucun équivalent direct.</span><span class="sxs-lookup"><span data-stu-id="62df5-835"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="62df5-836">Toutefois, cette méthode implémente un sur-ensemble de jointures internes et de jointures externes gauches.</span><span class="sxs-lookup"><span data-stu-id="62df5-836">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="62df5-837">Ces deux opérations peuvent être écrites en termes d’une jointure groupée.</span><span class="sxs-lookup"><span data-stu-id="62df5-837">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="62df5-838">Consultez [opérations de jointure](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="62df5-838">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 <span data-ttu-id="62df5-839">Dans la syntaxe d’expression de requête, un `join … into` (Visual c#) ou `Group Join` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.GroupJoin%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-839">In query expression syntax, a `join … into` (Visual C#) or `Group Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupJoin%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-840">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> pour effectuer une jointure groupée de deux séquences.</span><span class="sxs-lookup"><span data-stu-id="62df5-840">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> to perform a grouped join on two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#40)]
 [!code-vb[System.Linq.Enumerable#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-841">
            <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-841">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="62df5-842">Opérations de jointure</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-842">Join Operations</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/76e9df84-092c-41a6-9537-c3f1cbd7f0fb">
          <span data-ttu-id="62df5-843">join, clause (référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-843">join clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/37dbf79c-7b5c-421b-bbb7-dadfd2b92a1c">
          <span data-ttu-id="62df5-844">Group Join, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-844">Group Join Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="62df5-845">Type des éléments de la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-845">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="62df5-846">Type des éléments de la deuxième séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-846">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-847">Type des clés retournées par les fonctions de sélecteur de clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-847">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-848">Type des éléments de résultat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-848">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="62df5-849">Première séquence à joindre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-849">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="62df5-850">Séquence à joindre à la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-850">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="62df5-851">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-851">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="62df5-852">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-852">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-853">Fonction permettant de créer un élément de résultat à partir d’un élément de la première séquence, ainsi qu’une collection d’éléments correspondants à partir de la deuxième séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-853">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-854">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour hacher et comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-854">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-855">Met en corrélation les éléments de deux séquences en fonction de l'égalité des clés et regroupe les résultats.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-855">Correlates the elements of two sequences based on key equality and groups the results.</span>
          </span>
          <span data-ttu-id="62df5-856">Un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié est utilisé pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-856">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-857">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient des éléments de type <paramref name="TResult" /> obtenus à la suite d'une jointure groupée de deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-857">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-858">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-858">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-859">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-859">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-860">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-860">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-861">Si `comparer` est `null`, le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour hacher et comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-861">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="62df5-862"><xref:System.Linq.Enumerable.GroupJoin%2A> produit des résultats hiérarchiques, ce qui signifie que les éléments à partir de `outer` sont associés à des collections d’éléments correspondants de `inner`.</span><span class="sxs-lookup"><span data-stu-id="62df5-862"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="62df5-863">`GroupJoin` vous permet de baser vos résultats sur un ensemble complet de correspondances pour chaque élément de `outer`.</span><span class="sxs-lookup"><span data-stu-id="62df5-863">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-864">Si aucun élément corrélé dans `inner` pour un élément donné de `outer`, la séquence de correspondances pour cet élément sera vide mais continuera d’apparaître dans les résultats.</span><span class="sxs-lookup"><span data-stu-id="62df5-864">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="62df5-865">Le `resultSelector` fonction est appelée qu’une seule fois pour chaque `outer` élément avec une collection de tous les `inner` éléments qui correspondent à la `outer` élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-865">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="62df5-866">Cela diffère la <xref:System.Linq.Enumerable.Join%2A> méthode dans laquelle la fonction de sélecteur de résultat est appelée sur des paires qui contiennent un élément à partir de `outer` et un élément de `inner`.</span><span class="sxs-lookup"><span data-stu-id="62df5-866">This differs from the <xref:System.Linq.Enumerable.Join%2A> method in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="62df5-867">`GroupJoin` conserve l’ordre des éléments de `outer`et pour chaque élément de `outer`, l’ordre des éléments correspondants de `inner`.</span><span class="sxs-lookup"><span data-stu-id="62df5-867">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="62df5-868"><xref:System.Linq.Enumerable.GroupJoin%2A> en termes de base de données relationnelle traditionnel n’a aucun équivalent direct.</span><span class="sxs-lookup"><span data-stu-id="62df5-868"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="62df5-869">Toutefois, cette méthode implémente un sur-ensemble de jointures internes et de jointures externes gauches.</span><span class="sxs-lookup"><span data-stu-id="62df5-869">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="62df5-870">Ces deux opérations peuvent être écrites en termes d’une jointure groupée.</span><span class="sxs-lookup"><span data-stu-id="62df5-870">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="62df5-871">Consultez [opérations de jointure](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="62df5-871">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-872">
            <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-872">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="62df5-873">Exécution d’opérations de jointure</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-873">Performing Join Operations</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Intersect&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-874">Produit l'intersection de deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-874">Produces the set intersection of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-875">Type des éléments des séquences d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-875">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="62df5-876">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments distincts qui apparaissent également dans <paramref name="second" /> seront retournés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-876">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="62df5-877">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments distincts qui apparaissent également dans la première séquence seront retournés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-877">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-878">Produit l'intersection de deux séquences à l'aide du comparateur d'égalité par défaut pour comparer les valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-878">Produces the set intersection of two sequences by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-879">Séquence qui contient les éléments constituant l'intersection de les deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-879">A sequence that contains the elements that form the set intersection of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-880">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-880">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-881">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-881">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-882">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-882">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-883">L’intersection de deux ensembles A et B est définie comme le jeu qui contient tous les éléments de A qui apparaissent également dans B, mais pas d’autres éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-883">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="62df5-884">Lorsque l’objet retourné par cette méthode est énuméré, <xref:System.Linq.Enumerable.Intersect%2A> génère les éléments distincts qui se produisent dans les deux séquences dans l’ordre dans lequel ils apparaissent dans `first`.</span><span class="sxs-lookup"><span data-stu-id="62df5-884">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="62df5-885">Le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour comparer les valeurs des types qui implémentent le <xref:System.Collections.Generic.IEqualityComparer%601> interface générique.</span><span class="sxs-lookup"><span data-stu-id="62df5-885">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="62df5-886">Pour comparer un type de données personnalisé, vous devez implémenter cette interface et fournir votre propre <xref:System.Object.GetHashCode%2A> et <xref:System.Object.Equals%2A> méthodes pour le type.</span><span class="sxs-lookup"><span data-stu-id="62df5-886">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-887">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour retourner les éléments qui apparaissent dans les deux séquences d’entiers.</span><span class="sxs-lookup"><span data-stu-id="62df5-887">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the elements that appear in each of two sequences of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#41)]
 [!code-vb[System.Linq.Enumerable#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#41)]  
  
 <span data-ttu-id="62df5-888">Si vous souhaitez comparer des séquences d’objets d’un type de données personnalisées, vous devrez implémenter le <xref:System.Collections.Generic.IEqualityComparer%601> interface générique dans une classe d’assistance.</span><span class="sxs-lookup"><span data-stu-id="62df5-888">If you want to compare sequences of objects of a custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helper class.</span></span> <span data-ttu-id="62df5-889">L’exemple de code suivant montre comment implémenter cette interface dans un type de données personnalisé et fournir <xref:System.Object.GetHashCode%2A> et <xref:System.Object.Equals%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-889">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="62df5-890">Une fois que vous implémentez cette interface, vous pouvez utiliser des séquences de `ProductA` des objets dans le <xref:System.Linq.Enumerable.Intersect%2A> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="62df5-890">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Intersect%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  
[!code-csharp[CSLINQEncapsulatedComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#3)]
[!code-vb[CSLINQEncapsulatedComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-891">
            <paramref name="first" /> ou <paramref name="second" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-891">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-892">Type des éléments des séquences d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-892">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="62df5-893">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments distincts qui apparaissent également dans <paramref name="second" /> seront retournés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-893">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="62df5-894">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments distincts qui apparaissent également dans la première séquence seront retournés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-894">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-895">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-895">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-896">Produit l'intersection entre deux séquences à l'aide du <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié pour comparer les valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-896">Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-897">Séquence qui contient les éléments constituant l'intersection de les deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-897">A sequence that contains the elements that form the set intersection of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-898">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-898">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-899">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-899">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-900">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-900">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-901">L’intersection de deux ensembles A et B est définie comme le jeu qui contient tous les éléments de A qui apparaissent également dans B, mais pas d’autres éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-901">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="62df5-902">Lorsque l’objet retourné par cette méthode est énuméré, <xref:System.Linq.Enumerable.Intersect%2A> génère les éléments distincts qui se produisent dans les deux séquences dans l’ordre dans lequel ils apparaissent dans `first`.</span><span class="sxs-lookup"><span data-stu-id="62df5-902">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="62df5-903">Si `comparer` est `null`, le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-903">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-904">L’exemple suivant montre comment implémenter un comparateur d’égalité qui peut être utilisé dans le <xref:System.Linq.Enumerable.Intersect%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-904">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Intersect%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="62df5-905">Une fois que vous implémentez ce comparateur, vous pouvez utiliser des séquences de `Product` des objets dans le <xref:System.Linq.Enumerable.Intersect%2A> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="62df5-905">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Intersect%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#3)]
[!code-vb[CSLINQCustomComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-906">
            <paramref name="first" /> ou <paramref name="second" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-906">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-907">Met en corrélation les éléments de deux séquences en fonction des clés qui correspondent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-907">Correlates the elements of two sequences based on matching keys.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="62df5-908">Type des éléments de la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-908">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="62df5-909">Type des éléments de la deuxième séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-909">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-910">Type des clés retournées par les fonctions de sélecteur de clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-910">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-911">Type des éléments de résultat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-911">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="62df5-912">Première séquence à joindre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-912">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="62df5-913">Séquence à joindre à la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-913">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="62df5-914">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-914">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="62df5-915">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-915">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-916">Fonction permettant de créer un élément de résultat à partir de deux éléments correspondants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-916">A function to create a result element from two matching elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-917">Met en corrélation les éléments de deux séquences en fonction des clés qui correspondent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-917">Correlates the elements of two sequences based on matching keys.</span>
          </span>
          <span data-ttu-id="62df5-918">Le comparateur d'égalité par défaut est utilisé pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-918">The default equality comparer is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-919">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient des éléments de type <paramref name="TResult" /> obtenus à la suite d'une jointure interne de deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-919">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-920">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-920">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-921">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-921">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-922">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-922">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-923">Le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour hacher et comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-923">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="62df5-924">Une jointure fait référence à l’opération de mise en corrélation des éléments de deux sources d’informations selon une clé commune.</span><span class="sxs-lookup"><span data-stu-id="62df5-924">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="62df5-925"><xref:System.Linq.Enumerable.Join%2A> apporte les deux sources d’informations et les clés auxquelles elles sont associées dans un appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="62df5-925"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="62df5-926">Cela diffère de l’utilisation de `SelectMany`, ce qui nécessite plus d’un appel de méthode pour effectuer la même opération.</span><span class="sxs-lookup"><span data-stu-id="62df5-926">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="62df5-927"><xref:System.Linq.Enumerable.Join%2A> conserve l’ordre des éléments de `outer`et pour chacun de ces éléments, l’ordre des éléments correspondants de `inner`.</span><span class="sxs-lookup"><span data-stu-id="62df5-927"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="62df5-928">Dans la syntaxe d’expression de requête, un `join` (Visual c#) ou `Join` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.Join%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-928">In query expression syntax, a `join` (Visual C#) or `Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Join%2A>.</span></span>  
  
 <span data-ttu-id="62df5-929">En termes de base de données relationnelle, le <xref:System.Linq.Enumerable.Join%2A> méthode implémente une équijointure interne.</span><span class="sxs-lookup"><span data-stu-id="62df5-929">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="62df5-930">« Internes » signifie que seuls les éléments qui ont une correspondance dans l’autre séquence sont inclus dans les résultats.</span><span class="sxs-lookup"><span data-stu-id="62df5-930">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="62df5-931">Une « équijointure » est une jointure dans laquelle les clés sont comparées pour l’égalité.</span><span class="sxs-lookup"><span data-stu-id="62df5-931">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="62df5-932">Une opération de jointure externe gauche n’a aucun opérateur de requête standard dédié, mais peut être effectuée à l’aide de la <xref:System.Linq.Enumerable.GroupJoin%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-932">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="62df5-933">Consultez [opérations de jointure](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="62df5-933">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-934">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> pour effectuer une jointure interne de deux séquences selon une clé commune.</span><span class="sxs-lookup"><span data-stu-id="62df5-934">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> to perform an inner join of two sequences based on a common key.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#42)]
 [!code-vb[System.Linq.Enumerable#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-935">
            <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-935">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="62df5-936">Jointure</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-936">Joining</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/76e9df84-092c-41a6-9537-c3f1cbd7f0fb">
          <span data-ttu-id="62df5-937">join, clause (référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-937">join clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/6dd37936-b27c-4e00-98ad-154b23f4de64">
          <span data-ttu-id="62df5-938">Join, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-938">Join Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="62df5-939">Type des éléments de la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-939">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="62df5-940">Type des éléments de la deuxième séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-940">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-941">Type des clés retournées par les fonctions de sélecteur de clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-941">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-942">Type des éléments de résultat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-942">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="62df5-943">Première séquence à joindre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-943">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="62df5-944">Séquence à joindre à la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-944">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="62df5-945">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-945">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="62df5-946">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-946">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-947">Fonction permettant de créer un élément de résultat à partir de deux éléments correspondants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-947">A function to create a result element from two matching elements.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-948">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour hacher et comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-948">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-949">Met en corrélation les éléments de deux séquences en fonction des clés qui correspondent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-949">Correlates the elements of two sequences based on matching keys.</span>
          </span>
          <span data-ttu-id="62df5-950">Un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié est utilisé pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-950">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-951">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient des éléments de type <paramref name="TResult" /> obtenus à la suite d'une jointure interne de deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-951">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-952">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-952">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-953">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-953">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-954">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-954">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-955">Si `comparer` est `null`, le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour hacher et comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-955">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="62df5-956">Une jointure fait référence à l’opération de mise en corrélation des éléments de deux sources d’informations selon une clé commune.</span><span class="sxs-lookup"><span data-stu-id="62df5-956">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="62df5-957"><xref:System.Linq.Enumerable.Join%2A> apporte les deux sources d’informations et les clés auxquelles elles sont associées dans un appel de méthode.</span><span class="sxs-lookup"><span data-stu-id="62df5-957"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="62df5-958">Cela diffère de l’utilisation de `SelectMany`, ce qui nécessite plus d’un appel de méthode pour effectuer la même opération.</span><span class="sxs-lookup"><span data-stu-id="62df5-958">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="62df5-959"><xref:System.Linq.Enumerable.Join%2A> conserve l’ordre des éléments de `outer`et pour chacun de ces éléments, l’ordre des éléments correspondants de `inner`.</span><span class="sxs-lookup"><span data-stu-id="62df5-959"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="62df5-960">En termes de base de données relationnelle, le <xref:System.Linq.Enumerable.Join%2A> méthode implémente une équijointure interne.</span><span class="sxs-lookup"><span data-stu-id="62df5-960">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="62df5-961">« Internes » signifie que seuls les éléments qui ont une correspondance dans l’autre séquence sont inclus dans les résultats.</span><span class="sxs-lookup"><span data-stu-id="62df5-961">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="62df5-962">Une « équijointure » est une jointure dans laquelle les clés sont comparées pour l’égalité.</span><span class="sxs-lookup"><span data-stu-id="62df5-962">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="62df5-963">Une opération de jointure externe gauche n’a aucun opérateur de requête standard dédié, mais peut être effectuée à l’aide de la <xref:System.Linq.Enumerable.GroupJoin%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-963">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="62df5-964">Consultez [opérations de jointure](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="62df5-964">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-965">
            <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-965">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="62df5-966">Jointure</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-966">Joining</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Last&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-967">Retourne le dernier élément d'une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-967">Returns the last element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-968">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-968">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-969">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> duquel retourner le dernier élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-969">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-970">Retourne le dernier élément d'une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-970">Returns the last element of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-971">Valeur à la dernière position de la séquence source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-971">The value at the last position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-972">Le <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode lève une exception si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-972">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="62df5-973">Pour retourner à la place une valeur par défaut lorsque la séquence source est vide, utilisez le <xref:System.Linq.Enumerable.LastOrDefault%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-973">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-974">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour retourner le dernier élément d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="62df5-974">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the last element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#43)]
 [!code-vb[System.Linq.Enumerable#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-975">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-975">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-976">La séquence source est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-976">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-977">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-977">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-978">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel retourner un élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-978">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-979">Fonction permettant de tester chaque élément par rapport à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-979">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-980">Retourne le dernier élément d’une séquence à satisfaire à la condition spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-980">Returns the last element of a sequence that satisfies a specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-981">Dernier élément de la séquence qui réussit le test dans la fonction de prédicat spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-981">The last element in the sequence that passes the test in the specified predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-982">Le <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> méthode lève une exception si aucun élément correspondant est trouvé dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-982">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="62df5-983">Pour retourner à la place une valeur par défaut lorsque aucun élément correspondant est trouvé, utilisez le <xref:System.Linq.Enumerable.LastOrDefault%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-983">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-984">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> pour retourner le dernier élément d’un tableau qui remplit une condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-984">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the last element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#44)]
 [!code-vb[System.Linq.Enumerable#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-985">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-985">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-986">Aucun élément ne satisfait la condition dans <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-986">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="62df5-987">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-987">-or-</span>
          </span>
          <span data-ttu-id="62df5-988">La séquence source est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-988">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-989">Retourne le dernier élément d'une séquence ou une valeur par défaut si aucun élément n'est trouvé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-989">Returns the last element of a sequence, or a default value if no element is found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-990">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-990">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-991">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> duquel retourner le dernier élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-991">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-992">Retourne le dernier élément d’une séquence ou une valeur par défaut si la séquence ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-992">Returns the last element of a sequence, or a default value if the sequence contains no elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-993">
            <see langword="default" /> (<paramref name="TSource" />) si la séquence source est vide ; sinon, le dernier élément de <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-993">
              <see langword="default" />(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-994">La valeur par défaut pour les types référence et nullables est `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-994">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="62df5-995">Le <xref:System.Linq.Enumerable.LastOrDefault%2A> méthode ne fournit pas un moyen de spécifier une valeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="62df5-995">The <xref:System.Linq.Enumerable.LastOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="62df5-996">Si vous souhaitez spécifier une valeur par défaut autre que `default(TSource)`, utilisez le <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> méthode comme décrit dans la section exemple.</span><span class="sxs-lookup"><span data-stu-id="62df5-996">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-997">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> sur un tableau vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-997">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#45)]
 [!code-vb[System.Linq.Enumerable#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#45)]  
  
 <span data-ttu-id="62df5-998">Parfois, la valeur de `default(TSource)` n’est pas la valeur par défaut que vous souhaitez utiliser si la collection ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-998">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="62df5-999">Au lieu de vérifier le résultat de la valeur par défaut indésirables, puis de la modifier si nécessaire, vous pouvez utiliser la <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> méthode pour spécifier la valeur par défaut que vous souhaitez utiliser si la collection est vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-999">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="62df5-1000">Ensuite, appelez <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour obtenir le dernier élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1000">Then, call <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the last element.</span></span> <span data-ttu-id="62df5-1001">L’exemple de code suivant utilise ces deux techniques pour obtenir une valeur par défaut de 1 si une collection de numériques jours du mois est vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-1001">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</span></span> <span data-ttu-id="62df5-1002">Étant donné que la valeur par défaut pour un entier est 0, ce qui ne correspond pas à n’importe quel jour du mois, la valeur par défaut doit être spécifiée comme 1.</span><span class="sxs-lookup"><span data-stu-id="62df5-1002">Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="62df5-1003">La première variable de résultat est vérifiée pour la valeur par défaut indésirables après l’exécution est terminée pour la requête.</span><span class="sxs-lookup"><span data-stu-id="62df5-1003">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="62df5-1004">La deuxième variable de résultat est obtenue à l’aide de <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> pour spécifier une valeur par défaut de 1.</span><span class="sxs-lookup"><span data-stu-id="62df5-1004">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#127](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#127)]
 [!code-vb[System.Linq.Enumerable#127](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#127)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1005">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1005">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1006">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1006">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1007">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel retourner un élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1007">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-1008">Fonction permettant de tester chaque élément par rapport à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1008">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1009">Retourne le dernier élément d’une séquence à satisfaire à une condition ou une valeur par défaut si aucun élément correspondant n’est trouvé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1009">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1010">
            <see langword="default" /> (<paramref name="TSource" />) si la séquence est vide ou si aucun élément ne réussit le test dans la fonction de prédicat ; sinon, le dernier élément qui réussit le test dans cette fonction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1010">
              <see langword="default" />(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1011">La valeur par défaut pour les types référence et nullables est `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1011">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1012">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> en passant un prédicat.</span><span class="sxs-lookup"><span data-stu-id="62df5-1012">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="62df5-1013">Dans le deuxième appel à la méthode, aucun élément n’existe dans la séquence qui satisfait la condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-1013">In the second call to the method, there is no element in the sequence that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#46)]
 [!code-vb[System.Linq.Enumerable#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1014">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1014">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LongCount&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1015">Retourne un <see cref="T:System.Int64" /> qui représente le nombre d'éléments dans une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1015">Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1016">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1016">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1017">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments à compter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1017">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1018">Retourne un <see cref="T:System.Int64" /> qui représente le nombre total d'éléments dans une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1018">Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1019">Nombre total d'éléments dans la séquence source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1019">The number of elements in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1020">Utilisez cette méthode plutôt que <xref:System.Linq.Enumerable.Count%2A> si vous pensez que le résultat peut être supérieur à <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1020">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="62df5-1021">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into LongCount()` clause se traduit par un appel à <xref:System.Linq.Enumerable.LongCount%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1021">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1022">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour compter les éléments dans un tableau.</span><span class="sxs-lookup"><span data-stu-id="62df5-1022">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#47)]
 [!code-vb[System.Linq.Enumerable#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1023">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1023">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-1024">Le nombre d'éléments est supérieur à <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1024">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1025">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1025">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1026">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1026">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1027">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments à compter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1027">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-1028">Fonction permettant de tester chaque élément par rapport à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1028">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1029">Retourne un <see cref="T:System.Int64" /> qui représente le nombre total d'éléments dans une séquence à satisfaire à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1029">Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1030">Nombre qui représente les éléments de la séquence spécifiée qui satisfont à la condition dans la fonction de prédicat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1030">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1031">Utilisez cette méthode plutôt que <xref:System.Linq.Enumerable.Count%2A> si vous pensez que le résultat peut être supérieur à <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1031">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="62df5-1032">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into LongCount()` clause se traduit par un appel à <xref:System.Linq.Enumerable.LongCount%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1032">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1033">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> pour compter les éléments dans un tableau qui remplissent une condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-1033">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#48)]
 [!code-vb[System.Linq.Enumerable#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1034">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1034">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-1035">Le nombre d'éléments correspondants est supérieur à <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1035">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1036">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1036">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1037">Retourne la valeur maximale dans une séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1037">Returns the maximum value in a sequence of values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1038">Séquence de valeurs <see cref="T:System.Decimal" /> pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1038">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1039">Retourne la valeur maximale dans une séquence de valeurs <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1039">Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1040">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1040">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1041">Le <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> méthode utilise le <xref:System.Decimal> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1041">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1042">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1042">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1043">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> pour déterminer la valeur maximale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1043">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1044">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1044">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1045">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1045">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1046">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1046">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1047">Séquence de valeurs <see cref="T:System.Double" /> pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1047">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1048">Retourne la valeur maximale dans une séquence de valeurs <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1048">Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1049">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1049">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1050">Le <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> méthode utilise le <xref:System.Double> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1050">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1051">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1051">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1052">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> pour déterminer la valeur maximale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1052">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1053">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1053">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1054">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1054">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1055">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1055">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1056">Séquence de valeurs <see cref="T:System.Int32" /> pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1056">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1057">Retourne la valeur maximale dans une séquence de valeurs <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1057">Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1058">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1058">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1059">Le <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> méthode utilise le <xref:System.Int32> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1059">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1060">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1060">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1061">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> pour déterminer la valeur maximale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1061">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1062">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1062">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1063">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1063">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1064">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1064">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1065">Séquence de valeurs <see cref="T:System.Int64" /> pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1065">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1066">Retourne la valeur maximale dans une séquence de valeurs <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1066">Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1067">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1067">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1068">Le <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> méthode utilise le <xref:System.Int64> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1068">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1069">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1069">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1070">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> pour déterminer la valeur maximale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1070">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1071">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1071">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1072">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1072">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1073">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1073">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1074">Séquence de valeurs <see cref="T:System.Decimal" /> nullables pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1074">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1075">Retourne la valeur maximale dans une séquence de valeurs <see cref="T:System.Decimal" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1075">Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1076">Valeur de type <c>Nullable&lt;Decimal&gt;</c> en C# ou <c>Nullable(Of Decimal)</c> en Visual Basic qui correspond à la valeur maximale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1076">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1077">Le <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> méthode utilise le <xref:System.Decimal> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1077">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1078">Si la séquence source est vide ou contient uniquement des valeurs `null`, cette fonction retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1078">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1079">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1079">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1080">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> pour déterminer la valeur maximale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1080">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1081">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1081">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1082">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1082">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1083">Séquence de valeurs <see cref="T:System.Double" /> nullables pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1083">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1084">Retourne la valeur maximale dans une séquence de valeurs <see cref="T:System.Double" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1084">Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1085">Valeur de type <c>Nullable&lt;Double&gt;</c> en C# ou <c>Nullable(Of Double)</c> en Visual Basic qui correspond à la valeur maximale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1085">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1086">Le <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> méthode utilise le <xref:System.Double> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1086">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1087">Si la séquence source est vide ou contient uniquement des valeurs `null`, cette fonction retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1087">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1088">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1088">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1089">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> pour déterminer la valeur maximale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1089">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1090">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1090">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1091">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1091">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1092">Séquence de valeurs <see cref="T:System.Int32" /> nullables pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1092">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1093">Retourne la valeur maximale dans une séquence de valeurs <see cref="T:System.Int32" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1093">Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1094">Valeur de type <c>Nullable&lt;Int32&gt;</c> en C# ou <c>Nullable(Of Int32)</c> en Visual Basic qui correspond à la valeur maximale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1094">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1095">Le <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> méthode utilise le <xref:System.Int32> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1095">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1096">Si la séquence source est vide ou contient uniquement des valeurs `null`, cette fonction retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1096">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1097">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1097">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1098">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> pour déterminer la valeur maximale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1098">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1099">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1099">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1100">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1100">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1101">Séquence de valeurs <see cref="T:System.Int64" /> nullables pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1101">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1102">Retourne la valeur maximale dans une séquence de valeurs <see cref="T:System.Int64" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1102">Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1103">Valeur de type <c>Nullable&lt;Int64&gt;</c> en C# ou <c>Nullable(Of Int64)</c> en Visual Basic qui correspond à la valeur maximale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1103">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1104">Le <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> méthode utilise le <xref:System.Int64> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1104">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1105">Si la séquence source est vide ou contient uniquement des valeurs `null`, cette fonction retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1105">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1106">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1106">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1107">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> pour déterminer la valeur maximale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1107">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1108">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1108">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1109">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1109">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1110">Séquence de valeurs <see cref="T:System.Single" /> nullables pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1110">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1111">Retourne la valeur maximale dans une séquence de valeurs <see cref="T:System.Single" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1111">Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1112">Valeur de type <c>Nullable&lt;Single&gt;</c> en C# ou <c>Nullable(Of Single)</c> en Visual Basic qui correspond à la valeur maximale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1112">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1113">Le <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> méthode utilise le <xref:System.Single> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1113">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1114">Si la séquence source est vide ou contient uniquement des valeurs `null`, cette fonction retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1114">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1115">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1115">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1116">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> pour déterminer la valeur maximale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1116">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1117">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1117">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1118">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1118">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1119">Séquence de valeurs <see cref="T:System.Single" /> pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1119">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1120">Retourne la valeur maximale dans une séquence de valeurs <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1120">Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1121">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1121">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1122">Le <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> méthode utilise le <xref:System.Single> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1122">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1123">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1123">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1124">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> pour déterminer la valeur maximale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1124">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1125">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1125">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1126">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1126">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1127">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1127">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1128">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1128">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1129">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1129">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1130">Retourne la valeur maximale dans une séquence générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1130">Returns the maximum value in a generic sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1131">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1131">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1132">Si type `TSource` implémente <xref:System.IComparable%601>, le <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode utilise cette implémentation pour comparer les valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1132">If type `TSource` implements <xref:System.IComparable%601>, the <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method uses that implementation to compare values.</span></span> <span data-ttu-id="62df5-1133">Sinon, si type `TSource` implémente <xref:System.IComparable>, cette implémentation est utilisée pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1133">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1134">Si `TSource` est un type référence et la séquence source est vide ou contient uniquement des valeurs `null`, cette méthode retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1134">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this method returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1135">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1135">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1136">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour déterminer la valeur maximale dans une séquence de <xref:System.IComparable%601> objets.</span><span class="sxs-lookup"><span data-stu-id="62df5-1136">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the maximum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#57](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#57)]
 [!code-vb[System.Linq.Enumerable#57](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1137">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1137">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1138">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1138">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1139">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1139">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1140">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1140">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1141">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1141">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1142">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Decimal" /> maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1142">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1143">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1143">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1144">Le <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> méthode utilise le <xref:System.Decimal> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1144">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1145">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1145">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="62df5-1146">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1146">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1147">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1147">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1148">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1148">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1149">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1149">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1150">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1150">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1151">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1151">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1152">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1152">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1153">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1153">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1154">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Double" /> maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1154">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1155">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1155">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1156">Le <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> méthode utilise le <xref:System.Double> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1156">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1157">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1157">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="62df5-1158">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1158">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1159">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1159">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1160">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1160">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1161">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1161">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1162">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1162">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1163">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1163">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1164">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1164">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1165">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1165">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1166">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Int32" /> maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1166">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1167">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1167">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1168">Le <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> méthode utilise le <xref:System.Int32> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1168">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1169">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1169">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="62df5-1170">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1170">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1171">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1171">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1172">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1172">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1173">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1173">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1174">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1174">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1175">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1175">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1176">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1176">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1177">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1177">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1178">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Int64" /> maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1178">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1179">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1179">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1180">Le <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> méthode utilise le <xref:System.Int64> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1180">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1181">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1181">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="62df5-1182">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1182">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1183">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1183">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1184">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1184">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1185">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1185">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1186">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1186">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1187">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1187">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1188">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1188">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1189">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1189">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1190">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Decimal" /> nullable maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1190">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1191">Valeur de type <c>Nullable&lt;Decimal&gt;</c> en C# ou <c>Nullable(Of Decimal)</c> en Visual Basic qui correspond à la valeur maximale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1191">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1192">Le <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> méthode utilise le <xref:System.Decimal> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1192">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1193">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Decimal>` en c# ou `Nullable(Of Decimal)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1193">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1194">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1194">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1195">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1195">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1196">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1196">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1197">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1197">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1198">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1198">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1199">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1199">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1200">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1200">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1201">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Double" /> nullable maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1201">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1202">Valeur de type <c>Nullable&lt;Double&gt;</c> en C# ou <c>Nullable(Of Double)</c> en Visual Basic qui correspond à la valeur maximale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1202">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1203">Le <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> méthode utilise le <xref:System.Double> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1203">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1204">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Double>` en c# ou `Nullable(Of Double)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1204">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1205">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1205">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1206">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1206">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1207">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1207">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1208">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1208">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1209">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1209">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1210">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1210">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1211">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1211">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1212">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Int32" /> nullable maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1212">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1213">Valeur de type <c>Nullable&lt;Int32&gt;</c> en C# ou <c>Nullable(Of Int32)</c> en Visual Basic qui correspond à la valeur maximale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1213">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1214">Le <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> méthode utilise le <xref:System.Int32> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1214">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1215">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Int32>` en c# ou `Nullable(Of Int32)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1215">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1216">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1216">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1217">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1217">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1218">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1218">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1219">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1219">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1220">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1220">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1221">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1221">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1222">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1222">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1223">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Int64" /> nullable maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1223">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1224">Valeur de type <c>Nullable&lt;Int64&gt;</c> en C# ou <c>Nullable(Of Int64)</c> en Visual Basic qui correspond à la valeur maximale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1224">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1225">Le <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> méthode utilise le <xref:System.Int64> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1225">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1226">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Int64>` en c# ou `Nullable(Of Int64)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1226">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1227">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1227">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1228">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1228">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1229">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1229">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1230">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1230">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1231">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1231">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1232">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1232">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1233">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1233">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1234">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Single" /> nullable maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1234">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1235">Valeur de type <c>Nullable&lt;Single&gt;</c> en C# ou <c>Nullable(Of Single)</c> en Visual Basic qui correspond à la valeur maximale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1235">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1236">Le <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> méthode utilise le <xref:System.Single> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1236">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1237">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Single>` en c# ou `Nullable(Of Single)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1237">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1238">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1238">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1239">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1239">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1240">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1240">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1241">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1241">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1242">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1242">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1243">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1243">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1244">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1244">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1245">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Single" /> maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1245">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1246">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1246">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1247">Le <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> méthode utilise le <xref:System.Single> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1247">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1248">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1248">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="62df5-1249">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1249">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1250">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1250">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1251">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1251">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1252">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1252">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1253">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1253">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Max&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1254">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1254">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-1255">Type de la valeur retournée par <paramref name="selector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1255">The type of the value returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1256">Séquence de valeurs pour laquelle déterminer la valeur maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1256">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1257">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1257">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1258">Appelle une fonction de transformation sur chaque élément d'une séquence générique et retourne la valeur résultante maximale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1258">Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1259">Valeur maximale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1259">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1260">Si type `TResult` implémente <xref:System.IComparable%601>, cette méthode utilise cette implémentation pour comparer les valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1260">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="62df5-1261">Sinon, si type `TResult` implémente <xref:System.IComparable>, cette implémentation est utilisée pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1261">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1262">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Max()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1262">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1263">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1263">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1264">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1264">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1265">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1265">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1266">Retourne la valeur minimale dans une séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1266">Returns the minimum value in a sequence of values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1267">Séquence de valeurs <see cref="T:System.Decimal" /> pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1267">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1268">Retourne la valeur minimale dans une séquence de valeurs <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1268">Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1269">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1269">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1270">Le <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> méthode utilise le <xref:System.Decimal> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1270">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1271">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1271">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1272">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> pour déterminer la valeur minimale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1272">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1273">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1273">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1274">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1274">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1275">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1275">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1276">Séquence de valeurs <see cref="T:System.Double" /> pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1276">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1277">Retourne la valeur minimale dans une séquence de valeurs <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1277">Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1278">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1278">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1279">Le <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> méthode utilise le <xref:System.Double> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1279">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1280">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1280">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1281">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> pour déterminer la valeur minimale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1281">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1282">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1282">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1283">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1283">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1284">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1284">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1285">Séquence de valeurs <see cref="T:System.Int32" /> pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1285">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1286">Retourne la valeur minimale dans une séquence de valeurs <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1286">Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1287">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1287">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1288">Le <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> méthode utilise le <xref:System.Int32> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1288">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1289">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1289">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1290">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> pour déterminer la valeur minimale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1290">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1291">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1291">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1292">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1292">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1293">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1293">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1294">Séquence de valeurs <see cref="T:System.Int64" /> pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1294">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1295">Retourne la valeur minimale dans une séquence de valeurs <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1295">Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1296">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1296">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1297">Le <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> méthode utilise le <xref:System.Int64> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1297">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1298">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1298">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1299">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> pour déterminer la valeur minimale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1299">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1300">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1300">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1301">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1301">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1302">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1302">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1303">Séquence de valeurs <see cref="T:System.Decimal" /> nullables et pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1303">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1304">Retourne la valeur minimale dans une séquence de valeurs <see cref="T:System.Decimal" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1304">Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1305">Valeur de type <c>Nullable&lt;Decimal&gt;</c> en C# ou <c>Nullable(Of Decimal)</c> en Visual Basic qui correspond à la valeur minimale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1305">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1306">Le <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> méthode utilise le <xref:System.Decimal> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1306">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1307">Si la séquence source est vide ou contient uniquement des valeurs `null`, cette fonction retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1307">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1308">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1308">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1309">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> pour déterminer la valeur minimale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1309">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1310">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1310">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1311">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1311">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1312">Séquence de valeurs <see cref="T:System.Double" /> nullables et pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1312">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1313">Retourne la valeur minimale dans une séquence de valeurs <see cref="T:System.Double" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1313">Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1314">Valeur de type <c>Nullable&lt;Double&gt;</c> en C# ou <c>Nullable(Of Double)</c> en Visual Basic qui correspond à la valeur minimale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1314">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1315">Le <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> méthode utilise le <xref:System.Double> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1315">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1316">Si la séquence source est vide ou contient uniquement des valeurs `null`, cette fonction retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1316">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1317">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1317">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1318">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> pour déterminer la valeur minimale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1318">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1319">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1319">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1320">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1320">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1321">Séquence de valeurs <see cref="T:System.Int32" /> nullables et pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1321">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1322">Retourne la valeur minimale dans une séquence de valeurs <see cref="T:System.Int32" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1322">Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1323">Valeur de type <c>Nullable&lt;Int32&gt;</c> en C# ou <c>Nullable(Of Int32)</c> en Visual Basic qui correspond à la valeur minimale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1323">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1324">Le <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> méthode utilise le <xref:System.Int32> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1324">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1325">Si la séquence source est vide ou contient uniquement des valeurs `null`, cette fonction retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1325">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1326">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1326">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1327">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> pour déterminer la valeur minimale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1327">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1328">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1328">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1329">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1329">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1330">Séquence de valeurs <see cref="T:System.Int64" /> nullables et pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1330">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1331">Retourne la valeur minimale dans une séquence de valeurs <see cref="T:System.Int64" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1331">Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1332">Valeur de type <c>Nullable&lt;Int64&gt;</c> en C# ou <c>Nullable(Of Int64)</c> en Visual Basic qui correspond à la valeur minimale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1332">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1333">Le <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> méthode utilise le <xref:System.Int64> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1333">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1334">Si la séquence source est vide ou contient uniquement des valeurs `null`, cette fonction retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1334">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1335">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1335">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1336">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> pour déterminer la valeur minimale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1336">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1337">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1337">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1338">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1338">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1339">Séquence de valeurs <see cref="T:System.Single" /> nullables et pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1339">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1340">Retourne la valeur minimale dans une séquence de valeurs <see cref="T:System.Single" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1340">Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1341">Valeur de type <c>Nullable&lt;Single&gt;</c> en C# ou <c>Nullable(Of Single)</c> en Visual Basic qui correspond à la valeur minimale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1341">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1342">Le <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> méthode utilise le <xref:System.Single> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1342">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1343">Si la séquence source est vide ou contient uniquement des valeurs `null`, cette fonction retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1343">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1344">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1344">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1345">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> pour déterminer la valeur minimale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1345">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1346">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1346">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1347">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1347">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1348">Séquence de valeurs <see cref="T:System.Single" /> pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1348">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1349">Retourne la valeur minimale dans une séquence de valeurs <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1349">Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1350">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1350">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1351">Le <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> méthode utilise le <xref:System.Single> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1351">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1352">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1352">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1353">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> pour déterminer la valeur minimale dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1353">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1354">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1354">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1355">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1355">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1356">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1356">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1357">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1357">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1358">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1358">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1359">Retourne la valeur minimale dans une séquence générique.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1359">Returns the minimum value in a generic sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1360">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1360">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1361">Si type `TSource` implémente <xref:System.IComparable%601>, cette méthode utilise cette implémentation pour comparer les valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1361">If type `TSource` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="62df5-1362">Sinon, si type `TSource` implémente <xref:System.IComparable>, cette implémentation est utilisée pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1362">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1363">Si `TSource` est un type référence et la séquence source est vide ou contient uniquement des valeurs `null`, cette fonction retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1363">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="62df5-1364">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1364">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1365">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour déterminer la valeur minimale dans une séquence de <xref:System.IComparable%601> objets.</span><span class="sxs-lookup"><span data-stu-id="62df5-1365">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the minimum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#67](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#67)]
 [!code-vb[System.Linq.Enumerable#67](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1366">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1366">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1367">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1367">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1368">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1368">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1369">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1369">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1370">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1370">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1371">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Decimal" /> minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1371">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1372">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1372">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1373">Le <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> méthode utilise le <xref:System.Decimal> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1373">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1374">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1374">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="62df5-1375">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1375">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1376">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1376">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1377">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1377">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1378">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1378">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1379">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1379">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1380">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1380">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1381">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1381">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1382">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1382">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1383">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Double" /> minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1383">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1384">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1384">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1385">Le <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> méthode utilise le <xref:System.Double> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1385">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1386">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1386">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="62df5-1387">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1387">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1388">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1388">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1389">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1389">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1390">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1390">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1391">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1391">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1392">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1392">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1393">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1393">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1394">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1394">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1395">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Int32" /> minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1395">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1396">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1396">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1397">Le <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> méthode utilise le <xref:System.Int32> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1397">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1398">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1398">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="62df5-1399">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1399">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1400">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1400">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1401">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1401">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1402">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1402">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1403">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1403">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1404">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1404">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1405">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1405">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1406">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1406">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1407">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Int64" /> minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1407">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1408">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1408">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1409">Le <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> méthode utilise le <xref:System.Int64> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1409">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1410">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1410">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="62df5-1411">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1411">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1412">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1412">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1413">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1413">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1414">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1414">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1415">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1415">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1416">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1416">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1417">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1417">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1418">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1418">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1419">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Decimal" /> nullable minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1419">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1420">Valeur de type <c>Nullable&lt;Decimal&gt;</c> en C# ou <c>Nullable(Of Decimal)</c> en Visual Basic qui correspond à la valeur minimale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1420">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1421">Le <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> méthode utilise le <xref:System.Decimal> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1421">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1422">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Decimal>` en c# ou `Nullable(Of Decimal)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1422">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1423">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1423">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1424">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1424">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1425">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1425">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1426">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1426">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1427">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1427">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1428">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1428">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1429">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1429">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1430">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Double" /> nullable minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1430">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1431">Valeur de type <c>Nullable&lt;Double&gt;</c> en C# ou <c>Nullable(Of Double)</c> en Visual Basic qui correspond à la valeur minimale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1431">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1432">Le <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> méthode utilise le <xref:System.Double> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1432">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1433">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Double>` en c# ou `Nullable(Of Double)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1433">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1434">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1434">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1435">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1435">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1436">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1436">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1437">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1437">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1438">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1438">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1439">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1439">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1440">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1440">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1441">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Int32" /> nullable minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1441">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1442">Valeur de type <c>Nullable&lt;Int32&gt;</c> en C# ou <c>Nullable(Of Int32)</c> en Visual Basic qui correspond à la valeur minimale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1442">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1443">Le <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> méthode utilise le <xref:System.Int32> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1443">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1444">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de la source dans un type numérique, en particulier `Nullable<Int32>` en c# ou `Nullable(Of Int32)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1444">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of source into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1445">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1445">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1446">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1446">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1447">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1447">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1448">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1448">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1449">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1449">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1450">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1450">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1451">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1451">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1452">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Int64" /> nullable minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1452">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1453">Valeur de type <c>Nullable&lt;Int64&gt;</c> en C# ou <c>Nullable(Of Int64)</c> en Visual Basic qui correspond à la valeur minimale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1453">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1454">Le <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> méthode utilise le <xref:System.Int64> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1454">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1455">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Int64>` en c# ou `Nullable(Of Int64)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1455">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1456">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1456">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1457">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1457">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1458">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1458">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1459">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1459">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1460">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1460">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1461">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1461">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1462">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1462">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1463">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Single" /> nullable minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1463">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1464">Valeur de type <c>Nullable&lt;Single&gt;</c> en C# ou <c>Nullable(Of Single)</c> en Visual Basic qui correspond à la valeur minimale de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1464">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1465">Le <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> méthode utilise le <xref:System.Single> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1465">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1466">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Single>` en c# ou `Nullable(Of Single)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1466">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1467">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1467">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1468">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1468">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1469">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1469">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1470">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1470">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1471">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1471">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1472">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1472">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1473">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1473">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1474">Appelle une fonction de transformation sur chaque élément d'une séquence et retourne la valeur <see cref="T:System.Single" /> minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1474">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1475">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1475">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1476">Le <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> méthode utilise le <xref:System.Single> implémentation de <xref:System.IComparable%601> pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1476">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1477">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1477">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="62df5-1478">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1478">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1479">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1479">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1480">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1480">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1481">
            <paramref name="source" /> ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1481">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1482">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1482">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Min&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1483">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1483">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-1484">Type de la valeur retournée par <paramref name="selector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1484">The type of the value returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1485">Séquence de valeurs pour laquelle déterminer la valeur minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1485">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1486">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1486">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1487">Appelle une fonction de transformation sur chaque élément d'une séquence générique et retourne la valeur résultante minimale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1487">Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1488">Valeur minimale dans la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1488">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1489">Si type `TResult` implémente <xref:System.IComparable%601>, cette méthode utilise cette implémentation pour comparer les valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1489">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="62df5-1490">Sinon, si type `TResult` implémente <xref:System.IComparable>, cette implémentation est utilisée pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1490">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="62df5-1491">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Min()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1491">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1492">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1492">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1493">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1493">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1494">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1494">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfType(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ OfType(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member OfType : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.OfType source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-1495">Type en fonction duquel filtrer les éléments de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1495">The type to filter the elements of the sequence on.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1496">
            <see cref="T:System.Collections.IEnumerable" /> dont les éléments doivent être filtrés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1496">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1497">Filtre les éléments d'un <see cref="T:System.Collections.IEnumerable" /> en fonction du type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1497">Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1498">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient des éléments de la séquence d'entrée de type <paramref name="TResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1498">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1499">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1499">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1500">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1500">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1501">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1501">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1502">Le <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> méthode retourne uniquement les éléments de `source` qui peut être casté en type `TResult`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1502">The <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> method returns only those elements in `source` that can be cast to type `TResult`.</span></span> <span data-ttu-id="62df5-1503">Pour recevoir à la place une exception si un élément ne peut pas être casté en type `TResult`, utilisez <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1503">To instead receive an exception if an element cannot be cast to type `TResult`, use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="62df5-1504">Cette méthode est une des rares méthodes d’opérateur de requête standard peuvent être appliquées à une collection qui a un type non paramétrée, comme un <xref:System.Collections.ArrayList>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1504">This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>.</span></span> <span data-ttu-id="62df5-1505">Il s’agit, car <xref:System.Linq.Enumerable.OfType%2A> étend le type <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1505">This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>.</span></span> <span data-ttu-id="62df5-1506"><xref:System.Linq.Enumerable.OfType%2A> ne peut pas être appliqué uniquement sur des regroupements qui reposent sur paramétré <xref:System.Collections.Generic.IEnumerable%601> type, mais les regroupements qui reposent sur la non paramétrées <xref:System.Collections.IEnumerable> tapez également.</span><span class="sxs-lookup"><span data-stu-id="62df5-1506"><xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also.</span></span>  
  
 <span data-ttu-id="62df5-1507">En appliquant <xref:System.Linq.Enumerable.OfType%2A> à une collection qui implémente <xref:System.Collections.IEnumerable>, vous avez la possibilité d’interroger la collection à l’aide des opérateurs de requête standard.</span><span class="sxs-lookup"><span data-stu-id="62df5-1507">By applying <xref:System.Linq.Enumerable.OfType%2A> to a collection that implements <xref:System.Collections.IEnumerable>, you gain the ability to query the collection by using the standard query operators.</span></span> <span data-ttu-id="62df5-1508">Par exemple, en spécifiant un argument de type <xref:System.Object> à <xref:System.Linq.Enumerable.OfType%2A> retourne un objet de type `IEnumerable<Object>` en c# ou `IEnumerable(Of Object)` en Visual Basic, auquel les opérateurs de requête standard peuvent être appliqués.</span><span class="sxs-lookup"><span data-stu-id="62df5-1508">For example, specifying a type argument of <xref:System.Object> to <xref:System.Linq.Enumerable.OfType%2A> would return an object of type `IEnumerable<Object>` in C# or `IEnumerable(Of Object)` in Visual Basic, to which the standard query operators can be applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1509">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.OfType%2A> pour filtrer les éléments d’un <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1509">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OfType%2A> to filter the elements of an <xref:System.Collections.IEnumerable>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#69](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#69)]
 [!code-vb[System.Linq.Enumerable#69](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1510">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1510">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1511">Trie les éléments d'une séquence dans l'ordre croissant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1511">Sorts the elements of a sequence in ascending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1512">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1512">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-1513">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1513">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1514">Séquence de valeurs à classer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1514">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-1515">Fonction permettant d'extraire une clé d'un élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1515">A function to extract a key from an element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1516">Trie les éléments d'une séquence dans l'ordre croissant selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1516">Sorts the elements of a sequence in ascending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1517">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> dont les éléments sont triés selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1517">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1518">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1518">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1519">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1519">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1520">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1520">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1521">Pour commander une séquence par les valeurs des éléments eux-mêmes, spécifiez la fonction identity (`x => x` en Visual c# ou `Function(x) x` en Visual Basic) pour `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1521">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="62df5-1522">Deux méthodes sont définies pour étendre le type <xref:System.Linq.IOrderedEnumerable%601>, qui est le type de retour de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="62df5-1522">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="62df5-1523">Ces deux méthodes, à savoir `ThenBy` et `ThenByDescending`, vous permettent de spécifier des critères de tri supplémentaire pour trier une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1523">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="62df5-1524">`ThenBy` et `ThenByDescending` également retourner un <xref:System.Linq.IOrderedEnumerable%601>, ce qui signifie que n’importe quel nombre d’appels consécutifs à `ThenBy` ou `ThenByDescending` peuvent être effectuées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1524">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-1525">Étant donné que <xref:System.Linq.IOrderedEnumerable%601> hérite <xref:System.Collections.Generic.IEnumerable%601>, vous pouvez appeler <xref:System.Linq.Enumerable.OrderBy%2A> ou <xref:System.Linq.Enumerable.OrderByDescending%2A> sur les résultats d’un appel à <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1525">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="62df5-1526">Cela introduit un nouveau classement principal qui ignore l’ordre établi précédemment.</span><span class="sxs-lookup"><span data-stu-id="62df5-1526">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="62df5-1527">Cette méthode compare les clés à l’aide du comparateur par défaut <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1527">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="62df5-1528">Cette méthode effectue un tri stable. Autrement dit, si les clés de deux éléments sont égaux, l’ordre des éléments est conservé.</span><span class="sxs-lookup"><span data-stu-id="62df5-1528">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="62df5-1529">En revanche, un tri instable ne conserve pas l’ordre des éléments qui ont la même clé.</span><span class="sxs-lookup"><span data-stu-id="62df5-1529">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="62df5-1530">Dans la syntaxe d’expression de requête, un `orderby` (Visual c#) ou `Order By` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.OrderBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1530">In query expression syntax, an `orderby` (Visual C#) or `Order By` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1531">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> pour trier les éléments d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1531">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to sort the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#70](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#70)]
 [!code-vb[System.Linq.Enumerable#70](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1532">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1532">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="62df5-1533">orderby, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1533">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="62df5-1534">Order By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1534">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1535">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1535">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-1536">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1536">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1537">Séquence de valeurs à classer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1537">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-1538">Fonction permettant d'extraire une clé d'un élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1538">A function to extract a key from an element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-1539">
            <see cref="T:System.Collections.Generic.IComparer`1" /> pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1539">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1540">Trie les éléments d'une séquence dans l'ordre croissant à l'aide d'un comparateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1540">Sorts the elements of a sequence in ascending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1541">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> dont les éléments sont triés selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1541">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1542">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1542">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1543">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1543">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1544">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1544">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1545">Pour commander une séquence par les valeurs des éléments eux-mêmes, spécifiez la fonction identity (`x => x` en Visual c# ou `Function(x) x` en Visual Basic) pour `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1545">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="62df5-1546">Deux méthodes sont définies pour étendre le type <xref:System.Linq.IOrderedEnumerable%601>, qui est le type de retour de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="62df5-1546">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="62df5-1547">Ces deux méthodes, à savoir `ThenBy` et `ThenByDescending`, vous permettent de spécifier des critères de tri supplémentaire pour trier une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1547">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="62df5-1548">`ThenBy` et `ThenByDescending` également retourner un <xref:System.Linq.IOrderedEnumerable%601>, ce qui signifie que n’importe quel nombre d’appels consécutifs à `ThenBy` ou `ThenByDescending` peuvent être effectuées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1548">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-1549">Étant donné que <xref:System.Linq.IOrderedEnumerable%601> hérite <xref:System.Collections.Generic.IEnumerable%601>, vous pouvez appeler <xref:System.Linq.Enumerable.OrderBy%2A> ou <xref:System.Linq.Enumerable.OrderByDescending%2A> sur les résultats d’un appel à <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1549">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="62df5-1550">Cela introduit un nouveau classement principal qui ignore l’ordre établi précédemment.</span><span class="sxs-lookup"><span data-stu-id="62df5-1550">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="62df5-1551">Si `comparer` est `null`, le comparateur par défaut <xref:System.Collections.Generic.Comparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-1551">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="62df5-1552">Cette méthode effectue un tri stable. Autrement dit, si les clés de deux éléments sont égaux, l’ordre des éléments est conservé.</span><span class="sxs-lookup"><span data-stu-id="62df5-1552">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="62df5-1553">En revanche, un tri instable ne conserve pas l’ordre des éléments qui ont la même clé.</span><span class="sxs-lookup"><span data-stu-id="62df5-1553">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1554">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1554">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1555">Trie les éléments d'une séquence dans l'ordre décroissant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1555">Sorts the elements of a sequence in descending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1556">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1556">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-1557">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1557">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1558">Séquence de valeurs à classer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1558">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-1559">Fonction permettant d'extraire une clé d'un élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1559">A function to extract a key from an element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1560">Trie les éléments d'une séquence dans l'ordre décroissant selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1560">Sorts the elements of a sequence in descending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1561">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> dont les éléments sont triés dans l'ordre décroissant selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1561">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1562">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1562">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1563">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1563">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1564">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1564">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1565">Pour commander une séquence par les valeurs des éléments eux-mêmes, spécifiez la fonction identity (`x => x` en Visual c# ou `Function(x) x` en Visual Basic) pour `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1565">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="62df5-1566">Pour obtenir un exemple de cette méthode, consultez <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1566">For an example of this method, see <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.</span></span>  
  
 <span data-ttu-id="62df5-1567">Deux méthodes sont définies pour étendre le type <xref:System.Linq.IOrderedEnumerable%601>, qui est le type de retour de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="62df5-1567">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="62df5-1568">Ces deux méthodes, à savoir `ThenBy` et `ThenByDescending`, vous permettent de spécifier des critères de tri supplémentaire pour trier une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1568">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="62df5-1569">`ThenBy` et `ThenByDescending` également retourner un <xref:System.Linq.IOrderedEnumerable%601>, ce qui signifie que n’importe quel nombre d’appels consécutifs à `ThenBy` ou `ThenByDescending` peuvent être effectuées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1569">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-1570">Étant donné que <xref:System.Linq.IOrderedEnumerable%601> hérite <xref:System.Collections.Generic.IEnumerable%601>, vous pouvez appeler <xref:System.Linq.Enumerable.OrderBy%2A> ou <xref:System.Linq.Enumerable.OrderByDescending%2A> sur les résultats d’un appel à <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1570">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="62df5-1571">Cela introduit un nouveau classement principal qui ignore l’ordre établi précédemment.</span><span class="sxs-lookup"><span data-stu-id="62df5-1571">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="62df5-1572">Cette méthode compare les clés à l’aide du comparateur par défaut <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1572">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="62df5-1573">Cette méthode effectue un tri stable. Autrement dit, si les clés de deux éléments sont égaux, l’ordre des éléments est conservé.</span><span class="sxs-lookup"><span data-stu-id="62df5-1573">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="62df5-1574">En revanche, un tri instable ne conserve pas l’ordre des éléments qui ont la même clé.</span><span class="sxs-lookup"><span data-stu-id="62df5-1574">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="62df5-1575">Dans la syntaxe d’expression de requête, un `orderby descending` (Visual c#) ou `Order By Descending` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.OrderByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1575">In query expression syntax, an `orderby descending` (Visual C#) or `Order By Descending` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1576">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1576">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="62df5-1577">orderby, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1577">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="62df5-1578">Order By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1578">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1579">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1579">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-1580">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1580">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1581">Séquence de valeurs à classer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1581">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-1582">Fonction permettant d'extraire une clé d'un élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1582">A function to extract a key from an element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-1583">
            <see cref="T:System.Collections.Generic.IComparer`1" /> pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1583">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1584">Trie les éléments d'une séquence dans l'ordre décroissant à l'aide d'un comparateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1584">Sorts the elements of a sequence in descending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1585">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> dont les éléments sont triés dans l'ordre décroissant selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1585">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1586">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1586">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1587">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1587">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1588">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1588">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1589">Pour commander une séquence par les valeurs des éléments eux-mêmes, spécifiez la fonction identity (`x => x` en Visual c# ou `Function(x) x` en Visual Basic) pour `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1589">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="62df5-1590">Deux méthodes sont définies pour étendre le type <xref:System.Linq.IOrderedEnumerable%601>, qui est le type de retour de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="62df5-1590">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="62df5-1591">Ces deux méthodes, à savoir `ThenBy` et `ThenByDescending`, vous permettent de spécifier des critères de tri supplémentaire pour trier une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1591">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="62df5-1592">`ThenBy` et `ThenByDescending` également retourner un <xref:System.Linq.IOrderedEnumerable%601>, ce qui signifie que n’importe quel nombre d’appels consécutifs à `ThenBy` ou `ThenByDescending` peuvent être effectuées.</span><span class="sxs-lookup"><span data-stu-id="62df5-1592">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-1593">Étant donné que <xref:System.Linq.IOrderedEnumerable%601> hérite <xref:System.Collections.Generic.IEnumerable%601>, vous pouvez appeler <xref:System.Linq.Enumerable.OrderBy%2A> ou <xref:System.Linq.Enumerable.OrderByDescending%2A> sur les résultats d’un appel à <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1593">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="62df5-1594">Cela introduit un nouveau classement principal qui ignore l’ordre établi précédemment.</span><span class="sxs-lookup"><span data-stu-id="62df5-1594">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="62df5-1595">Si `comparer` est `null`, le comparateur par défaut <xref:System.Collections.Generic.Comparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-1595">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="62df5-1596">Cette méthode effectue un tri stable. Autrement dit, si les clés de deux éléments sont égaux, l’ordre des éléments est conservé.</span><span class="sxs-lookup"><span data-stu-id="62df5-1596">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="62df5-1597">En revanche, un tri instable ne conserve pas l’ordre des éléments qui ont la même clé.</span><span class="sxs-lookup"><span data-stu-id="62df5-1597">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1598">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> pour trier les éléments d’une séquence dans l’ordre décroissant à l’aide d’une fonction de transformation et d’un comparateur personnalisé.</span><span class="sxs-lookup"><span data-stu-id="62df5-1598">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#71](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#71)]
 [!code-vb[System.Linq.Enumerable#71](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1599">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1599">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <Member MemberName="Prepend&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Prepend&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Prepend&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Prepend(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Prepend(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Prepend : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Prepend (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1600">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1600">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1601">Séquence de valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1601">A sequence of values.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="62df5-1602">Valeur à ajouter à <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1602">The value to prepend to <paramref name="source" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1603">Ajoute une valeur au début de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1603">Adds a value to the beginning of the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1604">Nouvelle séquence qui commence par <paramref name="element" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1604">A new sequence that begins with <paramref name="element" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[    
          
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="62df5-1605">Cette méthode ne modifie pas les éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="62df5-1605">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="62df5-1606">Au lieu de cela, il crée une copie de la collection avec le nouvel élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1606">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="62df5-1607">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Prepend%2A> pour ajouter une valeur au début de la séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1607">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Prepend%2A> to prepend a value to the beginning of the sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#202](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#202)]
 [!code-vb[System.Linq.Enumerable#202](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1608">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1608">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Range (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;int32&gt; Range(int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Range (start As Integer, count As Integer) As IEnumerable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;int&gt; ^ Range(int start, int count);" />
      <MemberSignature Language="F#" Value="static member Range : int * int -&gt; seq&lt;int&gt;" Usage="System.Linq.Enumerable.Range (start, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="62df5-1609">Valeur du premier entier de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1609">The value of the first integer in the sequence.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="62df5-1610">Nombre d'entiers séquentiels à générer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1610">The number of sequential integers to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1611">Génère une séquence de nombres entiers dans une plage spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1611">Generates a sequence of integral numbers within a specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1612">
            <c>IEnumerable&lt;Int32&gt;</c> en C# ou <c>IEnumerable(Of Int32)</c> en Visual Basic qui contient une plage de nombres entiers séquentiels.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1612">An <c>IEnumerable&lt;Int32&gt;</c> in C# or <c>IEnumerable(Of Int32)</c> in Visual Basic that contains a range of sequential integral numbers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1613">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1613">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1614">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1614">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1615">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1615">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1616">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Range%2A> pour générer une séquence de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1616">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Range%2A> to generate a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#72](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#72)]
 [!code-vb[System.Linq.Enumerable#72](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="62df5-1617">
            <paramref name="count" /> est inférieur à 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1617">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="62df5-1618">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1618">-or-</span>
          </span>
          <span data-ttu-id="62df5-1619">
            <paramref name="start" /> + <paramref name="count" /> -1 est supérieur à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1619">
              <paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Repeat&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt; (TResult element, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Repeat&lt;TResult&gt;(!!TResult element, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Repeat(Of TResult) (element As TResult, count As Integer) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Repeat(TResult element, int count);" />
      <MemberSignature Language="F#" Value="static member Repeat : 'Result * int -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Repeat (element, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="element" Type="TResult" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-1620">Type de la valeur à répéter dans la séquence de résultat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1620">The type of the value to be repeated in the result sequence.</span>
          </span>
        </typeparam>
        <param name="element">
          <span data-ttu-id="62df5-1621">Valeur à répéter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1621">The value to be repeated.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="62df5-1622">Nombre de fois que la valeur doit être répétée dans la séquence générée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1622">The number of times to repeat the value in the generated sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1623">Génère une séquence qui contient une valeur répétée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1623">Generates a sequence that contains one repeated value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1624">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient une valeur répétée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1624">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1625">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1625">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1626">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1626">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1627">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1627">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1628">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Repeat%2A> pour générer une séquence d’une valeur répétée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1628">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Repeat%2A> to generate a sequence of a repeated value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#73](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#73)]
 [!code-vb[System.Linq.Enumerable#73](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="62df5-1629">
            <paramref name="count" /> est inférieur à 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1629">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Reverse(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Reverse(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Reverse : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Reverse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1630">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1630">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1631">Séquence de valeurs à inverser.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1631">A sequence of values to reverse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1632">Inverse l'ordre des éléments dans une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1632">Inverts the order of the elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1633">Séquence dont les éléments correspondent à ceux de la séquence d'entrée dans l'ordre inverse.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1633">A sequence whose elements correspond to those of the input sequence in reverse order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1634">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1634">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1635">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1635">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1636">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1636">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1637">Contrairement à <xref:System.Linq.Enumerable.OrderBy%2A>, cette méthode de tri ne considère pas les valeurs elles-mêmes pour déterminer l’ordre.</span><span class="sxs-lookup"><span data-stu-id="62df5-1637">Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order.</span></span> <span data-ttu-id="62df5-1638">Au lieu de cela, elle renvoie simplement les éléments dans l’ordre inverse à partir de laquelle ils sont générés par la source sous-jacente.</span><span class="sxs-lookup"><span data-stu-id="62df5-1638">Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1639">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Reverse%2A> pour inverser l’ordre des éléments dans un tableau.</span><span class="sxs-lookup"><span data-stu-id="62df5-1639">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Reverse%2A> to reverse the order of elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#74](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#74)]
 [!code-vb[System.Linq.Enumerable#74](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1640">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1640">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1641">Projette chaque élément d’une séquence dans un nouveau formulaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1641">Projects each element of a sequence into a new form.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, int, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1642">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1642">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-1643">Type de la valeur retournée par <paramref name="selector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1643">The type of the value returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1644">Séquence de valeurs pour laquelle appeler une fonction de transformation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1644">A sequence of values to invoke a transform function on.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1645">Fonction de transformation à appliquer à chaque élément source ; le deuxième paramètre de la fonction représente l'index de l'élément source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1645">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1646">Projette chaque élément d'une séquence dans un nouveau formulaire en incorporant l'index de l'élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1646">Projects each element of a sequence into a new form by incorporating the element's index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1647">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments résultent d'un appel de la fonction de transformation sur chaque élément de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1647">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1648">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1648">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1649">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1649">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1650">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1650">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1651">Le premier argument de `selector` représente l’élément à traiter.</span><span class="sxs-lookup"><span data-stu-id="62df5-1651">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="62df5-1652">Le deuxième argument `selector` représente l’index de base zéro de cet élément dans la séquence source.</span><span class="sxs-lookup"><span data-stu-id="62df5-1652">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="62df5-1653">Cela peut être utile si les éléments sont dans un ordre connu et que vous voulez faire quelque chose avec un élément à un index particulier, par exemple.</span><span class="sxs-lookup"><span data-stu-id="62df5-1653">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="62df5-1654">Il peut également être utile si vous souhaitez récupérer l’index d’un ou plusieurs éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-1654">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
 <span data-ttu-id="62df5-1655">Cette méthode de projection requiert la fonction de transformation, `selector`, pour produire une valeur pour chaque valeur dans la séquence source, `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1655">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="62df5-1656">Si `selector` retourne une valeur qui est elle-même une collection, il incombe au consommateur de parcourir les sous-séquences manuellement.</span><span class="sxs-lookup"><span data-stu-id="62df5-1656">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="62df5-1657">Dans ce cas, il peut être préférable pour votre requête retourner une séquence fusionnée unique de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1657">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="62df5-1658">Pour ce faire, utilisez le <xref:System.Linq.Enumerable.SelectMany%2A> méthode au lieu de <xref:System.Linq.Enumerable.Select%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1658">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="62df5-1659">Bien que `SelectMany` fonctionne de manière similaire à `Select`, elle diffère de la fonction de transformation retourne une collection qui est ensuite étendue par `SelectMany` avant d’être retournée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1659">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1660">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> sur une séquence de valeurs de projet et l’utilisation de l’index de chaque élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1660">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> to project over a sequence of values and use the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#76](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#76)]
 [!code-vb[System.Linq.Enumerable#76](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1661">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1661">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1662">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1662">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-1663">Type de la valeur retournée par <paramref name="selector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1663">The type of the value returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1664">Séquence de valeurs pour laquelle appeler une fonction de transformation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1664">A sequence of values to invoke a transform function on.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1665">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1665">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1666">Projette chaque élément d’une séquence dans un nouveau formulaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1666">Projects each element of a sequence into a new form.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1667">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments résultent d'un appel de la fonction de transformation sur chaque élément de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1667">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1668">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1668">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1669">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1669">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1670">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1670">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1671">Cette méthode de projection requiert la fonction de transformation, `selector`, pour produire une valeur pour chaque valeur dans la séquence source, `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1671">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="62df5-1672">Si `selector` retourne une valeur qui est elle-même une collection, il incombe au consommateur de parcourir les sous-séquences manuellement.</span><span class="sxs-lookup"><span data-stu-id="62df5-1672">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="62df5-1673">Dans ce cas, il peut être préférable pour votre requête retourner une séquence fusionnée unique de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1673">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="62df5-1674">Pour ce faire, utilisez le <xref:System.Linq.Enumerable.SelectMany%2A> méthode au lieu de <xref:System.Linq.Enumerable.Select%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1674">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="62df5-1675">Bien que `SelectMany` fonctionne de manière similaire à `Select`, elle diffère de la fonction de transformation retourne une collection qui est ensuite étendue par `SelectMany` avant d’être retournée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1675">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
 <span data-ttu-id="62df5-1676">Dans la syntaxe d’expression de requête, un `select` (Visual c#) ou `Select` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.Select%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1676">In query expression syntax, a `select` (Visual C#) or `Select` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Select%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1677">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> à projeter sur une séquence de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-1677">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to project over a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#75](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#75)]
 [!code-vb[System.Linq.Enumerable#75](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1678">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1678">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/df01e266-5781-4aaa-80c4-67cf28ea093f">
          <span data-ttu-id="62df5-1679">select, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1679">select clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/27a3f61c-5960-4692-9b91-4d0c4b6178fe">
          <span data-ttu-id="62df5-1680">Select, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1680">Select Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectMany&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1681">Projette chaque élément d'une séquence sur un <see cref="T:System.Collections.Generic.IEnumerable`1" /> et aplatit les séquences résultantes en une seule séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1681">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1682">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1682">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-1683">Type des éléments de la séquence retournée par <paramref name="selector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1683">The type of the elements of the sequence returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1684">Séquence de valeurs à projeter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1684">A sequence of values to project.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1685">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1685">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1686">Projette chaque élément d'une séquence sur un <see cref="T:System.Collections.Generic.IEnumerable`1" /> et aplatit les séquences résultantes en une seule séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1686">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1687">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments résultent d'un appel de la fonction de transformation de type un-à-plusieurs sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1687">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1688">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1688">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1689">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1689">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1690">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1690">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1691">Le <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> méthode énumère la séquence d’entrée, utilise une fonction de transformation pour mapper chaque élément à un <xref:System.Collections.Generic.IEnumerable%601>, puis énumère et produit les éléments de chacun de ces <xref:System.Collections.Generic.IEnumerable%601> objet.</span><span class="sxs-lookup"><span data-stu-id="62df5-1691">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="62df5-1692">Autrement dit, pour chaque élément de `source`, `selector` est appelé et une séquence de valeurs est retournée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1692">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="62df5-1693"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> aplatit ensuite cette collection en deux dimensions de collections en une dimension <xref:System.Collections.Generic.IEnumerable%601> et le retourne.</span><span class="sxs-lookup"><span data-stu-id="62df5-1693"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="62df5-1694">Par exemple, si une requête utilise <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> pour obtenir les commandes (de type `Order`) pour chaque client dans une base de données, le résultat est de type `IEnumerable<Order>` en c# ou `IEnumerable(Of Order)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1694">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="62df5-1695">Si la requête utilise à la place <xref:System.Linq.Enumerable.Select%2A> pour obtenir les commandes, la collection de collections d’ordres n’est pas combinée et le résultat est de type `IEnumerable<List<Order>>` en c# ou `IEnumerable(Of List(Of Order))` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1695">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1696">Dans la syntaxe d’expression de requête, chaque `from` clause (Visual c#) ou `From` clause (Visual Basic) après le premier se traduit en un appel à <xref:System.Linq.Enumerable.SelectMany%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1696">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1697">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> pour effectuer une projection de type un-à-plusieurs sur un tableau.</span><span class="sxs-lookup"><span data-stu-id="62df5-1697">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#77](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#77)]
 [!code-vb[System.Linq.Enumerable#77](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1698">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1698">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1aefd18c-1314-47f8-99ec-9bcefb09e699">
          <span data-ttu-id="62df5-1699">from, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1699">from clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/83e3665e-68a0-4540-a3a3-3d777a0f95d5">
          <span data-ttu-id="62df5-1700">From, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1700">From Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1701">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1701">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-1702">Type des éléments de la séquence retournée par <paramref name="selector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1702">The type of the elements of the sequence returned by <paramref name="selector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1703">Séquence de valeurs à projeter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1703">A sequence of values to project.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1704">Fonction de transformation à appliquer à chaque élément source ; le deuxième paramètre de la fonction représente l'index de l'élément source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1704">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1705">Projette chaque élément d'une séquence sur un <see cref="T:System.Collections.Generic.IEnumerable`1" /> et aplatit les séquences résultantes en une seule séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1705">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence.</span>
          </span>
          <span data-ttu-id="62df5-1706">L'index de chaque élément source est utilisé dans le formulaire projeté de l'élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1706">The index of each source element is used in the projected form of that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1707">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments résultent d'un appel de la fonction de transformation de type un-à-plusieurs sur chaque élément d'une séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1707">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1708">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1708">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1709">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1709">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1710">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1710">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1711">Le <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> méthode énumère la séquence d’entrée, utilise une fonction de transformation pour mapper chaque élément à un <xref:System.Collections.Generic.IEnumerable%601>, puis énumère et produit les éléments de chacun de ces <xref:System.Collections.Generic.IEnumerable%601> objet.</span><span class="sxs-lookup"><span data-stu-id="62df5-1711">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="62df5-1712">Autrement dit, pour chaque élément de `source`, `selector` est appelé et une séquence de valeurs est retournée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1712">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="62df5-1713"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> aplatit ensuite cette collection en deux dimensions de collections en une dimension <xref:System.Collections.Generic.IEnumerable%601> et le retourne.</span><span class="sxs-lookup"><span data-stu-id="62df5-1713"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="62df5-1714">Par exemple, si une requête utilise <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> pour obtenir les commandes (de type `Order`) pour chaque client dans une base de données, le résultat est de type `IEnumerable<Order>` en c# ou `IEnumerable(Of Order)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1714">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="62df5-1715">Si la requête utilise à la place <xref:System.Linq.Enumerable.Select%2A> pour obtenir les commandes, la collection de collections d’ordres n’est pas combinée et le résultat est de type `IEnumerable<List<Order>>` en c# ou `IEnumerable(Of List(Of Order))` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1715">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1716">Le premier argument de `selector` représente l’élément à traiter.</span><span class="sxs-lookup"><span data-stu-id="62df5-1716">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="62df5-1717">Le deuxième argument `selector` représente l’index de base zéro de cet élément dans la séquence source.</span><span class="sxs-lookup"><span data-stu-id="62df5-1717">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="62df5-1718">Cela peut être utile si les éléments sont dans un ordre connu et que vous voulez faire quelque chose avec un élément à un index particulier, par exemple.</span><span class="sxs-lookup"><span data-stu-id="62df5-1718">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="62df5-1719">Il peut également être utile si vous souhaitez récupérer l’index d’un ou plusieurs éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-1719">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1720">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> pour effectuer une projection de type un-à-plusieurs sur un tableau et utiliser l’index de chaque élément externe.</span><span class="sxs-lookup"><span data-stu-id="62df5-1720">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array and use the index of each outer element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#78](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#78)]
 [!code-vb[System.Linq.Enumerable#78](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1721">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1721">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1722">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1722">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TCollection">
          <span data-ttu-id="62df5-1723">Type des éléments intermédiaires collectés par <paramref name="collectionSelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1723">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-1724">Type des éléments de la séquence résultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1724">The type of the elements of the resulting sequence.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1725">Séquence de valeurs à projeter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1725">A sequence of values to project.</span>
          </span>
        </param>
        <param name="collectionSelector">
          <span data-ttu-id="62df5-1726">Fonction de transformation à appliquer à chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1726">A transform function to apply to each element of the input sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-1727">Fonction de transformation à appliquer à chaque élément de la séquence intermédiaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1727">A transform function to apply to each element of the intermediate sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1728">Projette chaque élément d'une séquence sur un <see cref="T:System.Collections.Generic.IEnumerable`1" />, aplatit les séquences résultantes en une seule séquence et appelle une fonction de sélection de résultat sur chaque élément inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1728">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1729">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments résultent d'un appel de la fonction de transformation <paramref name="collectionSelector" /> de type un-à-plusieurs sur chaque élément de <paramref name="source" /> et qui mappe ensuite chaque élément de la séquence et l'élément source correspondant avec un élément de résultat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1729">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1730">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1730">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1731">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1731">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1732">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1732">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1733">Le <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> méthode est utile lorsque vous devez garder les éléments de `source` dans l’étendue de la logique de requête qui se produit après l’appel à <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1733">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="62df5-1734">Pour obtenir un exemple de code, consultez la section Exemple.</span><span class="sxs-lookup"><span data-stu-id="62df5-1734">See the Example section for a code example.</span></span> <span data-ttu-id="62df5-1735">S’il est une relation bidirectionnelle entre les objets de type `TSource` et objets de type `TCollection`, autrement dit, si un objet de type `TCollection` fournit une propriété pour récupérer le `TSource` objet qui a produit, vous ne devez pas cela surcharge de <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1735">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="62df5-1736">Au lieu de cela, vous pouvez utiliser <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> et revenir à la `TSource` via la `TCollection` objet.</span><span class="sxs-lookup"><span data-stu-id="62df5-1736">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 <span data-ttu-id="62df5-1737">Dans la syntaxe d’expression de requête, chaque `from` clause (Visual c#) ou `From` clause (Visual Basic) après le premier se traduit en un appel à <xref:System.Linq.Enumerable.SelectMany%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1737">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1738">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> pour effectuer une projection de type un-à-plusieurs sur un tableau et une fonction de sélection de résultat pour garder chaque élément correspondant de la séquence source dans la portée de l’appel final à `Select`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1738">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to `Select`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#124](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#124)]
 [!code-vb[System.Linq.Enumerable#124](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#124)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1739">
            <paramref name="source" /> ou <paramref name="collectionSelector" /> ou <paramref name="resultSelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1739">
              <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1aefd18c-1314-47f8-99ec-9bcefb09e699">
          <span data-ttu-id="62df5-1740">from, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1740">from clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/83e3665e-68a0-4540-a3a3-3d777a0f95d5">
          <span data-ttu-id="62df5-1741">From, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1741">From Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1742">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1742">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TCollection">
          <span data-ttu-id="62df5-1743">Type des éléments intermédiaires collectés par <paramref name="collectionSelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1743">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-1744">Type des éléments de la séquence résultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1744">The type of the elements of the resulting sequence.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1745">Séquence de valeurs à projeter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1745">A sequence of values to project.</span>
          </span>
        </param>
        <param name="collectionSelector">
          <span data-ttu-id="62df5-1746">Fonction de transformation à appliquer à chaque élément source ; le deuxième paramètre de la fonction représente l'index de l'élément source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1746">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-1747">Fonction de transformation à appliquer à chaque élément de la séquence intermédiaire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1747">A transform function to apply to each element of the intermediate sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1748">Projette chaque élément d'une séquence sur un <see cref="T:System.Collections.Generic.IEnumerable`1" />, aplatit les séquences résultantes en une seule séquence et appelle une fonction de sélection de résultat sur chaque élément inclus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1748">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span>
          </span>
          <span data-ttu-id="62df5-1749">L'index de chaque élément source est utilisé dans le formulaire intermédiaire projeté de l'élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1749">The index of each source element is used in the intermediate projected form of that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1750">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments résultent d'un appel de la fonction de transformation <paramref name="collectionSelector" /> de type un-à-plusieurs sur chaque élément de <paramref name="source" /> et qui mappe ensuite chaque élément de la séquence et l'élément source correspondant avec un élément de résultat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1750">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1751">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1751">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1752">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1752">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1753">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1753">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1754">Le <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> méthode est utile lorsque vous devez garder les éléments de `source` dans l’étendue de la logique de requête qui se produit après l’appel à <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1754">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="62df5-1755">Pour obtenir un exemple de code, consultez la section Exemple.</span><span class="sxs-lookup"><span data-stu-id="62df5-1755">See the Example section for a code example.</span></span> <span data-ttu-id="62df5-1756">S’il est une relation bidirectionnelle entre les objets de type `TSource` et objets de type `TCollection`, autrement dit, si un objet de type `TCollection` fournit une propriété pour récupérer le `TSource` objet qui a produit, vous ne devez pas cela surcharge de <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1756">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="62df5-1757">Au lieu de cela, vous pouvez utiliser <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> et revenir à la `TSource` via la `TCollection` objet.</span><span class="sxs-lookup"><span data-stu-id="62df5-1757">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1758">
            <paramref name="source" /> ou <paramref name="collectionSelector" /> ou <paramref name="resultSelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1758">
              <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SequenceEqual&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1759">Détermine si deux séquences sont égales selon un comparateur d’égalité.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1759">Determines whether two sequences are equal according to an equality comparer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1760">Type des éléments des séquences d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1760">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="62df5-1761">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à comparer à <paramref name="second" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1761">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="62df5-1762">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à comparer à la première sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1762">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1763">Détermine si deux séquences sont égales par une comparaison des types d'élément réalisée à l'aide du comparateur d'égalité par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1763">Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1764">
            <see langword="true" /> si les deux séquences source sont de même longueur et si les types de leurs éléments correspondants sont égaux selon le comparateur d'égalité par défaut ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1764">
              <see langword="true" /> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1765">Le <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode énumère les deux séquences source en parallèle et compare les éléments correspondants à l’aide du comparateur d’égalité par défaut pour `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1765">The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span> <span data-ttu-id="62df5-1766">Le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour comparer les valeurs des types qui implémentent le <xref:System.Collections.Generic.IEqualityComparer%601> interface générique.</span><span class="sxs-lookup"><span data-stu-id="62df5-1766">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="62df5-1767">Pour comparer un type de données personnalisé, vous devez implémenter cette interface et fournir votre propre <xref:System.Object.GetHashCode%2A> et <xref:System.Object.Equals%2A> méthodes pour le type.</span><span class="sxs-lookup"><span data-stu-id="62df5-1767">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1768">Les exemples de code suivants montrent comment utiliser <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour déterminer si deux séquences sont égales.</span><span class="sxs-lookup"><span data-stu-id="62df5-1768">The following code examples demonstrate how to use <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine whether two sequences are equal.</span></span> <span data-ttu-id="62df5-1769">Dans les deux premiers exemples, la méthode détermine si les séquences comparées contiennent des références sur les mêmes objets.</span><span class="sxs-lookup"><span data-stu-id="62df5-1769">In the first two examples, the method determines whether the compared sequences contain references to the same objects.</span></span> <span data-ttu-id="62df5-1770">Dans les troisième et quatrième exemples, la méthode compare les données réelles des objets dans les séquences.</span><span class="sxs-lookup"><span data-stu-id="62df5-1770">In the third and fourth examples, the method compares the actual data of the objects within the sequences.</span></span>  
  
 <span data-ttu-id="62df5-1771">Dans cet exemple, les séquences sont égales.</span><span class="sxs-lookup"><span data-stu-id="62df5-1771">In this example the sequences are equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#32)]
 [!code-vb[System.Linq.Enumerable#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#32)]  
  
 <span data-ttu-id="62df5-1772">L’exemple de code suivant compare deux séquences qui ne sont pas égaux.</span><span class="sxs-lookup"><span data-stu-id="62df5-1772">The following code example compares two sequences that are not equal.</span></span> <span data-ttu-id="62df5-1773">Notez que les séquences contiennent des données identiques, mais étant donné que les objets qu’ils contiennent ont des références différentes, les séquences ne sont pas considérées comme égales.</span><span class="sxs-lookup"><span data-stu-id="62df5-1773">Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#33)]
 [!code-vb[System.Linq.Enumerable#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#33)]  
  
 <span data-ttu-id="62df5-1774">Si vous souhaitez comparer les données réelles des objets dans les séquences au lieu de simplement comparer leurs références, vous devez implémenter le <xref:System.Collections.Generic.IEqualityComparer%601> interface générique dans votre classe.</span><span class="sxs-lookup"><span data-stu-id="62df5-1774">If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in your class.</span></span> <span data-ttu-id="62df5-1775">L’exemple de code suivant montre comment implémenter cette interface dans une classe d’assistance et fournir <xref:System.Object.GetHashCode%2A> et <xref:System.Object.Equals%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-1775">The following code example shows how to implement this interface in a helper class and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="62df5-1776">Une fois que vous implémentez cette interface, vous pouvez utiliser des séquences de `ProductA` des objets dans le <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="62df5-1776">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#8)]
 [!code-vb[CSLINQEncapsulatedComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1777">
            <paramref name="first" /> ou <paramref name="second" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1777">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1778">Type des éléments des séquences d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1778">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="62df5-1779">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à comparer à <paramref name="second" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1779">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="62df5-1780">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à comparer à la première sequence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1780">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-1781">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> à utiliser pour comparer les éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1781">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1782">Détermine si deux séquences sont égales en comparant leurs éléments à l'aide d'un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1782">Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1783">
            <see langword="true" /> si les deux séquences source sont de même longueur et si leurs éléments correspondants sont égaux selon <paramref name="comparer" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1783">
              <see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1784">Le <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> méthode énumère les deux séquences source en parallèle et compare les éléments correspondants à l’aide de l’élément spécifié <xref:System.Collections.Generic.IEqualityComparer%601>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1784">The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref:System.Collections.Generic.IEqualityComparer%601>.</span></span> <span data-ttu-id="62df5-1785">Si `comparer` est `null`, le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour comparer les éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-1785">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1786">L’exemple suivant montre comment implémenter un comparateur d’égalité qui peut être utilisé dans le <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-1786">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="62df5-1787">Une fois que vous implémentez ce comparateur, vous pouvez utiliser des séquences de `Product` des objets dans le <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="62df5-1787">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#8)]
 [!code-vb[CSLINQCustomComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1788">
            <paramref name="first" /> ou <paramref name="second" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1788">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Single&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1789">Retourne un élément spécifique unique d'une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1789">Returns a single, specific element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1790">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1790">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1791">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> duquel retourner le seul élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1791">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1792">Retourne l’élément unique d’une séquence ou lève une exception si cette séquence ne contient pas un seul élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1792">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1793">Seul élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1793">The single element of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1794">Le <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode lève une exception si la séquence d’entrée est vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-1794">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if the input sequence is empty.</span></span> <span data-ttu-id="62df5-1795">Pour retourner à la place `null` lorsque la séquence d’entrée est vide, utilisez <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1795">To instead return `null` when the input sequence is empty, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1796">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour sélectionner le seul élément d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="62df5-1796">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#79](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#79)]
 [!code-vb[System.Linq.Enumerable#79](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#79)]  
  
 <span data-ttu-id="62df5-1797">L’exemple de code suivant montre que <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> lève une exception lorsque la séquence ne contient pas exactement un élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1797">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> throws an exception when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#80](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#80)]
 [!code-vb[System.Linq.Enumerable#80](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1798">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1798">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1799">La séquence d'entrée contient plusieurs éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1799">The input sequence contains more than one element.</span>
          </span>
          <span data-ttu-id="62df5-1800">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1800">-or-</span>
          </span>
          <span data-ttu-id="62df5-1801">La séquence d'entrée est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1801">The input sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1802">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1802">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1803">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> duquel retourner un seul élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1803">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-1804">Fonction permettant de tester un élément pour une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1804">A function to test an element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1805">Retourne le seul élément d’une séquence qui satisfait à une condition spécifique ou lève une exception si cette séquence contient plusieurs éléments respectant cette condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1805">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1806">Seul élément de la séquence d'entrée à satisfaire à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1806">The single element of the input sequence that satisfies a condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1807">Le <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> méthode lève une exception si la séquence d’entrée ne contient aucun élément correspondant.</span><span class="sxs-lookup"><span data-stu-id="62df5-1807">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if the input sequence contains no matching element.</span></span> <span data-ttu-id="62df5-1808">Pour retourner à la place `null` lorsque aucun élément correspondant est trouvé, utilisez <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1808">To instead return `null` when no matching element is found, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1809">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> pour sélectionner le seul élément d’un tableau qui remplit une condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-1809">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#81](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#81)]
 [!code-vb[System.Linq.Enumerable#81](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#81)]  
  
 <span data-ttu-id="62df5-1810">L’exemple de code suivant montre que <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> lève une exception lorsque la séquence ne contient pas exactement un élément qui satisfait la condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-1810">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#82](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#82)]
 [!code-vb[System.Linq.Enumerable#82](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1811">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1811">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1812">Aucun élément ne satisfait la condition dans <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1812">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="62df5-1813">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1813">-or-</span>
          </span>
          <span data-ttu-id="62df5-1814">Plusieurs éléments satisfont à la condition dans <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1814">More than one element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="62df5-1815">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1815">-or-</span>
          </span>
          <span data-ttu-id="62df5-1816">La séquence source est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1816">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SingleOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1817">Retourne un élément spécifique unique d'une séquence, ou une valeur par défaut si cet élément est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1817">Returns a single, specific element of a sequence, or a default value if that element is not found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1818">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1818">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1819">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> duquel retourner le seul élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1819">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1820">Retourne l'élément unique d'une séquence ou une valeur par défaut. Cette méthode lève une exception si cette séquence contient plusieurs éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1820">Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1821">L'élément unique de la séquence d'entrée ou <see langword="default" /> (<paramref name="TSource" />) si la séquence ne contient aucun élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1821">The single element of the input sequence, or <see langword="default" />(<paramref name="TSource" />) if the sequence contains no elements.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1822">La valeur par défaut pour les types référence et nullables est `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1822">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="62df5-1823">Le <xref:System.Linq.Enumerable.SingleOrDefault%2A> méthode ne fournit pas un moyen de spécifier une valeur par défaut.</span><span class="sxs-lookup"><span data-stu-id="62df5-1823">The <xref:System.Linq.Enumerable.SingleOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="62df5-1824">Si vous souhaitez spécifier une valeur par défaut autre que `default(TSource)`, utilisez le <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> méthode comme décrit dans la section exemple.</span><span class="sxs-lookup"><span data-stu-id="62df5-1824">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1825">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour sélectionner le seul élément d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="62df5-1825">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#83](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#83)]
 [!code-vb[System.Linq.Enumerable#83](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#83)]  
  
 <span data-ttu-id="62df5-1826">L’exemple de code suivant montre que <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> retourne une valeur par défaut lorsque la séquence ne contient pas exactement un élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1826">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns a default value when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#84](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#84)]
 [!code-vb[System.Linq.Enumerable#84](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#84)]  
  
 <span data-ttu-id="62df5-1827">Parfois, la valeur de `default(TSource)` n’est pas la valeur par défaut que vous souhaitez utiliser si la collection ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1827">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="62df5-1828">Au lieu de vérifier le résultat de la valeur par défaut indésirables, puis de la modifier si nécessaire, vous pouvez utiliser la <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> méthode pour spécifier la valeur par défaut que vous souhaitez utiliser si la collection est vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-1828">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="62df5-1829">Ensuite, appelez <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour obtenir l’élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1829">Then, call <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the element.</span></span> <span data-ttu-id="62df5-1830">L’exemple de code suivant utilise ces deux techniques pour obtenir une valeur par défaut de 1 si une collection de numéros de page est vide.</span><span class="sxs-lookup"><span data-stu-id="62df5-1830">The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</span></span> <span data-ttu-id="62df5-1831">Étant donné que la valeur par défaut pour un entier est 0, ce qui n’est pas généralement un numéro de page valide, la valeur par défaut doit être spécifiée comme 1.</span><span class="sxs-lookup"><span data-stu-id="62df5-1831">Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="62df5-1832">La première variable de résultat est vérifiée pour la valeur par défaut indésirables après l’exécution est terminée pour la requête.</span><span class="sxs-lookup"><span data-stu-id="62df5-1832">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="62df5-1833">La deuxième variable de résultat est obtenue à l’aide de <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> pour spécifier une valeur par défaut de 1.</span><span class="sxs-lookup"><span data-stu-id="62df5-1833">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#128](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#128)]
 [!code-vb[System.Linq.Enumerable#128](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#128)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1834">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1834">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1835">La séquence d'entrée contient plusieurs éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1835">The input sequence contains more than one element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1836">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1836">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1837">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> duquel retourner un seul élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1837">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-1838">Fonction permettant de tester un élément pour une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1838">A function to test an element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1839">Retourne l’élément unique d’une séquence ou une valeur par défaut si cette séquence ne contient pas d’élément respectant cette condition. Cette méthode lève une exception si cette séquence contient plusieurs éléments satisfaisant à cette condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1839">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1840">Seul élément de la séquence d'entrée à satisfaire à la condition ou <see langword="default" /> (<paramref name="TSource" />) si cet élément n'est pas trouvé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1840">The single element of the input sequence that satisfies the condition, or <see langword="default" />(<paramref name="TSource" />) if no such element is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1841">La valeur par défaut pour les types référence et nullables est `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1841">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1842">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> pour sélectionner le seul élément d’un tableau qui remplit une condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-1842">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#85](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#85)]
 [!code-vb[System.Linq.Enumerable#85](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#85)]  
  
 <span data-ttu-id="62df5-1843">L’exemple de code suivant montre que <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> retourne une valeur par défaut lorsque la séquence ne contient pas exactement un élément qui satisfait la condition.</span><span class="sxs-lookup"><span data-stu-id="62df5-1843">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#86](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#86)]
 [!code-vb[System.Linq.Enumerable#86](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1844">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1844">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="62df5-1845">Plusieurs éléments satisfont à la condition dans <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1845">More than one element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Skip&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Skip(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Skip : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Skip (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1846">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1846">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1847">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel retourner les éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1847">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="62df5-1848">Nombre d'éléments à ignorer avant de retourner les éléments restants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1848">The number of elements to skip before returning the remaining elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1849">Ignore un nombre spécifié d'éléments dans une séquence puis retourne les éléments restants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1849">Bypasses a specified number of elements in a sequence and then returns the remaining elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1850">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments se trouvant après l'index spécifié dans la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1850">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1851">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1851">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1852">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1852">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1853">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1853">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1854">Si `source` contient moins de `count` éléments, vide <xref:System.Collections.Generic.IEnumerable%601> est retourné.</span><span class="sxs-lookup"><span data-stu-id="62df5-1854">If `source` contains fewer than `count` elements, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span> <span data-ttu-id="62df5-1855">Si `count` est inférieure ou égale à zéro, tous les éléments de `source` sont rapportés.</span><span class="sxs-lookup"><span data-stu-id="62df5-1855">If `count` is less than or equal to zero, all elements of `source` are yielded.</span></span>  
  
 <span data-ttu-id="62df5-1856">Le <xref:System.Linq.Enumerable.Take%2A> et <xref:System.Linq.Enumerable.Skip%2A> méthodes sont des compléments fonctionnels.</span><span class="sxs-lookup"><span data-stu-id="62df5-1856">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="62df5-1857">Étant donné une séquence `coll` et un entier `n`, en concaténant les résultats de `coll.Take(n)` et `coll.Skip(n)` génère la même séquence que `coll`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1857">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="62df5-1858">Dans la syntaxe d’expression de requête Visual Basic, un `Skip` clause se traduit par un appel à <xref:System.Linq.Enumerable.Skip%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1858">In Visual Basic query expression syntax, a `Skip` clause translates to an invocation of <xref:System.Linq.Enumerable.Skip%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1859">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Skip%2A> pour ignorer un nombre spécifié d’éléments dans un tableau trié et retourner les éléments restants.</span><span class="sxs-lookup"><span data-stu-id="62df5-1859">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Skip%2A> to skip a specified number of elements in a sorted array and return the remaining elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#87](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#87)]
 [!code-vb[System.Linq.Enumerable#87](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1860">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1860">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f00eb172-3907-4c43-9745-d8546ab86234">
          <span data-ttu-id="62df5-1861">Skip, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1861">Skip Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SkipLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member SkipLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SkipWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1862">Ignore des éléments dans une séquence tant que la condition spécifiée a la valeur true, puis retourne les éléments restants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1862">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1863">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1863">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1864">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel retourner les éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1864">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-1865">Fonction permettant de tester chaque élément par rapport à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1865">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1866">Ignore des éléments dans une séquence tant que la condition spécifiée a la valeur true, puis retourne les éléments restants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1866">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1867">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments de la séquence d'entrée, à partir du premier élément de la série linéaire à ne pas réussir le test spécifié par <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1867">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1868">Le <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1868">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1869">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1869">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1870">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1870">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1871">Cette méthode teste chaque élément de `source` à l’aide de `predicate` et ignore l’élément si le résultat est `true`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1871">This method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="62df5-1872">Une fois que la fonction de prédicat retourne `false` pour un élément, cet élément et les éléments restants dans `source` sont rapportés et il les appels de `predicate`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1872">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="62df5-1873">Si `predicate` retourne `true` pour tous les éléments de la séquence vide <xref:System.Collections.Generic.IEnumerable%601> est retourné.</span><span class="sxs-lookup"><span data-stu-id="62df5-1873">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="62df5-1874">Le <xref:System.Linq.Enumerable.TakeWhile%2A> et <xref:System.Linq.Enumerable.SkipWhile%2A> méthodes sont des compléments fonctionnels.</span><span class="sxs-lookup"><span data-stu-id="62df5-1874">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="62df5-1875">Étant donné une séquence `coll` et une fonction pure `p`, en concaténant les résultats de `coll.TakeWhile(p)` et `coll.SkipWhile(p)` génère la même séquence que `coll`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1875">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="62df5-1876">Dans la syntaxe d’expression de requête Visual Basic, un `Skip While` clause se traduit par un appel à <xref:System.Linq.Enumerable.SkipWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1876">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1877">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> pour ignorer des éléments d’un tableau tant qu’une condition est vraie.</span><span class="sxs-lookup"><span data-stu-id="62df5-1877">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#88](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#88)]
 [!code-vb[System.Linq.Enumerable#88](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1878">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1878">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/5dee8350-7520-4f1a-b00d-590cacd572d6">
          <span data-ttu-id="62df5-1879">Skip While, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1879">Skip While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1880">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1880">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1881">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel retourner les éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1881">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-1882">Fonction permettant de tester chaque élément source pour une condition ; le deuxième paramètre de la fonction représente l'index de l'élément source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1882">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1883">Ignore des éléments dans une séquence tant que la condition spécifiée a la valeur true, puis retourne les éléments restants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1883">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
          <span data-ttu-id="62df5-1884">L’index de l’élément est utilisé dans la logique de la fonction de prédicat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1884">The element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1885">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments de la séquence d'entrée, à partir du premier élément de la série linéaire à ne pas réussir le test spécifié par <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1885">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1886">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-1886">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-1887">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-1887">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-1888">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-1888">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-1889">Le <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> méthode teste chaque élément de `source` à l’aide de `predicate` et ignore l’élément si le résultat est `true`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1889">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="62df5-1890">Une fois que la fonction de prédicat retourne `false` pour un élément, cet élément et les éléments restants dans `source` sont rapportés et il les appels de `predicate`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1890">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="62df5-1891">Si `predicate` retourne `true` pour tous les éléments de la séquence vide <xref:System.Collections.Generic.IEnumerable%601> est retourné.</span><span class="sxs-lookup"><span data-stu-id="62df5-1891">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="62df5-1892">Le premier argument de `predicate` représente l’élément à tester.</span><span class="sxs-lookup"><span data-stu-id="62df5-1892">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="62df5-1893">Le deuxième argument représente l’index de base zéro de l’élément dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1893">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="62df5-1894">Le <xref:System.Linq.Enumerable.TakeWhile%2A> et <xref:System.Linq.Enumerable.SkipWhile%2A> méthodes sont des compléments fonctionnels.</span><span class="sxs-lookup"><span data-stu-id="62df5-1894">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="62df5-1895">Étant donné une séquence `coll` et une fonction pure `p`, en concaténant les résultats de `coll.TakeWhile(p)` et `coll.SkipWhile(p)` génère la même séquence que `coll`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1895">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="62df5-1896">Dans la syntaxe d’expression de requête Visual Basic, un `Skip While` clause se traduit par un appel à <xref:System.Linq.Enumerable.SkipWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1896">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1897">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> pour ignorer des éléments d’un tableau tant qu’une condition qui varie selon l’index de l’élément a la valeur true.</span><span class="sxs-lookup"><span data-stu-id="62df5-1897">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition that depends on the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#89](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#89)]
 [!code-vb[System.Linq.Enumerable#89](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1898">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1898">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/5dee8350-7520-4f1a-b00d-590cacd572d6">
          <span data-ttu-id="62df5-1899">Skip While, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1899">Skip While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sum">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-1900">Calcule la somme d'une séquence de valeurs numériques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1900">Computes the sum of a sequence of numeric values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static decimal Sum (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1901">Séquence de valeurs <see cref="T:System.Decimal" /> dont la somme doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1901">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1902">Calcule la somme d'une séquence de valeurs <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1902">Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1903">Somme des valeurs de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1903">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1904">Le <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1904">The <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-1905">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1905">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1906">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> pour additionner les valeurs d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1906">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1907">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1907">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-1908">La somme est supérieure à <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1908">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1909">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1909">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static double Sum (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1910">Séquence de valeurs <see cref="T:System.Double" /> dont la somme doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1910">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1911">Calcule la somme d'une séquence de valeurs <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1911">Computes the sum of a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1912">Somme des valeurs de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1912">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1913">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1913">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-1914">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1914">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1915">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> pour additionner les valeurs d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1915">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1916">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1916">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1917">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1917">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static int Sum (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1918">Séquence de valeurs <see cref="T:System.Int32" /> dont la somme doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1918">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1919">Calcule la somme d'une séquence de valeurs <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1919">Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1920">Somme des valeurs de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1920">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1921">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1921">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-1922">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1922">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1923">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> pour additionner les valeurs d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1923">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1924">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1924">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-1925">La somme est supérieure à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1925">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1926">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1926">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static long Sum (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1927">Séquence de valeurs <see cref="T:System.Int64" /> dont la somme doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1927">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1928">Calcule la somme d'une séquence de valeurs <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1928">Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1929">Somme des valeurs de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1929">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1930">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1930">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-1931">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1931">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1932">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> pour additionner les valeurs d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1932">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1933">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1933">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-1934">La somme est supérieure à <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1934">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1935">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1935">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1936">Séquence de valeurs <see cref="T:System.Decimal" /> nullables dont la somme doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1936">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1937">Calcule la somme d'une séquence de valeurs <see cref="T:System.Decimal" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1937">Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1938">Somme des valeurs de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1938">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1939">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1939">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-1940">Le résultat n’incluent des valeurs qui sont `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1940">The result doesnot include values that are `null`.</span></span>  
  
 <span data-ttu-id="62df5-1941">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1941">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1942">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> pour additionner les valeurs d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1942">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1943">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1943">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-1944">La somme est supérieure à <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1944">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1945">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1945">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1946">Séquence de valeurs <see cref="T:System.Double" /> nullables dont la somme doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1946">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1947">Calcule la somme d'une séquence de valeurs <see cref="T:System.Double" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1947">Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1948">Somme des valeurs de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1948">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1949">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1949">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-1950">Le résultat n’inclut pas les valeurs qui sont `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1950">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="62df5-1951">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1951">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1952">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> pour additionner les valeurs d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1952">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1953">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1953">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1954">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1954">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1955">Séquence de valeurs <see cref="T:System.Int32" /> nullables dont la somme doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1955">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1956">Calcule la somme d'une séquence de valeurs <see cref="T:System.Int32" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1956">Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1957">Somme des valeurs de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1957">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1958">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1958">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-1959">Le résultat n’inclut pas les valeurs qui sont `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1959">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="62df5-1960">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1960">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1961">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> pour additionner les valeurs d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1961">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1962">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1962">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-1963">La somme est supérieure à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1963">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1964">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1964">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1965">Séquence de valeurs <see cref="T:System.Int64" /> nullables dont la somme doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1965">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1966">Calcule la somme d'une séquence de valeurs <see cref="T:System.Int64" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1966">Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1967">Somme des valeurs de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1967">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1968">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1968">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-1969">Le résultat n’inclut pas les valeurs qui sont `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1969">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="62df5-1970">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1970">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1971">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> pour additionner les valeurs d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1971">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1972">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1972">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-1973">La somme est supérieure à <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1973">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1974">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1974">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1975">Séquence de valeurs <see cref="T:System.Single" /> nullables dont la somme doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1975">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1976">Calcule la somme d'une séquence de valeurs <see cref="T:System.Single" /> nullables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1976">Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1977">Somme des valeurs de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1977">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1978">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1978">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-1979">Le résultat n’inclut pas les valeurs qui sont `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-1979">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="62df5-1980">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1980">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1981">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> pour additionner les valeurs d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1981">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1982">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1982">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1983">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1983">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static float Sum (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="62df5-1984">Séquence de valeurs <see cref="T:System.Single" /> dont la somme doit être calculée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1984">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1985">Calcule la somme d'une séquence de valeurs <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1985">Computes the sum of a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1986">Somme des valeurs de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1986">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1987">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1987">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-1988">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1988">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-1989">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> pour additionner les valeurs d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-1989">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-1990">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1990">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-1991">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1991">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-1992">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1992">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-1993">Séquence de valeurs utilisées pour calculer une somme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1993">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-1994">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1994">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-1995">Calcule la somme d'une séquence de valeurs <see cref="T:System.Decimal" /> obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1995">Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-1996">Somme des valeurs projetées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-1996">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-1997">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-1997">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-1998">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1998">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="62df5-1999">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-1999">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2000">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> pour additionner les valeurs projetées d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2000">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2001">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2001">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-2002">La somme est supérieure à <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2002">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-2003">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2003">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2004">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2004">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2005">Séquence de valeurs utilisées pour calculer une somme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2005">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-2006">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2006">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2007">Calcule la somme d'une séquence de valeurs <see cref="T:System.Double" /> obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2007">Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2008">Somme des valeurs projetées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2008">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2009">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-2009">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-2010">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2010">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="62df5-2011">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2011">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2012">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> pour additionner les valeurs projetées d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2012">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2013">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2013">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-2014">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2014">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2015">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2015">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2016">Séquence de valeurs utilisées pour calculer une somme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2016">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-2017">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2017">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2018">Calcule la somme d'une séquence de valeurs <see cref="T:System.Int32" /> obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2018">Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2019">Somme des valeurs projetées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2019">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2020">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-2020">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-2021">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2021">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="62df5-2022">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2022">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2023">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> pour additionner les valeurs projetées d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2023">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2024">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2024">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-2025">La somme est supérieure à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2025">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-2026">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2026">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2027">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2027">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2028">Séquence de valeurs utilisées pour calculer une somme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2028">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-2029">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2029">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2030">Calcule la somme d'une séquence de valeurs <see cref="T:System.Int64" /> obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2030">Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2031">Somme des valeurs projetées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2031">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2032">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-2032">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-2033">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2033">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="62df5-2034">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2034">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2035">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> pour additionner les valeurs projetées d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2035">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2036">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2036">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-2037">La somme est supérieure à <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2037">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-2038">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2038">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2039">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2039">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2040">Séquence de valeurs utilisées pour calculer une somme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2040">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-2041">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2041">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2042">Calcule la somme d'une séquence de valeurs <see cref="T:System.Decimal" /> nullables obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2042">Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2043">Somme des valeurs projetées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2043">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2044">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-2044">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-2045">Le résultat n’inclut pas les valeurs qui sont `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2045">The result does not included values that are `null`.</span></span>  
  
 <span data-ttu-id="62df5-2046">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Decimal>` en c# ou `Nullable(Of Decimal)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2046">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2047">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2047">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2048">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> pour additionner les valeurs projetées d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2048">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2049">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2049">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-2050">La somme est supérieure à <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2050">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-2051">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2051">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2052">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2052">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2053">Séquence de valeurs utilisées pour calculer une somme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2053">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-2054">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2054">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2055">Calcule la somme d'une séquence de valeurs <see cref="T:System.Double" /> nullables obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2055">Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2056">Somme des valeurs projetées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2056">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2057">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-2057">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-2058">Le résultat n’inclut pas les valeurs qui sont `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2058">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="62df5-2059">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Double>` en c# ou `Nullable(Of Double)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2059">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2060">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2060">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2061">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> pour additionner les valeurs projetées d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2061">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2062">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2062">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-2063">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2063">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2064">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2064">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2065">Séquence de valeurs utilisées pour calculer une somme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2065">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-2066">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2066">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2067">Calcule la somme d'une séquence de valeurs <see cref="T:System.Int32" /> nullables obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2067">Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2068">Somme des valeurs projetées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2068">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2069">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-2069">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-2070">Le résultat n’inclut pas les valeurs qui sont `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2070">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="62df5-2071">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Int32>` en c# ou `Nullable(Of Int32)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2071">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2072">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2072">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2073">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> pour additionner les valeurs projetées d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2073">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2074">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2074">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-2075">La somme est supérieure à <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2075">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-2076">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2076">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2077">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2077">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2078">Séquence de valeurs utilisées pour calculer une somme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2078">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-2079">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2079">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2080">Calcule la somme d'une séquence de valeurs <see cref="T:System.Int64" /> nullables obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2080">Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2081">Somme des valeurs projetées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2081">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2082">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-2082">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-2083">Le résultat n’inclut pas les valeurs qui sont `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2083">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="62df5-2084">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Int64>` en c# ou `Nullable(Of Int64)` en Visual Basic</span><span class="sxs-lookup"><span data-stu-id="62df5-2084">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic</span></span>  
  
 <span data-ttu-id="62df5-2085">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2085">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2086">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> pour additionner les valeurs projetées d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2086">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2087">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2087">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="62df5-2088">La somme est supérieure à <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2088">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-2089">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2089">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2090">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2090">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2091">Séquence de valeurs utilisées pour calculer une somme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2091">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-2092">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2092">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2093">Calcule la somme d'une séquence de valeurs <see cref="T:System.Single" /> nullables obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2093">Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2094">Somme des valeurs projetées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2094">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2095">Cette méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-2095">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-2096">Le résultat n’inclut pas les valeurs qui sont `null`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2096">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="62df5-2097">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier `Nullable<Single>` en c# ou `Nullable(Of Single)` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2097">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2098">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2098">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2099">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> pour additionner les valeurs projetées d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2099">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2100">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2100">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-2101">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2101">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2102">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2102">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2103">Séquence de valeurs utilisées pour calculer une somme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2103">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="62df5-2104">Fonction de transformation à appliquer à chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2104">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2105">Calcule la somme d'une séquence de valeurs <see cref="T:System.Single" /> obtenues en appelant une fonction de transformation sur chaque élément de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2105">Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2106">Somme des valeurs projetées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2106">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2107">Le <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> méthode retourne zéro si `source` ne contient aucun élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-2107">The <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="62df5-2108">Vous pouvez appliquer cette méthode à une séquence de valeurs arbitraires si vous fournissez une fonction, `selector`, qui projette les membres de `source` dans un type numérique, en particulier <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2108">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="62df5-2109">Dans la syntaxe d’expression de requête Visual Basic, un `Aggregate Into Sum()` clause se traduit par un appel à <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2109">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2110">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> pour additionner les valeurs projetées d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2110">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2111">
            <paramref name="source" /> ou <paramref name="selector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2111">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="62df5-2112">Aggregate, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2112">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Take(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Take : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Take (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2113">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2113">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2114">Séquence à partir de laquelle retourner les éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2114">The sequence to return elements from.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="62df5-2115">Nombre d'éléments à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2115">The number of elements to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2116">Retourne un nombre spécifié d'éléments contigus à partir du début d'une séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2116">Returns a specified number of contiguous elements from the start of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2117">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient le nombre spécifié d'éléments à partir du début de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2117">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2118">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2118">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2119">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2119">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2120">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2120">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2121"><xref:System.Linq.Enumerable.Take%2A> énumère les `source` et retourne les éléments jusqu'à ce que `count` éléments aient été retournés ou `source` ne contient aucun élément plus.</span><span class="sxs-lookup"><span data-stu-id="62df5-2121"><xref:System.Linq.Enumerable.Take%2A> enumerates `source` and yields elements until `count` elements have been yielded or `source` contains no more elements.</span></span> <span data-ttu-id="62df5-2122">Si `count` dépasse le nombre d’éléments dans `source`, tous les éléments de `source` sont retournées.</span><span class="sxs-lookup"><span data-stu-id="62df5-2122">If `count` exceeds the number of elements in `source`, all elements of `source` are returned.</span></span>  
  
 <span data-ttu-id="62df5-2123">Si `count` est inférieure ou égale à zéro, `source` est énumérée et une erreur <xref:System.Collections.Generic.IEnumerable%601> est retournée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2123">If `count` is less than or equal to zero, `source` is not enumerated and an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="62df5-2124">Le <xref:System.Linq.Enumerable.Take%2A> et <xref:System.Linq.Enumerable.Skip%2A> méthodes sont des compléments fonctionnels.</span><span class="sxs-lookup"><span data-stu-id="62df5-2124">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="62df5-2125">Étant donné une séquence `coll` et un entier `n`, en concaténant les résultats de `coll.Take(n)` et `coll.Skip(n)` génère la même séquence que `coll`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2125">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="62df5-2126">Dans la syntaxe d’expression de requête Visual Basic, un `Take` clause se traduit par un appel à <xref:System.Linq.Enumerable.Take%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2126">In Visual Basic query expression syntax, a `Take` clause translates to an invocation of <xref:System.Linq.Enumerable.Take%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2127">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Take%2A> pour retourner des éléments à partir du début d’une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2127">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Take%2A> to return elements from the start of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#99](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#99)]
 [!code-vb[System.Linq.Enumerable#99](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2128">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2128">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/77bf87b2-1476-4456-957f-fee922fbad8c">
          <span data-ttu-id="62df5-2129">Take, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2129">Take Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TakeLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member TakeLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TakeWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-2130">Retourne des éléments d'une séquence tant que la condition spécifiée a la valeur true, puis ignore les éléments restants.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2130">Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2131">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2131">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2132">Séquence à partir de laquelle retourner les éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2132">A sequence to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-2133">Fonction permettant de tester chaque élément par rapport à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2133">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2134">Retourne des éléments d'une séquence tant que la condition spécifiée a la valeur true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2134">Returns elements from a sequence as long as a specified condition is true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2135">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments de la séquence d'entrée se trouvant avant l'élément à partir duquel le test échoue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2135">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2136">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2136">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2137">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2137">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2138">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2138">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2139">Le <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> méthode teste chaque élément de `source` à l’aide de `predicate` et retourne l’élément si le résultat est `true`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2139">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="62df5-2140">Énumération s’arrête lorsque la fonction de prédicat retourne `false` pour un élément ou lorsque `source` ne contient aucun élément plus.</span><span class="sxs-lookup"><span data-stu-id="62df5-2140">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="62df5-2141">Le <xref:System.Linq.Enumerable.TakeWhile%2A> et <xref:System.Linq.Enumerable.SkipWhile%2A> méthodes sont des compléments fonctionnels.</span><span class="sxs-lookup"><span data-stu-id="62df5-2141">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="62df5-2142">Étant donné une séquence `coll` et une fonction pure `p`, en concaténant les résultats de `coll.TakeWhile(p)` et `coll.SkipWhile(p)` génère la même séquence que `coll`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2142">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="62df5-2143">Dans la syntaxe d’expression de requête Visual Basic, un `Take While` clause se traduit par un appel à <xref:System.Linq.Enumerable.TakeWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2143">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2144">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> pour retourner des éléments à partir du début d’une séquence tant qu’une condition est vraie.</span><span class="sxs-lookup"><span data-stu-id="62df5-2144">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#100](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#100)]
 [!code-vb[System.Linq.Enumerable#100](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2145">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2145">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db8f9f2f-fc9f-4a6c-b0b8-1bf048147e11">
          <span data-ttu-id="62df5-2146">Take While, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2146">Take While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2147">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2147">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2148">Séquence à partir de laquelle retourner les éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2148">The sequence to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-2149">Fonction permettant de tester chaque élément source pour une condition ; le deuxième paramètre de la fonction représente l'index de l'élément source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2149">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2150">Retourne des éléments d'une séquence tant que la condition spécifiée a la valeur true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2150">Returns elements from a sequence as long as a specified condition is true.</span>
          </span>
          <span data-ttu-id="62df5-2151">L’index de l’élément est utilisé dans la logique de la fonction de prédicat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2151">The element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2152">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments de la séquence d'entrée se trouvant avant l'élément à partir duquel le test échoue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2152">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2153">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2153">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2154">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2154">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2155">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2155">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2156">Le <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> méthode teste chaque élément de `source` à l’aide de `predicate` et retourne l’élément si le résultat est `true`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2156">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="62df5-2157">Énumération s’arrête lorsque la fonction de prédicat retourne `false` pour un élément ou lorsque `source` ne contient aucun élément plus.</span><span class="sxs-lookup"><span data-stu-id="62df5-2157">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="62df5-2158">Le premier argument de `predicate` représente l’élément à tester.</span><span class="sxs-lookup"><span data-stu-id="62df5-2158">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="62df5-2159">Le deuxième argument représente l’index de base zéro de l’élément dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2159">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="62df5-2160">Le <xref:System.Linq.Enumerable.TakeWhile%2A> et <xref:System.Linq.Enumerable.SkipWhile%2A> méthodes sont des compléments fonctionnels.</span><span class="sxs-lookup"><span data-stu-id="62df5-2160">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="62df5-2161">Étant donné une séquence `coll` et une fonction pure `p`, en concaténant les résultats de `coll.TakeWhile(p)` et `coll.SkipWhile(p)` génère la même séquence que `coll`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2161">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="62df5-2162">Dans la syntaxe d’expression de requête Visual Basic, un `Take While` clause se traduit par un appel à <xref:System.Linq.Enumerable.TakeWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2162">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2163">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> pour retourner des éléments à partir du début d’une séquence tant qu’une condition qui utilise l’index de l’élément a la valeur true.</span><span class="sxs-lookup"><span data-stu-id="62df5-2163">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#101](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#101)]
 [!code-vb[System.Linq.Enumerable#101](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2164">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2164">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db8f9f2f-fc9f-4a6c-b0b8-1bf048147e11">
          <span data-ttu-id="62df5-2165">Take While, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2165">Take While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-2166">Réalise un classement des éléments d'une séquence dans l'ordre croissant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2166">Performs a subsequent ordering of the elements in a sequence in ascending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2167">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2167">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2168">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2168">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2169">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> qui contient les éléments à trier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2169">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2170">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2170">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2171">Réalise un classement des éléments d'une séquence dans l'ordre croissant selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2171">Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2172">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> dont les éléments sont triés selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2172">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2173">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2173">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2174">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2174">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2175">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2175">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2176">Pour commander une séquence par les valeurs des éléments eux-mêmes, spécifiez la fonction identity (`x => x` en Visual c# ou `Function(x) x` en Visual Basic) pour `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2176">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="62df5-2177"><xref:System.Linq.Enumerable.ThenBy%2A> et <xref:System.Linq.Enumerable.ThenByDescending%2A> sont définies pour étendre le type <xref:System.Linq.IOrderedEnumerable%601>, qui est également le type de retour de ces méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-2177"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="62df5-2178">Cette conception vous permet de spécifier plusieurs critères de tri en appliquant un nombre quelconque de <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-2178">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-2179">Étant donné que <xref:System.Linq.IOrderedEnumerable%601> hérite <xref:System.Collections.Generic.IEnumerable%601>, vous pouvez appeler <xref:System.Linq.Enumerable.OrderBy%2A> ou <xref:System.Linq.Enumerable.OrderByDescending%2A> sur les résultats d’un appel à <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2179">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="62df5-2180">Cela introduit un nouveau classement principal qui ignore l’ordre établi précédemment.</span><span class="sxs-lookup"><span data-stu-id="62df5-2180">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="62df5-2181">Cette méthode compare les clés à l’aide du comparateur par défaut <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2181">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="62df5-2182">Cette méthode effectue un tri stable. Autrement dit, si les clés de deux éléments sont égaux, l’ordre des éléments est conservé.</span><span class="sxs-lookup"><span data-stu-id="62df5-2182">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="62df5-2183">En revanche, un tri instable ne conserve pas l’ordre des éléments qui ont la même clé.</span><span class="sxs-lookup"><span data-stu-id="62df5-2183">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="62df5-2184">Dans la syntaxe d’expression de requête, un `orderby [first criterion], [second criterion]` (Visual c#) ou `Order By [first criterion], [second criterion]` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.ThenBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2184">In query expression syntax, an `orderby [first criterion], [second criterion]` (Visual C#) or `Order By [first criterion], [second criterion]` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.ThenBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2185">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> pour effectuer un classement secondaire des éléments dans une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2185">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to perform a secondary ordering of the elements in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#102](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#102)]
 [!code-vb[System.Linq.Enumerable#102](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2186">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2186">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="62df5-2187">orderby, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2187">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="62df5-2188">Order By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2188">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2189">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2189">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2190">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2190">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2191">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> qui contient les éléments à trier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2191">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2192">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2192">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-2193">
            <see cref="T:System.Collections.Generic.IComparer`1" /> pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2193">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2194">Réalise un classement des éléments d'une séquence dans l'ordre croissant à l'aide d'un comparateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2194">Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2195">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> dont les éléments sont triés selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2195">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2196">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2196">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2197">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2197">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2198">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2198">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2199">Pour commander une séquence par les valeurs des éléments eux-mêmes, spécifiez la fonction identity (`x => x` en Visual c# ou `Function(x) x` en Visual Basic) pour `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2199">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="62df5-2200"><xref:System.Linq.Enumerable.ThenBy%2A> et <xref:System.Linq.Enumerable.ThenByDescending%2A> sont définies pour étendre le type <xref:System.Linq.IOrderedEnumerable%601>, qui est également le type de retour de ces méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-2200"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="62df5-2201">Cette conception vous permet de spécifier plusieurs critères de tri en appliquant un nombre quelconque de <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-2201">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-2202">Étant donné que <xref:System.Linq.IOrderedEnumerable%601> hérite <xref:System.Collections.Generic.IEnumerable%601>, vous pouvez appeler <xref:System.Linq.Enumerable.OrderBy%2A> ou <xref:System.Linq.Enumerable.OrderByDescending%2A> sur les résultats d’un appel à <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2202">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="62df5-2203">Cela introduit un nouveau classement principal qui ignore l’ordre établi précédemment.</span><span class="sxs-lookup"><span data-stu-id="62df5-2203">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="62df5-2204">Si `comparer` est `null`, le comparateur par défaut <xref:System.Collections.Generic.Comparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-2204">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="62df5-2205">Cette méthode effectue un tri stable. Autrement dit, si les clés de deux éléments sont égaux, l’ordre des éléments est conservé.</span><span class="sxs-lookup"><span data-stu-id="62df5-2205">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="62df5-2206">En revanche, un tri instable ne conserve pas l’ordre des éléments qui ont la même clé.</span><span class="sxs-lookup"><span data-stu-id="62df5-2206">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2207">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2207">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-2208">Réalise un classement des éléments d'une séquence dans l'ordre décroissant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2208">Performs a subsequent ordering of the elements in a sequence in descending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2209">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2209">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2210">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2210">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2211">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> qui contient les éléments à trier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2211">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2212">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2212">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2213">Réalise un classement des éléments d'une séquence dans l'ordre décroissant selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2213">Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2214">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> dont les éléments sont triés dans l'ordre décroissant selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2214">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2215">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2215">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2216">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2216">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2217">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2217">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2218">Pour commander une séquence par les valeurs des éléments eux-mêmes, spécifiez la fonction identity (`x => x` en Visual c# ou `Function(x) x` en Visual Basic) pour `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2218">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="62df5-2219"><xref:System.Linq.Enumerable.ThenBy%2A> et <xref:System.Linq.Enumerable.ThenByDescending%2A> sont définies pour étendre le type <xref:System.Linq.IOrderedEnumerable%601>, qui est également le type de retour de ces méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-2219"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="62df5-2220">Cette conception vous permet de spécifier plusieurs critères de tri en appliquant un nombre quelconque de <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-2220">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-2221">Étant donné que <xref:System.Linq.IOrderedEnumerable%601> hérite <xref:System.Collections.Generic.IEnumerable%601>, vous pouvez appeler <xref:System.Linq.Enumerable.OrderBy%2A> ou <xref:System.Linq.Enumerable.OrderByDescending%2A> sur les résultats d’un appel à <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2221">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="62df5-2222">Cela introduit un nouveau classement principal qui ignore l’ordre établi précédemment.</span><span class="sxs-lookup"><span data-stu-id="62df5-2222">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="62df5-2223">Cette méthode de tri compare les clés à l’aide du comparateur par défaut <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2223">This sorting method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="62df5-2224">Cette méthode effectue un tri stable. Autrement dit, si les clés de deux éléments sont égaux, l’ordre des éléments est conservé.</span><span class="sxs-lookup"><span data-stu-id="62df5-2224">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="62df5-2225">En revanche, un tri instable ne conserve pas l’ordre des éléments qui ont la même clé.</span><span class="sxs-lookup"><span data-stu-id="62df5-2225">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="62df5-2226">Dans Visual C# syntaxe d’expression de requête, un `orderby [first criterion], [second criterion] descending` clause se traduit par un appel à <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2226">In Visual C# query expression syntax, an `orderby [first criterion], [second criterion] descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 <span data-ttu-id="62df5-2227">Dans la syntaxe d’expression de requête Visual Basic, un `Order By [first criterion], [second criterion] Descending` clause se traduit par un appel à <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2227">In Visual Basic query expression syntax, an `Order By [first criterion], [second criterion] Descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2228">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2228">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="62df5-2229">orderby, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2229">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="62df5-2230">Order By, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2230">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2231">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2231">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2232">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2232">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2233">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> qui contient les éléments à trier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2233">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2234">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2234">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-2235">
            <see cref="T:System.Collections.Generic.IComparer`1" /> pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2235">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2236">Réalise un classement des éléments d'une séquence dans l'ordre décroissant à l'aide d'un comparateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2236">Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2237">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> dont les éléments sont triés dans l'ordre décroissant selon une clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2237">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2238">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2238">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2239">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2239">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2240">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2240">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2241">Pour commander une séquence par les valeurs des éléments eux-mêmes, spécifiez la fonction identity (`x => x` en Visual c# ou `Function(x) x` en Visual Basic) pour `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2241">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="62df5-2242"><xref:System.Linq.Enumerable.ThenBy%2A> et <xref:System.Linq.Enumerable.ThenByDescending%2A> sont définies pour étendre le type <xref:System.Linq.IOrderedEnumerable%601>, qui est également le type de retour de ces méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-2242"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="62df5-2243">Cette conception vous permet de spécifier plusieurs critères de tri en appliquant un nombre quelconque de <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-2243">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="62df5-2244">Étant donné que <xref:System.Linq.IOrderedEnumerable%601> hérite <xref:System.Collections.Generic.IEnumerable%601>, vous pouvez appeler <xref:System.Linq.Enumerable.OrderBy%2A> ou <xref:System.Linq.Enumerable.OrderByDescending%2A> sur les résultats d’un appel à <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> ou <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2244">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="62df5-2245">Cela introduit un nouveau classement principal qui ignore l’ordre établi précédemment.</span><span class="sxs-lookup"><span data-stu-id="62df5-2245">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="62df5-2246">Si `comparer` est `null`, le comparateur par défaut <xref:System.Collections.Generic.Comparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-2246">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="62df5-2247">Cette méthode effectue un tri stable. Autrement dit, si les clés de deux éléments sont égaux, l’ordre des éléments est conservé.</span><span class="sxs-lookup"><span data-stu-id="62df5-2247">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="62df5-2248">En revanche, un tri instable ne conserve pas l’ordre des éléments qui ont la même clé.</span><span class="sxs-lookup"><span data-stu-id="62df5-2248">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2249">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> pour effectuer un classement secondaire des éléments d’une séquence dans l’ordre décroissant à l’aide d’un comparateur personnalisé.</span><span class="sxs-lookup"><span data-stu-id="62df5-2249">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#103](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#103)]
 [!code-vb[System.Linq.Enumerable#103](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2250">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2250">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource[] ToArray&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource[] ToArray&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArray(Of TSource) (source As IEnumerable(Of TSource)) As TSource()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static cli::array &lt;TSource&gt; ^ ToArray(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToArray : seq&lt;'Source&gt; -&gt; 'Source[]" Usage="System.Linq.Enumerable.ToArray source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2251">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2251">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2252">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2252">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2253">Crée un tableau à partir de <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2253">Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2254">Tableau qui contient les éléments de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2254">An array that contains the elements from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2255">Le <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode force une évaluation immédiate de la requête et retourne un tableau qui contient les résultats de requête.</span><span class="sxs-lookup"><span data-stu-id="62df5-2255">The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results.</span></span> <span data-ttu-id="62df5-2256">Vous pouvez ajouter cette méthode à votre requête afin d’obtenir une copie mise en cache des résultats de requête.</span><span class="sxs-lookup"><span data-stu-id="62df5-2256">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="62df5-2257"><xref:System.Linq.Enumerable.ToList%2A> a un comportement similaire, mais retourne un <xref:System.Collections.Generic.List%601> plutôt qu’un tableau.</span><span class="sxs-lookup"><span data-stu-id="62df5-2257"><xref:System.Linq.Enumerable.ToList%2A> has similar behavior but returns a <xref:System.Collections.Generic.List%601> instead of an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2258">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.ToArray%2A> pour forcer une évaluation immédiate de la requête et retourner un tableau de résultats.</span><span class="sxs-lookup"><span data-stu-id="62df5-2258">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToArray%2A> to force immediate query evaluation and return an array of results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#104](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#104)]
 [!code-vb[System.Linq.Enumerable#104](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2259">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2259">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-2260">Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir d’un <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2260">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2261">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2261">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2262">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2262">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2263">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2263">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2264">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2264">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2265">Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir d'un <see cref="T:System.Collections.Generic.IEnumerable`1" /> selon une fonction de sélection de clé spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2265">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2266">
            <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des clés et des valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2266">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2267">Le <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> méthode utilise le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-2267">The <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2268">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> pour créer un <xref:System.Collections.Generic.Dictionary%602> à l’aide d’un sélecteur de clé.</span><span class="sxs-lookup"><span data-stu-id="62df5-2268">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to create a <xref:System.Collections.Generic.Dictionary%602> by using a key selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#105](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#105)]
 [!code-vb[System.Linq.Enumerable#105](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2269">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2269">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="62df5-2270">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2270">-or-</span>
          </span>
          <span data-ttu-id="62df5-2271">
            <paramref name="keySelector" /> produit une clé qui a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2271">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="62df5-2272">
            <paramref name="keySelector" /> produit des clés en double pour deux éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2272">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2273">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2273">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2274">Type des clés retournées par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2274">The type of the keys returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2275">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2275">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2276">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2276">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-2277">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2277">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2278">Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir de <see cref="T:System.Collections.Generic.IEnumerable`1" /> selon une fonction de sélection de clé spécifiée et un comparateur de clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2278">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2279">
            <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des clés et des valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2279">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2280">Si `comparer` est `null`, le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-2280">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2281">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2281">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="62df5-2282">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2282">-or-</span>
          </span>
          <span data-ttu-id="62df5-2283">
            <paramref name="keySelector" /> produit une clé qui a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2283">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="62df5-2284">
            <paramref name="keySelector" /> produit des clés en double pour deux éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2284">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2285">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2285">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2286">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2286">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="62df5-2287">Type de la valeur retournée par <paramref name="elementSelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2287">The type of the value returned by <paramref name="elementSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2288">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2288">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2289">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2289">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="62df5-2290">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2290">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2291">Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir de <see cref="T:System.Collections.Generic.IEnumerable`1" /> selon des fonctions de sélection de clé et de sélection d'élément spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2291">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2292">
            <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des valeurs de type <paramref name="TElement" /> sélectionnées dans la séquence d’entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2292">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2293">Le <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> méthode utilise le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-2293">The <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2294">
            <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2294">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="62df5-2295">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2295">-or-</span>
          </span>
          <span data-ttu-id="62df5-2296">
            <paramref name="keySelector" /> produit une clé qui a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2296">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="62df5-2297">
            <paramref name="keySelector" /> produit des clés en double pour deux éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2297">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2298">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2298">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2299">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2299">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="62df5-2300">Type de la valeur retournée par <paramref name="elementSelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2300">The type of the value returned by <paramref name="elementSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2301">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.Dictionary`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2301">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2302">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2302">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="62df5-2303">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2303">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-2304">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2304">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2305">Crée un <see cref="T:System.Collections.Generic.Dictionary`2" /> à partir de <see cref="T:System.Collections.Generic.IEnumerable`1" /> selon une fonction de sélection de clé spécifiée, un comparateur et une fonction de sélection d'élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2305">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2306">
            <see cref="T:System.Collections.Generic.Dictionary`2" /> qui contient des valeurs de type <paramref name="TElement" /> sélectionnées dans la séquence d’entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2306">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2307">Si `comparer` est `null`, le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-2307">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2308">
            <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2308">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="62df5-2309">- ou -</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2309">-or-</span>
          </span>
          <span data-ttu-id="62df5-2310">
            <paramref name="keySelector" /> produit une clé qui a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2310">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="62df5-2311">
            <paramref name="keySelector" /> produit des clés en double pour deux éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2311">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2312">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2312">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2313">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.HashSet`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2313">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2314">Crée un <see cref="T:System.Collections.Generic.HashSet`1" /> à partir d’un <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2314">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2315">
            <see cref="T:System.Collections.Generic.HashSet`1" /> qui contient des valeurs de type TSource sélectionnées dans la séquence d’entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2315">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type TSource selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2316">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2316">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2317">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.HashSet`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2317">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-2318">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2318">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2319">Crée un <see cref="T:System.Collections.Generic.HashSet`1" /> à partir d’un <see cref="T:System.Collections.Generic.IEnumerable`1" /> en utilisant <paramref name="comparer" /> pour comparer des clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2319">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> using the <paramref name="comparer" /> to compare keys</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2320">
            <see cref="T:System.Collections.Generic.HashSet`1" /> qui contient des valeurs de type <paramref name="TSource" /> sélectionnées dans la séquence d’entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2320">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type <paramref name="TSource" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToList&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;!!TSource&gt; ToList&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToList(Of TSource) (source As IEnumerable(Of TSource)) As List(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::List&lt;TSource&gt; ^ ToList(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToList : seq&lt;'Source&gt; -&gt; System.Collections.Generic.List&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToList source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2321">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2321">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2322">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un <see cref="T:System.Collections.Generic.List`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2322">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2323">Crée un <see cref="T:System.Collections.Generic.List`1" /> à partir d’un <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2323">Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2324">
            <see cref="T:System.Collections.Generic.List`1" /> qui contient les éléments de la séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2324">A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2325">Le <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode force une évaluation immédiate de la requête et retourne un <xref:System.Collections.Generic.List%601> qui contient les résultats de requête.</span><span class="sxs-lookup"><span data-stu-id="62df5-2325">The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span> <span data-ttu-id="62df5-2326">Vous pouvez ajouter cette méthode à votre requête afin d’obtenir une copie mise en cache des résultats de requête.</span><span class="sxs-lookup"><span data-stu-id="62df5-2326">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="62df5-2327"><xref:System.Linq.Enumerable.ToArray%2A> a un comportement similaire, mais retourne un tableau au lieu d’un <xref:System.Collections.Generic.List%601>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2327"><xref:System.Linq.Enumerable.ToArray%2A> has similar behavior but returns an array instead of a <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2328">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.ToList%2A> pour forcer une évaluation immédiate de la requête et retourner un <xref:System.Collections.Generic.List%601> qui contient les résultats de requête.</span><span class="sxs-lookup"><span data-stu-id="62df5-2328">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToList%2A> to force immediate query evaluation and return a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#106](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#106)]
 [!code-vb[System.Linq.Enumerable#106](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2329">
            <paramref name="source" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2329">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLookup&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-2330">Crée une <see cref="T:System.Linq.Lookup`2" /> générique à partir de <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2330">Creates a generic <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2331">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2331">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2332">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2332">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2333">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un <see cref="T:System.Linq.Lookup`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2333">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2334">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2334">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2335">Crée un <see cref="T:System.Linq.Lookup`2" /> à partir d'un <see cref="T:System.Collections.Generic.IEnumerable`1" /> selon une fonction de sélection de clé spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2335">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2336">
            <see cref="T:System.Linq.Lookup`2" /> qui contient des clés et des valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2336">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2337">Le <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> méthode retourne un <xref:System.Linq.Lookup%602>, un dictionnaire de type un-à-plusieurs qui mappe les clés à des collections de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-2337">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="62df5-2338">Un <xref:System.Linq.Lookup%602> diffère d’un <xref:System.Collections.Generic.Dictionary%602>, qui effectue un mappage de clés à des valeurs uniques.</span><span class="sxs-lookup"><span data-stu-id="62df5-2338">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="62df5-2339">Le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-2339">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2340">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2340">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2341">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2341">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2342">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2342">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2343">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un <see cref="T:System.Linq.Lookup`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2343">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2344">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2344">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-2345">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2345">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2346">Crée un <see cref="T:System.Linq.Lookup`2" /> à partir de <see cref="T:System.Collections.Generic.IEnumerable`1" /> selon une fonction de sélection de clé spécifiée et un comparateur de clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2346">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2347">
            <see cref="T:System.Linq.Lookup`2" /> qui contient des clés et des valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2347">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2348">Le <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> méthode retourne un <xref:System.Linq.Lookup%602>, un dictionnaire de type un-à-plusieurs qui mappe les clés à des collections de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-2348">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="62df5-2349">Un <xref:System.Linq.Lookup%602> est différent pour un <xref:System.Collections.Generic.Dictionary%602>, qui effectue un mappage de clés à des valeurs uniques.</span><span class="sxs-lookup"><span data-stu-id="62df5-2349">A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="62df5-2350">Si `comparer` est `null`, le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-2350">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2351">
            <paramref name="source" /> ou <paramref name="keySelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2351">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2352">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2352">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2353">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2353">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="62df5-2354">Type de la valeur retournée par <paramref name="elementSelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2354">The type of the value returned by <paramref name="elementSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2355">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un <see cref="T:System.Linq.Lookup`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2355">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2356">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2356">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="62df5-2357">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2357">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2358">Crée un <see cref="T:System.Linq.Lookup`2" /> à partir de <see cref="T:System.Collections.Generic.IEnumerable`1" /> selon des fonctions de sélection de clé et de sélection d'élément spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2358">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2359">
            <see cref="T:System.Linq.Lookup`2" /> qui contient des valeurs de type <paramref name="TElement" /> sélectionnées dans la séquence d’entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2359">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2360">Le <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> méthode retourne un <xref:System.Linq.Lookup%602>, un dictionnaire de type un-à-plusieurs qui mappe les clés à des collections de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-2360">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="62df5-2361">Un <xref:System.Linq.Lookup%602> diffère d’un <xref:System.Collections.Generic.Dictionary%602>, qui effectue un mappage de clés à des valeurs uniques.</span><span class="sxs-lookup"><span data-stu-id="62df5-2361">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="62df5-2362">Le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-2362">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2363">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> pour créer un <xref:System.Linq.Lookup%602> à l’aide d’une fonction de sélection de clé et une fonction de sélection d’élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-2363">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to create a <xref:System.Linq.Lookup%602> by using a key selector function and an element selector function.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#107](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#107)]
 [!code-vb[System.Linq.Enumerable#107](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2364">
            <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2364">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2365">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2365">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="62df5-2366">Type de clé retournée par <paramref name="keySelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2366">The type of the key returned by <paramref name="keySelector" />.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="62df5-2367">Type de la valeur retournée par <paramref name="elementSelector" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2367">The type of the value returned by <paramref name="elementSelector" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2368">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à partir duquel créer un <see cref="T:System.Linq.Lookup`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2368">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="62df5-2369">Fonction permettant d'extraire une clé de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2369">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="62df5-2370">Fonction de transformation permettant de produire une valeur d'élément de résultat à partir de chaque élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2370">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-2371">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2371">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2372">Crée une <see cref="T:System.Linq.Lookup`2" /> à partir de <see cref="T:System.Collections.Generic.IEnumerable`1" /> selon une fonction de sélection de clé spécifiée, un comparateur et une fonction de sélection d'élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2372">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2373">
            <see cref="T:System.Linq.Lookup`2" /> qui contient des valeurs de type <paramref name="TElement" /> sélectionnées dans la séquence d’entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2373">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2374">Le <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> méthode retourne un <xref:System.Linq.Lookup%602>, un dictionnaire de type un-à-plusieurs qui mappe les clés à des collections de valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-2374">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="62df5-2375">Un <xref:System.Linq.Lookup%602> diffère d’un <xref:System.Collections.Generic.Dictionary%602>, qui effectue un mappage de clés à des valeurs uniques.</span><span class="sxs-lookup"><span data-stu-id="62df5-2375">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="62df5-2376">Si `comparer` est `null`, le comparateur d’égalité par défaut <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> est utilisé pour comparer les clés.</span><span class="sxs-lookup"><span data-stu-id="62df5-2376">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2377">
            <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2377">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Union&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-2378">Produit l'union définie de deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2378">Produces the set union of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2379">Type des éléments des séquences d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2379">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="62df5-2380">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments distincts constituent le premier jeu de l'union.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2380">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="62df5-2381">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments distincts constituent le second jeu de l'union.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2381">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2382">Produit l'union de deux séquences à l'aide du comparateur d'égalité par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2382">Produces the set union of two sequences by using the default equality comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2383">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments des deux séquences d'entrée, à l'exception des éléments en double.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2383">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2384">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2384">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2385">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2385">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2386">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2386">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2387">Cette méthode exclut les doublons du jeu de retour.</span><span class="sxs-lookup"><span data-stu-id="62df5-2387">This method excludes duplicates from the return set.</span></span> <span data-ttu-id="62df5-2388">Ce comportement est différent de la <xref:System.Linq.Enumerable.Concat%2A> (méthode), qui retourne tous les éléments dans les séquences d’entrée, y compris les doublons.</span><span class="sxs-lookup"><span data-stu-id="62df5-2388">This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates.</span></span>  
  
 <span data-ttu-id="62df5-2389">Le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour comparer les valeurs des types qui implémentent le <xref:System.Collections.Generic.IEqualityComparer%601> interface générique.</span><span class="sxs-lookup"><span data-stu-id="62df5-2389">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="62df5-2390">Pour comparer un type de données personnalisé, vous devez implémenter cette interface et fournir votre propre <xref:System.Object.GetHashCode%2A> et <xref:System.Object.Equals%2A> méthodes pour le type.</span><span class="sxs-lookup"><span data-stu-id="62df5-2390">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="62df5-2391">Lorsque l’objet retourné par cette méthode est énuméré, <xref:System.Linq.Enumerable.Union%2A> énumère `first` et `second` dans cet ordre et retourne chaque élément qui n’a pas encore été retourné.</span><span class="sxs-lookup"><span data-stu-id="62df5-2391">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2392">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> pour obtenir l’union de deux séquences d’entiers.</span><span class="sxs-lookup"><span data-stu-id="62df5-2392">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the union of two sequences of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#109](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#109)]
 [!code-vb[System.Linq.Enumerable#109](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#109)]  
  
 <span data-ttu-id="62df5-2393">Si vous souhaitez comparer des séquences d’objets d’un type de données personnalisées, vous devrez implémenter le <xref:System.Collections.Generic.IEqualityComparer%601> interface générique dans un helperclass.</span><span class="sxs-lookup"><span data-stu-id="62df5-2393">If you want to compare sequences of objects of a custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helperclass.</span></span> <span data-ttu-id="62df5-2394">L’exemple de code suivant montre comment implémenter cette interface dans un type de données personnalisé et fournir <xref:System.Object.GetHashCode%2A> et <xref:System.Object.Equals%2A> méthodes.</span><span class="sxs-lookup"><span data-stu-id="62df5-2394">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="62df5-2395">Une fois que vous implémentez cette interface, vous pouvez utiliser des séquences de `ProductA` des objets dans le <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="62df5-2395">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  
[!code-csharp[CSLINQEncapsulatedComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#4)]
[!code-vb[CSLINQEncapsulatedComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2396">
            <paramref name="first" /> ou <paramref name="second" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2396">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2397">Type des éléments des séquences d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2397">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="62df5-2398">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments distincts constituent le premier jeu de l'union.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2398">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="62df5-2399">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> dont les éléments distincts constituent le second jeu de l'union.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2399">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="62df5-2400">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> pour comparer les valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2400">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2401">Produit l'union de deux séquences à l'aide d'un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2401">Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2402">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments des deux séquences d'entrée, à l'exception des éléments en double.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2402">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2403">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2403">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2404">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2404">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2405">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2405">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2406">Si `comparer` est `null`, le comparateur d’égalité par défaut, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, est utilisé pour comparer des valeurs.</span><span class="sxs-lookup"><span data-stu-id="62df5-2406">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
 <span data-ttu-id="62df5-2407">Lorsque l’objet retourné par cette méthode est énuméré, <xref:System.Linq.Enumerable.Union%2A> énumère `first` et `second` dans cet ordre et retourne chaque élément qui n’a pas encore été retourné.</span><span class="sxs-lookup"><span data-stu-id="62df5-2407">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
 <span data-ttu-id="62df5-2408">Le <xref:System.Linq.Enumerable.Concat%2A> diffère de la méthode la <xref:System.Linq.Enumerable.Union%2A> (méthode), car le <xref:System.Linq.Enumerable.Concat%2A> méthode retourne tous les éléments dans les séquences d’entrée, y compris les doublons, alors que <xref:System.Linq.Enumerable.Union%2A> retourne uniquement les valeurs uniques.</span><span class="sxs-lookup"><span data-stu-id="62df5-2408">The <xref:System.Linq.Enumerable.Concat%2A> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%2A> method returns all the elements in the input sequences including duplicates, whereas <xref:System.Linq.Enumerable.Union%2A> returns only unique values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2409">L’exemple suivant montre comment implémenter un comparateur d’égalité qui peut être utilisé dans le <xref:System.Linq.Enumerable.Union%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="62df5-2409">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Union%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="62df5-2410">Une fois que vous implémentez ce comparateur, vous pouvez utiliser des séquences de `Product` des objets dans le <xref:System.Linq.Enumerable.Union%2A> méthode, comme indiqué dans l’exemple suivant.</span><span class="sxs-lookup"><span data-stu-id="62df5-2410">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Union%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#4)]
[!code-vb[CSLINQCustomComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2411">
            <paramref name="first" /> ou <paramref name="second" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2411">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Where&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="62df5-2412">Filtre une séquence de valeurs selon un prédicat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2412">Filters a sequence of values based on a predicate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2413">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2413">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2414">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à filtrer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2414">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-2415">Fonction permettant de tester chaque élément par rapport à une condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2415">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2416">Filtre une séquence de valeurs selon un prédicat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2416">Filters a sequence of values based on a predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2417">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient des éléments de la séquence d'entrée satisfaisant à la condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2417">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2418">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2418">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2419">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2419">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2420">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2420">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2421">Dans la syntaxe d’expression de requête, un `where` (Visual c#) ou `Where` les clause (Visual Basic) se traduit par un appel à <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="62df5-2421">In query expression syntax, a `where` (Visual C#) or `Where` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2422">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> pour filtrer une séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2422">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to filter a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#110](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#110)]
 [!code-vb[System.Linq.Enumerable#110](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2423">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2423">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7f9bf952-7744-4f91-b676-cddb55d107c3">
          <span data-ttu-id="62df5-2424">where, clause (Référence C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2424">where clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/48b5c2c5-3181-429c-8545-894296798c89">
          <span data-ttu-id="62df5-2425">Where, clause (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2425">Where Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="62df5-2426">Le type des éléments de <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2426">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="62df5-2427">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> à filtrer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2427">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="62df5-2428">Fonction permettant de tester chaque élément source pour une condition ; le deuxième paramètre de la fonction représente l'index de l'élément source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2428">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2429">Filtre une séquence de valeurs selon un prédicat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2429">Filters a sequence of values based on a predicate.</span>
          </span>
          <span data-ttu-id="62df5-2430">L’index de chaque élément est utilisé dans la logique de la fonction de prédicat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2430">Each element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2431">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient des éléments de la séquence d'entrée satisfaisant à la condition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2431">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2432">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2432">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2433">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2433">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2434">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2434">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2435">Le premier argument de `predicate` représente l’élément à tester.</span><span class="sxs-lookup"><span data-stu-id="62df5-2435">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="62df5-2436">Le deuxième argument représente l’index de base zéro de l’élément dans `source`.</span><span class="sxs-lookup"><span data-stu-id="62df5-2436">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2437">L’exemple de code suivant montre comment utiliser <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> pour filtrer une séquence selon un prédicat qui implique l’index de chaque élément.</span><span class="sxs-lookup"><span data-stu-id="62df5-2437">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to filter a sequence based on a predicate that involves the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#111](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#111)]
 [!code-vb[System.Linq.Enumerable#111](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2438">
            <paramref name="source" /> ou <paramref name="predicate" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2438">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; second, class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond, TResult) (first As IEnumerable(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Zip(System::Collections::Generic::IEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSecond&gt; ^ second, Func&lt;TFirst, TSecond, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Zip : seq&lt;'First&gt; * seq&lt;'Second&gt; * Func&lt;'First, 'Second, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Zip (first, second, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TFirst&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst">
          <span data-ttu-id="62df5-2439">Type des éléments de la première séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2439">The type of the elements of the first input sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TSecond">
          <span data-ttu-id="62df5-2440">Type des éléments de la seconde séquence d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2440">The type of the elements of the second input sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="62df5-2441">Type des éléments de la séquence résultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2441">The type of the elements of the result sequence.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="62df5-2442">Première séquence à fusionner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2442">The first sequence to merge.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="62df5-2443">Seconde séquence à fusionner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2443">The second sequence to merge.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="62df5-2444">Fonction qui spécifie comment fusionner les éléments des deux séquences.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2444">A function that specifies how to merge the elements from the two sequences.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="62df5-2445">Applique une fonction spécifiée aux éléments correspondants de deux séquences pour produire une séquence des résultats.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2445">Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="62df5-2446">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui contient les éléments fusionnés des deux séquences d'entrée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2446">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62df5-2447">Cette méthode est implémentée à l’aide de l’exécution différée.</span><span class="sxs-lookup"><span data-stu-id="62df5-2447">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="62df5-2448">L’exécution valeur de retour est un objet qui stocke toutes les informations qui sont requis pour effectuer l’action.</span><span class="sxs-lookup"><span data-stu-id="62df5-2448">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="62df5-2449">La requête représentée par cette méthode n’est pas exécutée jusqu'à ce que l’objet est énumérée en appelant son `GetEnumerator` méthode directement ou en utilisant `foreach` en Visual c# ou `For Each` en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="62df5-2449">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="62df5-2450">La méthode fusionne chaque élément de la première séquence avec un élément qui a le même index dans la deuxième séquence.</span><span class="sxs-lookup"><span data-stu-id="62df5-2450">The method merges each element of the first sequence with an element that has the same index in the second sequence.</span></span> <span data-ttu-id="62df5-2451">Si les séquences n’ont pas le même nombre d’éléments, la méthode fusionne des séquences jusqu'à ce qu’il atteigne la fin d’un d’eux.</span><span class="sxs-lookup"><span data-stu-id="62df5-2451">If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</span></span> <span data-ttu-id="62df5-2452">Par exemple, si une séquence a trois éléments et l’autre en a quatre, la séquence de résultat aura uniquement trois éléments.</span><span class="sxs-lookup"><span data-stu-id="62df5-2452">For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="62df5-2453">L’exemple de code suivant montre comment utiliser le <xref:System.Linq.Enumerable.Zip%2A> méthode pour fusionner deux séquences.</span><span class="sxs-lookup"><span data-stu-id="62df5-2453">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Zip%2A> method to merge two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#200](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#200)]
 [!code-vb[System.Linq.Enumerable#200](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#200)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="62df5-2454">
            <paramref name="first" /> ou <paramref name="second" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="62df5-2454">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>