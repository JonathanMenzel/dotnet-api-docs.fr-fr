<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Queryable.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59c9380e65a895a3a4c48c8f4493f3434a4b3c9eb.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c9380e65a895a3a4c48c8f4493f3434a4b3c9eb</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Provides a set of <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) methods for querying data structures that implement <ph id="ph3">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</source>
          <target state="translated">Fournit un jeu de méthodes statiques <ph id="ph1">&lt;see langword="static" /&gt;</ph><ph id="ph2">&lt;see langword="Shared" /&gt;</ph> en Visual Basic) pour interroger des structures de données qui implémentent <ph id="ph3">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The set of methods declared in the <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> class provides an implementation of the standard query operators for querying data sources that implement <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
          <target state="translated">L’ensemble des méthodes déclarées dans le <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> classe fournit une implémentation des opérateurs de requête standard pour interroger des données sources qui implémentent <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The standard query operators are general purpose methods that follow the <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</source>
          <target state="translated">Les opérateurs de requête standard sont des méthodes à usage général qui suivent le <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> de modèle et vous permettent d’exprimer des opérations de parcours, de filtre et de projection sur des données dans les. Langage de programmation NET.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The majority of the methods in this class are defined as extension methods that extend the <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> type.</source>
          <target state="translated">La plupart des méthodes de cette classe sont définies en tant que méthodes d’extension qui étendent la <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> type.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>This means they can be called like an instance method on any object that implements <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
          <target state="translated">Cela signifie que peut être appelées comme une méthode d’instance sur n’importe quel objet qui implémente <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>These methods that extend <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> do not perform any querying directly.</source>
          <target state="translated">Ces méthodes qui étendent <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> n’effectuent pas d’interrogations directement.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>Instead, their functionality is to build an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> object, which is an expression tree that represents the cumulative query.</source>
          <target state="translated">Au lieu de cela, leur fonctionnalité consiste à générer un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> objet, qui est une arborescence d’expression qui représente la requête cumulative.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The methods then pass the new expression tree to either the <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the input <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
          <target state="translated">Les méthodes passent ensuite la nouvelle arborescence d’expression soit le <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> (méthode) ou le <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de l’entrée <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The method that is called depends on whether the <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> method returns a singleton value, in which case <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is called, or has enumerable results, in which case <ph id="ph3">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is called.</source>
          <target state="translated">La méthode appelée dépend de si la <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> méthode retourne une valeur singleton, auquel cas <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> est appelée, ou a des résultats énumérables, auquel cas <ph id="ph3">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The actual query execution on the target data is performed by a class that implements <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
          <target state="translated">L’exécution de la requête réelle sur les données cibles est exécutée par une classe qui implémente <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>The expectation of any <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> implementation is that the result of executing an expression tree that was constructed by a <ph id="ph2">&lt;xref:System.Linq.Queryable&gt;</ph> standard query operator method is equivalent to the result of calling the corresponding method in the <ph id="ph3">&lt;xref:System.Linq.Enumerable&gt;</ph> class, if the data source were an <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">L’attente de n’importe quel <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> implémentation qui est le résultat de l’exécution d’une arborescence d’expression qui a été construite par un <ph id="ph2">&lt;xref:System.Linq.Queryable&gt;</ph> méthode d’opérateur de requête standard est équivalent au résultat de l’appel de la méthode correspondante la <ph id="ph3">&lt;xref:System.Linq.Enumerable&gt;</ph> classe, si la source de données est un <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Queryable">
          <source>In addition to the standard query operator methods that operate on <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> objects, this class also contains a method, <ph id="ph2">&lt;xref:System.Linq.Queryable.AsQueryable%2A&gt;</ph>, which types <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> objects as <ph id="ph4">&lt;xref:System.Linq.IQueryable&gt;</ph> objects.</source>
          <target state="translated">Outre les méthodes d’opérateur de requête standard qui opèrent sur <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> des objets, cette classe contient également une méthode, <ph id="ph2">&lt;xref:System.Linq.Queryable.AsQueryable%2A&gt;</ph>, les types <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> des objets en tant que <ph id="ph4">&lt;xref:System.Linq.IQueryable&gt;</ph> objets.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>A sequence to aggregate over.</source>
          <target state="translated">Séquence à regrouper.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>An accumulator function to apply to each element.</source>
          <target state="translated">Fonction d'accumulation à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Applique une fonction d'accumulation sur une séquence.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The final accumulator value.</source>
          <target state="translated">Valeur d'accumulation finale.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The expected behavior is that the specified function, <ph id="ph1">`func`</ph>, is applied to each value in the source sequence and the accumulated value is returned.</source>
          <target state="translated">Le comportement attendu est que la fonction spécifiée, <ph id="ph1">`func`</ph>, est appliquée à chaque valeur de la séquence source et le cumul valeur est retournée.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The first value in <ph id="ph1">`source`</ph> is used as the seed value for the accumulated value, which corresponds to the first parameter in <ph id="ph2">`func`</ph>.</source>
          <target state="translated">La première valeur dans <ph id="ph1">`source`</ph> est utilisé en tant que la valeur de départ pour la valeur cumulée, qui correspond au premier paramètre dans <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</source>
          <target state="translated">Pour simplifier les opérations d’agrégation courantes, le jeu d’opérateurs de requête standard inclut également deux méthodes de comptage, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>et quatre méthodes d’agrégation numériques, à savoir <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>et <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> to build a sentence from an array of strings.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%7D%29&gt;</ph> pour générer une phrase à partir d’un tableau de chaînes.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="func" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The type of the accumulator value.</source>
          <target state="translated">Type de la valeur d'accumulation.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>A sequence to aggregate over.</source>
          <target state="translated">Séquence à regrouper.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The initial accumulator value.</source>
          <target state="translated">Valeur d'accumulation initiale.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>An accumulator function to invoke on each element.</source>
          <target state="translated">Fonction d'accumulation à appeler sur chaque élément.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Applique une fonction d'accumulation sur une séquence.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The specified seed value is used as the initial accumulator value.</source>
          <target state="translated">La valeur initiale spécifiée est utilisée comme valeur d'accumulation initiale.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The final accumulator value.</source>
          <target state="translated">Valeur d'accumulation finale.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The expected behavior is that the specified function, <ph id="ph1">`func`</ph>, is applied to each value in the source sequence and the accumulated value is returned.</source>
          <target state="translated">Le comportement attendu est que la fonction spécifiée, <ph id="ph1">`func`</ph>, est appliquée à chaque valeur de la séquence source et le cumul valeur est retournée.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The <ph id="ph1">`seed`</ph> parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in <ph id="ph2">`func`</ph>.</source>
          <target state="translated">Le <ph id="ph1">`seed`</ph> paramètre est utilisé en tant que la valeur de départ pour la valeur cumulée, qui correspond au premier paramètre dans <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</source>
          <target state="translated">Pour simplifier les opérations d’agrégation courantes, le jeu d’opérateurs de requête standard inclut également deux méthodes de comptage, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>et quatre méthodes d’agrégation numériques, à savoir <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>et <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> to apply an accumulator function when a seed value is provided to the function.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%602%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%29&gt;</ph> pour appliquer une fonction d’accumulation lorsqu’une valeur de départ est fournie à la fonction.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="func" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The type of the accumulator value.</source>
          <target state="translated">Type de la valeur d'accumulation.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The type of the resulting value.</source>
          <target state="translated">Type de la valeur résultante.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>A sequence to aggregate over.</source>
          <target state="translated">Séquence à regrouper.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The initial accumulator value.</source>
          <target state="translated">Valeur d'accumulation initiale.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>An accumulator function to invoke on each element.</source>
          <target state="translated">Fonction d'accumulation à appeler sur chaque élément.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>A function to transform the final accumulator value into the result value.</source>
          <target state="translated">Fonction permettant de transformer la valeur d'accumulation finale en valeur de résultat.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Applique une fonction d'accumulation sur une séquence.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</source>
          <target state="translated">La valeur initiale spécifiée est utilisée comme valeur d'accumulation initiale et la fonction spécifiée permet de sélectionner la valeur de résultat.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The transformed final accumulator value.</source>
          <target state="translated">Valeur d'accumulation finale transformée.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The expected behavior is that the specified function, <ph id="ph1">`func`</ph>, is applied to each value in the source sequence and the accumulated value is returned.</source>
          <target state="translated">Le comportement attendu est que la fonction spécifiée, <ph id="ph1">`func`</ph>, est appliquée à chaque valeur de la séquence source et le cumul valeur est retournée.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The <ph id="ph1">`seed`</ph> parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in <ph id="ph2">`func`</ph>.</source>
          <target state="translated">Le <ph id="ph1">`seed`</ph> paramètre est utilisé en tant que la valeur de départ pour la valeur cumulée, qui correspond au premier paramètre dans <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The final accumulated value is passed to <ph id="ph1">`selector`</ph> to obtain the result value.</source>
          <target state="translated">La dernière valeur cumulée est passée à <ph id="ph1">`selector`</ph> pour obtenir la valeur de résultat.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</source>
          <target state="translated">Pour simplifier les opérations d’agrégation courantes, le jeu d’opérateurs de requête standard inclut également deux méthodes de comptage, <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Linq.Queryable.LongCount%2A&gt;</ph>et quatre méthodes d’agrégation numériques, à savoir <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Queryable.Min%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Linq.Queryable.Sum%2A&gt;</ph>et <ph id="ph6">&lt;xref:System.Linq.Queryable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> to apply an accumulator function and a result selector.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Aggregate%60%603%28System.Linq.IQueryable%7B%60%600%7D%2C%60%601%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%29&gt;</ph> pour appliquer une fonction d’accumulation et un sélecteur de résultat.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> or <ph id="ph3">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="func" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A sequence whose elements to test for a condition.</source>
          <target state="translated">Séquence dont les éléments doivent être testés par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Determines whether all the elements of a sequence satisfy a condition.</source>
          <target state="translated">Détermine si tous les éléments d'une séquence satisfont à une condition.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si tous les éléments de la séquence source réussissent le test dans le prédicat spécifié ou si la séquence est vide ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the <ph id="ph2">`source`</ph> parameter's type.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation de la <ph id="ph2">`source`</ph> type du paramètre.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it determines if all the elements in <ph id="ph1">`source`</ph> satisfy the condition in <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il détermine si tous les éléments dans <ph id="ph1">`source`</ph> répondent à la condition dans <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to determine whether all the elements in a sequence satisfy a condition.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> pour déterminer si tous les éléments d’une séquence remplissent une condition.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) or a direct call to the <ph id="ph5">&lt;xref:System.Linq.Queryable.Where%2A&gt;</ph> method.</source>
          <target state="translated">La valeur booléenne que la <ph id="ph1">&lt;xref:System.Linq.Queryable.All%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode retourne est généralement utilisée dans le prédicat d’un <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause dans <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) ou un appel direct à la <ph id="ph5">&lt;xref:System.Linq.Queryable.Where%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following example demonstrates this use of the <ph id="ph1">`All`</ph> method.</source>
          <target state="translated">L’exemple suivant illustre cette utilisation de la <ph id="ph1">`All`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Determines whether any element of an <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> sequence exists or satisfies a condition.</source>
          <target state="translated">Détermine si les éléments d'une séquence <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> existent ou satisfont à une condition.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>A sequence to check for being empty.</source>
          <target state="translated">Séquence à vérifier pour y détecter l'absence de données.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>Determines whether a sequence contains any elements.</source>
          <target state="translated">Détermine si une séquence contient des éléments.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains any elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la séquence source contient des éléments ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it determines if <ph id="ph1">`source`</ph> contains any elements.</source>
          <target state="translated">Le comportement attendu est qu’il détermine si <ph id="ph1">`source`</ph> contient des éléments.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to determine whether a sequence contains any elements.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour déterminer si une séquence contient des éléments.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) or a direct call to the <ph id="ph5">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method.</source>
          <target state="translated">La valeur booléenne que la <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode retourne est généralement utilisée dans le prédicat d’un <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause dans <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) ou un appel direct à la <ph id="ph5">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source>The following example demonstrates this use of the <ph id="ph1">`Any`</ph> method.</source>
          <target state="translated">L’exemple suivant illustre cette utilisation de la <ph id="ph1">`Any`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A sequence whose elements to test for a condition.</source>
          <target state="translated">Séquence dont les éléments doivent être testés par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Determines whether any element of a sequence satisfies a condition.</source>
          <target state="translated">Détermine si des éléments d'une séquence satisfont à une condition.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any elements in the source sequence pass the test in the specified predicate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si des éléments de la séquence source réussissent le test dans le prédicat spécifié ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it determines if any of the elements of <ph id="ph1">`source`</ph> satisfy the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il détermine si un des éléments de <ph id="ph1">`source`</ph> satisfont la condition spécifiée par <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to determine whether any element in a sequence satisfies a condition.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Any%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> pour déterminer si des éléments d’une séquence satisfont à une condition.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>A sequence to convert.</source>
          <target state="translated">Séquence à convertir.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>Converts an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>.</source>
          <target state="translated">Convertit un <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> en <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> that represents the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> qui représente la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Queryable.AsQueryable%28System.Collections.IEnumerable%29&gt;</ph> returns it directly.</source>
          <target state="translated">Si le type de <ph id="ph1">`source`</ph> implémente <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Queryable.AsQueryable%28System.Collections.IEnumerable%29&gt;</ph> retourne directement.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>Otherwise, it returns an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that executes queries by calling the equivalent query operator methods in <ph id="ph2">&lt;xref:System.Linq.Enumerable&gt;</ph> instead of those in <ph id="ph3">&lt;xref:System.Linq.Queryable&gt;</ph>.</source>
          <target state="translated">Sinon, elle retourne un <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> qui exécute des requêtes en appelant des méthodes d’opérateur dans la requête équivalente <ph id="ph2">&lt;xref:System.Linq.Enumerable&gt;</ph> au lieu de celles dans <ph id="ph3">&lt;xref:System.Linq.Queryable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>This method assumes that <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> for some <ph id="ph3">`T`</ph>.</source>
          <target state="translated">Cette méthode suppose que <ph id="ph1">`source`</ph> implémente <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> pour certaines <ph id="ph3">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>At runtime, the result is of type <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> for the same <ph id="ph2">`T`</ph>.</source>
          <target state="translated">Lors de l’exécution, le résultat est de type <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> pour le même <ph id="ph2">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source>This method is useful in dynamic scenarios when you do not statically know the type of <ph id="ph1">`T`</ph>.</source>
          <target state="translated">Cette méthode est utile dans les scénarios dynamiques lorsque vous ne connaissez pas de manière statique le type de <ph id="ph1">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> does not implement <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> for some <ph id="ph3">&lt;paramref name="T" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> n'implémente pas <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> pour certains <ph id="ph3">&lt;paramref name="T" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence to convert.</source>
          <target state="translated">Séquence à convertir.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Converts a generic <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to a generic <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</source>
          <target state="translated">Convertit un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> générique en <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> générique.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that represents the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui représente la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> returns it directly.</source>
          <target state="translated">Si le type de <ph id="ph1">`source`</ph> implémente <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> retourne directement.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, it returns an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that executes queries by calling the equivalent query operator methods in <ph id="ph2">&lt;xref:System.Linq.Enumerable&gt;</ph> instead of those in <ph id="ph3">&lt;xref:System.Linq.Queryable&gt;</ph>.</source>
          <target state="translated">Sinon, elle retourne un <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> qui exécute des requêtes en appelant des méthodes d’opérateur dans la requête équivalente <ph id="ph2">&lt;xref:System.Linq.Enumerable&gt;</ph> au lieu de celles dans <ph id="ph3">&lt;xref:System.Linq.Queryable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to convert an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> to an <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.AsQueryable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> pour convertir un <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> à un <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Computes the average of a sequence of numeric values.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs numériques.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Moyenne de la séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> itself.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> lui-même.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> pour calculer la moyenne d’une séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Moyenne de la séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> itself.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> lui-même.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> pour calculer la moyenne d’une séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Moyenne de la séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> itself.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> lui-même.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> pour calculer la moyenne d’une séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Moyenne de la séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> itself.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> lui-même.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> pour calculer la moyenne d’une séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> de type Null dont il faut calculer la moyenne.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Calcule la moyenne d’une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> de type Null.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only <ph id="ph2">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">La moyenne de la séquence de valeurs, ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si la séquence source est vide ou contient uniquement des valeurs <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> itself.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> lui-même.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> pour calculer la moyenne d’une séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> de type Null dont il faut calculer la moyenne.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Calcule la moyenne d’une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> de type Null.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only <ph id="ph2">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">La moyenne de la séquence de valeurs, ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si la séquence source est vide ou contient uniquement des valeurs <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> itself.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> lui-même.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> pour calculer la moyenne d’une séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> de type Null dont il faut calculer la moyenne.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Calcule la moyenne d’une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> de type Null.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only <ph id="ph2">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">La moyenne de la séquence de valeurs, ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si la séquence source est vide ou contient uniquement des valeurs <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> itself.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> lui-même.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> pour calculer la moyenne d’une séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> de type Null dont il faut calculer la moyenne.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Calcule la moyenne d’une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> de type Null.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only <ph id="ph2">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">La moyenne de la séquence de valeurs, ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si la séquence source est vide ou contient uniquement des valeurs <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> itself.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> lui-même.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> pour calculer la moyenne d’une séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> de type Null dont il faut calculer la moyenne.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Calcule la moyenne d’une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> de type Null.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only <ph id="ph2">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">La moyenne de la séquence de valeurs, ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si la séquence source est vide ou contient uniquement des valeurs <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> itself.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> lui-même.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> pour calculer la moyenne d’une séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Moyenne de la séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> itself.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> lui-même.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> pour calculer la moyenne d’une séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>A sequence of values that are used to calculate an average.</source>
          <target state="translated">Séquence de valeurs utilisées pour calculer une moyenne.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Moyenne de la séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph> après l’appel <ph id="ph2">`selector`</ph> sur chaque valeur.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> pour calculer la moyenne <ph id="ph2">&lt;xref:System.String&gt;</ph> longueur d’une séquence de valeurs de type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Moyenne de la séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph> après l’appel <ph id="ph2">`selector`</ph> sur chaque valeur.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> pour calculer la moyenne <ph id="ph2">&lt;xref:System.String&gt;</ph> longueur d’une séquence de valeurs de type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Moyenne de la séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph> après l’appel <ph id="ph2">`selector`</ph> sur chaque valeur.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> pour calculer la moyenne <ph id="ph2">&lt;xref:System.String&gt;</ph> longueur d’une séquence de valeurs de type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Moyenne de la séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph> après l’appel <ph id="ph2">`selector`</ph> sur chaque valeur.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> pour calculer la moyenne <ph id="ph2">&lt;xref:System.String&gt;</ph> longueur d’une séquence de valeurs de type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sequence is empty or contains only <ph id="ph3">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Moyenne de la séquence de valeurs ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si la séquence <ph id="ph2">&lt;paramref name="source" /&gt;</ph> est vide ou ne contient que des valeurs <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph> après l’appel <ph id="ph2">`selector`</ph> sur chaque valeur.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> pour calculer la moyenne <ph id="ph2">&lt;xref:System.String&gt;</ph> longueur d’une séquence de valeurs de type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sequence is empty or contains only <ph id="ph3">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Moyenne de la séquence de valeurs ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si la séquence <ph id="ph2">&lt;paramref name="source" /&gt;</ph> est vide ou ne contient que des valeurs <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph> après l’appel <ph id="ph2">`selector`</ph> sur chaque valeur.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> pour calculer la moyenne <ph id="ph2">&lt;xref:System.String&gt;</ph> longueur d’une séquence de valeurs de type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sequence is empty or contains only <ph id="ph3">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Moyenne de la séquence de valeurs ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si la séquence <ph id="ph2">&lt;paramref name="source" /&gt;</ph> est vide ou ne contient que des valeurs <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph> après l’appel <ph id="ph2">`selector`</ph> sur chaque valeur.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> pour calculer la moyenne <ph id="ph2">&lt;xref:System.String&gt;</ph> longueur d’une séquence de valeurs de type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sequence is empty or contains only <ph id="ph3">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Moyenne de la séquence de valeurs ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si la séquence <ph id="ph2">&lt;paramref name="source" /&gt;</ph> est vide ou ne contient que des valeurs <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph> après l’appel <ph id="ph2">`selector`</ph> sur chaque valeur.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> pour calculer la moyenne <ph id="ph2">&lt;xref:System.String&gt;</ph> longueur d’une séquence de valeurs de type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="source" /&gt;</ph> sequence is empty or contains only <ph id="ph3">&lt;see langword="null" /&gt;</ph> values.</source>
          <target state="translated">Moyenne de la séquence de valeurs ou <ph id="ph1">&lt;see langword="null" /&gt;</ph> si la séquence <ph id="ph2">&lt;paramref name="source" /&gt;</ph> est vide ou ne contient que des valeurs <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph> après l’appel <ph id="ph2">`selector`</ph> sur chaque valeur.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> pour calculer la moyenne <ph id="ph2">&lt;xref:System.String&gt;</ph> longueur d’une séquence de valeurs de type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Séquence de valeurs dont la moyenne doit être calculée.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la moyenne d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Moyenne de la séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The expected behavior is that it calculates the average of the values in <ph id="ph1">`source`</ph> after invoking <ph id="ph2">`selector`</ph> on each value.</source>
          <target state="translated">Le comportement attendu est qu’il calcule la moyenne des valeurs dans <ph id="ph1">`source`</ph> après l’appel <ph id="ph2">`selector`</ph> sur chaque valeur.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> to calculate the average <ph id="ph2">&lt;xref:System.String&gt;</ph> length in a sequence of values of type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> pour calculer la moyenne <ph id="ph2">&lt;xref:System.String&gt;</ph> longueur d’une séquence de valeurs de type <ph id="ph3">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The type to convert the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated">Le type vers lequel convertir les éléments de <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> à.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> that contains the elements to be converted.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> qui contient les éléments à convertir.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>Converts the elements of an <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> to the specified type.</source>
          <target state="translated">Convertit les éléments d’un objet <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> vers le type spécifié.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains each element of the source sequence converted to the specified type.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient chaque élément de la séquence source convertie vers le type spécifié.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The expected behavior is that it converts the values in <ph id="ph1">`source`</ph> to type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il convertit les valeurs de <ph id="ph1">`source`</ph> au type <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> to convert objects in a sequence to type <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> pour convertir des objets dans une séquence en type <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
          <source>An element in the sequence cannot be cast to type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Impossible de caster un élément de la séquence en type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Type des éléments des séquences d'entrée.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The first sequence to concatenate.</source>
          <target state="translated">Première séquence à concaténer.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to concatenate to the first sequence.</source>
          <target state="translated">Séquence à concaténer à la première séquence.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Concatenates two sequences.</source>
          <target state="translated">Concatène deux séquences.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the concatenated elements of the two input sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments concaténés des deux séquences d'entrée.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The expected behavior is that the elements in <ph id="ph1">`source2`</ph> are concatenated to those of <ph id="ph2">`source1`</ph> to create a new sequence.</source>
          <target state="translated">Le comportement attendu est que les éléments de <ph id="ph1">`source2`</ph> sont concaténés à ceux de <ph id="ph2">`source1`</ph> pour créer une séquence.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to concatenate two sequences.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Concat%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> pour concaténer deux séquences.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Determines whether an <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> contains a specified element.</source>
          <target state="translated">Détermine si <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> contient un élément spécifique.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> in which to locate <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dans lequel trouver <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The object to locate in the sequence.</source>
          <target state="translated">L'objet à localiser dans la séquence.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>Determines whether a sequence contains a specified element by using the default equality comparer.</source>
          <target state="translated">Détermine si une séquence contient un élément spécifié à l'aide du comparateur d'égalité par défaut.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the input sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la séquence d'entrée contient un élément avec la valeur spécifiée ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The expected behavior is that it determines if <ph id="ph1">`source`</ph> contains <ph id="ph2">`item`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il détermine si <ph id="ph1">`source`</ph> contient <ph id="ph2">`item`</ph>.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> to determine whether a sequence contains a specific element.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> pour déterminer si une séquence contient un élément spécifique.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> in which to locate <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dans lequel trouver <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The object to locate in the sequence.</source>
          <target state="translated">L'objet à localiser dans la séquence.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> pour comparer les valeurs.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether a sequence contains a specified element by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Détermine si une séquence contient un élément spécifié à l'aide du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> indiqué.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the input sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la séquence d'entrée contient un élément avec la valeur spécifiée ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Contains%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that it determines if <ph id="ph1">`source`</ph> contains <ph id="ph2">`item`</ph> by using <ph id="ph3">`comparer`</ph> to compare values.</source>
          <target state="translated">Le comportement attendu est qu’il détermine si <ph id="ph1">`source`</ph> contient <ph id="ph2">`item`</ph> à l’aide de <ph id="ph3">`comparer`</ph> pour comparer des valeurs.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">Retourne le nombre total d'éléments dans une séquence.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments à compter.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">Retourne le nombre total d'éléments dans une séquence.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The number of elements in the input sequence.</source>
          <target state="translated">Nombre total d'éléments dans la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it counts the number of items in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il compte le nombre d’éléments dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to count the elements in a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour compter les éléments dans une séquence.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Le nombre d'éléments dans <ph id="ph1">&lt;paramref name="source" /&gt;</ph> est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments à compter.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the number of elements in the specified sequence that satisfies a condition.</source>
          <target state="translated">Retourne le nombre d'éléments dans la séquence spécifiée qui satisfait à une condition.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The number of elements in the sequence that satisfies the condition in the predicate function.</source>
          <target state="translated">Nombre d'éléments de la séquence qui satisfont à la condition dans la fonction de prédicat.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it counts the number of items in <ph id="ph1">`source`</ph> that satisfy the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il compte le nombre d’éléments dans <ph id="ph1">`source`</ph> qui satisfont la condition spécifiée par <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to count the elements in a sequence that satisfy a condition.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Count%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> pour compter les éléments dans une séquence qui satisfont à une condition.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Le nombre d'éléments dans <ph id="ph1">&lt;paramref name="source" /&gt;</ph> est supérieur à <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the elements in a sequence or a default valued singleton collection if the sequence is empty.</source>
          <target state="translated">Retourne les éléments d'une séquence ou une collection de singletons par défaut si la séquence est vide.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return a default value for if empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> pour lequel retourner une valeur par défaut si vide.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</source>
          <target state="translated">Retourne les éléments de la séquence spécifiée ou la valeur par défaut du paramètre de type dans une collection de singletons si la séquence est vide.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains <ph id="ph2">&lt;see langword="default" /&gt;</ph>(<ph id="ph3">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph4">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph5">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient <ph id="ph2">&lt;see langword="default" /&gt;</ph>(<ph id="ph3">&lt;paramref name="TSource" /&gt;</ph>) si <ph id="ph4">&lt;paramref name="source" /&gt;</ph> est vide ; sinon, <ph id="ph5">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns <ph id="ph1">`source`</ph> if it is not empty.</source>
          <target state="translated">Le comportement attendu est qu’il retourne <ph id="ph1">`source`</ph> s’il n’est pas vide.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>Otherwise, it returns an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that contains <ph id="ph2">`default(TSource)`</ph>.</source>
          <target state="translated">Sinon, elle retourne un <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> contenant <ph id="ph2">`default(TSource)`</ph>.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source>The following code examples demonstrate how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to provide a default value in case the source sequence is empty.</source>
          <target state="translated">Les exemples de code suivants montrent comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour fournir une valeur par défaut au cas où la séquence source est vide.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the specified value for if empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> pour lequel retourner la valeur spécifiée si vide.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The value to return if the sequence is empty.</source>
          <target state="translated">Valeur à retourner si la séquence est vide.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</source>
          <target state="translated">Retourne les éléments de la séquence spécifiée ou la valeur indiquée dans une collection de singletons si la séquence est vide.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> si <ph id="ph3">&lt;paramref name="source" /&gt;</ph> est vide ; sinon, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The expected behavior is that it returns <ph id="ph1">`source`</ph> if it is not empty.</source>
          <target state="translated">Le comportement attendu est qu’il retourne <ph id="ph1">`source`</ph> s’il n’est pas vide.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>Otherwise, it returns an <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> that contains <ph id="ph2">`defaultValue`</ph>.</source>
          <target state="translated">Sinon, elle retourne un <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> contenant <ph id="ph2">`defaultValue`</ph>.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>The following code example shows a situation in which it is useful to call <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> in a <ph id="ph2">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query.</source>
          <target state="translated">L’exemple de code suivant montre une situation dans laquelle il est utile d’appeler <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> dans un <ph id="ph2">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> requête.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source>A default value is passed to <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> in this example.</source>
          <target state="translated">Une valeur par défaut est passée à <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> dans cet exemple.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns distinct elements from a sequence.</source>
          <target state="translated">Retourne des éléments distincts d'une séquence.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to remove duplicates from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dans lequel supprimer les doublons.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>Returns distinct elements from a sequence by using the default equality comparer to compare values.</source>
          <target state="translated">Retourne des éléments distincts d'une séquence et utilise le comparateur d'égalité par défaut pour comparer les valeurs.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains distinct elements from <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient des éléments distincts de <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns an unordered sequence of the unique items in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne une séquence non ordonnée des éléments uniques dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to return distinct elements from a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour retourner des éléments distincts d’une séquence.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to remove duplicates from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dans lequel supprimer les doublons.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> pour comparer les valeurs.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Returns distinct elements from a sequence by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Retourne des éléments distincts d'une séquence et utilise le <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> spécifié pour comparer les valeurs.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains distinct elements from <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient des éléments distincts de <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Distinct%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that it returns an unordered sequence of the unique items in <ph id="ph1">`source`</ph> by using <ph id="ph2">`comparer`</ph> to compare values.</source>
          <target state="translated">Le comportement attendu est qu’il retourne une séquence non ordonnée des éléments uniques dans <ph id="ph1">`source`</ph> à l’aide de <ph id="ph2">`comparer`</ph> pour comparer des valeurs.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> à partir duquel retourner un élément.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">Index de base zéro de l'élément à récupérer.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence.</source>
          <target state="translated">Retourne l'élément à une position d'index spécifiée dans une séquence.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The element at the specified position in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">L'élément à la position spécifiée dans <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The expected behavior is that it returns the item at position <ph id="ph1">`index`</ph> in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne l’élément à la position <ph id="ph1">`index`</ph> dans <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> to return an element at a specific position in a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAt%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> pour renvoyer un élément à une position spécifique dans une séquence.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> est inférieur à zéro.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> à partir duquel retourner un élément.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">Index de base zéro de l'élément à récupérer.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence or a default value if the index is out of range.</source>
          <target state="translated">Retourne l’élément situé à un index spécifié dans une séquence ou une valeur par défaut si l’index est hors limites.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph2">&lt;paramref name="index" /&gt;</ph> is outside the bounds of <ph id="ph3">&lt;paramref name="source" /&gt;</ph>; otherwise, the element at the specified position in <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) si <ph id="ph2">&lt;paramref name="index" /&gt;</ph> est en dehors des limites de <ph id="ph3">&lt;paramref name="source" /&gt;</ph> ; sinon, l’élément à la position spécifiée dans <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The expected behavior is that it returns the item at position <ph id="ph1">`index`</ph> in <ph id="ph2">`source`</ph>, or <ph id="ph3">`default(TSource)`</ph> if <ph id="ph4">`index`</ph> is outside the bounds of <ph id="ph5">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne l’élément à la position <ph id="ph1">`index`</ph> dans <ph id="ph2">`source`</ph>, ou <ph id="ph3">`default(TSource)`</ph> si <ph id="ph4">`index`</ph> en dehors des limites de <ph id="ph5">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph>.</source>
          <target state="translated">L'exemple de code suivant illustre l'utilisation de <ph id="ph1">&lt;xref:System.Linq.Queryable.ElementAtOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>This example uses a value for <ph id="ph1">`index`</ph> that is outside the bounds of the source sequence.</source>
          <target state="translated">Cet exemple utilise une valeur pour <ph id="ph1">`index`</ph> qui est en dehors des limites de la séquence source.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Produces the set difference of two sequences.</source>
          <target state="translated">Produit la différence entre deux séquences.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Type des éléments des séquences d'entrée.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments qui ne se trouvent pas également dans <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> seront retournés.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will not appear in the returned sequence.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dont les éléments apparaissent également dans la première séquence ne figurera pas dans la séquence retournée.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set difference of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">Produit la différence entre deux séquences à l'aide du comparateur d'égalité par défaut pour comparer les valeurs.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the set difference of the two sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient la différence des deux séquences.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the<ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le<ph id="ph5">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of  the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The expected behavior is that all the elements in <ph id="ph1">`source1`</ph> are returned except for those that are also in <ph id="ph2">`source2`</ph>.</source>
          <target state="translated">Le comportement attendu est que tous les éléments <ph id="ph1">`source1`</ph> sont retournés à l’exception de ceux qui sont également dans <ph id="ph2">`source2`</ph>.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return those elements that only appear in the first source sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> pour retourner les éléments qui apparaissent uniquement dans la première séquence source.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Type des éléments des séquences d'entrée.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments qui ne se trouvent pas également dans <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> seront retournés.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will not appear in the returned sequence.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dont les éléments apparaissent également dans la première séquence ne figurera pas dans la séquence retournée.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> pour comparer les valeurs.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set difference of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Produit la différence entre deux séquences à l'aide du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> spécifié pour comparer les valeurs.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the set difference of the two sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient la différence des deux séquences.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the<ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le<ph id="ph5">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Except%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that all the elements in <ph id="ph1">`source1`</ph> are returned except for those that are also in <ph id="ph2">`source2`</ph>, and <ph id="ph3">`comparer`</ph> is used to compare values.</source>
          <target state="translated">Le comportement attendu est que tous les éléments <ph id="ph1">`source1`</ph> sont retournés à l’exception de ceux qui sont également dans <ph id="ph2">`source2`</ph>, et <ph id="ph3">`comparer`</ph> est utilisé pour comparer des valeurs.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">Retourne le premier élément d'une séquence.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> duquel retourner le premier élément.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">Retourne le premier élément d'une séquence.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The first element in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Premier élément de <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the first element in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le premier élément de <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to return the first element in a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour retourner le premier élément dans une séquence.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">La séquence source est vide.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> à partir duquel retourner un élément.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the first element of a sequence that satisfies a specified condition.</source>
          <target state="translated">Retourne le premier élément d'une séquence qui satisfait à la condition spécifiée.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The first element in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> that passes the test in <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Premier élément de <ph id="ph1">&lt;paramref name="source" /&gt;</ph> qui réussit le test dans <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the first element in <ph id="ph1">`source`</ph> that satisfies the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le premier élément de <ph id="ph1">`source`</ph> qui satisfait à la condition spécifiée par <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to return the first element of a sequence that satisfies a condition.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> pour retourner le premier élément d’une séquence qui satisfait à une condition.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Aucun élément ne satisfait la condition dans <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The source sequence is empty.</source>
          <target state="translated">La séquence source est vide.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the first element of a sequence, or a default value if no element is found.</source>
          <target state="translated">Retourne le premier élément d'une séquence ou une valeur par défaut si aucun élément n'est trouvé.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> duquel retourner le premier élément.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Returns the first element of a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">Retourne le premier élément d’une séquence ou une valeur par défaut si la séquence ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph2">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, the first element in <ph id="ph3">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) si <ph id="ph2">&lt;paramref name="source" /&gt;</ph> est vide ; sinon, premier élément de <ph id="ph3">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the first element in <ph id="ph1">`source`</ph>, or a default value if <ph id="ph2">`source`</ph> is empty.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le premier élément de <ph id="ph1">`source`</ph>, ou une valeur par défaut si <ph id="ph2">`source`</ph> est vide.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%2A&gt;</ph> method does not provide a way to specify the default value to return if <ph id="ph2">`source`</ph> is empty.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%2A&gt;</ph> méthode ne fournit pas un moyen de spécifier la valeur par défaut à retourner si <ph id="ph2">`source`</ph> est vide.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Si vous souhaitez spécifier une valeur par défaut différent de celui <ph id="ph1">`default(TSource)`</ph>, utilisez la <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> méthode décrite dans la section exemple.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> on an empty sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sur une séquence vide.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">Parfois, la valeur de <ph id="ph1">`default(TSource)`</ph> n’est pas la valeur par défaut que vous souhaitez utiliser si la collection ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Au lieu de vérifier le résultat pour la valeur par défaut non voulue, puis la modifier si nécessaire, vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> méthode pour spécifier la valeur par défaut que vous souhaitez utiliser si la collection est vide.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to obtain the first element.</source>
          <target state="translated">Ensuite, appelez <ph id="ph1">&lt;xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour obtenir le premier élément.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</source>
          <target state="translated">L’exemple de code suivant utilise les deux techniques pour obtenir une valeur par défaut 1 si une collection de mois numériques est vide.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</source>
          <target state="translated">Étant donné que la valeur par défaut pour un entier est 0, ce qui ne correspond pas à un mois, la valeur par défaut doit être spécifiée comme 1.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query is completed.</source>
          <target state="translated">La première variable de résultat est vérifiée pour la valeur par défaut indésirables lorsque la requête est terminée.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The second result variable is obtained by calling <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">La deuxième variable de résultat est obtenue en appelant <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> pour spécifier une valeur par défaut de 1.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> à partir duquel retourner un élément.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.</source>
          <target state="translated">Retourne le premier élément d'une séquence qui satisfait à une condition spécifiée ou une valeur par défaut si aucun élément ne correspond.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph2">&lt;paramref name="source" /&gt;</ph> is empty or if no element passes the test specified by <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph>; otherwise, the first element in <ph id="ph4">&lt;paramref name="source" /&gt;</ph> that passes the test specified by <ph id="ph5">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) si <ph id="ph2">&lt;paramref name="source" /&gt;</ph> est vide ou si aucun élément ne réussit le test spécifié par <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph> ; sinon, premier élément de <ph id="ph4">&lt;paramref name="source" /&gt;</ph> qui réussit le test spécifié par <ph id="ph5">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the first element in <ph id="ph1">`source`</ph> that satisfies the condition in <ph id="ph2">`predicate`</ph>, or a default value if no element satisfies the condition.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le premier élément de <ph id="ph1">`source`</ph> qui satisfait la condition dans <ph id="ph2">`predicate`</ph>, ou une valeur par défaut si aucun élément ne remplit la condition.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.FirstOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> en passant un prédicat.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>In the second query, there is no element in the sequence that satisfies the condition.</source>
          <target state="translated">Dans la deuxième requête, il n’existe aucun élément dans la séquence qui satisfait la condition.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Groups the elements of a sequence.</source>
          <target state="translated">Regroupe les éléments d'une séquence.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction représentée dans <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments doivent être regroupés.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Fonction permettant d'extraire la clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Groups the elements of a sequence according to a specified key selector function.</source>
          <target state="translated">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a sequence of objects and a key.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> en C# ou <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> en <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> où chaque objet <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contient une séquence d’objets et une clé.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by a key value that is obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Le comportement attendu est qu’il regroupe les éléments de <ph id="ph1">`source`</ph> par une valeur de clé est obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to group the elements of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> pour regrouper les éléments d’une séquence.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction représentée dans <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments doivent être regroupés.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Fonction permettant d'extraire la clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</source>
          <target state="translated">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et compare les clés à l'aide du comparateur indiqué.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contains a sequence of objects and a key.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> en C# ou <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> en <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> où chaque <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contient une séquence d’objets et une clé.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by a key value.</source>
          <target state="translated">Le comportement attendu est qu’il regroupe les éléments de <ph id="ph1">`source`</ph> par une valeur de clé.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The key value is obtained by invoking <ph id="ph1">`keySelector`</ph> on each element, and key values are compared by using <ph id="ph2">`comparer`</ph>.</source>
          <target state="translated">La valeur de clé est obtenue en appelant <ph id="ph1">`keySelector`</ph> sur chaque élément, et les valeurs de clés sont comparées à l’aide de <ph id="ph2">`comparer`</ph>.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> a la valeur <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction représentée dans <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Type des éléments de chaque <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments doivent être regroupés.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Fonction permettant d'extraire la clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Fonction permettant de mapper chaque élément source à un élément de <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</source>
          <target state="translated">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et projette les éléments de chaque groupe à l'aide de la fonction indiquée.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contains a sequence of objects of type <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> en C# ou <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> en <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> ou chaque <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contient une séquence d’objets de type <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> et une clé.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by a key value that is obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Le comportement attendu est qu’il regroupe les éléments de <ph id="ph1">`source`</ph> par une valeur de clé est obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>It invokes <ph id="ph1">`elementSelector`</ph> on each element to obtain a result element.</source>
          <target state="translated">Il appelle <ph id="ph1">`elementSelector`</ph> sur chaque élément pour obtenir un élément de résultat.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> to group the elements of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%29&gt;</ph> pour regrouper les éléments d’une séquence.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> a la valeur <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction représentée dans <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Type des éléments de chaque <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments doivent être regroupés.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Fonction permettant d'extraire la clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Fonction permettant de mapper chaque élément source à un élément de <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence and projects the elements for each group by using a specified function.</source>
          <target state="translated">Groupe les éléments d'une séquence et projette les éléments pour chaque groupe en utilisant une fonction spécifiée.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Key values are compared by using a specified comparer.</source>
          <target state="translated">Les valeurs de clés sont comparées à l'aide d'un comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contains a sequence of objects of type <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>IQueryable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> en C# ou <bpt id="p2">&lt;c&gt;</bpt>IQueryable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> en <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> ou chaque <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contient une séquence d’objets de type <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> et une clé.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by a key value that is obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Le comportement attendu est qu’il regroupe les éléments de <ph id="ph1">`source`</ph> par une valeur de clé est obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Key values are compared by using <ph id="ph1">`comparer`</ph>.</source>
          <target state="translated">Valeurs de clés sont comparées à l’aide de <ph id="ph1">`comparer`</ph>.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">`elementSelector`</ph> parameter is invoked on each element to obtain a result element.</source>
          <target state="translated">Le <ph id="ph1">`elementSelector`</ph> paramètre est appelé sur chaque élément pour obtenir un élément de résultat.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="comparer" /&gt;</ph> a la valeur <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction représentée dans <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la valeur de résultat retourné par <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments doivent être regroupés.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Fonction permettant d'extraire la clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> that has a type argument of <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> and where each element represents a projection over a group and its key.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> qui dispose de l’argument de type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> et où chaque élément représente une projection sur un groupe et sa clé.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by a key value that is obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Le comportement attendu est qu’il regroupe les éléments de <ph id="ph1">`source`</ph> par une valeur de clé est obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The <ph id="ph1">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.</source>
          <target state="translated">Le <ph id="ph1">`resultSelector`</ph> paramètre est utilisé pour obtenir une valeur de résultat à partir de chaque groupe et sa clé.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> to group the elements of a sequence and project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%29&gt;</ph> pour regrouper les éléments d’une séquence et projeter une séquence de résultats de type <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> a la valeur <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction représentée dans <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la valeur de résultat retourné par <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments doivent être regroupés.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Fonction permettant d'extraire la clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Keys are compared by using a specified comparer.</source>
          <target state="translated">Les clés sont comparées à l'aide d'un comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> that has a type argument of <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> and where each element represents a projection over a group and its key.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> qui dispose de l’argument de type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> et où chaque élément représente une projection sur un groupe et sa clé.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by key values that are obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Le comportement attendu est qu’il regroupe les éléments de <ph id="ph1">`source`</ph> par les valeurs de clés qui sont obtenues en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare keys and the <ph id="ph2">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.</source>
          <target state="translated">Le <ph id="ph1">`comparer`</ph> paramètre est utilisé pour comparer les clés et les <ph id="ph2">`resultSelector`</ph> paramètre est utilisé pour obtenir une valeur de résultat à partir de chaque groupe et sa clé.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="comparer" /&gt;</ph> a la valeur <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction représentée dans <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Type des éléments de chaque <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la valeur de résultat retourné par <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments doivent être regroupés.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Fonction permettant d'extraire la clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Fonction permettant de mapper chaque élément source à un élément de <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The elements of each group are projected by using a specified function.</source>
          <target state="translated">Les éléments de chaque groupe sont projetés à l'aide d'une fonction spécifique.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> that has a type argument of <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> and where each element represents a projection over a group and its key.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> qui dispose de l’argument de type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> et où chaque élément représente une projection sur un groupe et sa clé.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by key values that are obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Le comportement attendu est qu’il regroupe les éléments de <ph id="ph1">`source`</ph> par les valeurs de clés qui sont obtenues en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The <ph id="ph1">`elementSelector`</ph> parameter is used to project the elements of each group, and the <ph id="ph2">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.</source>
          <target state="translated">Le <ph id="ph1">`elementSelector`</ph> paramètre est utilisé pour projeter les éléments de chaque groupe et le <ph id="ph2">`resultSelector`</ph> paramètre est utilisé pour obtenir une valeur de résultat à partir de chaque groupe et sa clé.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> to group the elements of a sequence and project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%29&gt;</ph> pour regrouper les éléments d’une séquence et projeter une séquence de résultats de type <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="resultSelector" /&gt;</ph> a la valeur <ph id="ph5">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by the function represented in <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction représentée dans <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Type des éléments de chaque <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la valeur de résultat retourné par <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments doivent être regroupés.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Fonction permettant d'extraire la clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Fonction permettant de mapper chaque élément source à un élément de <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Fonction permettant de créer une valeur de résultat à partir de chaque groupe.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Regroupe les éléments d'une séquence selon la fonction de sélection de clé spécifiée et crée une valeur de résultat à partir de chaque groupe et de la clé correspondante.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.</source>
          <target state="translated">Les clés sont comparées à l'aide du comparateur spécifié et les éléments de chaque groupe sont projetés à l'aide d'une fonction spécifique.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> that has a type argument of <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> and where each element represents a projection over a group and its key.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>T:System.Linq.IQueryable`1<ept id="p1">&lt;/c&gt;</ept> qui dispose de l’argument de type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> et où chaque élément représente une projection sur un groupe et sa clé.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupBy%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The expected behavior is that it groups the elements of <ph id="ph1">`source`</ph> by key values that are obtained by invoking <ph id="ph2">`keySelector`</ph> on each element.</source>
          <target state="translated">Le comportement attendu est qu’il regroupe les éléments de <ph id="ph1">`source`</ph> par les valeurs de clés qui sont obtenues en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare key values.</source>
          <target state="translated">Le <ph id="ph1">`comparer`</ph> paramètre est utilisé pour comparer des valeurs de clé.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">`elementSelector`</ph> parameter is used to project the elements of each group, and the <ph id="ph2">`resultSelector`</ph> parameter is used to obtain a result value from each group and its key.</source>
          <target state="translated">Le <ph id="ph1">`elementSelector`</ph> paramètre est utilisé pour projeter les éléments de chaque groupe et le <ph id="ph2">`resultSelector`</ph> paramètre est utilisé pour obtenir une valeur de résultat à partir de chaque groupe et sa clé.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="resultSelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="resultSelector" /&gt;</ph> ou <ph id="ph5">&lt;paramref name="comparer" /&gt;</ph> est <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Correlates the elements of two sequences based on key equality and groups the results.</source>
          <target state="translated">Met en corrélation les éléments de deux séquences en fonction de l'égalité des clés et regroupe les résultats.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Type des éléments de la première séquence.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Type des éléments de la deuxième séquence.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Type des clés retournées par les fonctions de sélecteur de clé.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The type of the result elements.</source>
          <target state="translated">Type des éléments de résultat.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The first sequence to join.</source>
          <target state="translated">Première séquence à joindre.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Séquence à joindre à la première séquence.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">Fonction permettant de créer un élément de résultat à partir d’un élément de la première séquence, ainsi qu’une collection d’éléments correspondants à partir de la deuxième séquence.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>Correlates the elements of two sequences based on key equality and groups the results.</source>
          <target state="translated">Met en corrélation les éléments de deux séquences en fonction de l'égalité des clés et regroupe les résultats.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">Le comparateur d'égalité par défaut est utilisé pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtained by performing a grouped join on two sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient des éléments de type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtenus en exécutant une jointure groupée sur deux séquences.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`outer`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`outer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`outer`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`outer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The expected behavior is that the <ph id="ph1">`outerKeySelector`</ph> and <ph id="ph2">`innerKeySelector`</ph> functions are used to extract keys from <ph id="ph3">`outer`</ph> and <ph id="ph4">`inner`</ph>, respectively.</source>
          <target state="translated">Le comportement attendu est que la <ph id="ph1">`outerKeySelector`</ph> et <ph id="ph2">`innerKeySelector`</ph> fonctions sont utilisées pour extraire des clés de <ph id="ph3">`outer`</ph> et <ph id="ph4">`inner`</ph>, respectivement.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>These keys are compared for equality to match each element in <ph id="ph1">`outer`</ph> with zero or more elements from <ph id="ph2">`inner`</ph>.</source>
          <target state="translated">Ces clés sont comparées d’égalité correspondre à chaque élément dans <ph id="ph1">`outer`</ph> avec zéro ou plusieurs éléments à partir de <ph id="ph2">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>Then the <ph id="ph1">`resultSelector`</ph> function is invoked to project a result object from each group of correlated elements.</source>
          <target state="translated">Le <ph id="ph1">`resultSelector`</ph> fonction est appelée pour projeter un objet de résultat à partir de chaque groupe d’éléments corrélés.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> to perform a grouped join on two sequences.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%29&gt;</ph> pour effectuer une jointure groupée de deux séquences.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> ou <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> est <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Type des éléments de la première séquence.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Type des éléments de la deuxième séquence.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Type des clés retournées par les fonctions de sélecteur de clé.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">Type des éléments de résultat.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">Première séquence à joindre.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Séquence à joindre à la première séquence.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">Fonction permettant de créer un élément de résultat à partir d’un élément de la première séquence, ainsi qu’une collection d’éléments correspondants à partir de la deuxième séquence.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A comparer to hash and compare keys.</source>
          <target state="translated">Comparateur pour hacher et comparer des clés.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on key equality and groups the results.</source>
          <target state="translated">Met en corrélation les éléments de deux séquences en fonction de l'égalité des clés et regroupe les résultats.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> spécifié est utilisé pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtained by performing a grouped join on two sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient des éléments de type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtenus en exécutant une jointure groupée sur deux séquences.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`outer`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`outer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`outer`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.GroupJoin%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`outer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The expected behavior is that the <ph id="ph1">`outerKeySelector`</ph> and <ph id="ph2">`innerKeySelector`</ph> functions are used to extract keys from <ph id="ph3">`outer`</ph> and <ph id="ph4">`inner`</ph>, respectively.</source>
          <target state="translated">Le comportement attendu est que la <ph id="ph1">`outerKeySelector`</ph> et <ph id="ph2">`innerKeySelector`</ph> fonctions sont utilisées pour extraire des clés de <ph id="ph3">`outer`</ph> et <ph id="ph4">`inner`</ph>, respectivement.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>These keys are compared for equality by using <ph id="ph1">`comparer`</ph>.</source>
          <target state="translated">Ces clés sont comparées sont égales à l’aide de <ph id="ph1">`comparer`</ph>.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The outcome of the comparisons is used to match each element in <ph id="ph1">`outer`</ph> with zero or more elements from <ph id="ph2">`inner`</ph>.</source>
          <target state="translated">Le résultat des comparaisons est utilisé pour faire correspondre chaque élément <ph id="ph1">`outer`</ph> avec zéro ou plusieurs éléments à partir de <ph id="ph2">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Then the <ph id="ph1">`resultSelector`</ph> function is invoked to project a result object from each group of correlated elements.</source>
          <target state="translated">Le <ph id="ph1">`resultSelector`</ph> fonction est appelée pour projeter un objet de résultat à partir de chaque groupe d’éléments corrélés.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> ou <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> est <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Produces the set intersection of two sequences.</source>
          <target state="translated">Produit l'intersection de deux séquences.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Type des éléments des séquences d'entrée.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> are returned.</source>
          <target state="translated">Séquence dont les éléments distincts qui apparaissent également dans <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> sont retournés.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose distinct elements that also appear in the first sequence are returned.</source>
          <target state="translated">Séquence dont les éléments distincts qui apparaissent également dans la première séquence sont retournés.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set intersection of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">Produit l'intersection de deux séquences à l'aide du comparateur d'égalité par défaut pour comparer les valeurs.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains the set intersection of the two sequences.</source>
          <target state="translated">Séquence qui contient l'intersection définie des deux séquences.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The expected behavior is that all the elements in <ph id="ph1">`source1`</ph> that are also in <ph id="ph2">`source2`</ph> are returned.</source>
          <target state="translated">Le comportement attendu est que tous les éléments <ph id="ph1">`source1`</ph> qui se trouvent également dans <ph id="ph2">`source2`</ph> sont retournées.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the elements that appear in each of two sequences.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> pour retourner les éléments qui apparaissent dans les deux séquences.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Type des éléments des séquences d'entrée.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> are returned.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments distincts qui apparaissent également dans <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept> sont retournés.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in the first sequence are returned.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dont les éléments distincts qui apparaissent également dans la première séquence sont retournés.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> pour comparer les valeurs.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set intersection of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Produit l'intersection entre deux séquences à l'aide du <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> spécifié pour comparer les valeurs.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the set intersection of the two sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient l'intersection définie des deux séquences.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Intersect%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that all the elements in <ph id="ph1">`source1`</ph> that are also in <ph id="ph2">`source2`</ph> are returned.</source>
          <target state="translated">Le comportement attendu est que tous les éléments <ph id="ph1">`source1`</ph> qui se trouvent également dans <ph id="ph2">`source2`</ph> sont retournées.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare elements.</source>
          <target state="translated">Le <ph id="ph1">`comparer`</ph> paramètre est utilisé pour comparer des éléments.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Met en corrélation les éléments de deux séquences en fonction des clés qui correspondent.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Type des éléments de la première séquence.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Type des éléments de la deuxième séquence.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Type des clés retournées par les fonctions de sélecteur de clé.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The type of the result elements.</source>
          <target state="translated">Type des éléments de résultat.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The first sequence to join.</source>
          <target state="translated">Première séquence à joindre.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Séquence à joindre à la première séquence.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">Fonction permettant de créer un élément de résultat à partir de deux éléments correspondants.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Met en corrélation les éléments de deux séquences en fonction des clés qui correspondent.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">Le comparateur d'égalité par défaut est utilisé pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtained by performing an inner join on two sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient des éléments de type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtenus à la suite d'une jointure interne de deux séquences.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`outer`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`outer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`outer`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`outer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The expected behavior is that of an inner join.</source>
          <target state="translated">Le comportement attendu est celle d’une jointure interne.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The <ph id="ph1">`outerKeySelector`</ph> and <ph id="ph2">`innerKeySelector`</ph> functions are used to extract keys from <ph id="ph3">`outer`</ph> and <ph id="ph4">`inner`</ph>, respectively.</source>
          <target state="translated">Le <ph id="ph1">`outerKeySelector`</ph> et <ph id="ph2">`innerKeySelector`</ph> fonctions sont utilisées pour extraire des clés de <ph id="ph3">`outer`</ph> et <ph id="ph4">`inner`</ph>, respectivement.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>These keys are compared for equality to match elements from each sequence.</source>
          <target state="translated">Ces clés sont comparées sont égales à faire correspondre des éléments de chaque séquence.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>A pair of elements is stored for each element in <ph id="ph1">`inner`</ph> that matches an element in <ph id="ph2">`outer`</ph>.</source>
          <target state="translated">Une paire d’éléments est stockée pour chaque élément <ph id="ph1">`inner`</ph> qui correspond à un élément dans <ph id="ph2">`outer`</ph>.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>Then the <ph id="ph1">`resultSelector`</ph> function is invoked to project a result object from each pair of matching elements.</source>
          <target state="translated">Le <ph id="ph1">`resultSelector`</ph> fonction est appelée pour projeter un objet de résultat à partir de chaque paire d’éléments correspondants.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> to perform an inner join of two sequences based on a common key.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%29&gt;</ph> pour effectuer une jointure interne de deux séquences selon une clé commune.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> ou <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> est <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Type des éléments de la première séquence.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Type des éléments de la deuxième séquence.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Type des clés retournées par les fonctions de sélecteur de clé.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">Type des éléments de résultat.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">Première séquence à joindre.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Séquence à joindre à la première séquence.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Fonction permettant d'extraire la clé de jointure de chaque élément de la première séquence.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Fonction permettant d'extraire la clé de jointure de chaque élément de la deuxième séquence.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">Fonction permettant de créer un élément de résultat à partir de deux éléments correspondants.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to hash and compare keys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> pour hacher et comparer les clés.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Met en corrélation les éléments de deux séquences en fonction des clés qui correspondent.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> spécifié est utilisé pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtained by performing an inner join on two sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient des éléments de type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> obtenus à la suite d'une jointure interne de deux séquences.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`outer`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`outer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`outer`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Join%60%604%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%601%2C%60%602%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%602%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`outer`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The expected behavior is that of an inner join.</source>
          <target state="translated">Le comportement attendu est celle d’une jointure interne.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The <ph id="ph1">`outerKeySelector`</ph> and <ph id="ph2">`innerKeySelector`</ph> functions are used to extract keys from <ph id="ph3">`outer`</ph> and <ph id="ph4">`inner`</ph>, respectively.</source>
          <target state="translated">Le <ph id="ph1">`outerKeySelector`</ph> et <ph id="ph2">`innerKeySelector`</ph> fonctions sont utilisées pour extraire des clés de <ph id="ph3">`outer`</ph> et <ph id="ph4">`inner`</ph>, respectivement.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>These keys are compared for equality by using <ph id="ph1">`comparer`</ph>.</source>
          <target state="translated">Ces clés sont comparées sont égales à l’aide de <ph id="ph1">`comparer`</ph>.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The outcome of the comparisons is used to create a matching pair for each element in <ph id="ph1">`inner`</ph> that matches an element in <ph id="ph2">`outer`</ph>.</source>
          <target state="translated">Le résultat des comparaisons est utilisé pour créer une paire correspondante pour chaque élément <ph id="ph1">`inner`</ph> qui correspond à un élément dans <ph id="ph2">`outer`</ph>.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Then the <ph id="ph1">`resultSelector`</ph> function is invoked to project a result object from each pair of matching elements.</source>
          <target state="translated">Le <ph id="ph1">`resultSelector`</ph> fonction est appelée pour projeter un objet de résultat à partir de chaque paire d’éléments correspondants.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> ou <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> ou <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> est <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the last element in a sequence.</source>
          <target state="translated">Retourne le dernier élément d'une séquence.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> duquel retourner le dernier élément.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>Returns the last element in a sequence.</source>
          <target state="translated">Retourne le dernier élément d'une séquence.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The value at the last position in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Valeur située à la dernière position de <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the last element in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le dernier élément de <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to return the last element of an array.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour retourner le dernier élément d’un tableau.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">La séquence source est vide.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> à partir duquel retourner un élément.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the last element of a sequence that satisfies a specified condition.</source>
          <target state="translated">Retourne le dernier élément d’une séquence à satisfaire à la condition spécifiée.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The last element in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> that passes the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Le dernier élément de <ph id="ph1">&lt;paramref name="source" /&gt;</ph> qui réussit le test spécifié par <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the last element in <ph id="ph1">`source`</ph> that satisfies the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le dernier élément de <ph id="ph1">`source`</ph> qui satisfait à la condition spécifiée par <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to return the last element of an array that satisfies a condition.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> pour retourner le dernier élément d’un tableau qui satisfait à une condition.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Aucun élément ne satisfait la condition dans <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The source sequence is empty.</source>
          <target state="translated">La séquence source est vide.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns the last element of a sequence, or a default value if no element is found.</source>
          <target state="translated">Retourne le dernier élément d'une séquence ou une valeur par défaut si aucun élément n'est trouvé.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> duquel retourner le dernier élément.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Returns the last element in a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">Retourne le dernier élément d'une séquence ou une valeur par défaut si la séquence ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph2">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, the last element in <ph id="ph3">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) si <ph id="ph2">&lt;paramref name="source" /&gt;</ph> est vide ; sinon, dernier élément de <ph id="ph3">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the last element in <ph id="ph1">`source`</ph>, or a default value if <ph id="ph2">`source`</ph> is empty.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le dernier élément de <ph id="ph1">`source`</ph>, ou une valeur par défaut si <ph id="ph2">`source`</ph> est vide.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%2A&gt;</ph> méthode ne fournit pas un moyen de spécifier une valeur par défaut.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Si vous souhaitez spécifier une valeur par défaut différent de celui <ph id="ph1">`default(TSource)`</ph>, utilisez la <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> méthode décrite dans la section exemple.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> on an empty array.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> sur un tableau vide.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">Parfois, la valeur de <ph id="ph1">`default(TSource)`</ph> n’est pas la valeur par défaut que vous souhaitez utiliser si la collection ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Au lieu de vérifier le résultat pour la valeur par défaut non voulue, puis la modifier si nécessaire, vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> méthode pour spécifier la valeur par défaut que vous souhaitez utiliser si la collection est vide.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to obtain the last element.</source>
          <target state="translated">Ensuite, appelez <ph id="ph1">&lt;xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour obtenir le dernier élément.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</source>
          <target state="translated">L’exemple de code suivant utilise les deux techniques pour obtenir une valeur par défaut 1 si une collection de numériques jours du mois est vide.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</source>
          <target state="translated">Étant donné que la valeur par défaut pour un entier est 0, ce qui ne correspond pas à n’importe quel jour du mois, la valeur par défaut doit être spécifiée comme 1.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query is completed.</source>
          <target state="translated">La première variable de résultat est vérifiée pour la valeur par défaut indésirables lorsque la requête est terminée.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The second result variable is obtained by calling <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">La deuxième variable de résultat est obtenue en appelant <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> pour spécifier une valeur par défaut de 1.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> à partir duquel retourner un élément.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</source>
          <target state="translated">Retourne le dernier élément d’une séquence à satisfaire à une condition ou une valeur par défaut si aucun élément correspondant n’est trouvé.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph2">&lt;paramref name="source" /&gt;</ph> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> that passes the test in the predicate function.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) si <ph id="ph2">&lt;paramref name="source" /&gt;</ph> est vide ou si aucun élément ne réussit le test de la fonction de prédicat ; sinon, dernier élément de <ph id="ph3">&lt;paramref name="source" /&gt;</ph> qui réussit le test de cette fonction.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the last element in <ph id="ph1">`source`</ph> that satisfies the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le dernier élément de <ph id="ph1">`source`</ph> qui satisfait à la condition spécifiée par <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It returns a default value if there is no such element in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Elle retourne une valeur par défaut s’il n’existe aucun élément correspondant dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> en passant un prédicat.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>In the second call to the method, there is no element in the sequence that satisfies the condition.</source>
          <target state="translated">Dans le deuxième appel à la méthode, il n’existe aucun élément dans la séquence qui satisfait la condition.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the number of elements in sequence.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> qui représente le nombre d'éléments dans une séquence.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments à compter.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the total number of elements in a sequence.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> qui représente le nombre total d'éléments dans une séquence.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Nombre d'éléments de <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it counts the number of items in <ph id="ph1">`source`</ph> and returns an <ph id="ph2">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il compte le nombre d’éléments dans <ph id="ph1">`source`</ph> et retourne un <ph id="ph2">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to count the elements in an array.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour compter les éléments dans un tableau.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
          <source>The number of elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Le nombre d'éléments est supérieur à <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments à compter.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the number of elements in a sequence that satisfy a condition.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> qui représente le nombre d'éléments dans une séquence qui satisfont à une condition.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> that satisfy the condition in the predicate function.</source>
          <target state="translated">Nombre d'éléments de <ph id="ph1">&lt;paramref name="source" /&gt;</ph> qui satisfont à la condition définie dans la fonction de prédicat.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it counts the number of items in <ph id="ph1">`source`</ph> that satisfy the condition specified by <ph id="ph2">`predicate`</ph> and returns an <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il compte le nombre d’éléments dans <ph id="ph1">`source`</ph> qui satisfont la condition spécifiée par <ph id="ph2">`predicate`</ph> et retourne un <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to count the elements in an array that satisfy a condition.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.LongCount%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> pour compter les éléments dans un tableau qui satisfont à une condition.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The number of matching elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Le nombre d'éléments correspondants est supérieur à <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>A sequence of values to determine the maximum of.</source>
          <target state="translated">Séquence de valeurs dans laquelle rechercher la valeur maximale.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>Returns the maximum value in a generic <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</source>
          <target state="translated">Retourne la valeur maximale dans un <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>générique.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valeur maximale dans la séquence.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the maximum value in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la valeur maximale de <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour déterminer la valeur maximale dans une séquence.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the value returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la valeur retournée par la fonction représentée par <bpt id="p1">&lt;c&gt;</bpt>sélecteur<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A sequence of values to determine the maximum of.</source>
          <target state="translated">Séquence de valeurs dans laquelle rechercher la valeur maximale.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Invokes a projection function on each element of a generic <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> and returns the maximum resulting value.</source>
          <target state="translated">Appelle une fonction de projection sur chaque élément d'un <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> générique et retourne la valeur résultante maximale.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valeur maximale dans la séquence.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element in <ph id="ph2">`source`</ph> and returns the maximum value.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la valeur maximale.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Max%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> pour déterminer la valeur maximale dans une séquence de valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>A sequence of values to determine the minimum of.</source>
          <target state="translated">Séquence de valeurs dans laquelle rechercher la valeur minimale.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>Returns the minimum value of a generic <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</source>
          <target state="translated">Retourne la valeur minimale d'un <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> générique.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valeur minimale dans la séquence.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the minimum value in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la valeur minimale dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour déterminer la valeur minimale dans une séquence.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the value returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la valeur retournée par la fonction représentée par <bpt id="p1">&lt;c&gt;</bpt>sélecteur<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A sequence of values to determine the minimum of.</source>
          <target state="translated">Séquence de valeurs dans laquelle rechercher la valeur minimale.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Invokes a projection function on each element of a generic <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> and returns the minimum resulting value.</source>
          <target state="translated">Appelle une fonction de projection sur chaque élément d'un <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> générique et retourne la valeur résultante minimale.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valeur minimale dans la séquence.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element in <ph id="ph2">`source`</ph> and returns the minimum value.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la valeur minimale.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Min%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> pour déterminer la valeur minimale dans une séquence de valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>The type to filter the elements of the sequence on.</source>
          <target state="translated">Type en fonction duquel filtrer les éléments de la séquence.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> whose elements to filter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> dont les éléments doivent être filtrés.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>Filters the elements of an <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> based on a specified type.</source>
          <target state="translated">Filtre les éléments d'un <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable" /&gt;</ph> en fonction du type spécifié.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>A collection that contains the elements from <ph id="ph1">&lt;paramref name="source" /&gt;</ph> that have type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Collection qui contient les éléments de <ph id="ph1">&lt;paramref name="source" /&gt;</ph> qui ont le type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>The <ph id="ph1">`OfType`</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">`OfType`</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">`OfType`</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">`OfType`</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">`OfType`</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">`OfType`</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>The expected behavior is that it filters out any elements in <ph id="ph1">`source`</ph> that are not of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il élimine par filtrage les éléments dans <ph id="ph1">`source`</ph> qui ne sont pas de type <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source>The following code example demonstrates how to use <ph id="ph1">`OfType`</ph> to filter out elements that are not of type <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> from a list of elements of type <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">`OfType`</ph> pour filtrer les éléments qui ne sont pas de type <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> à partir d’une liste d’éléments de type <ph id="ph3">&lt;xref:System.Reflection.MemberInfo&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Sorts the elements of a sequence in ascending order.</source>
          <target state="translated">Trie les éléments d'une séquence dans l'ordre croissant.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the key returned by the function that is represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction qui est représentée par <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A sequence of values to order.</source>
          <target state="translated">Séquence de valeurs à classer.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Fonction permettant d'extraire une clé d'un élément.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Sorts the elements of a sequence in ascending order according to a key.</source>
          <target state="translated">Trie les éléments d'une séquence dans l'ordre croissant selon une clé.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> dont les éléments sont triés selon une clé.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Le résultat de l’appel de <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> est casté en type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> et retourné.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it sorts the elements of <ph id="ph1">`source`</ph> based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il trie les éléments de <ph id="ph1">`source`</ph> selon la clé obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément de <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to sort the elements of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> pour trier les éléments d’une séquence.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by the function that is represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction qui est représentée par <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Séquence de valeurs à classer.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Fonction permettant d'extraire une clé d'un élément.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">Trie les éléments d'une séquence dans l'ordre croissant à l'aide d'un comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> dont les éléments sont triés selon une clé.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Le résultat de l’appel de <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> est casté en type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> et retourné.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderBy%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The expected behavior is that it sorts the elements of <ph id="ph1">`source`</ph> based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il trie les éléments de <ph id="ph1">`source`</ph> selon la clé obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément de <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare keys.</source>
          <target state="translated">Le <ph id="ph1">`comparer`</ph> paramètre est utilisé pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> a la valeur <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Sorts the elements of a sequence in descending order.</source>
          <target state="translated">Trie les éléments d'une séquence dans l'ordre décroissant.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the key returned by the function that is represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction qui est représentée par <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A sequence of values to order.</source>
          <target state="translated">Séquence de valeurs à classer.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Fonction permettant d'extraire une clé d'un élément.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Sorts the elements of a sequence in descending order according to a key.</source>
          <target state="translated">Trie les éléments d'une séquence dans l'ordre décroissant selon une clé.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> dont les éléments sont triés dans l'ordre décroissant selon une clé.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Le résultat de l’appel de <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> est casté en type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> et retourné.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it sorts the elements of <ph id="ph1">`source`</ph> in descending order, based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il trie les éléments de <ph id="ph1">`source`</ph> dans l’ordre décroissant, selon la clé obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément de <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by the function that is represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction qui est représentée par <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Séquence de valeurs à classer.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Fonction permettant d'extraire une clé d'un élément.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in descending order by using a specified comparer.</source>
          <target state="translated">Trie les éléments d'une séquence dans l'ordre décroissant à l'aide d'un comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> dont les éléments sont triés dans l'ordre décroissant selon une clé.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Le résultat de l’appel de <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> est casté en type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> et retourné.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The expected behavior is that it sorts the elements of <ph id="ph1">`source`</ph> in descending order, based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il trie les éléments de <ph id="ph1">`source`</ph> dans l’ordre décroissant, selon la clé obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément de <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare keys.</source>
          <target state="translated">Le <ph id="ph1">`comparer`</ph> paramètre est utilisé pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to sort the elements of a sequence in descending order by using a custom comparer.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.OrderByDescending%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> pour trier les éléments d’une séquence dans l’ordre décroissant à l’aide d’un comparateur personnalisé.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> a la valeur <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>A sequence of values to reverse.</source>
          <target state="translated">Séquence de valeurs à inverser.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>Inverts the order of the elements in a sequence.</source>
          <target state="translated">Inverse l'ordre des éléments dans une séquence.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements correspond to those of the input sequence in reverse order.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments correspondent à ceux de la séquence d'entrée dans l'ordre inverse.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it reverses the order of the elements in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il inverse l’ordre des éléments dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to reverse the order of elements in an array.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Reverse%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour inverser l’ordre des éléments dans un tableau.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">Projette chaque élément d’une séquence dans un nouveau formulaire.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The type of the value returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la valeur retournée par la fonction représentée par <bpt id="p1">&lt;c&gt;</bpt>sélecteur<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Séquence de valeurs à projeter.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>Projects each element of a sequence into a new form by incorporating the element's index.</source>
          <target state="translated">Projette chaque élément d'une séquence dans un nouveau formulaire en incorporant l'index de l'élément.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking a projection function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments sont le résultat de l'appel d'une fonction de projection sur chaque élément de <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> depend on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> dépendent de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into a different form.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> à projeter dans une autre forme.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> to project over a sequence of values and use the index of each element in the projected form.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%7D%29&gt;</ph> sur une séquence de valeurs de projet et l’utilisation de l’index de chaque élément dans le formulaire projeté.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the value returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la valeur retournée par la fonction représentée par <bpt id="p1">&lt;c&gt;</bpt>sélecteur<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Séquence de valeurs à projeter.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">Projette chaque élément d’une séquence dans un nouveau formulaire.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking a projection function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments sont le résultat de l'appel d'une fonction de projection sur chaque élément de <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into a different form.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> à projeter dans une autre forme.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to project over a sequence of values.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> au projet sur une séquence de valeurs.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and combines the resulting sequences into one sequence of type <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</source>
          <target state="translated">Projette chaque élément d'une séquence sur un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> et combine les séquences résultantes en une séquence de type <ph id="ph2">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The type of the elements of the sequence returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments de la séquence retournée par la fonction représentée par <bpt id="p1">&lt;c&gt;</bpt>sélecteur<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Séquence de valeurs à projeter.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and combines the resulting sequences into one sequence.</source>
          <target state="translated">Projette chaque élément d'une séquence sur un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> et combine les séquences résultantes en une séquence.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments sont le résultat de l'appel d'une fonction de projection d'un-à-plusieurs sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into an enumerable form.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> à projeter dans un formulaire énumérable.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>It then concatenates the enumerable results into a single, one-dimensional sequence.</source>
          <target state="translated">Il concatène ensuite les résultats énumérables en une séquence unique, unidimensionnelle.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> pour effectuer une projection de type un-à-plusieurs sur un tableau.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The type of the elements of the sequence returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments de la séquence retournée par la fonction représentée par <bpt id="p1">&lt;c&gt;</bpt>sélecteur<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Séquence de valeurs à projeter.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>A projection function to apply to each element; the second parameter of this function represents the index of the source element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément ; le deuxième paramètre de cette fonction représente l'index de l'élément source.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and combines the resulting sequences into one sequence.</source>
          <target state="translated">Projette chaque élément d'une séquence sur un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> et combine les séquences résultantes en une séquence.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The index of each source element is used in the projected form of that element.</source>
          <target state="translated">L'index de chaque élément source est utilisé dans le formulaire projeté de l'élément.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments sont le résultat de l'appel d'une fonction de projection d'un-à-plusieurs sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into an enumerable form.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> à projeter dans un formulaire énumérable.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>Each enumerable result incorporates the index of the source element.</source>
          <target state="translated">Chaque résultat énumérable incorpore l’index de l’élément source.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>It then concatenates the enumerable results into a single, one-dimensional sequence.</source>
          <target state="translated">Il concatène ensuite les résultats énumérables en une séquence unique, unidimensionnelle.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array and use the index of each source element.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%602%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%29&gt;</ph> pour effectuer une projection de type un-à-plusieurs sur un tableau et utiliser l’index de chaque élément source.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the intermediate elements collected by the function represented by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments intermédiaires collectés par la fonction représentée par <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">Type des éléments de la séquence résultante.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Séquence de valeurs à projeter.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A projection function to apply to each element of the input sequence.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A projection function to apply to each element of each intermediate sequence.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément de chaque séquence intermédiaire.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and invokes a result selector function on each element therein.</source>
          <target state="translated">Projette chaque élément d'une séquence sur un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> et appelle une fonction du sélecteur de résultat sur chaque élément obtenu.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</source>
          <target state="translated">Les valeurs résultantes de chaque séquence intermédiaire sont combinées en une séquence unique, unidimensionnelle et retournées.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many projection function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding <ph id="ph4">&lt;paramref name="source" /&gt;</ph> element to a result element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments sont le résultat de l'appel de la fonction de projection un-à-plusieurs <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> sur chaque élément de <ph id="ph3">&lt;paramref name="source" /&gt;</ph> puis du mappage de chacun de ces éléments de séquence et de leur élément <ph id="ph4">&lt;paramref name="source" /&gt;</ph> correspondant en un élément de résultat.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`collectionSelector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into an enumerable form.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`collectionSelector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> à projeter dans un formulaire énumérable.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Then the function represented by <ph id="ph1">`resultSelector`</ph> is invoked on each element in each intermediate sequence.</source>
          <target state="translated">Ensuite, la fonction représentée par <ph id="ph1">`resultSelector`</ph> est appelée sur chaque élément de chaque séquence intermédiaire.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The resulting values are concatenated into a single, one-dimensional sequence.</source>
          <target state="translated">Les valeurs résultantes sont concaténées en une séquence unique, unidimensionnelle.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> pour effectuer une projection de type un-à-plusieurs sur un tableau.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>This example uses a result selector function to keep the source element that corresponds to each intermediate sequence in scope for the final call to <ph id="ph1">`Select`</ph>.</source>
          <target state="translated">Cet exemple utilise une fonction de sélecteur de résultat pour conserver l’élément source qui correspond à chaque séquence intermédiaire dans la portée pour le dernier appel à <ph id="ph1">`Select`</ph>.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> a la valeur <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the intermediate elements collected by the function represented by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments intermédiaires collectés par la fonction représentée par <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">Type des éléments de la séquence résultante.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Séquence de valeurs à projeter.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément de la séquence d'entrée ; le deuxième paramètre de cette fonction représente l'index de l'élément source.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A projection function to apply to each element of each intermediate sequence.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément de chaque séquence intermédiaire.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that incorporates the index of the source element that produced it.</source>
          <target state="translated">Projette chaque élément d'une séquence en un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> qui incorpore l'index de l'élément source qui l'a produit.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.</source>
          <target state="translated">Une fonction de sélecteur du résultat est appelée sur chaque élément de chaque séquence intermédiaire, et les valeurs résultantes sont combinées en une séquence unique, unidimensionnelle et retournées.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many projection function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding <ph id="ph4">&lt;paramref name="source" /&gt;</ph> element to a result element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments sont le résultat de l'appel de la fonction de projection un-à-plusieurs <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> sur chaque élément de <ph id="ph3">&lt;paramref name="source" /&gt;</ph> puis du mappage de chacun de ces éléments de séquence et de leur élément <ph id="ph4">&lt;paramref name="source" /&gt;</ph> correspondant en un élément de résultat.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.SelectMany%60%603%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`collectionSelector`</ph> on each element of <ph id="ph2">`source`</ph> to project it into an enumerable form.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`collectionSelector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> à projeter dans un formulaire énumérable.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Each enumerable result incorporates the source element's index.</source>
          <target state="translated">Chaque résultat énumérable incorpore l’index de l’élément source.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Then the function represented by <ph id="ph1">`resultSelector`</ph> is invoked on each element in each intermediate sequence.</source>
          <target state="translated">Ensuite, la fonction représentée par <ph id="ph1">`resultSelector`</ph> est appelée sur chaque élément de chaque séquence intermédiaire.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The resulting values are concatenated into a single, one-dimensional sequence.</source>
          <target state="translated">Les valeurs résultantes sont concaténées en une séquence unique, unidimensionnelle.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> a la valeur <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Determines whether two sequences are equal.</source>
          <target state="translated">Détermine si deux séquences sont égales.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Type des éléments des séquences d'entrée.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to compare to those of <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments sont à comparer à ceux de <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to compare to those of the first sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dont les éléments sont à comparer à ceux de la première séquence.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Determines whether two sequences are equal by using the default equality comparer to compare elements.</source>
          <target state="translated">Détermine si deux séquences sont égales à l'aide du comparateur d'égalité par défaut pour comparer des éléments.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les deux séquences sources sont de longueur égale et que leurs éléments correspondants sont égaux ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The expected behavior is that it determines if the two source sequences are equal.</source>
          <target state="translated">Le comportement attendu est qu’il détermine si les deux séquences source sont égales.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine whether two sequences are equal.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> pour déterminer si deux séquences sont égales.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In this example the sequences are equal.</source>
          <target state="translated">Dans cet exemple, les séquences sont égales.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example compares two sequences that are not equal.</source>
          <target state="translated">L’exemple de code suivant compare deux séquences qui ne sont pas égales.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Type des éléments des séquences d'entrée.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> whose elements to compare to those of <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> dont les éléments sont à comparer à ceux de <bpt id="p1">&lt;c&gt;</bpt>source2<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to compare to those of the first sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dont les éléments sont à comparer à ceux de la première séquence.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to use to compare elements.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> à utiliser pour comparer les éléments.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether two sequences are equal by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare elements.</source>
          <target state="translated">Détermine si deux séquences sont égales à l'aide d'un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> spécifié pour comparer des éléments.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les deux séquences sources sont de longueur égale et que leurs éléments correspondants sont égaux ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.SequenceEqual%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that it determines if the two source sequences are equal by using <ph id="ph1">`comparer`</ph> to compare elements.</source>
          <target state="translated">Le comportement attendu est qu’il détermine si la source de deux séquences sont égales à l’aide de <ph id="ph1">`comparer`</ph> pour comparer des éléments.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns a single, specific element of a sequence.</source>
          <target state="translated">Retourne un élément spécifique unique d'une séquence.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> duquel retourner le seul élément.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</source>
          <target state="translated">Retourne l’élément unique d’une séquence ou lève une exception si cette séquence ne contient pas un seul élément.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The single element of the input sequence.</source>
          <target state="translated">Seul élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the only element in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le seul élément de <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour sélectionner le seul élément d’un tableau.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> has more than one element.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> a plusieurs éléments.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> duquel retourner un seul élément.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">Fonction permettant de tester un élément pour une condition.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</source>
          <target state="translated">Retourne le seul élément d’une séquence qui satisfait à une condition spécifique ou lève une exception si cette séquence contient plusieurs éléments respectant cette condition.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The single element of the input sequence that satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">L'élément unique de la séquence d'entrée qui satisfait à la condition dans <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the only element in <ph id="ph1">`source`</ph> that satisfies the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le seul élément de <ph id="ph1">`source`</ph> qui satisfait à la condition spécifiée par <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> pour sélectionner le seul élément d’un tableau qui satisfait à une condition.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Aucun élément ne satisfait la condition dans <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Plusieurs éléments satisfont à la condition dans <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The source sequence is empty.</source>
          <target state="translated">La séquence source est vide.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns a single, specific element of a sequence, or a default value if no such element is found.</source>
          <target state="translated">Retourne un élément spécifique unique d'une séquence, ou une valeur par défaut si cet élément n'est pas trouvé.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> duquel retourner le seul élément.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</source>
          <target state="translated">Retourne l'élément unique d'une séquence ou une valeur par défaut. Cette méthode lève une exception si cette séquence contient plusieurs éléments.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The single element of the input sequence, or <bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) if the sequence contains no elements.</source>
          <target state="translated">Élément unique de la séquence d’entrée ou <bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph1">&lt;paramref name="TSource" /&gt;</ph>) si la séquence ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The expected behavior is that it returns the only element in <ph id="ph1">`source`</ph>, or a default value if <ph id="ph2">`source`</ph> is empty.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le seul élément de <ph id="ph1">`source`</ph>, ou une valeur par défaut si <ph id="ph2">`source`</ph> est vide.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%2A&gt;</ph> méthode ne fournit pas un moyen de spécifier une valeur par défaut.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Si vous souhaitez spécifier une valeur par défaut différent de celui <ph id="ph1">`default(TSource)`</ph>, utilisez la <ph id="ph2">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> méthode décrite dans la section exemple.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour sélectionner le seul élément d’un tableau.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The second query demonstrates that <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element.</source>
          <target state="translated">La deuxième requête montre que <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> retourne une valeur par défaut lorsque la séquence ne contient pas exactement un élément.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">Parfois, la valeur de <ph id="ph1">`default(TSource)`</ph> n’est pas la valeur par défaut que vous souhaitez utiliser si la collection ne contient aucun élément.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Au lieu de vérifier le résultat pour la valeur par défaut non voulue, puis la modifier si nécessaire, vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> méthode pour spécifier la valeur par défaut que vous souhaitez utiliser si la collection est vide.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> to obtain the element.</source>
          <target state="translated">Ensuite, appelez <ph id="ph1">&lt;xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29&gt;</ph> pour obtenir l’élément.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</source>
          <target state="translated">L’exemple de code suivant utilise les deux techniques pour obtenir une valeur par défaut 1 si une collection de numéros de page est vide.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</source>
          <target state="translated">Étant donné que la valeur par défaut pour un entier est 0, ce qui n’est pas généralement un numéro de page valide, la valeur par défaut doit être spécifiée comme 1.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query is completed.</source>
          <target state="translated">La première variable de résultat est vérifiée pour la valeur par défaut indésirables lorsque la requête est terminée.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source>The second result variable is obtained by calling <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">La deuxième variable de résultat est obtenue en appelant <ph id="ph1">&lt;xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29&gt;</ph> pour spécifier une valeur par défaut de 1.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> has more than one element.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> a plusieurs éléments.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> duquel retourner un seul élément.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">Fonction permettant de tester un élément pour une condition.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</source>
          <target state="translated">Retourne l’élément unique d’une séquence ou une valeur par défaut si cette séquence ne contient pas d’élément respectant cette condition. Cette méthode lève une exception si cette séquence contient plusieurs éléments satisfaisant à cette condition.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The single element of the input sequence that satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>, or <bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if no such element is found.</source>
          <target state="translated">Élément unique de la séquence d’entrée qui satisfait la condition dans <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>, ou <bpt id="p1">&lt;c&gt;</bpt>default<ept id="p1">&lt;/c&gt;</ept>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) si aucun élément de ce type n’est trouvé.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the only element in <ph id="ph1">`source`</ph> that satisfies the condition specified by <ph id="ph2">`predicate`</ph>, or a default value if no such element exists.</source>
          <target state="translated">Le comportement attendu est qu’il retourne le seul élément de <ph id="ph1">`source`</ph> qui satisfait à la condition spécifiée par <ph id="ph2">`predicate`</ph>, ou une valeur par défaut si aucun élément n’existe.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> pour sélectionner le seul élément d’un tableau qui satisfait à une condition.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The second query demonstrates that <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</source>
          <target state="translated">La deuxième requête montre que <ph id="ph1">&lt;xref:System.Linq.Queryable.SingleOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> retourne une valeur par défaut lorsque la séquence ne contient pas exactement un élément qui satisfait la condition.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Plusieurs éléments satisfont à la condition dans <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> à partir duquel retourner les éléments.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The number of elements to skip before returning the remaining elements.</source>
          <target state="translated">Nombre d'éléments à ignorer avant de retourner les éléments restants.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</source>
          <target state="translated">Ignore un nombre spécifié d'éléments dans une séquence puis retourne les éléments restants.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements that occur after the specified index in the input sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments se trouvant après l'index spécifié dans la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The expected behavior is that it skips the first <ph id="ph1">`count`</ph> elements in <ph id="ph2">`source`</ph> and returns the remaining elements.</source>
          <target state="translated">Le comportement attendu est qu’il ignore le premier <ph id="ph1">`count`</ph> éléments <ph id="ph2">`source`</ph> et retourne les éléments restants.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> to skip a specified number of elements in a sorted array and return the remaining elements.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Skip%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> pour ignorer un nombre spécifié d’éléments dans un tableau trié et retourner les éléments restants.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Ignore des éléments dans une séquence tant que la condition spécifiée a la valeur true, puis retourne les éléments restants.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> à partir duquel retourner les éléments.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Ignore des éléments dans une séquence tant que la condition spécifiée a la valeur true, puis retourne les éléments restants.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from <ph id="ph2">&lt;paramref name="source" /&gt;</ph> starting at the first element in the linear series that does not pass the test specified by <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient des éléments de <ph id="ph2">&lt;paramref name="source" /&gt;</ph>, en commençant par le premier élément de la série linéaire qui ne réussit pas le test spécifié par <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it applies <ph id="ph1">`predicate`</ph> to each element in <ph id="ph2">`source`</ph> until it finds an element for which <ph id="ph3">`predicate`</ph> returns false.</source>
          <target state="translated">Le comportement attendu est qu’il applique <ph id="ph1">`predicate`</ph> à chaque élément de <ph id="ph2">`source`</ph> jusqu'à ce qu’il trouve un élément pour lequel <ph id="ph3">`predicate`</ph> retourne la valeur false.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>That element and all the remaining elements are returned.</source>
          <target state="translated">Cet élément et tous les éléments restants sont retournés.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to skip elements of an array as long as a condition is true.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> pour ignorer les éléments d’un tableau tant qu’une condition est vraie.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> à partir duquel retourner les éléments.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>A function to test each element for a condition; the second parameter of this function represents the index of the source element.</source>
          <target state="translated">Fonction permettant de tester chaque élément source par rapport à une condition ; le deuxième paramètre de cette fonction représente l'index de l'élément source.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Ignore des éléments dans une séquence tant que la condition spécifiée a la valeur true, puis retourne les éléments restants.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">L’index de l’élément est utilisé dans la logique de la fonction de prédicat.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from <ph id="ph2">&lt;paramref name="source" /&gt;</ph> starting at the first element in the linear series that does not pass the test specified by <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient des éléments de <ph id="ph2">&lt;paramref name="source" /&gt;</ph>, en commençant par le premier élément de la série linéaire qui ne réussit pas le test spécifié par <ph id="ph3">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The expected behavior is that it applies <ph id="ph1">`predicate`</ph> to each element in <ph id="ph2">`source`</ph> until it finds an element for which <ph id="ph3">`predicate`</ph> returns false.</source>
          <target state="translated">Le comportement attendu est qu’il applique <ph id="ph1">`predicate`</ph> à chaque élément de <ph id="ph2">`source`</ph> jusqu'à ce qu’il trouve un élément pour lequel <ph id="ph3">`predicate`</ph> retourne la valeur false.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>That element and all the remaining elements are returned.</source>
          <target state="translated">Cet élément et tous les éléments restants sont retournés.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The index of each source element is provided as the second argument to <ph id="ph1">`predicate`</ph>.</source>
          <target state="translated">L’index de chaque élément source est fourni comme deuxième argument de <ph id="ph1">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> to skip elements of an array as long as a condition that depends on the element's index is true.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.SkipWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> pour ignorer les éléments d’un tableau tant que la condition qui dépend de l’index de l’élément a la valeur true.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Computes the sum of a sequence of numeric values.</source>
          <target state="translated">Calcule la somme d'une séquence de valeurs numériques.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> dont la somme doit être calculée.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Calcule la somme d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somme des valeurs de la séquence.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Decimal%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la somme des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> pour additionner les valeurs d’une séquence.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> dont la somme doit être calculée.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Calcule la somme d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somme des valeurs de la séquence.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Double%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la somme des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> pour additionner les valeurs d’une séquence.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> dont la somme doit être calculée.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Calcule la somme d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somme des valeurs de la séquence.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int32%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la somme des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> pour additionner les valeurs d’une séquence.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> dont la somme doit être calculée.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Calcule la somme d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somme des valeurs de la séquence.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Int64%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la somme des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> pour additionner les valeurs d’une séquence.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullables dont la somme doit être calculée.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Calcule la somme d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullables.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somme des valeurs de la séquence.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la somme des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> pour additionner les valeurs d’une séquence.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullables dont la somme doit être calculée.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Calcule la somme d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullables.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somme des valeurs de la séquence.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la somme des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> pour additionner les valeurs d’une séquence.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullables dont la somme doit être calculée.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Calcule la somme d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullables.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somme des valeurs de la séquence.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la somme des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> pour additionner les valeurs d’une séquence.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullables dont la somme doit être calculée.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Calcule la somme d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullables.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somme des valeurs de la séquence.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la somme des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> pour additionner les valeurs d’une séquence.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullables dont la somme doit être calculée.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Calcule la somme d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullables.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somme des valeurs de la séquence.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la somme des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> pour additionner les valeurs d’une séquence.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> dont la somme doit être calculée.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Calcule la somme d'une séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somme des valeurs de la séquence.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>The expected behavior is that it returns the sum of the values in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne la somme des valeurs dans <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29&gt;</ph> pour additionner les valeurs d’une séquence.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Séquence de valeurs de type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la somme de la séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somme des valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Decimal%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la somme des valeurs résultantes.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> pour additionner les valeurs projetées d’une séquence.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Séquence de valeurs de type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la somme de la séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somme des valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> depends on the implementation of the type of he <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> dépend de l’implémentation du type d’il <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la somme des valeurs résultantes.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> pour additionner les valeurs projetées d’une séquence.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Séquence de valeurs de type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la somme de la séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somme des valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la somme des valeurs résultantes.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> pour additionner les valeurs projetées d’une séquence.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Séquence de valeurs de type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la somme de la séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somme des valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int64%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la somme des valeurs résultantes.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> pour additionner les valeurs projetées d’une séquence.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Séquence de valeurs de type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la somme de la séquence des valeurs <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somme des valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la somme des valeurs résultantes.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> pour additionner les valeurs projetées d’une séquence.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Séquence de valeurs de type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la somme de la séquence des valeurs <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somme des valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la somme des valeurs résultantes.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> pour additionner les valeurs projetées d’une séquence.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Séquence de valeurs de type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la somme de la séquence des valeurs <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somme des valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la somme des valeurs résultantes.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> pour additionner les valeurs projetées d’une séquence.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Séquence de valeurs de type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la somme de la séquence des valeurs <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somme des valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la somme des valeurs résultantes.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> pour additionner les valeurs projetées d’une séquence.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somme est supérieure à <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Séquence de valeurs de type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la somme de la séquence des valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullables obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somme des valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la somme des valeurs résultantes.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> pour additionner les valeurs projetées d’une séquence.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>A sequence of values of type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Séquence de valeurs de type <bpt id="p1">&lt;c&gt;</bpt>TSource<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>A projection function to apply to each element.</source>
          <target state="translated">Fonction de projection à appliquer à chaque élément.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that is obtained by invoking a projection function on each element of the input sequence.</source>
          <target state="translated">Calcule la somme de la séquence de valeurs <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> obtenue en appelant une fonction de projection sur chaque élément de la séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somme des valeurs projetées.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Single%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The expected behavior is that it invokes <ph id="ph1">`selector`</ph> on each element of <ph id="ph2">`source`</ph> and returns the sum of the resulting values.</source>
          <target state="translated">Le comportement attendu est qu’il appelle <ph id="ph1">`selector`</ph> sur chaque élément de <ph id="ph2">`source`</ph> et retourne la somme des valeurs résultantes.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29&gt;</ph> pour additionner les valeurs projetées d’une séquence.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The sequence to return elements from.</source>
          <target state="translated">Séquence à partir de laquelle retourner les éléments.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The number of elements to return.</source>
          <target state="translated">Nombre d'éléments à retourner.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>Returns a specified number of contiguous elements from the start of a sequence.</source>
          <target state="translated">Retourne un nombre spécifié d'éléments contigus à partir du début d'une séquence.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the specified number of elements from the start of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient le nombre spécifié d'éléments à partir du début de <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The expected behavior is that it takes the first <ph id="ph1">`count`</ph> elements from the start of <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il prend le premier <ph id="ph1">`count`</ph> éléments à partir du début de <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> to return elements from the start of a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Take%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Int32%29&gt;</ph> pour retourner des éléments à partir du début d’une séquence.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</source>
          <target state="translated">Retourne des éléments d'une séquence tant que la condition spécifiée a la valeur true, puis ignore les éléments restants.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The sequence to return elements from.</source>
          <target state="translated">Séquence à partir de laquelle retourner les éléments.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">Retourne des éléments d'une séquence tant que la condition spécifiée a la valeur true.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from the input sequence occurring before the element at which the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> no longer passes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments de la séquence d'entrée placés avant l'élément à partir duquel le test spécifié par <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ne réussit plus.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it applies <ph id="ph1">`predicate`</ph> to each element in <ph id="ph2">`source`</ph> until it finds an element for which <ph id="ph3">`predicate`</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il applique <ph id="ph1">`predicate`</ph> à chaque élément de <ph id="ph2">`source`</ph> jusqu'à ce qu’il trouve un élément pour lequel <ph id="ph3">`predicate`</ph> retourne <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It returns all the elements up until that point.</source>
          <target state="translated">Il retourne tous les éléments jusqu'à ce point.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition is true.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> pour retourner des éléments à partir du début d’une séquence tant qu’une condition est vraie.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The sequence to return elements from.</source>
          <target state="translated">Séquence à partir de laquelle retourner les éléments.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition ; le deuxième paramètre de la fonction représente l'index de l'élément dans la séquence source.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">Retourne des éléments d'une séquence tant que la condition spécifiée a la valeur true.</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">L’index de l’élément est utilisé dans la logique de la fonction de prédicat.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from the input sequence occurring before the element at which the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> no longer passes.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments de la séquence d'entrée placés avant l'élément à partir duquel le test spécifié par <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> ne réussit plus.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The expected behavior is that it applies <ph id="ph1">`predicate`</ph> to each element in <ph id="ph2">`source`</ph> until it finds an element for which <ph id="ph3">`predicate`</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il applique <ph id="ph1">`predicate`</ph> à chaque élément de <ph id="ph2">`source`</ph> jusqu'à ce qu’il trouve un élément pour lequel <ph id="ph3">`predicate`</ph> retourne <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>It returns all the elements up until that point.</source>
          <target state="translated">Il retourne tous les éléments jusqu'à ce point.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The index of each source element is provided as the second argument to <ph id="ph1">`predicate`</ph>.</source>
          <target state="translated">L’index de chaque élément source est fourni comme deuxième argument de <ph id="ph1">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition that uses the index of the element is true.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.TakeWhile%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> pour retourner des éléments à partir du début d’une séquence tant qu’une condition qui utilise l’index de l’élément a la valeur true.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order.</source>
          <target state="translated">Réalise un classement des éléments d'une séquence dans l'ordre croissant.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the key returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction représentée par <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> qui contient les éléments à trier.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Fonction permettant d'extraire une clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</source>
          <target state="translated">Réalise un classement des éléments d'une séquence dans l'ordre croissant selon une clé.</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> dont les éléments sont triés selon une clé.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Le résultat de l’appel de <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> est casté en type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> et retourné.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it performs a secondary sort of the elements of <ph id="ph1">`source`</ph> based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il effectue un tri secondaire des éléments de <ph id="ph1">`source`</ph> selon la clé obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément de <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>All previously established sort orders are preserved.</source>
          <target state="translated">Tous les établie précédemment ordres de tri sont conservées.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> pour effectuer un classement secondaire des éléments d’une séquence.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction représentée par <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> qui contient les éléments à trier.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Fonction permettant d'extraire une clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">Réalise un classement des éléments d'une séquence dans l'ordre croissant à l'aide d'un comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> dont les éléments sont triés selon une clé.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Le résultat de l’appel de <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> est casté en type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> et retourné.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The expected behavior is that it performs a secondary sort of the elements of <ph id="ph1">`source`</ph> based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il effectue un tri secondaire des éléments de <ph id="ph1">`source`</ph> selon la clé obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément de <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>All previously established sort orders are preserved.</source>
          <target state="translated">Tous les établie précédemment ordres de tri sont conservées.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare key values.</source>
          <target state="translated">Le <ph id="ph1">`comparer`</ph> paramètre est utilisé pour comparer des valeurs de clé.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> a la valeur <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order.</source>
          <target state="translated">Réalise un classement des éléments d'une séquence dans l'ordre décroissant.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The type of the key returned by the function represented by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type de la clé retournée par la fonction représentée par <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> qui contient les éléments à trier.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Fonction permettant d'extraire une clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</source>
          <target state="translated">Réalise un classement des éléments d'une séquence dans l'ordre décroissant selon une clé.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> dont les éléments sont triés dans l'ordre décroissant selon une clé.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Le résultat de l’appel de <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> est casté en type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> et retourné.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>The expected behavior is that it performs a secondary sort of the elements of <ph id="ph1">`source`</ph> in descending order, based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il effectue un tri secondaire des éléments de <ph id="ph1">`source`</ph> dans l’ordre décroissant, selon la clé obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément de <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source>All previously established sort orders are preserved.</source>
          <target state="translated">Tous les établie précédemment ordres de tri sont conservées.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key that is returned by the <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept> function.</source>
          <target state="translated">Le type de la clé retournée par la <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept> (fonction).</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IOrderedQueryable`1" /&gt;</ph> qui contient les éléments à trier.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Fonction permettant d'extraire une clé de chaque élément.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> pour comparer les clés.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</source>
          <target state="translated">Réalise un classement des éléments d'une séquence dans l'ordre décroissant à l'aide d'un comparateur spécifié.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>A collection whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Collection dont les éléments sont triés par ordre décroissant selon une clé.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The result of calling <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> is cast to type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> and returned.</source>
          <target state="translated">Le résultat de l’appel de <ph id="ph1">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> est casté en type <ph id="ph2">&lt;xref:System.Linq.IOrderedQueryable%601&gt;</ph> et retourné.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The expected behavior is that it performs a secondary sort of the elements of <ph id="ph1">`source`</ph> in descending order, based on the key obtained by invoking <ph id="ph2">`keySelector`</ph> on each element of <ph id="ph3">`source`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il effectue un tri secondaire des éléments de <ph id="ph1">`source`</ph> dans l’ordre décroissant, selon la clé obtenue en appelant <ph id="ph2">`keySelector`</ph> sur chaque élément de <ph id="ph3">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>All previously established sort orders are preserved.</source>
          <target state="translated">Tous les établie précédemment ordres de tri sont conservées.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare key values.</source>
          <target state="translated">Le <ph id="ph1">`comparer`</ph> paramètre est utilisé pour comparer des valeurs de clé.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.ThenByDescending%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> pour réaliser un classement secondaire des éléments d’une séquence dans l’ordre décroissant à l’aide d’un comparateur personnalisé.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> ou <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> a la valeur <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Produces the set union of two sequences.</source>
          <target state="translated">Produit l'union définie de deux séquences.</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Type des éléments des séquences d'entrée.</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose distinct elements form the first set for the union operation.</source>
          <target state="translated">Séquence dont les éléments distincts forment le premier jeu pour l'opération d'union.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose distinct elements form the second set for the union operation.</source>
          <target state="translated">Séquence dont les éléments distincts forment le second jeu pour l'opération d'union.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set union of two sequences by using the default equality comparer.</source>
          <target state="translated">Produit l'union de deux séquences à l'aide du comparateur d'égalité par défaut.</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments des deux séquences d'entrée, à l'exception des éléments en double.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The expected behavior is that the set union of the elements in <ph id="ph1">`source1`</ph> and <ph id="ph2">`source2`</ph> is returned.</source>
          <target state="translated">Le comportement attendu est que l’union définie des éléments dans <ph id="ph1">`source1`</ph> et <ph id="ph2">`source2`</ph> est retourné.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the set union of two sequences.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> pour obtenir l’union de deux séquences.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Type des éléments des séquences d'entrée.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence whose distinct elements form the first set for the union operation.</source>
          <target state="translated">Séquence dont les éléments distincts forment le premier jeu pour l'opération d'union.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence whose distinct elements form the second set for the union operation.</source>
          <target state="translated">Séquence dont les éléments distincts forment le second jeu pour l'opération d'union.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> pour comparer les valeurs.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set union of two sequences by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Produit l'union de deux séquences à l'aide d'un <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments des deux séquences d'entrée, à l'exception des éléments en double.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source1`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Union%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The expected behavior is that the set union of the elements in <ph id="ph1">`source1`</ph> and <ph id="ph2">`source2`</ph> is returned.</source>
          <target state="translated">Le comportement attendu est que l’union définie des éléments dans <ph id="ph1">`source1`</ph> et <ph id="ph2">`source2`</ph> est retourné.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">`comparer`</ph> parameter is used to compare values.</source>
          <target state="translated">Le <ph id="ph1">`comparer`</ph> paramètre est utilisé pour comparer des valeurs.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" uid="T:System.Linq.Queryable">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtre une séquence de valeurs selon un prédicat.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to filter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> à filtrer.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtre une séquence de valeurs selon un prédicat.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments de la séquence d'entrée qui satisfont à la condition spécifiée par <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The expected behavior is that it returns the elements from <ph id="ph1">`source`</ph> that satisfy the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne les éléments de <ph id="ph1">`source`</ph> qui satisfont la condition spécifiée par <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> to filter a sequence.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29&gt;</ph> pour filtrer une séquence.</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Le type des éléments du <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> to filter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> à filtrer.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</source>
          <target state="translated">Fonction permettant de tester chaque élément par rapport à une condition ; le deuxième paramètre de la fonction représente l'index de l'élément dans la séquence source.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtre une séquence de valeurs selon un prédicat.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>Each element's index is used in the logic of the predicate function.</source>
          <target state="translated">L’index de chaque élément est utilisé dans la logique de la fonction de prédicat.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments de la séquence d'entrée qui satisfont à la condition spécifiée par <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>This method has at least one parameter of type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> whose type argument is one of the <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</source>
          <target state="translated">Cette méthode a au moins un paramètre de type <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> dont l’argument de type est un de la <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> types.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>For these parameters, you can pass in a lambda expression and it will be compiled to an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">Pour ces paramètres, vous pouvez passer dans une expression lambda et elle sera compilée dans un <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The query behavior that occurs as a result of executing an expression tree that represents calling <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> depends on the implementation of the type of the <ph id="ph2">`source`</ph> parameter.</source>
          <target state="translated">Le comportement de requête qui se produit suite à l’exécution d’une arborescence d’expression qui représente l’appel <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> dépend de l’implémentation du type de le <ph id="ph2">`source`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The expected behavior is that it returns the elements from <ph id="ph1">`source`</ph> that satisfy the condition specified by <ph id="ph2">`predicate`</ph>.</source>
          <target state="translated">Le comportement attendu est qu’il retourne les éléments de <ph id="ph1">`source`</ph> qui satisfont la condition spécifiée par <ph id="ph2">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The index of each source element is provided as the second argument to <ph id="ph1">`predicate`</ph>.</source>
          <target state="translated">L’index de chaque élément source est fourni comme deuxième argument de <ph id="ph1">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> to filter a sequence based on a predicate that incorporates the index of each element.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser <ph id="ph1">&lt;xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%7D%29&gt;</ph> pour filtrer une séquence selon un prédicat qui incorpore l’index de chaque élément.</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of the first input sequence.</source>
          <target state="translated">Type des éléments de la première séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of the second input sequence.</source>
          <target state="translated">Type des éléments de la seconde séquence d'entrée.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The type of the elements of the result sequence.</source>
          <target state="translated">Type des éléments de la séquence résultante.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The first sequence to merge.</source>
          <target state="translated">Première séquence à fusionner.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The second sequence to merge.</source>
          <target state="translated">Seconde séquence à fusionner.</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>A function that specifies how to merge the elements from the two sequences.</source>
          <target state="translated">Fonction qui spécifie comment fusionner les éléments des deux séquences.</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>Merges two sequences by using the specified predicate function.</source>
          <target state="translated">Fusionne deux séquences en utilisant la fonction de prédicat spécifiée.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> that contains merged elements of two input sequences.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.IQueryable`1" /&gt;</ph> qui contient les éléments fusionnés des deux séquences d'entrée.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> method generates a <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> that represents calling <ph id="ph3">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> itself as a constructed generic method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> méthode génère une <ph id="ph2">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> qui représente l’appel <ph id="ph3">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> lui-même en tant qu’une méthode générique construite.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>It then passes the <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> to the <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> represented by the <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> property of the <ph id="ph5">`source1`</ph> parameter.</source>
          <target state="translated">Il passe ensuite le <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> à la <ph id="ph2">&lt;xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29&gt;</ph> méthode de la <ph id="ph3">&lt;xref:System.Linq.IQueryProvider&gt;</ph> représenté par le <ph id="ph4">&lt;xref:System.Linq.IQueryable.Provider%2A&gt;</ph> propriété de le <ph id="ph5">`source1`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The method merges each element of the first sequence with an element that has the same index in the second sequence.</source>
          <target state="translated">La méthode fusionne chaque élément de la première séquence avec un élément qui a le même index dans la deuxième séquence.</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</source>
          <target state="translated">Si les séquences n’ont pas le même nombre d’éléments, la méthode fusionne des séquences jusqu'à ce qu’il atteigne la fin d’un d’eux.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>For example, if one sequence has three elements and the other one has four, the resulting sequence will have only three elements.</source>
          <target state="translated">Par exemple, si une séquence a trois éléments et l’autre en a quatre, la séquence résultante aura uniquement trois éléments.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> method to merge two sequences.</source>
          <target state="translated">L’exemple de code suivant montre comment utiliser la <ph id="ph1">&lt;xref:System.Linq.Queryable.Zip%2A&gt;</ph> méthode pour fusionner deux séquences.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" uid="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
          <source><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> or <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source1" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="source2" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>