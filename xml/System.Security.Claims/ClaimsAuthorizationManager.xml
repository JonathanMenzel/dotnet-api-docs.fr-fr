<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa77fc99c06460c962f41c33b11554f448051d19" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36531908" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Définit l'implémentation de base d'un gestionnaire d'autorisation des revendications.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Security.Claims.ClaimsAuthorizationManager> classe fournit l’implémentation de base d’un gestionnaire d’autorisation de revendications. Un gestionnaire d’autorisation des revendications peut être utilisé dans les deux scénarios suivants :  
  
-   Dans les applications Web et services, un gestionnaire d’autorisation des revendications peut être ajouté au pipeline de traitement pour fournir un point d’extensibilité à partir de laquelle vous pouvez autoriser l’accès à une ressource en fonction de la valeur des revendications entrantes avant le code d’application qu’en réalité implémente la ressource demandée est appelée.  
  
-   Lorsque vous utilisez le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe ou la <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> classe pour exécuter accès impérative ou déclarative basée sur les revendications vérifie dans votre code, le Gestionnaire d’autorisation de revendications qui est configuré pour votre application est appelé par le système pour effectuer le Vérifiez. Vérifications de l’accès basé sur les revendications peuvent être effectuées dans les applications Web et applications de bureau.  
  
 L’implémentation par défaut fournie par le <xref:System.Security.Claims.ClaimsAuthorizationManager> classe autorise l’accès pour chaque revendication présentée ; Toutefois, vous pouvez dériver de cette classe et substituer la <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> méthode pour fournir votre propre logique d’autorisation.  
  
 L’utilisation d’un gestionnaire d’autorisation de revendications est facultative. Vous pouvez configurer votre application pour utiliser un gestionnaire d’autorisation des revendications par programmation à l’aide de la <xref:System.IdentityModel.Configuration.IdentityConfiguration> classe ou de façon déclarative, en spécifiant le [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)élément, qui est un élément enfant de le [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) élément dans votre fichier de configuration d’application. Si votre application est un site web ou une application web hébergée dans Internet Information Services (IIS), vous devez également ajouter le <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> dans la collection de Modules HTTP ASP.NET.  
  
> [!IMPORTANT]
>  Lorsque vous utilisez le <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe ou le <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> (classe), le Gestionnaire d’autorisation des revendications qui est utilisé pour effectuer la vérification d’accès est celui qui est spécifié dans la configuration d’identité sous la <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> propriété. Dans un fichier de configuration, il est le `<identityConfiguration>` section qui est référencée à partir de la valeur par défaut `<federationConfiguration>` élément. Cela est vrai même pour les applications de bureau et les services Windows Communication Foundation (WCF).  
  
 Le <xref:System.Security.Claims.ClaimsAuthorizationManager> classe de base ne prend pas de configuration supplémentaire ; Toutefois, vous pouvez remplacer le <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> dans les classes dérivées pour fournir l’initialisation de votre gestionnaire d’autorisation des revendications à partir des éléments enfants de le `<claimsAuthorizationElement>`. Le scénario classique consiste à utiliser ces éléments enfants pour spécifier des stratégies d’autorisation qui déterminent les types de revendications et les valeurs sont nécessaires pour accéder à la ressource. Cela n’est pas une obligation, bien que vous êtes libre de définir quel que soit l’utilisation et la syntaxe de sens pour votre implémentation.  
  
   
  
## Examples  
 Les exemples de code qui sont utilisés dans le <xref:System.Security.Claims.ClaimsAuthorizationManager> rubriques sont extraites de la `Claims Based Authorization` exemple. Cet exemple fournit un gestionnaire d’autorisation des revendications personnalisées qui peut autoriser des sujets basés sur une stratégie qui est spécifiée dans la configuration. Le Gestionnaire d’autorisation de revendications personnalisées se compose de trois éléments : une classe dérivée de <xref:System.Security.Claims.ClaimsAuthorizationManager> qui implémente le gestionnaire, la `ResourceAction` classe qui associe une ressource et une action et un lecteur de stratégie qui lit et compile la stratégie est spécifié dans le fichier de configuration. Cette compilé stratégie peut ensuite être utilisée par le Gestionnaire d’autorisation des revendications pour évaluer une entité de sécurité pour autoriser l’accès aux ressources. Pas tous les éléments sont affichés par souci de concision. Pour plus d’informations sur cet exemple et d’autres exemples disponibles pour WIF et où les télécharger, consultez [Index exemple de Code WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Le code suivant illustre l’implémentation du Gestionnaire d’autorisation des revendications personnalisées. Le <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> méthode lit et compile la stratégie à partir de la configuration à l’aide de la classe d’assistance de lecteur de stratégie (non illustrée) et le <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> méthode accorde ou refuse l’accès en fonction de cette stratégie.  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 Le code suivant illustre la `ResourceAction` classe utilisée par le Gestionnaire de revendications personnalisées.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 Le code XML suivant montre comment configurer les revendications de gestionnaire d’autorisations ci-dessus pour une application web hébergée dans IIS 7.5. Seuls les éléments spécifiques à la configuration du Gestionnaire d’autorisation des revendications sont affichés. Notez qu’une référence à la <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> classe doit être ajoutée au pipeline sous le `<system.Webserver>` élément. Pour les sites et applications hébergées dans les versions d’IIS avant IIS 7, les modules peuvent être ajoutés au pipeline sous le `<system.Web>` élément. Cette configuration est indiquée mais commentée.  
  
 La stratégie utilisée par le Gestionnaire d’autorisation des revendications est spécifiée par personnalisé `<policy>` éléments sous le [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) élément. Dans la première stratégie, le principal doit posséder une des revendications spécifiées afin d’effectuer l’action spécifiée sur la ressource spécifiée. Dans la deuxième stratégie, le principal doit posséder les deux revendications pour être en mesure d’effectuer l’action spécifiée sur la ressource spécifiée. Dans tous les autres, le principal accès est automatiquement accordé, quel que soit les revendications qu’il possède.  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthoirzationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">Contexte d'autorisation contenant le sujet, la ressource et l'action pour laquelle l'autorisation doit être vérifiée.</param>
        <summary>En cas d'implémentation dans une classe dérivée, vérifie l'autorisation du sujet dans le contexte spécifié pour effectuer l'action spécifiée sur la ressource spécifiée.</summary>
        <returns>
          <see langword="true" /> si le sujet est autorisé à exécuter l'action spécifiée dans la ressource spécifiée ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Retourne l’implémentation de base toujours `true`, ce qui autorise l’accès. Vous pouvez substituer cette méthode dans une classe dérivée pour autoriser l’accès en fonction des exigences de votre application de partie de confiance. Si cette méthode retourne `false`, Windows Identity Foundation (WIF) retourne une erreur non autorisée à l’appelant ; sinon, l’exécution est passée à l’application de partie de confiance.  
  
   
  
## Examples  
 Les exemples de code qui sont utilisés dans le <xref:System.Security.Claims.ClaimsAuthorizationManager> rubriques sont extraites de la `Claims Based Authorization` exemple. Cet exemple fournit un gestionnaire d’autorisation des revendications personnalisées qui peut autoriser des sujets basés sur une stratégie qui est spécifiée dans la configuration. Le Gestionnaire d’autorisation de revendications personnalisées se compose de trois éléments : une classe dérivée de <xref:System.Security.Claims.ClaimsAuthorizationManager> qui implémente le gestionnaire, la `ResourceAction` classe qui associe une ressource et une action et un lecteur de stratégie qui lit et compile la stratégie est spécifié dans le fichier de configuration. Cette compilé stratégie peut ensuite être utilisée par le Gestionnaire d’autorisation des revendications pour évaluer une entité de sécurité pour autoriser l’accès aux ressources. Pas tous les éléments sont affichés par souci de concision. Pour plus d’informations sur cet exemple et d’autres exemples disponibles pour WIF et où les télécharger, consultez [Index exemple de Code WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Le code suivant illustre la substitution de la <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> (méthode). Cette méthode accorde ou refuse l’accès basé sur une stratégie de lecture et compilé à partir du fichier de configuration.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 Le code suivant illustre la `ResourceAction` classe utilisée par le Gestionnaire de revendications personnalisées.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 La stratégie utilisée par le Gestionnaire d’autorisation des revendications est spécifiée par personnalisé `<policy>` éléments sous le [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) élément. Cette stratégie est lu et compilée par le <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> (méthode). Dans la première stratégie, le principal doit posséder une des revendications spécifiées afin d’effectuer l’action spécifiée sur la ressource spécifiée. Dans la deuxième stratégie, le principal doit posséder les deux revendications pour être en mesure d’effectuer l’action spécifiée sur la ressource spécifiée. Dans tous les autres, le principal accès est automatiquement accordé, quel que soit les revendications qu’il possède.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Éléments de configuration personnalisée. Chaque nœud de la liste est de type <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Après substitution dans une classe dérivée, charge la configuration personnalisée à partir de XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> méthode est appelée par l’infrastructure de configuration. Lorsque cette méthode est appelée, le `nodelist` contiendra les éléments enfants de niveau supérieur de la [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) élément à partir du fichier de configuration. Chacun de ces éléments peut, à son tour, contenir des attributs ou éléments enfants en fonction du schéma de configuration que vous définissez pour votre classe dérivée. Si aucun élément enfant s’affiche sous le `<claimsAuthorizationManager>` élément dans le fichier de configuration, cette méthode n’est pas appelée.  
  
 L’implémentation par défaut lève un <xref:System.NotImplementedException>. Substituez cette méthode dans votre classe dérivée pour activer l’initialisation de votre gestionnaire d’autorisation des revendications à partir d’un fichier de configuration. En règle générale, les éléments de configuration sont utilisés pour exprimer une stratégie d’autorisation ; Toutefois, vous pouvez définir les éléments et les utiliser de quelque manière appropriée en fonction des exigences de votre application.  
  
   
  
## Examples  
 Les exemples de code qui sont utilisés dans le <xref:System.Security.Claims.ClaimsAuthorizationManager> rubriques sont extraites de la `Claims Based Authorization` exemple. Cet exemple fournit un gestionnaire d’autorisation des revendications personnalisées qui peut autoriser des sujets basés sur une stratégie qui est spécifiée dans la configuration. Le Gestionnaire d’autorisation de revendications personnalisées se compose de trois éléments : une classe dérivée de <xref:System.Security.Claims.ClaimsAuthorizationManager> qui implémente le gestionnaire, la `ResourceAction` classe qui associe une ressource et une action et un lecteur de stratégie qui lit et compile la stratégie est spécifié dans le fichier de configuration. Cette compilé stratégie peut ensuite être utilisée par le Gestionnaire d’autorisation des revendications pour évaluer une entité de sécurité pour autoriser l’accès aux ressources. Pas tous les éléments sont affichés par souci de concision. Pour plus d’informations sur cet exemple et d’autres exemples disponibles pour WIF et où les télécharger, consultez [Index exemple de Code WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Le code suivant illustre la substitution de la <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> (méthode). Cette méthode utilise une classe de lecteur de stratégie d’assistance (non illustrée) pour lire et compiler des stratégies d’autorisation spécifiés dans le fichier de configuration. Les stratégies sont ajoutés à un dictionnaire et sont accessibles par un `ResourceAction` objet clé qui est créé à partir de la ressource et l’action à laquelle ils sont destinés.  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 Le code suivant illustre la `ResourceAction` classe utilisée par le Gestionnaire de revendications personnalisées.  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 La stratégie utilisée par le Gestionnaire d’autorisation des revendications est spécifiée par personnalisé `<policy>` éléments sous le [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) élément. Cette stratégie est lu et compilée par le <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> (méthode). Dans la première stratégie, le principal doit posséder une des revendications spécifiées afin d’effectuer l’action spécifiée sur la ressource spécifiée. Dans la deuxième stratégie, le principal doit posséder les deux revendications pour être en mesure d’effectuer l’action spécifiée sur la ressource spécifiée. Dans tous les autres, le principal accès est automatiquement accordé, quel que soit les revendications qu’il possède.  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>