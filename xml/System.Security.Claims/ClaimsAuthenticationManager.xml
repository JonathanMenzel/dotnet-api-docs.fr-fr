<Type Name="ClaimsAuthenticationManager" FullName="System.Security.Claims.ClaimsAuthenticationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="42a1e9b2af0b0e21944401ffe335af36234324db" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36627191" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ClaimsAuthenticationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthenticationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthenticationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthenticationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthenticationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Définit l'implémentation de base d'un gestionnaire d'authentification des revendications. Le gestionnaire d'authentification des revendications fournit un emplacement dans le pipeline de traitement des revendications pour appliquer la logique de traitement (filtrage, validation, extension) à la collection de revendications dans l'entité entrante avant que l'exécution n'atteigne votre code d'application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les revendications Gestionnaire d’authentification fournit un point d’extensibilité dans l’application de revendications de pipeline de traitement que vous pouvez utiliser pour valider, filtrer, modifier, revendications entrantes, ou injecter des nouvelles revendications dans l’ensemble de revendications présentées par un <xref:System.Security.Claims.ClaimsPrincipal> avant la partie de confiance code de l’application est exécuté. Vous pouvez même revenir une implémentation personnalisée de <xref:System.Security.Claims.ClaimsPrincipal> si votre application de partie de confiance l’exige. L’implémentation par défaut fournie par le <xref:System.Security.Claims.ClaimsAuthenticationManager> classe renvoie les revendications dans le <xref:System.Security.Claims.ClaimsPrincipal> tels quels ; Toutefois, vous pouvez dériver de cette classe et substituer les <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> méthode pour modifier les revendications dans le <xref:System.Security.Claims.ClaimsPrincipal> (ou pour retourner un personnalisé <xref:System.Security.Claims.ClaimsPrincipal>).  
  
 Une raison classique de création d’une authentification par revendications personnalisées manager consiste à ajouter, supprimer ou transformer les revendications en fonction des informations sont connues uniquement ou, peut-être, mieux gérées par l’application de partie de confiance. Par exemple, un historique des achats des clients dans une application de panier d’achat susceptibles d’être conservé dans une base de données gérés par l’application de partie de confiance, puis ajouté à l’entité de revendications retournée par le Gestionnaire d’authentification revendications selon la valeur d’une revendication de nom trouvée dans le principal entrant.  
  
 Vous pouvez configurer votre application pour utiliser un `ClaimsAuthenticationManager` par programmation à l’aide de la <xref:System.IdentityModel.Configuration.IdentityConfiguration> classe ou dans la configuration via la [ &lt;claimsAuthenticationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) (de l’élément qui est un élément enfant de le [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) élément). Vous pouvez remplacer le <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> méthode pour fournir le traitement des éléments enfants personnalisé de la `<claimsAuthenticationManager>` élément par le biais duquel votre gestionnaire personnalisé peut être configuré. L’implémentation de base de <xref:System.Security.Claims.ClaimsAuthenticationManager> ne gère pas tous les éléments enfants.  
  
 Configuration de votre application pour utiliser un gestionnaire de l’authentification des revendications permet de s’assurer qu’il sera appelé par Windows Identity Foundation (WIF) du pipeline de requête.  
  
   
  
## Examples  
 Le code suivant montre une authentification par revendications simple manager qui ajoute une revendication de rôle au principal entrant sans effectuer aucune vérification sur les revendications entrantes...  
  
 [!code-csharp[WifWebApplication1#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifwebapplication1/cs/myclaimsauthenticationmanager/simpleclaimsauthenticatonmanager.cs#1)]  
  
 Le code XML suivant montre la `<claimsAuthenticationManager>` élément.  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthenticationManager type="MyClaimsAuthenticationManager.SimpleClaimsAuthenticatonManager, MyClaimsAuthenticationManager" />  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthenticationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthenticationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Claims.ClaimsPrincipal Authenticate (string resourceName, System.Security.Claims.ClaimsPrincipal incomingPrincipal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Claims.ClaimsPrincipal Authenticate(string resourceName, class System.Security.Claims.ClaimsPrincipal incomingPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Authenticate (resourceName As String, incomingPrincipal As ClaimsPrincipal) As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Claims::ClaimsPrincipal ^ Authenticate(System::String ^ resourceName, System::Security::Claims::ClaimsPrincipal ^ incomingPrincipal);" />
      <MemberSignature Language="F#" Value="abstract member Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal&#xA;override this.Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal" Usage="claimsAuthenticationManager.Authenticate (resourceName, incomingPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="incomingPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="resourceName">Adresse de la ressource demandée.</param>
        <param name="incomingPrincipal">Principal des revendications représentant l'utilisateur authentifié qui tente d'accéder à la ressource.</param>
        <summary>En cas de substitution dans une classe dérivée, retourne un objet <see cref="T:System.Security.Claims.ClaimsPrincipal" /> conforme aux spécifications de l' application de partie de confiance (RP). L'implémentation par défaut ne modifie pas le <see cref="T:System.Security.Claims.ClaimsPrincipal" /> entrant.</summary>
        <returns>Entité de sécurité des revendications qui contient toutes les modifications nécessaires à l'application de partie de confiance (RP). L'implémentation par défaut retourne le principal des revendications entrantes non modifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> méthode est appelée dans le pipeline de traitement de requête vous pouvez substituer cette méthode dans une classe dérivée pour filtrer, modifier ou injecter des revendications dans le principal de revendications conformément à la stratégie de votre application de partie de confiance. Selon les besoins de l’application de partie de confiance, vous pouvez même revenir une implémentation personnalisée de <xref:System.Security.Claims.ClaimsPrincipal>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthenticationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Éléments de configuration personnalisée. Chaque nœud de la liste est de type <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Après substitution dans une classe dérivée, charge la configuration personnalisée à partir de XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> méthode est appelée par l’infrastructure de configuration. Lorsque cette méthode est appelée, le `nodelist` contiendra les éléments enfants de niveau supérieur de la [ &lt;claimsAuthenticationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) élément à partir du fichier de configuration. Chacun de ces éléments peut, à son tour, contenir des attributs ou éléments enfants en fonction du schéma de configuration que vous définissez pour votre classe dérivée. Si aucun élément enfant s’affiche sous le `<claimsAuthenticationManager>` élément dans le fichier de configuration, cette méthode n’est pas appelée.  
  
 L’implémentation par défaut lève un <xref:System.NotImplementedException>. Substituez cette méthode dans votre classe dérivée pour activer l’initialisation de votre gestionnaire d’authentification des revendications à partir d’un fichier de configuration. Par exemple, les éléments de configuration peuvent décrire une stratégie à suivre lors de l’authentification d’une entité de revendications ; ou elles ne doivent être utilisées pour pointer vers un magasin d’attributs à partir de laquelle des revendications supplémentaires doivent être ajoutées à l’entité de sécurité.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>