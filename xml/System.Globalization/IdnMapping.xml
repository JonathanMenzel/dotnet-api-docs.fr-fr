<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ed62e8499764dd5b075b00bc015a4b6e1563ef14" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52193511" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Prend en charge l'utilisation de caractères non ASCII pour les noms de domaines Internet. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nom de domaine Internet se compose d’une ou plusieurs parties, appelées étiquettes de nom de domaine, séparées par des séparateurs d’étiquette. Par exemple, le nom de domaine « www.proseware.com » se compose des étiquettes, « www », « proseware » et « com », séparés par des points. Les noms de domaine standard se composent de caractères désignées dans la plage de caractères US-ASCII (ou latins de base), à partir de U + 0021 à U + 007E. Pour faciliter l’utilisation d’Internet dans les cultures qui n’utilisent pas le jeu de caractères US-ASCII, l’internationalisation IDNA Domain Names in Applications () standard a été adopté dans 2003 pour prendre en charge l’inclusion de caractères Unicode en dehors de la plage de caractères US-ASCII. Toutefois, serveurs de noms et de résolution de noms de domaine continuent à s’appuyer sur les caractères dans la plage de caractères US-ASCII.  
  
 Le système IDNA utilise Punycode pour mapper un nom de domaine internationalisé qui contient des caractères Unicode en dehors de la plage de caractères US-ASCII à la plage de caractères US-ASCII pris en charge par le système de nom de domaine. Le mécanisme IDNA est utilisé pour convertir uniquement des noms de domaine, pas les données transmises sur Internet.  
  
> [!IMPORTANT]
>  Dans le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], la <xref:System.Globalization.IdnMapping> classe prend en charge différentes versions de la norme IDNA, selon le système d’exploitation en cours d’utilisation :  
>   
>  -   Lorsque vous travaillez sur [!INCLUDE[win8](~/includes/win8-md.md)], il prend en charge la version 2008 de la norme IDNA décrite par [RFC 5891 : noms de domaine internationaux dans les Applications IDNA () : protocole](https://go.microsoft.com/fwlink/?LinkId=231875).  
> -   Lorsque vous exécutez sur des versions antérieures du système d’exploitation Windows, il prend en charge la version 2003 de la norme décrite par [RFC 3490 : internationalisation IDNA Domain Names in Applications ()](https://go.microsoft.com/fwlink/?LinkId=158110).  
>   
>  Consultez [Unicode Technical Standard #46 : traitement de compatibilité IDNA](https://go.microsoft.com/fwlink/?LinkId=232459) pour les différences dans la façon dont ces normes handle d’ensembles particuliers de caractères.  
  
 Le <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType> méthode normalise un nom de domaine, convertit le nom normalisé en une représentation qui se compose de caractères Unicode affichables dans la plage de point de code US-ASCII (U + 0020 à U + 007E) et ajoute un préfixe d’encodage (ACE) compatible ASCII ( » Xn-- ») à chaque contrôle label. Le <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType> méthode restaure les étiquettes de nom de domaine convertis par le <xref:System.Globalization.IdnMapping.GetAscii%2A> (méthode).  
  
 Si la chaîne à convertir inclut le séparateur d’étiquette caractères IDÉOGRAPHIQUE (U + 3002), pleine chasse (U + FF0E) et point IDÉOGRAPHIQUE FF61 (U +), le <xref:System.Globalization.IdnMapping.GetAscii%2A> méthode les convertit en le séparateur d’étiquette point (point, U + 002E). Le <xref:System.Globalization.IdnMapping.GetUnicode%2A> (méthode), toutefois, ne restaurez pas le caractère de séparation d’étiquette d’origine.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> méthode pour convertir un tableau d’internationalized des noms de domaine au format Punycode. Le <xref:System.Globalization.IdnMapping.GetUnicode%2A> méthode puis convertit le nom de domaine Punycode vers le nom de domaine d’origine, mais remplace les séparateurs d’étiquette d’origine par le séparateur d’étiquette standard.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Toutes les méthodes publiques de <see cref="T:System.Globalization.IdnMapping" /> sont thread-safe et peuvent être utilisés simultanément à partir de plusieurs threads, tant que le <see cref="T:System.Globalization.IdnMapping" /> propriétés de l’instance ne sont pas également définies simultanément.</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Globalization.IdnMapping" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType> et <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType> propriétés sont initialisées à `false`. Un petit sous-ensemble de caractères ASCII autre que A-Z, 0-9, le trait d’union (-) de caractères : (U + 002D) et le caractère point (.) sont autorisés dans les noms de domaine, mais ne sont pas des points de code Unicode non assignés.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les points de code Unicode non assignés sont utilisés dans les opérations exécutées par les membres de l'objet <see cref="T:System.Globalization.IdnMapping" /> actuel.</summary>
        <value>
          <see langword="true" /> si les points de code non assignés sont utilisés dans les opérations ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un nom de domaine inscrit ne peut pas contenir de points de code non assignés. Par conséquent, la valeur par défaut de la <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propriété est `false`. La spécification IDNA autorise des points de code non assignés uniquement dans les requêtes pour la correspondance de chaînes (autrement dit, dans la recherche de nom de domaine). Pour plus d’informations sur l’utilisation de points de code non assignés dans les noms de domaine, consultez [RFC 3454, « Préparation de chaînes international (stringprep) »](https://go.microsoft.com/fwlink/?LinkId=231873) et [RFC 5891, « International Domain Names in Applications ( IDNA) : protocole «](https://go.microsoft.com/fwlink/?LinkId=231875).  
  
> [!IMPORTANT]
>  Si le <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propriété est `false`, le comportement associé à la propriété varie selon le système d’exploitation sous-jacent. Sur [!INCLUDE[win8](~/includes/win8-md.md)], la <xref:System.Globalization.IdnMapping> classe est conforme à IDNA 2008, qui est basée sur la norme Unicode 6.0. Sur les versions précédentes de Windows, le <xref:System.Globalization.IdnMapping> classe repose sur IDNA 2003, qui est basé sur Unicode 3. *x*. Certains points de code qui étaient non attribués dans IDNA 2003 ont été affectés des caractères et sont pris en charge dans IDNA 2008. Par exemple, U + 0221 a été introduite dans Unicode 4.0. Sur [!INCLUDE[win8](~/includes/win8-md.md)], il est codé par « xn — 6la ». Sur les versions précédentes de Windows, elle lève une <xref:System.ArgumentException> exception.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objet à comparer à l'objet en cours.</param>
        <summary>Indique si un objet spécifié et l'objet <see cref="T:System.Globalization.IdnMapping" /> actif sont égaux.</summary>
        <returns>
          <see langword="true" /> si l'objet spécifié par le paramètre <paramref name="obj" /> est dérivé de <see cref="T:System.Globalization.IdnMapping" /> et ses propriétés <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> et <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> sont égales ; sinon <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Encode une chaîne d'étiquettes du nom de domaine qui inclue des caractères Unicode en dehors de la plage de caractères US-ASCII à une chaîne de caractères Unicode accessibles dans la plage de caractères US-ASCII (U+0020 à U+007E). La chaîne est mise en forme selon la norme IDNA.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">Chaîne à convertir qui se compose d'une ou de plusieurs étiquettes de nom de domaine délimitées par des séparateurs d'étiquette.</param>
        <summary>Encode une chaîne d'étiquettes de nom de domaine qui se composent de caractères Unicode en une chaîne de caractères Unicode affichables dans la plage de caractères US-ASCII. La chaîne est mise en forme selon la norme IDNA.</summary>
        <returns>Équivalent de la chaîne spécifiée par le paramètre <paramref name="unicode" /> qui se compose de caractères Unicode affichables dans la plage de caractère US-ASCII (U+0020 à U+007E) et mise en forme selon la norme IDNA.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `unicode` paramètre spécifie une chaîne d’un ou plusieurs étiquettes qui se composent de caractères Unicode valides. Les étiquettes sont séparés par des séparateurs d’étiquette. Le `unicode` paramètre ne peut pas commencer par un séparateur d’étiquette, mais il peut inclure et éventuellement se terminer par un séparateur. Les séparateurs d’étiquette sont l’arrêt complet (période, U + 002E), point IDÉOGRAPHIQUE (U + 3002), arrêter la pleine chasse (U + FF0E) et point IDÉOGRAPHIQUE DEMI CHASSE (U + FF61). Par exemple, le nom de domaine « www.adatum.com » se compose des étiquettes, « www », « adatum » et « com », séparés par des points.  
  
 Une étiquette ne peut pas contenir les caractères suivants :  
  
-   Caractères de contrôle Unicode entre U + 0001 à U + 001F et U + 007F.  
  
-   Non affecté de caractères Unicode, si la valeur de la <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propriété est `false`.  
  
-   Plage, telles que l’espace de caractères de caractères non standard dans US-ASCII (U + 0020), point d’EXCLAMATION marquer (U + 0021), et réduit les caractères de ligne (U + 005F), si la valeur de la <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriété est `true`.  
  
-   Caractères qui sont interdits par une version spécifique de la norme IDNA. Pour plus d’informations sur les caractères interdits, consultez [RFC 3454 : préparation de Internationalized chaînes (« stringprep »)](https://go.microsoft.com/fwlink/?LinkId=231873) pour IDNA 2003, et [RFC 5982 : les Points de Code Unicode et des noms de domaine internationaux pour Applications](https://go.microsoft.com/fwlink/?LinkId=231877) pour IDNA 2008.  
  
 Le <xref:System.Globalization.IdnMapping.GetAscii%2A> méthode convertit tous les séparateurs d’étiquette à l’arrêt complet (période, U + 002E).  
  
 Si `unicode` ne contient aucun caractère US-ASCII en dehors de la plage de caractères et aucun caractère dans la plage de caractères US-ASCII est interdites, la méthode retourne `unicode` inchangé.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> méthode pour convertir un tableau des noms au format Punycode, qui est un équivalent encodé qui se compose de caractères dans la plage de caractères US-ASCII. Le <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> méthode puis convertit le nom de domaine Punycode dans le nom de domaine d’origine, mais remplace les séparateurs d’étiquette d’origine par le séparateur d’étiquette standard.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> est non valide selon les propriétés <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> et <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />, ainsi que la norme IDNA.</exception>
        <block subset="none" type="usage">
          <para>Dans le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], la <see cref="T:System.Globalization.IdnMapping" /> classe prend en charge différentes versions de la norme IDNA, selon le système d’exploitation en cours d’utilisation : 
-Lorsque vous travaillez sur [!INCLUDE[win8](~/includes/win8-md.md)], il prend en charge la version 2008 de la norme IDNA décrite par [RFC 5891 : noms de domaine internationaux dans les Applications IDNA () : protocole](https://go.microsoft.com/fwlink/?LinkId=231875).  
  
-Lorsque vous exécutez sur des versions antérieures du système d’exploitation Windows, il prend en charge la version 2003 de la norme décrite par [RFC 3490 : internationalisation IDNA Domain Names in Applications ()](https://go.microsoft.com/fwlink/?LinkId=158110).  
  
Consultez [Unicode Technical Standard #46 : traitement de compatibilité IDNA](https://go.microsoft.com/fwlink/?LinkId=232459) pour les différences dans la façon dont ces normes handle d’ensembles particuliers de caractères.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">Chaîne à convertir qui se compose d'une ou de plusieurs étiquettes de nom de domaine délimitées par des séparateurs d'étiquette.</param>
        <param name="index">Décalage de base zéro dans <paramref name="unicode" /> qui spécifie le début de la sous-chaîne à convertir. L'opération de conversion continue jusqu'à la fin de la chaîne <paramref name="unicode" />.</param>
        <summary>Encode une sous-chaîne d'étiquettes du nom de domaine qui inclue des caractères Unicode en dehors de la plage de caractères US-ASCII. La sous-chaîne est convertie en une chaîne de caractères Unicode affichables appartenant à la plage de caractères US-ASCII et est mise en forme selon la norme IDNA.</summary>
        <returns>Équivalent de la sous-chaîne spécifiée par les paramètres <paramref name="unicode" /> et <paramref name="index" /> qui se compose de caractères Unicode affichables dans la plage de caractère US-ASCII (U+0020 à U+007E) et mise en forme selon la norme IDNA.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `unicode` et `index` paramètres définissent une sous-chaîne avec une ou plusieurs étiquettes qui se composent de caractères Unicode valides. Les étiquettes sont séparés par des séparateurs d’étiquette. Le premier caractère de la sous-chaîne ne peut pas commencer par un séparateur d’étiquette, mais elle peut contenir et éventuellement se terminer par un séparateur. Les séparateurs d’étiquette sont l’arrêt complet (période, U + 002E), point IDÉOGRAPHIQUE (U + 3002), arrêter la pleine chasse (U + FF0E) et point IDÉOGRAPHIQUE DEMI CHASSE (U + FF61). Par exemple, le nom de domaine « www.adatum.com » se compose des étiquettes, « www », « adatum » et « com », séparés par des points.  
  
 Une étiquette ne peut pas contenir les caractères suivants :  
  
-   Caractères de contrôle Unicode entre U + 0001 à U + 001F et U + 007F.  
  
-   Non affecté les caractères Unicode, selon la valeur de la <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propriété.  
  
-   Plage, telles que l’espace de caractères de caractères non standard dans US-ASCII (U + 0020), point d’EXCLAMATION marquer (U + 0021) et les caractères de ligne de faible (U + 005F), selon la valeur de la <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriété.  
  
-   Caractères qui sont interdits par une version spécifique de la norme IDNA. Pour plus d’informations sur les caractères interdits, consultez [RFC 3454 : préparation de Internationalized chaînes (« stringprep »)](https://go.microsoft.com/fwlink/?LinkId=231873) pour IDNA 2003, et [RFC 5982 : les Points de Code Unicode et des noms de domaine internationaux pour Applications](https://go.microsoft.com/fwlink/?LinkId=231877) pour IDNA 2008.  
  
 Le <xref:System.Globalization.IdnMapping.GetAscii%2A> méthode convertit tous les séparateurs d’étiquette à l’arrêt complet (période, U + 002E).  
  
 Si `unicode` ne contient aucun caractère US-ASCII en dehors de la plage de caractères et aucun caractère dans la plage de caractères US-ASCII est interdites, la méthode retourne `unicode` inchangé.  
  
   
  
## Examples  
 L’exemple suivant supprime la partie locale et le caractère à partir d’une adresse de messagerie et passe @ nom de domaine qui en résulte à la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> pour créer un nom de domaine Punycode, qui est un équivalent encodé qui se compose des caractères US-ASCII (méthode) plage de caractères. Le <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> méthode puis convertit le nom de domaine Punycode dans le nom de domaine d’origine, mais remplace les séparateurs d’étiquette d’origine par le séparateur d’étiquette standard.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur à la longueur de <paramref name="unicode" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> est non valide selon les propriétés <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> et <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />, ainsi que la norme IDNA.</exception>
        <block subset="none" type="usage">
          <para>Dans le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], la <see cref="T:System.Globalization.IdnMapping" /> classe prend en charge différentes versions de la norme IDNA, selon le système d’exploitation en cours d’utilisation : 
-Lorsque vous travaillez sur [!INCLUDE[win8](~/includes/win8-md.md)], il prend en charge la version 2008 de la norme IDNA décrite par [RFC 5891 : noms de domaine internationaux dans les Applications IDNA () : protocole](https://go.microsoft.com/fwlink/?LinkId=231875).  
  
-Lorsque vous exécutez sur des versions antérieures du système d’exploitation Windows, il prend en charge la version 2003 de la norme décrite par [RFC 3490 : internationalisation IDNA Domain Names in Applications ()](https://go.microsoft.com/fwlink/?LinkId=158110).  
  
Consultez [Unicode Technical Standard #46 : traitement de compatibilité IDNA](https://go.microsoft.com/fwlink/?LinkId=232459) pour les différences dans la façon dont ces normes handle d’ensembles particuliers de caractères.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">Chaîne à convertir qui se compose d'une ou de plusieurs étiquettes de nom de domaine délimitées par des séparateurs d'étiquette.</param>
        <param name="index">Offset de base zéro dans <paramref name="unicode" /> qui spécifie le début de la sous-chaîne.</param>
        <param name="count">Nombre de caractères à convertir dans la sous-chaîne qui démarre à la position spécifiée par <paramref name="index" /> dans la chaîne <paramref name="unicode" />.</param>
        <summary>Encode le nombre spécifié de caractères dans une sous-chaîne d’étiquettes du nom de domaine qui incluent des caractères Unicode en dehors de la plage de caractères US-ASCII. La sous-chaîne est convertie en une chaîne de caractères Unicode affichables appartenant à la plage de caractères US-ASCII et est mise en forme selon la norme IDNA.</summary>
        <returns>Équivalent de la sous-chaîne spécifiée par les paramètres <paramref name="unicode" />, <paramref name="index" /> et <paramref name="count" />, qui se compose de caractères Unicode affichables dans la plage de caractère US-ASCII (U+0020 à U+007E) et mise en forme selon la norme IDNA.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Unicode`, `index`, et `count` paramètres définissent une sous-chaîne avec une ou plusieurs étiquettes qui se composent de caractères Unicode valides. Les étiquettes sont séparés par des séparateurs d’étiquette. Le premier caractère de la sous-chaîne ne peut pas commencer par un séparateur d’étiquette, mais elle peut contenir et éventuellement se terminer par un séparateur. Les séparateurs d’étiquette sont l’arrêt complet (période, U + 002E), point IDÉOGRAPHIQUE (U + 3002), arrêter la pleine chasse (U + FF0E) et point IDÉOGRAPHIQUE DEMI CHASSE (U + FF61). Par exemple, le nom de domaine « www.adatum.com » se compose des étiquettes, « www », « adatum » et « com », séparés par des points.  
  
 Une étiquette ne peut pas contenir les caractères suivants :  
  
-   Caractères de contrôle Unicode entre U + 0001 à U + 001F et U + 007F.  
  
-   Non affecté les caractères Unicode, selon la valeur de la <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> propriété.  
  
-   Plage, telles que l’espace de caractères de caractères non standard dans US-ASCII (U + 0020), point d’EXCLAMATION marquer (U + 0021) et les caractères de ligne de faible (U + 005F), selon la valeur de la <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriété.  
  
-   Caractères qui sont interdits par une version spécifique de la norme IDNA. Pour plus d’informations sur les caractères interdits, consultez [RFC 3454 : préparation de Internationalized chaînes (« stringprep »)](https://go.microsoft.com/fwlink/?LinkId=231873) pour IDNA 2003, et [RFC 5982 : les Points de Code Unicode et des noms de domaine internationaux pour Applications](https://go.microsoft.com/fwlink/?LinkId=231877) pour IDNA 2008.  
  
 Le <xref:System.Globalization.IdnMapping.GetAscii%2A> méthode convertit tous les séparateurs d’étiquette à l’arrêt complet (période, U + 002E). Si la sous-chaîne ne contient aucun caractère en dehors de la plage de caractères US-ASCII, et aucun caractère dans la plage de caractères US-ASCII n’est interdit, la méthode retourne la sous-chaîne inchangée.  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> méthode pour convertir un nom de domaine internationalisé pour un nom de domaine qui est conforme à la norme IDNA. Le <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> méthode puis convertit le nom de domaine standardisé dans le nom de domaine d’origine, mais remplace les séparateurs d’étiquette d’origine par le séparateur d’étiquette standard.  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> ou <paramref name="count" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur à la longueur de <paramref name="unicode" />.  
  
- ou - 
 <paramref name="index" /> est supérieur à la longueur de <paramref name="unicode" /> moins <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> est non valide selon les propriétés <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> et <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />, ainsi que la norme IDNA.</exception>
        <block subset="none" type="usage">
          <para>Dans le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], la <see cref="T:System.Globalization.IdnMapping" /> classe prend en charge différentes versions de la norme IDNA, selon le système d’exploitation en cours d’utilisation : 
-Lorsque vous travaillez sur [!INCLUDE[win8](~/includes/win8-md.md)], il prend en charge la version 2008 de la norme IDNA décrite par [RFC 5891 : noms de domaine internationaux dans les Applications IDNA () : protocole](https://go.microsoft.com/fwlink/?LinkId=231875).  
  
-Lorsque vous exécutez sur des versions antérieures du système d’exploitation Windows, il prend en charge la version 2003 de la norme décrite par [RFC 3490 : internationalisation IDNA Domain Names in Applications ()](https://go.microsoft.com/fwlink/?LinkId=158110).  
  
Consultez [Unicode Technical Standard #46 : traitement de compatibilité IDNA](https://go.microsoft.com/fwlink/?LinkId=232459) pour les différences dans la façon dont ces normes handle d’ensembles particuliers de caractères.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un code de hachage pour cet objet <see cref="T:System.Globalization.IdnMapping" />.</summary>
        <returns>Une des quatre constantes signées 32 bits dérivées des propriétés d'un objet <see cref="T:System.Globalization.IdnMapping" />.  La valeur de retour n'a aucune signification particulière et ne peut pas être utilisée dans un algorithme de code de hachage.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Remplacer le <xref:System.Globalization.IdnMapping.GetHashCode%2A> méthode si votre application doit implémenter un algorithme de code de hachage explicite.  
  
   
  
## Examples  
 L’exemple suivant suppose qu’une chaîne unique peut contenir plusieurs adresses e-mail séparées par des espaces. Il supprime la partie locale et le caractère à partir de chaque adresse de messagerie et passe @ nom de domaine qui en résulte à la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> ou <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> méthode pour créer un nom de domaine Punycode. Le <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> méthode reconvertit ensuite le nom de domaine Punycode au nom de domaine d’origine.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Décode une ou plusieurs étiquettes de noms de domaine encodées selon la norme IDNA dans une chaîne de caractères Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">Chaîne à décoder, qui se compose d'une ou plusieurs étiquettes dans la plage de caractères US-ASCII (U+0020 à U+007E), encodées selon la norme IDNA.</param>
        <summary>Décode une chaîne d'une ou de plusieurs étiquettes de noms de domaine encodées selon la norme IDNA dans une chaîne de caractères Unicode.</summary>
        <returns>Équivalent Unicode de la sous-chaîne IDNA spécifiée par le paramètre <paramref name="ascii" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur les noms de domaine, les étiquettes et les séparateurs d’étiquette, consultez les notes relatives à la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 L’exemple suivant utilise la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> méthode pour convertir un tableau d’internationalized des noms de domaine au format Punycode. Le <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> méthode puis convertit le nom de domaine Punycode dans le nom de domaine d’origine, mais remplace les séparateurs d’étiquette d’origine par le séparateur d’étiquette standard.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> est non valide selon les propriétés <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> et <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />, ainsi que la norme IDNA.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">Chaîne à décoder, qui se compose d'une ou plusieurs étiquettes dans la plage de caractères US-ASCII (U+0020 à U+007E), encodées selon la norme IDNA.</param>
        <param name="index">Décalage de base zéro dans <paramref name="ascii" /> qui spécifie le début de la sous-chaîne à décoder. L'opération de décodage continue jusqu'à la fin de la chaîne <paramref name="ascii" /> .</param>
        <summary>Décode une sous-chaîne d'une ou de plusieurs étiquettes de noms de domaine encodées selon la norme IDNA dans une chaîne de caractères Unicode.</summary>
        <returns>Équivalent Unicode de la sous-chaîne IDNA spécifiée par les paramètres <paramref name="ascii" /> et <paramref name="index" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur les noms de domaine, les étiquettes et les séparateurs d’étiquette, consultez les notes relatives à la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur à la longueur de <paramref name="ascii" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> est non valide selon les propriétés <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> et <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />, ainsi que la norme IDNA.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">Chaîne à décoder, qui se compose d'une ou plusieurs étiquettes dans la plage de caractères US-ASCII (U+0020 à U+007E), encodées selon la norme IDNA.</param>
        <param name="index">Offset de base zéro dans <paramref name="ascii" /> qui spécifie le début de la sous-chaîne.</param>
        <param name="count">Nombre de caractères à convertir dans la sous-chaîne qui démarre à la position spécifiée par <paramref name="index" /> et la chaîne <paramref name="ascii" />.</param>
        <summary>Décode une sous-chaîne d'une longueur spécifiée qui contient une ou plusieurs étiquettes de nom de domaine, encodées selon la norme IDNA en une chaîne de caractères Unicode.</summary>
        <returns>Équivalent Unicode de la sous-chaîne IDNA spécifiée par les paramètres <paramref name="ascii" />, <paramref name="index" /> et <paramref name="count" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur les noms de domaine, les étiquettes et les séparateurs d’étiquette, consultez les notes relatives à la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> ou <paramref name="count" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur à la longueur de <paramref name="ascii" />.  
  
- ou - 
 <paramref name="index" /> est supérieur à la longueur de <paramref name="ascii" /> moins <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> est non valide selon les propriétés <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> et <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />, ainsi que la norme IDNA.</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les conventions d'affectation de noms standard ou assouplies sont utilisées dans des opérations exécutées par les membres de l'objet <see cref="T:System.Globalization.IdnMapping" /> actuel.</summary>
        <value>
          <see langword="true" /> si les conventions d'affectation de noms standard sont utilisées dans les opérations ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les noms de domaine qui suivent des règles d’affectation de noms standard sont constitués d’un sous-ensemble spécifique de caractères dans la plage de caractères US-ASCII. Les caractères sont les lettres A à Z, les chiffres 0 à 9, le caractère de trait d’union (-) : (U + 002D) et le caractère point (.). La casse des caractères n’est pas significative. Conventions d’affectation de noms souples autoriser l’utilisation d’une plage plus large de ASCII (U + 0020) de caractères de caractères, y compris l’espace, le point d’exclamation (U + 0021) de caractères, et la barre inférieure de caractère (U + 005F). Si <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> est `true`, uniquement les caractères standards peuvent apparaître dans une étiquette renvoyée par le <xref:System.Globalization.IdnMapping.GetAscii%2A> (méthode).  
  
 Par défaut, la valeur de la <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriété est `false`, et un sous-ensemble de développé des caractères ASCII est autorisé dans une étiquette.  
  
> [!NOTE]
>  Le <xref:System.Globalization.IdnMapping> classe interdit l’utilisation des caractères non affichables de U + 0000 à U + 001F et U + 007F dans le nom de domaine des étiquettes, quel que soit le paramètre de la <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriété. Cette interdiction réduit le risque d’attaques de sécurité telles que l’usurpation de noms.  
  
   
  
## Examples  
 L’exemple suivant génère des URL qui contiennent des caractères dans la plage ASCII de U + 0000 à U + 007F et les transmet à la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> méthode des deux <xref:System.Globalization.IdnMapping> objets. Un objet a son <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriété définie sur `true`, l’autre objet a la valeur `false`. La sortie affiche les caractères qui ne sont pas valides lorsque le <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> propriété est `true` mais valide lorsqu’il est `false`.  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>