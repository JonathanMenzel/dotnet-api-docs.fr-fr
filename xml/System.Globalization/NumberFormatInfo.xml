<Type Name="NumberFormatInfo" FullName="System.Globalization.NumberFormatInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a4056ba8c53ff8a2667a467c531c16c69a54c122" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52362577" /></Metadata><TypeSignature Language="C#" Value="public sealed class NumberFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit NumberFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.NumberFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class NumberFormatInfo&#xA;Implements ICloneable, IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class NumberFormatInfo sealed : ICloneable, IFormatProvider" />
  <TypeSignature Language="F#" Value="type NumberFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit des informations spécifiques à une culture pour la mise en forme et l'analyse des valeurs numériques.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo> classe contient des informations spécifiques à la culture qui sert à mettre en forme et d’analyser les valeurs numériques. Ces informations incluent le symbole monétaire, le symbole décimal, le symbole de séparateur de groupes et les symboles pour rechercher des signes positifs et négatifs.  
  
-   [Instanciation d’un objet NumberFormatInfo](#Instantiating)  
  
    -   [Pour la culture actuelle](#Instantiating_Current)  
  
    -   [Pour la culture dite indifférente](#Instantiating_Invariant)  
  
    -   [Pour une culture spécifique](#Instantiating_Specific)  
  
    -   [Pour une culture neutre](#Instantiating_Neutral)  
  
-   [NumberFormatInfo et dynamic data](#dynamic)  
  
-   [IFormatProvider, NumberFormatInfo et mise en forme numérique](#formatProvider)  
  
-   [Chaînes de format et les propriétés NumberFormatInfo](#properties)  
  
-   [Modification des propriétés NumberFormatInfo](#modifying)  
  
    -   [Modifier le modèle et le symbole monétaire](#currency)  
  
    -   [Mise en forme d’un numéro national d’identification](#id)  
  
-   [Analyse de chaînes numériques](#parsing)  
  
    -   [Analyse de chaînes utilisateur](#ParseUser)  
  
    -   [Sérialiser et désérialiser des données numériques](#ParseSerial)  
  
<a name="Instantiating"></a>   
## <a name="instantiating-a-numberformatinfo-object"></a>Instanciation d’un objet NumberFormatInfo  
 Vous pouvez instancier un <xref:System.Globalization.NumberFormatInfo> objet qui représente les conventions de mise en forme de la culture actuelle, la culture dite indifférente, une culture spécifique ou une culture neutre.  
  
<a name="Instantiating_Current"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-current-culture"></a>Instanciation d’un objet NumberFormatInfo pour la culture actuelle  
 Vous pouvez instancier un <xref:System.Globalization.NumberFormatInfo> objet pour la culture du thread actuel dans une des manières suivantes. Dans chaque cas, retourné <xref:System.Globalization.NumberFormatInfo> objet est en lecture seule.  
  
-   En récupérant un <xref:System.Globalization.CultureInfo> objet qui représente la culture du thread actuel à partir de la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété et la récupération de la <xref:System.Globalization.CultureInfo> à partir de l’objet son <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> propriété.  
  
-   En récupérant le <xref:System.Globalization.NumberFormatInfo> objet retourné par la `static` (`Shared` en Visual Basic) <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> propriété.  
  
-   En appelant le <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> méthode avec un <xref:System.Globalization.CultureInfo> objet qui représente la culture actuelle.  
  
 L’exemple suivant utilise ces trois façons de créer <xref:System.Globalization.NumberFormatInfo> objets qui représentent les conventions de mise en forme de la culture actuelle. Elle récupère également la valeur de la <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> propriété pour illustrer que chaque objet est en lecture seule.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate1.vb#1)]  
  
 Vous pouvez créer un accessible en écriture <xref:System.Globalization.NumberFormatInfo> objet qui représente les conventions de la culture du thread actuel dans une des manières suivantes :  
  
-   En récupérant un <xref:System.Globalization.NumberFormatInfo> objet dans une des manières illustré dans l’exemple de code précédent et en appelant le <xref:System.Globalization.NumberFormatInfo.Clone%2A> méthode sur retourné <xref:System.Globalization.NumberFormatInfo> objet. Cette opération crée une copie de l’original <xref:System.Globalization.NumberFormatInfo> de l’objet, à ceci près que son <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> propriété est `false`.  
  
-   En appelant le <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> méthode pour créer un <xref:System.Globalization.CultureInfo> de l’objet qui représente la culture actuelle, puis en utilisant son <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> propriété à récupérer le <xref:System.Globalization.NumberFormatInfo> objet.  
  
 L’exemple suivant illustre ces deux façons d’instancier un <xref:System.Globalization.NumberFormatInfo> de l’objet et affiche la valeur de son <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> propriété pour illustrer que l’objet n’est pas en lecture seule.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate2.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate2.vb#2)]  
  
 Notez que le système d’exploitation Windows permet à l’utilisateur de substituer certaines de la <xref:System.Globalization.NumberFormatInfo> les valeurs de propriété utilisées dans numérique mise en forme et l’analyse des opérations à travers le **région et langue** élément dans le panneau de configuration. Par exemple, un utilisateur dont la culture est anglais (États-Unis) peut choisir d’afficher les valeurs de devise comme USD 1.1 au lieu de la valeur par défaut de $1.1. Le <xref:System.Globalization.NumberFormatInfo> objets récupérés dans les méthodes abordées précédemment reflètent tous ces substitutions par l’utilisateur. Si ce n’est pas souhaitable, vous pouvez créer un <xref:System.Globalization.NumberFormatInfo> objet qui ne reflète pas les substitutions d’utilisateur (et qui est également en lecture/écriture et non en lecture seule) en appelant le <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> constructeur et en fournissant une valeur de `false` pour le `useUserOverride` argument. L’exemple suivant fournit une illustration pour un système dont la culture actuelle est anglais (États-Unis) et dont le symbole monétaire est devenu à partir de la valeur par défaut de $ USD.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate3.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate3.vb#3)]  
  
 Si le <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType> propriété est définie sur `true`, les propriétés <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>, <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>, et <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> sont également récupérées à partir des paramètres utilisateur. Si les paramètres utilisateur sont incompatibles avec la culture associée le <xref:System.Globalization.CultureInfo> objet (par exemple, si le calendrier sélectionné ne fait pas partie des calendriers répertoriés par le <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> propriété), les résultats des méthodes et les valeurs des propriétés sont non défini.  
  
<a name="Instantiating_Invariant"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-the-invariant-culture"></a>Instanciation d’un objet NumberFormatInfo pour la culture dite indifférente  
 La culture dite indifférente représente une culture qui est indépendante de la culture. Il est basé sur la langue anglaise, mais pas sur n’importe quel pays/région de spécifique anglophone. Bien que les données des cultures spécifiques peuvent être dynamiques et peuvent changer pour refléter les nouvelles conventions culturelles ou des préférences de l’utilisateur, les données de la culture dite indifférente ne changent pas. Un <xref:System.Globalization.NumberFormatInfo> objet qui représente les conventions de mise en forme de la culture dite indifférente peut être utilisé pour mettre en forme des opérations de résultats chaînes ne doivent pas varier selon la culture.  
  
 Vous pouvez instancier un <xref:System.Globalization.NumberFormatInfo> objet qui représente les conventions de mise en forme de la culture dite indifférente comme suit :  
  
-   En récupérant la valeur de la <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A> propriété. Retourné <xref:System.Globalization.NumberFormatInfo> objet est en lecture seule.  
  
-   En récupérant la valeur de la <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> propriété à partir de la <xref:System.Globalization.CultureInfo> objet qui est retourné par la <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> propriété. Retourné <xref:System.Globalization.NumberFormatInfo> objet est en lecture seule.  
  
-   En appelant sans paramètre <xref:System.Globalization.NumberFormatInfo.%23ctor%2A> constructeur de classe. Retourné <xref:System.Globalization.NumberFormatInfo> objet est en lecture/écriture.  
  
 L’exemple suivant utilise chacune de ces méthodes pour instancier un <xref:System.Globalization.NumberFormatInfo> objet qui représente la culture dite indifférente. Ensuite, il indique si l’objet est en lecture seule  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate4.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate4.vb#4)]  
  
<a name="Instantiating_Specific"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-specific-culture"></a>Instanciation d’un objet NumberFormatInfo pour une culture spécifique  
 Une culture spécifique représente un langage qui est lu dans un pays/une région particulière. Par exemple, en-US est une culture spécifique qui représente la langue anglaise, il est parlée aux États-Unis et fr-CA est une culture spécifique qui représente la langue anglaise parlée au Canada. Vous pouvez instancier un <xref:System.Globalization.NumberFormatInfo> objet qui représente les conventions de mise en forme d’une culture spécifique comme suit :  
  
-   En appelant le <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType> méthode et la récupération de la valeur de retourné <xref:System.Globalization.CultureInfo> l’objet <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Retourné <xref:System.Globalization.NumberFormatInfo> objet est en lecture seule.  
  
-   En passant un <xref:System.Globalization.CultureInfo> objet qui représente la culture dont <xref:System.Globalization.NumberFormatInfo> l’objet à récupérer à la méthode statique <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> (méthode). Retourné <xref:System.Globalization.NumberFormatInfo> objet est en lecture/écriture.  
  
-   En appelant le <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> méthode et la récupération de la valeur de retourné <xref:System.Globalization.CultureInfo> l’objet <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Retourné <xref:System.Globalization.NumberFormatInfo> objet est en lecture/écriture.  
  
-   En appelant une de le <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> constructeurs et de récupération de la valeur de retourné <xref:System.Globalization.CultureInfo> l’objet <xref:System.Globalization.CultureInfo.NumberFormat%2A> propriété. Retourné <xref:System.Globalization.NumberFormatInfo> objet est en lecture/écriture.  
  
 L’exemple suivant utilise ces quatre méthodes pour créer un <xref:System.Globalization.NumberFormatInfo> objet qui reflète les conventions de mise en forme de la culture indonésien (Indonésie). Il indique également si chaque objet est en lecture seule.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate5.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate5.vb#5)]  
  
<a name="Instantiating_Neutral"></a>   
## <a name="instantiating-a-numberformatinfo-object-for-a-neutral-culture"></a>Instanciation d’un objet NumberFormatInfo pour une culture neutre  
 Une culture neutre représente une culture ou un langage indépendant d’une pays/région. Il est généralement le parent d’un ou plusieurs des cultures spécifiques. Par exemple, fr est une culture neutre pour la langue Français et le parent de la culture fr-FR. Vous créez un <xref:System.Globalization.NumberFormatInfo> objet qui représente les conventions de mise en forme d’une culture neutre de la même façon que vous créez un <xref:System.Globalization.NumberFormatInfo> objet qui représente les conventions de mise en forme d’une culture spécifique.  
  
> [!NOTE]
>  Dans le [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] et versions antérieures, tentez de récupérer un <xref:System.Globalization.NumberFormatInfo> objet qui reflète les conventions de mise en forme d’une culture neutre lève un <xref:System.NotSupportedException> exception.  
  
 Toutefois, car elle est indépendante d’une pays/une région spécifique, une culture neutre ne dispose pas des informations de mise en forme propres à la culture. Au lieu de remplir le <xref:System.Globalization.NumberFormatInfo> de l’objet avec les valeurs génériques, le .NET Framework retourne un <xref:System.Globalization.NumberFormatInfo> objet qui reflète les conventions de mise en forme de spécifique à une culture qui est un enfant de la culture neutre. Par exemple, le <xref:System.Globalization.NumberFormatInfo> de l’objet pour la culture neutre en reflète les conventions de mise en forme de la culture en-US et le <xref:System.Globalization.NumberFormatInfo> de l’objet pour la culture fr reflète les conventions de mise en forme de la culture fr-FR.  
  
 Vous pouvez utiliser le code suivant pour déterminer les conventions de mise en forme de la culture spécifique chaque culture neutre représente.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate6c.vb#6)]  
  
<a name="dynamic"></a>   
## <a name="numberformatinfo-and-dynamic-data"></a>NumberFormatInfo et dynamic data  
 Les données spécifiques à la culture pour la mise en forme des valeurs numériques fournies par le <xref:System.Globalization.NumberFormatInfo> classe est dynamique, tout comme les données culturelles fournies par le <xref:System.Globalization.CultureInfo> classe. N’effectuez pas d’hypothèses concernant la stabilité des valeurs pour <xref:System.Globalization.NumberFormatInfo> les objets qui sont associés avec particulier <xref:System.Globalization.CultureInfo> objets. Uniquement les données fournies par la culture dite indifférente et elle est associée <xref:System.Globalization.NumberFormatInfo> objet est stable. Autres données peuvent changer entre les sessions de l’application, ou même au sein d’une seule session, pour les raisons suivantes :  
  
-   **Mises à jour du système.** Modifier les préférences culturelles, telles que les formats de devise ou un symbole monétaire au fil du temps. Dans ce cas, mise à jour de Windows inclut des modifications apportées à la <xref:System.Globalization.NumberFormatInfo> valeur de propriété pour une culture particulière.  
  
-   **Cultures de remplacement.** Le <xref:System.Globalization.CultureAndRegionInfoBuilder> classe peut être utilisée pour remplacer les données d’une culture existante.  
  
-   **Modifications en cascade aux valeurs de propriété.** Un nombre de propriétés liées à la culture peut changer au moment de l’exécution, ce qui, à son tour, provoque <xref:System.Globalization.NumberFormatInfo> modification des données. Par exemple, la culture actuelle peut être modifiée par programme ou par l’utilisateur. Dans ce cas, le <xref:System.Globalization.NumberFormatInfo> objet retourné par la <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> la propriété devient un objet associé à la culture actuelle.  
  
-   **Préférences de l’utilisateur.** Les utilisateurs de votre application peuvent remplacer certaines des valeurs associées à la culture système actuelle via les options de langue et région dans le panneau de configuration. Par exemple, les utilisateurs peuvent choisir un autre symbole monétaire ou un symbole de séparateur décimal différent. Si le <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType> propriété est définie sur `true` (sa valeur par défaut), les propriétés de la <xref:System.Globalization.NumberFormatInfo> objet sont également récupérées à partir des paramètres utilisateur.  
  
 En commençant par le .NET Framework 2.0, toutes les propriétés substituables par l’utilisateur d’un <xref:System.Globalization.NumberFormatInfo> objet sont initialisées lorsque l’objet est créé. Il existe toujours un risque d’incohérence, étant donné que ni création d’un objet ni le processus de remplacement d’utilisateur est atomique, et les valeurs pertinentes peuvent changer pendant la création d’objets. Toutefois, ces incohérences sont très rares.  
  
 Vous pouvez contrôler si les substitutions d’utilisateur sont reflétées dans <xref:System.Globalization.NumberFormatInfo> objets qui représentent la même culture que la culture du thread actuel. Le tableau suivant répertorie la manière dont un <xref:System.Globalization.NumberFormatInfo> objet peuvent être récupéré et indique si l’objet résultant reflète les substitutions d’utilisateur.  
  
|Source d’objet CultureInfo et NumberFormatInfo|Reflète les substitutions d’utilisateur|  
|-------------------------------------------------------|-----------------------------|  
|Propriété`CultureInfo.CurrentCulture.NumberFormat` |Oui|  
|Propriété<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> |Oui|  
|Méthode <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType>|Oui|  
|Méthode <xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType>|Non|  
|Constructeur <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>|Oui|  
|Constructeur <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>|Valeur de `useUserOverride` paramètre|  
  
 Sauf s’il existe une bonne raison de procéder autrement, veillez à respecter les substitutions d’utilisateur lorsque vous utilisez le <xref:System.Globalization.NumberFormatInfo> objet dans les applications clientes pour mettre en forme et d’analyser l’entrée utilisateur ou pour afficher des données numériques. Pour les applications de serveur ou les applications sans assistance, ne veillez pas à respecter les substitutions d’utilisateur. Toutefois, si vous utilisez le <xref:System.Globalization.NumberFormatInfo> objet soit explicitement ou implicitement, pour conserver les données numériques sous forme de chaîne, vous devez utiliser un <xref:System.Globalization.NumberFormatInfo> objet qui reflète les conventions de mise en forme de la culture dite indifférente, ou vous devez spécifier un chaîne de format numériques personnalisées que vous utilisez, quel que soit la culture.  
  
<a name="formatProvider"></a>   
## <a name="iformatprovider-numberformatinfo-and-numeric-formatting"></a>IFormatProvider, NumberFormatInfo et mise en forme numérique  
 Un <xref:System.Globalization.NumberFormatInfo> objet est utilisé implicitement ou explicitement numérique de toutes les opérations de mise en forme. Ceux-ci incluent des appels aux méthodes suivantes :  
  
-   Mise en forme de méthodes, telles que tout au format numérique <xref:System.Int32.ToString%2A?displayProperty=nameWithType>, <xref:System.Double.ToString%2A?displayProperty=nameWithType>, et <xref:System.Convert.ToString%28System.Int32%29?displayProperty=nameWithType>.  
  
-   La principale mise en forme composite (méthode), <xref:System.String.Format%2A?displayProperty=nameWithType>.  
  
-   Autres composite mise en forme de méthodes, telles que <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> et <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Effectuer toutes les opérations de mise en forme numériques utilisent un <xref:System.IFormatProvider> implémentation. Le <xref:System.IFormatProvider> interface inclut une méthode unique, <xref:System.IFormatProvider.GetFormat%28System.Type%29>. Il s’agit d’une méthode de rappel qui est passée un <xref:System.Type> objet qui représente le type nécessaire pour fournir des informations de mise en forme. La méthode est chargée de retourner une instance de ce type ou `null`, si elle ne peut pas fournir une instance du type. Le .NET Framework fournit deux <xref:System.IFormatProvider> implémentations pour mettre en forme des nombres :  
  
-   Le <xref:System.Globalization.CultureInfo> (classe), qui représente une culture spécifique (ou une langue spécifique dans un pays/une région spécifique). Dans l’opération, la mise en forme numérique le <xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType> méthode retourne le <xref:System.Globalization.NumberFormatInfo> objet associé à son <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> propriété.  
  
-   Le <xref:System.Globalization.NumberFormatInfo> (classe), qui fournit des informations sur les conventions de mise en forme de sa culture associée. Le <xref:System.Globalization.NumberFormatInfo.GetFormat%2A?displayProperty=nameWithType> méthode retourne une instance d’elle-même.  
  
 Si un <xref:System.IFormatProvider> implémentation n’est pas fournie explicitement, à une méthode de mise en forme un <xref:System.Globalization.CultureInfo> objet retourné par la <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propriété qui représente la culture du thread actuel est utilisée.  
  
 L’exemple suivant illustre la relation entre la <xref:System.IFormatProvider> interface et le <xref:System.Globalization.NumberFormatInfo> classe mise en forme des opérations en définissant un personnalisé <xref:System.IFormatProvider> implémentation. Son <xref:System.IFormatProvider.GetFormat%2A> méthode affiche le nom de type de l’objet demandé par l’opération de mise en forme. Si la demande de l’interface un <xref:System.Globalization.NumberFormatInfo> de l’objet, cette méthode fournit le <xref:System.Globalization.NumberFormatInfo> objet pour la culture du thread actuel. Comme le résultat de l’exemple montre le <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> des demandes de méthode un <xref:System.Globalization.NumberFormatInfo> objet pour fournir des informations de mise en forme, tandis que le <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> des demandes de méthode <xref:System.Globalization.NumberFormatInfo> et <xref:System.Globalization.DateTimeFormatInfo> objets ainsi qu’une <xref:System.ICustomFormatter> mise en œuvre.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/formatprovider1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/formatprovider1.vb#1)]  
  
 Si un <xref:System.IFormatProvider> implémentation n’est pas explicitement fournie dans l’appel de méthode, les appels de méthode de mise en forme numérique le `CultureInfo.CurrentCulture.GetFormat` (méthode), qui retourne le <xref:System.Globalization.NumberFormatInfo> objet qui correspond à la culture du thread actuel.  
  
<a name="properties"></a>   
## <a name="format-strings-and-numberformatinfo-properties"></a>Chaînes de format et les propriétés NumberFormatInfo  
 Chaque opération de mise en forme utilise une chaîne de format numériques personnalisées ou standard pour produire une chaîne de résultat à partir d’un nombre. Dans certains cas, l’utilisation d’une chaîne de format pour produire une chaîne de résultat est explicite, comme dans l’exemple suivant. Ce code appelle la <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> méthode pour convertir un <xref:System.Decimal> valeur à un nombre de représentations sous forme de chaîne différentes en utilisant les conventions de mise en forme de la culture en-US.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties1.vb#2)]  
  
 Dans d’autres cas, l’utilisation d’une chaîne de format est implicite. Par exemple, dans les appels de méthode suivant à la valeur par défaut ou sans paramètre <xref:System.Decimal.ToString?displayProperty=nameWithType> (méthode), la valeur de la <xref:System.Decimal> instance est mise en forme en utilisant le spécificateur de format général (« G ») et les conventions de la culture actuelle, qui est dans ce cas le culture en-US.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties2.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties2.vb#3)]  
  
 Chaque chaîne de format numérique standard utilise un ou plusieurs <xref:System.Globalization.NumberFormatInfo> propriétés pour déterminer le modèle ou les symboles utilisés dans la chaîne de résultat. De même, chaque spécificateur de format numérique personnalisé, sauf le « 0 », « # » insérer des symboles dans la chaîne de résultat qui sont définis par <xref:System.Globalization.NumberFormatInfo> propriétés. Le tableau suivant répertorie la norme et les spécificateurs de format numériques personnalisées et leur sont associées <xref:System.Globalization.NumberFormatInfo> propriétés.  Pour modifier l’apparence de la chaîne de résultat pour une culture particulière, consultez la [Propriétés NumberFormatInfo modification](#modifying) section. Pour plus d’informations sur l’utilisation de ces spécificateurs de format, consultez [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) et [les chaînes de Format numériques personnalisées](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
|Spécificateur de format|Propriétés associées|  
|----------------------|---------------------------|  
|« C » ou « c » (spécificateur de format monétaire)|<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, pour définir le nombre par défaut de chiffres fractionnaires.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, pour définir le symbole de séparateur décimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, pour définir le groupe ou des milliers séparateur.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>, pour définir les tailles de groupes intégrés.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>, pour définir le modèle de valeurs de devise négatives.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>, pour définir le modèle de valeurs de devise positives.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, pour définir le symbole monétaire.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, pour définir le symbole de signe négatif.|  
|« D » ou « d » (spécificateur de format décimal)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, pour définir le symbole de signe négatif.|  
|« E » ou « e » (spécificateur de format exponentiel ou scientifique)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, pour définir le symbole de signe négatif dans la mantisse et l’exposant.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, pour définir le symbole de séparateur décimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, pour définir le symbole de signe positif dans l’exposant.|  
|« F » ou « f » (spécificateur de format à virgule fixe)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, pour définir le symbole de signe négatif.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, pour définir le nombre par défaut de chiffres fractionnaires.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, pour définir le symbole de séparateur décimal.|  
|« G » ou « g » (spécificateur de format général)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, pour définir le symbole de signe négatif.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, pour définir le symbole de séparateur décimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, pour définir le symbole de signe positif pour les chaînes de résultat au format exponentiel.|  
|« N » ou « n » (spécificateur de format numérique)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, pour définir le symbole de signe négatif.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, pour définir le nombre par défaut de chiffres fractionnaires.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, pour définir le symbole de séparateur décimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, pour définir le symbole de séparateur (en milliers) de groupe.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>, pour définir le nombre de chiffres intégraux dans un groupe.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>, pour définir le format des valeurs négatives.|  
|« P » ou « p » (spécificateur de format pourcentage)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, pour définir le symbole de signe négatif.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>, pour définir le nombre par défaut de chiffres fractionnaires.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>, pour définir le symbole de séparateur décimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>, pour définir le symbole de séparateur de groupe.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>, pour définir le nombre de chiffres intégraux dans un groupe.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>, pour définir l’emplacement du symbole de pourcentage et le symbole négatif pour les valeurs négatives.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>, pour définir l’emplacement du symbole de pourcentage pour les valeurs positives.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, pour définir le symbole de pourcentage.|  
|« R » ou « r » (spécificateur de format aller-retour)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, pour définir le symbole de signe négatif.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, pour définir le symbole de séparateur décimal.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, pour définir le symbole de signe positif dans un exposant.|  
|« X » ou « x » (spécificateur de format hexadécimal)|Aucun.|  
|"." (spécificateur de format personnalisé de virgule décimale)|<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, pour définir le symbole de séparateur décimal.|  
|«, » (spécificateur de format personnalisé d’un séparateur de groupe)|<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, pour définir le symbole de séparateur de groupe (en milliers).|  
|« % » (spécificateur de format personnalisé d’un espace réservé de pourcentage)|<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, pour définir le symbole de pourcentage.|  
|« ‰ » (par le spécificateur de format personnalisé d’espace réservé « pour mille »)|<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>, pour définir le symbole de "pour mille".|  
|« E » (spécificateur de format personnalisé de notation exponentielle)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, pour définir le symbole de signe négatif dans la mantisse et l’exposant.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, pour définir le symbole de signe positif dans l’exposant.|  
  
 Notez que le <xref:System.Globalization.NumberFormatInfo> classe inclut un <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> propriété qui spécifie les chiffres en base 10 utilisés par une culture spécifique. Toutefois, la propriété n’est pas utilisée dans la mise en forme d’opérations ; Seuls les chiffres latins de base 0 (U + 0030) à 9 (U + 0039) sont utilisés dans la chaîne de résultat. En outre, pour <xref:System.Single> et <xref:System.Double> les valeurs de `NaN`, `PositiveInfinity`, et `NegativeInfinity`, la chaîne de résultat est composé exclusivement des symboles définis par le <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, et <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> propriétés , respectivement.  
  
<a name="modifying"></a>   
## <a name="modifying-numberformatinfo-properties"></a>Modification des propriétés NumberFormatInfo  
 Vous pouvez modifier les propriétés d’un <xref:System.Globalization.NumberFormatInfo> objet pour personnaliser la chaîne de résultat produit dans l’opération de mise en forme numérique. Pour ce faire :  
  
1.  Créer une copie en lecture/écriture d’un <xref:System.Globalization.NumberFormatInfo> objet dont vous souhaitez modifier les conventions de mise en forme. Pour plus d’informations, consultez le [instanciation d’un objet NumberFormatInfo](#Instantiating) section.  
  
2.  Modifier les propriétés qui sont utilisées pour produire la chaîne de résultat souhaité. Pour plus d’informations sur l’utilisation de méthodes mise en forme <xref:System.Globalization.NumberFormatInfo> propriétés pour définir les chaînes de résultat, consultez le [chaînes de Format et propriétés NumberFormatInfo](#properties) section.  
  
3.  Utilisez personnalisé <xref:System.Globalization.NumberFormatInfo> de l’objet en tant que le <xref:System.IFormatProvider> argument dans les appels aux méthodes de mise en forme.  
  
> [!NOTE]
>  Au lieu de modifier dynamiquement les valeurs de propriété d’une culture chaque démarrage d’une application, vous pouvez utiliser la <xref:System.Globalization.CultureAndRegionInfoBuilder> classe pour définir une culture personnalisée (une culture qui a un nom unique et qui complète les cultures existants) ou remplacement culture (celui qui est utilisée au lieu d’une culture spécifique).  
  
 Les sections suivantes fournissent des exemples.  
  
<a name="currency"></a>   
### <a name="modifying-the-currency-symbol-and-pattern"></a>Modifier le modèle et le symbole monétaire  
 L’exemple suivant modifie un <xref:System.Globalization.NumberFormatInfo> de l’objet qui représente les conventions de mise en forme de la culture en-US. Il assigne le symbole de devise ISO 4217 pour le <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> propriété et définit un modèle pour les valeurs de devise qui se compose du symbole monétaire suivi d’un espace et une valeur numérique.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_currency1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_currency1.vb#1)]  
  
<a name="id"></a>   
### <a name="formatting-a-national-identification-number"></a>Mise en forme d’un numéro national d’identification  
 Nombre de numéros nationaux d’identification se composent exclusivement de chiffres et par conséquent, peut facilement être mis en forme en modifiant les propriétés d’un <xref:System.Globalization.NumberFormatInfo> objet. Par exemple, un numéro de sécurité sociale aux États-Unis est composé de 9 chiffres disposés comme suit : `XXX-XX-XXXX`. L’exemple suivant suppose que les numéros de sécurité sociale sont stockés comme entier, valeurs et les met en forme correctement.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_ssn1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_ssn1.vb#2)]  
  
<a name="parsing"></a>   
## <a name="parsing-numeric-strings"></a>Analyse de chaînes numériques  
 L’analyse implique la conversion de la représentation sous forme de chaîne d’un nombre en un nombre. Chaque type numérique dans le .NET Framework inclut deux méthodes d’analyse surchargés : `Parse` et `TryParse`. Le `Parse` méthode convertit une chaîne en un nombre et lève une exception si la conversion échoue. Le `TryParse` méthode convertit une chaîne en un nombre, affecte le numéro à un `out` argument et retourne un <xref:System.Boolean> valeur qui indique si la conversion a réussi.  
  
 Les méthodes d’analyse implicitement ou explicitement utilisent un <xref:System.Globalization.NumberStyles> valeur d’énumération pour déterminer quels éléments de style (par exemple, les séparateurs de groupes, un séparateur décimal ou un symbole monétaire) peuvent être présents dans une chaîne si l’opération d’analyse doit réussir. Si un <xref:System.Globalization.NumberStyles> valeur n’est pas fourni dans l’appel de méthode, la valeur par défaut est un <xref:System.Globalization.NumberStyles> valeur qui inclut le <xref:System.Globalization.NumberStyles.Float> et <xref:System.Globalization.NumberStyles.AllowThousands> indicateurs, qui spécifie que la chaîne analysée peut inclure des symboles de groupe, un séparateur décimal, un signe négatif, et les espaces blancs ou il peut être la représentation sous forme de chaîne d’un nombre en notation exponentielle.  
  
 Les méthodes d’analyse également implicitement ou explicitement utilisent un <xref:System.Globalization.NumberFormatInfo> objet qui définit les symboles spécifiques et les modèles qui peut se produire dans la chaîne à analyser. Si un <xref:System.Globalization.NumberFormatInfo> objet n’est pas fourni, la valeur par défaut est le <xref:System.Globalization.NumberFormatInfo> pour la culture du thread actuel. Pour plus d’informations sur l’analyse, consultez les méthodes d’analyse individuels, tels que <xref:System.Int16.Parse%28System.String%29?displayProperty=nameWithType>, <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType>, <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, <xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29?displayProperty=nameWithType>, et <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29?displayProperty=nameWithType>.  
  
 L’exemple suivant illustre la nature de la culture de l’analyse de chaînes. Il essaie d’analyser une chaîne qui incluent des milliers séparateurs en utilisant les conventions en-US, fr-FR et culture dite indifférente. Une chaîne qui inclut la virgule comme séparateur de groupes et de la période comme un séparateur décimal ne parvient pas à analyser dans la culture fr-FR et une chaîne avec white space comme séparateur de groupes et une virgule comme séparateur décimal ne peut pas analyser dans l’en-US et la culture dite indifférente.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parse1.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parse1.vb#4)]  
  
 L’analyse générale se produit dans deux contextes :  
  
-   En tant qu’opération qui est conçue pour convertir l’entrée de l’utilisateur en une valeur numérique.  
  
-   En tant qu’opération qui est conçue pour effectuer un aller-retour d’une valeur numérique ; Autrement dit, pour désérialiser une valeur numérique qui a été précédemment sérialisée sous forme de chaîne.  
  
 Les sections suivantes décrivent ces deux opérations de façon plus détaillée.  
  
<a name="ParseUser"></a>   
### <a name="parsing-user-strings"></a>Analyse de chaînes utilisateur  
 Lorsque vous analysez des chaînes numériques entrées par l’utilisateur, vous devez toujours instancier un <xref:System.Globalization.NumberFormatInfo> objet qui reflète les paramètres de culture de l’utilisateur. Pour plus d’informations sur la façon d’instancier un <xref:System.Globalization.NumberFormatInfo> objet qui reflète les personnalisations de l’utilisateur, voir la [NumberFormatInfo et dynamic data](#dynamic) section.  
  
 L’exemple suivant illustre la différence entre une opération d’analyse qui reflète les paramètres de culture d’utilisateur et l’autre pas. Dans ce cas, la culture par défaut du système est en-US, mais l’utilisateur a défini «, » comme symbole décimal et «. » comme séparateur de groupe dans le panneau de configuration, **région et langue**. En règle générale, ces symboles sont inversées dans la culture en-US par défaut. Lorsque l’utilisateur entre une chaîne qui reflète les paramètres utilisateur, et la chaîne est analysée par un <xref:System.Globalization.NumberFormatInfo> objet qui reflète également les paramètres de l’utilisateur (substitutions), l’opération d’analyse retourne un résultat correct. Toutefois, lorsque la chaîne est analysée par un <xref:System.Globalization.NumberFormatInfo> objet qui reflète les paramètres de culture en-US standard, il le symbole de virgule un séparateur de groupe des erreurs et retourne un résultat incorrect.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parseuser1.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parseuser1.vb#5)]  
  
<a name="ParseSerial"></a>   
### <a name="serializing-and-deserializing-numeric-data"></a>Sérialiser et désérialiser des données numériques  
 Lorsque des données numériques sont sérialisées au format de chaîne et versions ultérieures désérialisées et analysées, les chaînes doivent être générés et analysés en utilisant les conventions de la culture dite indifférente. Les opérations de mise en forme et l’analyse ne doivent jamais reflètent les conventions d’une culture spécifique. Si vous utilisez des paramètres spécifiques à la culture, la portabilité des données est strictement limitée ; Il peut être désérialisé avec succès uniquement sur un thread dont les paramètres spécifiques à la culture sont identiques à celles du thread sur lequel il a été sérialisé. Dans certains cas, cela signifie que les données ne peuvent même être désérialisé avec succès sur le même système que celui sur lequel il a été sérialisé.  
  
 L’exemple suivant illustre ce qui peut se produire en cas de violation de ce principe. Les valeurs à virgule flottante dans un tableau sont convertis en chaînes lorsque le thread actuel utilise les paramètres spécifiques à la culture de la culture en-US. Les données sont ensuite analysées par un thread qui utilise les paramètres spécifiques à la culture de la culture en-GB. Dans ce cas, chaque opération d’analyse réussit, les données ne fait pas un aller-retour avec succès et une altération des données se produit. Dans d’autres cas, une opération d’analyse peut échouer et une <xref:System.FormatException> exception peut être levée.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parsepersisted.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parsepersisted.vb#6)]  
  
   
  
## Examples  
 L’exemple suivant montre comment récupérer un <xref:System.Globalization.NumberFormatInfo> objet pour un correspondant <xref:System.Globalization.CultureInfo> et que vous utilisez l’objet récupéré au nombre de requête mise en forme des informations pour la culture spécifique.  
  
 [!code-cpp[NumberFormatInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberFormatInfo/cpp/NumberFormatInfo.cpp#1)]
 [!code-csharp[NumberFormatInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberFormatInfo/CS/NumberFormatInfo.cs#1)]
 [!code-vb[NumberFormatInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberFormatInfo/vb/numberformatinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.IFormatProvider" />
    <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md">Chaînes de format numériques personnalisées</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NumberFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NumberFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance accessible en écriture de la classe <see cref="T:System.Globalization.NumberFormatInfo" /> qui est indépendante de la culture (dite indifférente).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les propriétés de la nouvelle instance peuvent être modifiées si votre application a besoin de mise en forme définis par l’utilisateur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="numberFormatInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée une copie superficielle de l'objet <see cref="T:System.Globalization.NumberFormatInfo" />.</summary>
        <returns>Nouvel objet copié à partir de l'objet <see cref="T:System.Globalization.NumberFormatInfo" /> d'origine.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le clone est accessible en écriture même si la version d’origine <xref:System.Globalization.NumberFormatInfo> objet est en lecture seule. Par conséquent, les propriétés du clone peuvent être modifiées avec des modèles définis par l’utilisateur.  
  
 Une copie superficielle d’un objet est une copie de l’objet uniquement. Si l’objet contient des références à d’autres objets, la copie superficielle ne crée pas de copie les objets référencés. Il fait référence aux objets d’origine à la place. En revanche, une copie complète d’un objet crée une copie de l’objet et une copie de tous les éléments référencés directement ou indirectement par cet objet. Dans le cas d’un <xref:System.Globalization.NumberFormatInfo> de l’objet, une copie superficielle est suffisante pour la copie de toutes les propriétés de l’instance, car toutes les propriétés qui retournent des références d’objet sont `static` (`Shared` en Visual Basic).  
  
   
  
## Examples  
 L’exemple suivant utilise le <xref:System.Globalization.NumberFormatInfo.Clone%2A> méthode pour créer une copie en lecture/écriture d’un <xref:System.Globalization.NumberFormatInfo> objet qui représente les conventions de la culture du thread en cours de mise en forme numérique.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalDigits">
      <MemberSignature Language="C#" Value="public int CurrencyDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nombre de décimales à utiliser dans les valeurs de devise.</summary>
        <value>Nombre de décimales à utiliser dans les valeurs de devise. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> propriété est utilisée avec la chaîne de format standard « C » sans un spécificateur de précision dans les opérations de mise en forme numérique. Il définit le nombre de chiffres fractionnaires qui apparaissent après le séparateur décimal par défaut. Cette valeur est remplacée si un spécificateur de précision est utilisé. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> propriété.  
  
 [!code-cpp[CurrencyDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalDigits/CPP/currencydecimaldigits.cpp#1)]
 [!code-csharp[CurrencyDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalDigits/CS/currencydecimaldigits.cs#1)]
 [!code-vb[CurrencyDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalDigits/VB/currencydecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété est définie sur une valeur inférieure à 0 ou supérieure à 99.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne à utiliser comme séparateur décimal dans les valeurs de devise.</summary>
        <value>Chaîne à utiliser comme séparateur décimal dans les valeurs de devise. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « + ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur initiale de cette propriété est dérivée des paramètres dans le **région et langue** élément dans le panneau de configuration.  
  
 Le <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> propriété est utilisée avec la chaîne de format standard « C » pour définir le symbole qui sépare intégrale de chiffres fractionnaires. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> propriété.  
  
 [!code-cpp[CurrencyDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalSeparator/CPP/currencydecimalseparator.cpp#1)]
 [!code-csharp[CurrencyDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalSeparator/CS/currencydecimalseparator.cs#1)]
 [!code-vb[CurrencyDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalSeparator/VB/currencydecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <exception cref="T:System.ArgumentException">La propriété est définie sur une chaîne vide.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne qui sépare les groupes de chiffres à gauche du séparateur décimal dans les valeurs de devise.</summary>
        <value>Chaîne qui sépare les groupes de chiffres à gauche du séparateur décimal dans les valeurs de devise. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « , ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur initiale de cette propriété est dérivée des paramètres dans le **régionales et linguistiques** élément dans le panneau de configuration.  
  
 Le <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> propriété est utilisée avec la chaîne de format standard « C » pour définir le symbole qui sépare les groupes de chiffres intégraux. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> propriété.  
  
 [!code-cpp[CurrencyGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSeparator/CPP/currencygroupseparator.cpp#1)]
 [!code-csharp[CurrencyGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSeparator/CS/currencygroupseparator.cs#1)]
 [!code-vb[CurrencyGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSeparator/VB/currencygroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSizes">
      <MemberSignature Language="C#" Value="public int[] CurrencyGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] CurrencyGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ CurrencyGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nombre de chiffres dans chaque groupe à gauche du séparateur décimal dans les valeurs de devise.</summary>
        <value>Nombre de chiffres dans chaque groupe à gauche du séparateur décimal dans les valeurs de devise. Par défaut, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est un tableau unidimensionnel avec un seul élément ayant pour valeur 3.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A> propriété est utilisée avec la chaîne de format standard « C » pour définir le nombre de chiffres qui apparaissent dans les groupes intégrés. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md). Chaque élément du tableau unidimensionnel doit être un entier compris entre 1 et 9. Le dernier élément peut être 0.  
  
 Le premier élément du tableau définit le nombre d’éléments dans le groupe le moins significatif de chiffres situés immédiatement à gauche de la <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>. Chaque élément suivant fait référence au prochain groupe significatif de chiffres à gauche du groupe précédent. Si le dernier élément du tableau n’est pas égal à 0, les chiffres restants sont regroupés selon le dernier élément du tableau. Si le dernier élément est 0, les chiffres restants ne sont pas regroupées.  
  
 Par exemple, si le tableau contient {3, 4, 5}, les chiffres sont regroupés ainsi : « $ 55,55555,55555,55555,4444,333.00 ». Si le tableau contient {3, 4, 0}, les chiffres sont groupés ainsi : « $ 55555555555555555,4444,333.00 ».  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A> propriété.  
  
 [!code-cpp[CurrencyGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSizes/CPP/currencygroupsizes.cpp#1)]
 [!code-csharp[CurrencyGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSizes/CS/currencygroupsizes.cs#1)]
 [!code-vb[CurrencyGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSizes/VB/currencygroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La propriété est définie, et le tableau contient une entrée inférieure à 0 ou supérieure à 9.  
  
- ou - 
La propriété est définie, et le tableau contient une entrée, autre que la dernière entrée, qui est définie sur 0.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyNegativePattern">
      <MemberSignature Language="C#" Value="public int CurrencyNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le modèle de format pour les valeurs de devise négatives.</summary>
        <value>Modèle de format pour les valeurs de devise négatives. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est 0, qui représente « ($n) », où « $ » est l'élément <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> et où <paramref name="n" /> est un nombre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> propriété est utilisée avec la chaîne de format standard « C » pour définir le modèle de valeurs de devise négatives. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md). Cette propriété a une des valeurs dans le tableau suivant. Le symbole « $» est le <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, le symbole «- » est le <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, et `n` est un nombre.  
  
|Value|Modèle associé|  
|-----------|------------------------|  
|0|($n)|  
|1|-$n|  
|2|$-n|  
|3|$n-|  
|4|(n$)|  
|5|$ - n|  
|6|n-$|  
|7|$-n|  
|8|$ - n|  
|9|-$ n|  
|10|$-n|  
|11|$ n-|  
|12|$ - n|  
|13|n - $|  
|14|(n$)|  
|15|(n $)|  
  
   
  
## Examples  
 L’exemple suivant montre comment la <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> propriété définit le format des valeurs de devise négatives.  Il récupère toutes les cultures spécifiques qui sont définis sur l’ordinateur hôte et affiche chaque culture <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> valeur de propriété, son modèle associé et un nombre mis en forme en tant que valeur monétaire.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/cs/currencynegativepattern1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/vb/currencynegativepattern1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété est définie sur une valeur inférieure à 0 ou supérieure à 15.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyPositivePattern">
      <MemberSignature Language="C#" Value="public int CurrencyPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrencyPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le modèle de format pour les valeurs de devise positives.</summary>
        <value>Modèle de format pour les valeurs de devise positives. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est 0, qui représente « ($n) », où « $ » est l'élément <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> et où <paramref name="n" /> est un nombre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> propriété est utilisée avec la chaîne de format standard « C » pour définir le modèle de valeurs de devise positives. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md). Cette propriété a une des valeurs dans le tableau suivant. Le symbole « $» est le <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> et `n` est un nombre.  
  
|Value|Modèle associé|  
|-----------|------------------------|  
|0|$n|  
|1|$ n|  
|2|$ n|  
|3|$ n|  
  
 Notez que le modèle ne prend pas en charge un signe positif.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété est définie sur une valeur inférieure à 0 ou supérieure à 3.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencySymbol">
      <MemberSignature Language="C#" Value="public string CurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne à utiliser comme symbole de devise.</summary>
        <value>Chaîne à utiliser comme symbole de devise. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « ¤ ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne assignée à la <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> propriété est incluse dans la chaîne de résultat lorsqu’une valeur numérique est formatée avec le « C » [chaîne de format numérique standard](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 L’exemple suivant affiche le symbole monétaire pour la culture actuelle et utilise la chaîne de format numérique standard « C » pour mettre en forme une valeur monétaire.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/cs/currencysymbolex1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencySymbol#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/vb/currencysymbolex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ CurrentInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Globalization.NumberFormatInfo" /> en lecture seule qui met en forme des valeurs en fonction de la culture actuelle.</summary>
        <value>Objet <see cref="T:System.Globalization.NumberFormatInfo" /> en lecture seule basé sur la culture du thread actif.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Récupérer un <xref:System.Globalization.NumberFormatInfo> à partir de l’objet le <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> propriété est équivalente à la récupération d’un <xref:System.Globalization.NumberFormatInfo> à partir de l’objet le `CultureInfo.CurrentCulture.NumberFormat` propriété.  
  
   
  
## Examples  
 L’exemple suivant montre que les objets retournés par le <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> et `CultureInfo.CurrentCulture.NumberFormat` les propriétés sont identiques. Puis il utilise la réflexion pour afficher les valeurs de propriété de la <xref:System.Globalization.NumberFormatInfo> objet retourné par la <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> propriété sur un système dont la culture actuelle est en-US.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/cs/currentinfo1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/vb/currentinfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DigitSubstitution">
      <MemberSignature Language="C#" Value="public System.Globalization.DigitShapes DigitSubstitution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.DigitShapes DigitSubstitution" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitSubstitution As DigitShapes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DigitShapes DigitSubstitution { System::Globalization::DigitShapes get(); void set(System::Globalization::DigitShapes value); };" />
      <MemberSignature Language="F#" Value="member this.DigitSubstitution : System.Globalization.DigitShapes with get, set" Usage="System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DigitShapes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui spécifie la façon dont l'interface graphique affiche la forme d'un chiffre.</summary>
        <value>Une des valeurs d'énumération qui spécifie la forme de chiffre spécifique à la culture.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Le <xref:System.Globalization.NumberFormatInfo.DigitSubstitution%2A> propriété est réservée pour une utilisation ultérieure. Actuellement, il n’est pas utilisé dans l’analyse ou de mise en forme des opérations en cours <xref:System.Globalization.NumberFormatInfo> objet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L’objet <see cref="T:System.Globalization.NumberFormatInfo" /> actuel est en lecture seule.</exception>
        <exception cref="T:System.ArgumentException">La valeur incluse dans une opération ensembliste n’est pas une valeur <see cref="T:System.Globalization.DigitShapes" /> valide.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="numberFormatInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">Élément <see cref="T:System.Type" /> du service de mise en forme requis.</param>
        <summary>Obtient un objet du type spécifié qui fournit un service de mise en forme des nombres.</summary>
        <returns>Élément <see cref="T:System.Globalization.NumberFormatInfo" /> actuel, si <paramref name="formatType" /> est identique au type de l'élément <see cref="T:System.Globalization.NumberFormatInfo" /> actuel ; sinon, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `Format(String, IFormatProvider)` méthodes prises en charge par les types de base de données appellent cette méthode lorsque actuel <xref:System.Globalization.NumberFormatInfo> est passé en tant que le <xref:System.IFormatProvider> paramètre. Cette méthode implémente <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo GetInstance (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo GetInstance(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (formatProvider As IFormatProvider) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ GetInstance(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.GetInstance formatProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">Élément <see cref="T:System.IFormatProvider" /> utilisé pour obtenir l'élément <see cref="T:System.Globalization.NumberFormatInfo" />.  
  
- ou - 
 <see langword="null" /> pour obtenir <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />.</param>
        <summary>Obtient le <see cref="T:System.Globalization.NumberFormatInfo" /> associé au <see cref="T:System.IFormatProvider" /> spécifié.</summary>
        <returns><see cref="T:System.Globalization.NumberFormatInfo" /> associé au <see cref="T:System.IFormatProvider" /> spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode utilise la <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> méthode de `formatProvider` à l’aide de <xref:System.Globalization.NumberFormatInfo> comme paramètre de Type. Si `formatProvider` est `null` ou si <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> retourne `null`, cette méthode retourne <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.  
  
 Votre application obtienne un <xref:System.Globalization.NumberFormatInfo> objet pour une culture spécifique en utilisant l’une des méthodes suivantes :  
  
-   Via le <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType> propriété.  
  
-   Via le <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> méthode où `provider` est un <xref:System.Globalization.CultureInfo>.  
  
 Un <xref:System.Globalization.NumberFormatInfo> objet est créé uniquement pour la culture dite indifférente ou pour des cultures spécifiques, mais pas pour les cultures neutres. Pour plus d’informations sur la culture dite indifférente, les cultures spécifiques et les cultures neutres, consultez la <xref:System.Globalization.CultureInfo> classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::NumberFormatInfo ^ InvariantInfo { System::Globalization::NumberFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet <see cref="T:System.Globalization.NumberFormatInfo" /> en lecture seule indépendant de la culture (invariant).</summary>
        <value>Objet en lecture seule indépendant de la culture (invariant).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cela <xref:System.Globalization.NumberFormatInfo> objet retourné par cette propriété ne change pas, quelle que soit la culture actuelle. Il représente les conventions de mise en forme de la culture dite indifférente, qui est une culture associée avec la langue anglaise, mais pas avec n’importe quel pays/région. La culture dite indifférente est utilisée dans la mise en forme d’opérations qui sont indépendants de la culture ou qui produisent des chaînes de résultat qui peut s’afficher dans plusieurs cultures.  
  
   
  
## Examples  
 L’exemple suivant affiche les valeurs de propriété par défaut de la <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>.  
  
 [!code-cpp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CPP/invariantinfo.cpp#1)]
 [!code-csharp[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CS/invariantinfo.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.InvariantInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/VB/invariantinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si cet objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</summary>
        <value><see langword="true" /> si <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tente d’effectuer une assignation à une propriété en lecture seule <xref:System.Globalization.NumberFormatInfo> provoque un <xref:System.InvalidOperationException>.  
  
 Vous pouvez appeler la <xref:System.Globalization.NumberFormatInfo.Clone%2A> méthode pour créer un en lecture/écriture <xref:System.Globalization.NumberFormatInfo> de l’objet à partir d’un objet en lecture seule, comme l’illustre l’exemple suivant.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="NaNSymbol">
      <MemberSignature Language="C#" Value="public string NaNSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NaNSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NaNSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NaNSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NaNSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne représentant la valeur IEEE NaN (pas un nombre).</summary>
        <value>Chaîne représentant la valeur IEEE NaN (pas un nombre). La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « NaN ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur les valeurs NaN, consultez <xref:System.Double> ou <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      </Docs>
    </Member>
    <Member MemberName="NativeDigits">
      <MemberSignature Language="C#" Value="public string[] NativeDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] NativeDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NativeDigits As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ NativeDigits { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NativeDigits : string[] with get, set" Usage="System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un tableau de chaînes de chiffres natifs correspondant aux chiffres occidentaux de 0 à 9.</summary>
        <value>Tableau de chaînes qui contient l'équivalent natif des chiffres occidentaux de 0 à 9. La valeur par défaut est un tableau ayant les éléments "0", "1", "2", "3", "4", "5", "6", "7", "8" et "9".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Le jeu de caractères spécifié par le <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> propriété n’a aucun effet sur l’analyse ou d’opérations de mise en forme. Seuls les chiffres latins de base 0 (U + 0030) à 9 (U + 0039) sont utilisés lors de la mise en forme ou de l’analyse des valeurs numériques ou des valeurs de date et d’heure.  
  
   
  
## Examples  
 L’exemple suivant montre le <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> propriété.  
  
 [!code-cpp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cpp/nd.cpp#1)]
 [!code-csharp[sys.glob.NFI.nativeDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cs/nd.cs#1)]
 [!code-vb[sys.glob.NFI.nativeDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/vb/nd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L’objet <see cref="T:System.Globalization.NumberFormatInfo" /> actuel est en lecture seule.</exception>
        <exception cref="T:System.ArgumentNullException">Dans une opération ensembliste, la valeur est <see langword="null" />.  
  
- ou - 
Dans une opération ensembliste, un élément du tableau de valeurs est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Dans une opération ensembliste, le tableau de valeurs ne contient pas 10 éléments.  
  
- ou - 
Dans une opération ensembliste, un élément du tableau de valeurs ne contient pas un seul objet <see cref="T:System.Char" /> ou une paire d’objets <see cref="T:System.Char" /> qui forment une paire de substitution.  
  
- ou - 
Dans une opération ensembliste, un élément du tableau de valeurs n’est pas un chiffre de nombre tel que défini par la [norme Unicode](https://go.microsoft.com/fwlink/?linkid=37123). En d’autres termes, le chiffre dans l’élément de tableau n’a pas la valeur de catégorie générale <see langword="Number, Decimal Digit" /> (Nd) Unicode.  
  
- ou - 
Dans une opération ensembliste, la valeur numérique d’un élément du tableau de valeurs ne correspond pas à la position de l’élément dans le tableau. En d’autres termes, l’élément à l’index 0, qui est le premier élément du tableau, n’a pas de valeur numérique 0, ou l’élément à l’index 1 n’a pas de valeur numérique 1.</exception>
        <altmember cref="T:System.Globalization.DigitShapes" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinitySymbol">
      <MemberSignature Language="C#" Value="public string NegativeInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne représentant l'infini négatif.</summary>
        <value>Chaîne représentant l'infini négatif. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « Infinity ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur l’infini négatif, consultez <xref:System.Double> ou <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="NegativeSign">
      <MemberSignature Language="C#" Value="public string NegativeSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberSignature Language="VB.NET" Value="Public Property NegativeSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NegativeSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NegativeSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne indiquant que le nombre associé est négatif.</summary>
        <value>Chaîne indiquant que le nombre associé est négatif. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « % ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est utilisée dans la mise en forme et les opérations d’analyse. Pour plus d’informations sur son utilisation dans les opérations de mise en forme, consultez la [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) et [les chaînes de Format numériques personnalisées](~/docs/standard/base-types/custom-numeric-format-strings.md) rubriques.  
  
   
  
## Examples  
 L’exemple suivant instancie une en lecture-écriture <xref:System.Globalization.CultureInfo> objet qui représente la culture dite indifférente et assigne le caractère de ligne au-dessus (U + 203E) à son <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> propriété. Il utilise ensuite cette <xref:System.Globalization.CultureInfo> objet à mettre en forme un tableau de nombres à virgule flottante négatif.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/cs/negativesign1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.NegativeSign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/vb/negativesign1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalDigits">
      <MemberSignature Language="C#" Value="public int NumberDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nombre de décimales à utiliser dans les valeurs numériques.</summary>
        <value>Nombre de décimales à utiliser dans les valeurs numériques. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A> propriété est utilisée avec les chaînes de format standard « F » et « N » sans un spécificateur de précision dans les opérations de mise en forme numérique. Il définit le nombre de chiffres fractionnaires qui apparaissent après le séparateur décimal par défaut. Cette valeur est remplacée si un spécificateur de précision est utilisé. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A> propriété.  
  
 [!code-cpp[NumberDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalDigits/CPP/numberdecimaldigits.cpp#1)]
 [!code-csharp[NumberDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalDigits/CS/numberdecimaldigits.cs#1)]
 [!code-vb[NumberDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalDigits/VB/numberdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété est définie sur une valeur inférieure à 0 ou supérieure à 99.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalSeparator">
      <MemberSignature Language="C#" Value="public string NumberDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne à utiliser comme séparateur décimal dans les valeurs numériques.</summary>
        <value>Chaîne à utiliser comme séparateur décimal dans les valeurs numériques. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « + ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> propriété est utilisée avec les chaînes de format standard « E », « F », « G », « N » et « R » pour définir le symbole qui sépare intégrale de chiffres fractionnaires. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
 La valeur initiale de cette propriété est dérivée des paramètres dans le **région et langue** élément dans le panneau de configuration.  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> propriété.  
  
 [!code-cpp[NumberDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalSeparator/CPP/numberdecimalseparator.cpp#1)]
 [!code-csharp[NumberDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalSeparator/CS/numberdecimalseparator.cs#1)]
 [!code-vb[NumberDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalSeparator/VB/numberdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <exception cref="T:System.ArgumentException">La propriété est définie sur une chaîne vide.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSeparator">
      <MemberSignature Language="C#" Value="public string NumberGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NumberGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne qui sépare les groupes de chiffres à gauche du séparateur décimal dans les valeurs numériques.</summary>
        <value>Chaîne qui sépare les groupes de chiffres à gauche du séparateur décimal dans les valeurs numériques. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « , ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> propriété est utilisée avec la chaîne de format standard « N » pour définir le symbole qui sépare les groupes de chiffres intégraux. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
 La valeur initiale de cette propriété est dérivée des paramètres dans le **région et langue** élément dans le panneau de configuration.  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> propriété.  
  
 [!code-cpp[NumberGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSeparator/CPP/numbergroupseparator.cpp#1)]
 [!code-csharp[NumberGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSeparator/CS/numbergroupseparator.cs#1)]
 [!code-vb[NumberGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSeparator/VB/numbergroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSizes">
      <MemberSignature Language="C#" Value="public int[] NumberGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] NumberGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ NumberGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nombre de chiffres dans chaque groupe à gauche du séparateur décimal dans les valeurs numériques.</summary>
        <value>Nombre de chiffres dans chaque groupe à gauche du séparateur décimal dans les valeurs numériques. Par défaut, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est un tableau unidimensionnel avec un seul élément ayant pour valeur 3.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> propriété affecte le résultat de valeurs numériques qui sont mis en forme à l’aide de la « N ». Si le format numérique personnalisé est chaîne ou un autre format de numérique standard chaînes sont utilisées, la valeur de la <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> propriété est ignorée.  
  
 Chaque élément du tableau unidimensionnel doit être un entier compris entre 1 et 9. Le dernier élément peut être 0.  
  
 Le premier élément du tableau définit le nombre d’éléments dans le groupe le moins significatif de chiffres situés immédiatement à gauche de la <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>. Chaque élément suivant fait référence au prochain groupe significatif de chiffres à gauche du groupe précédent. Si le dernier élément du tableau n’est pas égal à 0, les chiffres restants sont regroupés selon le dernier élément du tableau. Si le dernier élément est 0, les chiffres restants ne sont pas regroupées.  
  
 Par exemple, si le tableau contient {3, 4, 5}, les chiffres sont regroupés « ainsi : 55,55555,55555,55555,4444,333.00 ». Si le tableau contient {3, 4, 0}, les chiffres sont groupés ainsi : « 55555555555555555,4444,333.00 ».  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> propriété.  
  
 [!code-cpp[NumberGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSizes/CPP/numbergroupsizes.cpp#1)]
 [!code-csharp[NumberGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSizes/CS/numbergroupsizes.cs#1)]
 [!code-vb[NumberGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSizes/VB/numbergroupsizes.vb#1)]  
  
 L’exemple suivant imprime une valeur à l’aide de différents <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> tableaux.  
  
 [!code-cpp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberGroupSizes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La propriété est définie, et le tableau contient une entrée inférieure à 0 ou supérieure à 9.  
  
- ou - 
La propriété est définie, et le tableau contient une entrée, autre que la dernière entrée, qui est définie sur 0.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="NumberNegativePattern">
      <MemberSignature Language="C#" Value="public int NumberNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NumberNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NumberNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le modèle de format pour les valeurs numériques négatives.</summary>
        <value>Modèle de format pour les valeurs numériques négatives.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A> propriété définit le format des valeurs négatives mis en forme avec la chaîne de format numérique standard « N ». Cette propriété a une des valeurs dans le tableau suivant. Le symbole «- » est le <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> et `n` est un nombre.  
  
|Value|Modèle associé|  
|-----------|------------------------|  
|0|(n)|  
|1|-n|  
|2|-n|  
|3|n :|  
|4|n-|  
  
 La valeur par défaut pour la culture dite indifférente retournée par la <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A> propriété est 1, qui représente «-n », où *n* est un nombre.  
  
   
  
## Examples  
 L’exemple suivant affiche une valeur à l’aide de différents <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A> modèles.  
  
 [!code-cpp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberNegativePattern Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété est définie sur une valeur inférieure à 0 ou supérieure à 4.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalDigits">
      <MemberSignature Language="C#" Value="public int PercentDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalDigits As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentDecimalDigits { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalDigits : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nombre de décimales à utiliser dans les valeurs de pourcentage.</summary>
        <value>Nombre de décimales à utiliser dans les valeurs de pourcentage. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A> propriété est utilisée avec la chaîne de format standard « P » sans un spécificateur de précision dans les opérations de mise en forme numérique. Il définit le nombre de chiffres fractionnaires qui apparaissent après le séparateur décimal par défaut. Cette valeur est remplacée si un spécificateur de précision est utilisé. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A> propriété.  
  
 [!code-cpp[PercentDecimalDigits#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalDigits/CPP/percentdecimaldigits.cpp#1)]
 [!code-csharp[PercentDecimalDigits#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalDigits/CS/percentdecimaldigits.cs#1)]
 [!code-vb[PercentDecimalDigits#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalDigits/VB/percentdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété est définie sur une valeur inférieure à 0 ou supérieure à 99.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalSeparator">
      <MemberSignature Language="C#" Value="public string PercentDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentDecimalSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentDecimalSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentDecimalSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne à utiliser comme séparateur décimal dans les valeurs de pourcentage.</summary>
        <value>Chaîne à utiliser comme séparateur décimal dans les valeurs de pourcentage. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « + ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> propriété est utilisée avec la chaîne de format standard « P » pour définir le symbole qui sépare intégrale de chiffres fractionnaires. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> propriété.  
  
 [!code-cpp[PercentDecimalSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalSeparator/CPP/percentdecimalseparator.cpp#1)]
 [!code-csharp[PercentDecimalSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalSeparator/CS/percentdecimalseparator.cs#1)]
 [!code-vb[PercentDecimalSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalSeparator/VB/percentdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <exception cref="T:System.ArgumentException">La propriété est définie sur une chaîne vide.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSeparator">
      <MemberSignature Language="C#" Value="public string PercentGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentGroupSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSeparator : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne qui sépare les groupes de chiffres à gauche du séparateur décimal dans les valeurs de pourcentage.</summary>
        <value>Chaîne qui sépare les groupes de chiffres à gauche du séparateur décimal dans les valeurs de pourcentage. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « , ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A> propriété est utilisée avec la chaîne de format standard « P » pour définir le symbole qui sépare les groupes d’entiers. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md).  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A> propriété.  
  
 [!code-cpp[PercentGroupSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSeparator/CPP/percentgroupseparator.cpp#1)]
 [!code-csharp[PercentGroupSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSeparator/CS/percentgroupseparator.cs#1)]
 [!code-vb[PercentGroupSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSeparator/VB/percentgroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSizes">
      <MemberSignature Language="C#" Value="public int[] PercentGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] PercentGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentGroupSizes As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ PercentGroupSizes { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentGroupSizes : int[] with get, set" Usage="System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nombre de chiffres dans chaque groupe à gauche du séparateur décimal dans les valeurs de pourcentage.</summary>
        <value>Nombre de chiffres dans chaque groupe à gauche du séparateur décimal dans les valeurs de pourcentage. Par défaut, <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est un tableau unidimensionnel avec un seul élément ayant pour valeur 3.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A> propriété est utilisée avec la chaîne de format standard « P » pour définir le nombre de chiffres qui apparaissent dans les groupes intégrés. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md). Chaque élément du tableau unidimensionnel doit être un entier compris entre 1 et 9. Le dernier élément peut être 0.  
  
 Le premier élément du tableau définit le nombre d’éléments dans le groupe le moins significatif de chiffres situés immédiatement à gauche de la <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>. Chaque élément suivant fait référence au prochain groupe significatif de chiffres à gauche du groupe précédent. Si le dernier élément du tableau n’est pas égal à 0, les chiffres restants sont regroupés selon le dernier élément du tableau. Si le dernier élément est 0, les chiffres restants ne sont pas regroupées.  
  
 Par exemple, si le tableau contient {3, 4, 5}, les chiffres sont groupés » ainsi : 55,55555,55555,55555,4444,333.00 % ». Si le tableau contient {3, 4, 0}, les chiffres sont groupés » ainsi : 55555555555555555,4444,333.00 % ».  
  
   
  
## Examples  
 L’exemple suivant montre l’effet de la modification de la <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A> propriété.  
  
 [!code-cpp[PercentGroupSizes#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSizes/CPP/percentgroupsizes.cpp#1)]
 [!code-csharp[PercentGroupSizes#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSizes/CS/percentgroupsizes.cs#1)]
 [!code-vb[PercentGroupSizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSizes/VB/percentgroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La propriété est définie, et le tableau contient une entrée inférieure à 0 ou supérieure à 9.  
  
- ou - 
La propriété est définie, et le tableau contient une entrée, autre que la dernière entrée, qui est définie sur 0.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="PercentNegativePattern">
      <MemberSignature Language="C#" Value="public int PercentNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentNegativePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentNegativePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentNegativePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le modèle de format pour les valeurs de pourcentage négatives.</summary>
        <value>Modèle de format pour les valeurs de pourcentage négatives. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est 0, qui représente « -n % », où « % » est l'élément <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> et où <paramref name="n" /> est un nombre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A> propriété est utilisée avec la chaîne de format standard « P » pour définir le modèle de valeurs de pourcentage négatives. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md). Cette propriété a une des valeurs dans le tableau suivant. Le symbole « % » est le <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, le symbole «- » est le <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, et `n` est un nombre. Valeurs 3 à 11 ont été introduites dans le .NET Framework 2.0 et ne peut pas être utilisés dans les versions antérieures.  
  
|Value|Modèle associé|  
|-----------|------------------------|  
|0|-%n|  
|1|-%n|  
|2|-%n|  
|3|% n|  
|4|%n-|  
|5|n-%|  
|6|n %-|  
|7|-% n|  
|8|n %-|  
|9|% n :|  
|10|% - n|  
|11|n - %|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété est définie sur une valeur inférieure à 0 ou supérieure à 11.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentPositivePattern">
      <MemberSignature Language="C#" Value="public int PercentPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentPositivePattern As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PercentPositivePattern { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PercentPositivePattern : int with get, set" Usage="System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le modèle de format pour les valeurs de pourcentage positives.</summary>
        <value>Modèle de format pour les valeurs de pourcentage positives. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est 0, qui représente « -n % », où « % » est l'élément <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> et où <paramref name="n" /> est un nombre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A> propriété est utilisée avec la chaîne de format standard « P » pour définir le modèle de valeurs de pourcentage positives. Pour plus d’informations, consultez [Chaînes de format numériques standard](~/docs/standard/base-types/standard-numeric-format-strings.md). Cette propriété a une des valeurs dans le tableau suivant. Le symbole « % » est le <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A> et `n` est un nombre.  
  
|Value|Modèle associé|  
|-----------|------------------------|  
|0|% n|  
|1|%n|  
|2|%n|  
|3|% n|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propriété est définie sur une valeur inférieure à 0 ou supérieure à 3.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentSymbol">
      <MemberSignature Language="C#" Value="public string PercentSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PercentSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PercentSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PercentSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne à utiliser comme symbole de pourcentage.</summary>
        <value>Chaîne à utiliser comme symbole de pourcentage. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « % ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne assignée à la <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A> propriété est incluse dans la chaîne de résultat lorsqu’une valeur numérique est formatée avec le « P » ou avec une chaîne de format qui inclut « % ».  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PerMilleSymbol">
      <MemberSignature Language="C#" Value="public string PerMilleSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PerMilleSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PerMilleSymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PerMilleSymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PerMilleSymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne à utiliser comme symbole de "pour mille".</summary>
        <value>Chaîne à utiliser comme symbole de "pour mille". La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « ‰ », qui correspond au caractère Unicode U+2030.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne assignée à la <xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A> propriété est incluse dans la chaîne de résultat quand une valeur numérique est mis en forme avec une chaîne de format qui inclut le « ‰ ».  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinitySymbol">
      <MemberSignature Language="C#" Value="public string PositiveInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveInfinitySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveInfinitySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveInfinitySymbol : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne représentant l'infini positif.</summary>
        <value>Chaîne représentant l'infini positif. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « -Infinity ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur l’infini positif, consultez <xref:System.Double> ou <xref:System.Single>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveSign">
      <MemberSignature Language="C#" Value="public string PositiveSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberSignature Language="VB.NET" Value="Public Property PositiveSign As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PositiveSign { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PositiveSign : string with get, set" Usage="System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne indiquant que le nombre associé est positif.</summary>
        <value>Chaîne indiquant que le nombre associé est positif. La valeur par défaut de <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> est « + ».</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est utilisée uniquement pour l’analyse de chaînes numériques, ne pas pour la mise en forme.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Dans une opération ensembliste, la valeur à assigner est <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La propriété est définie et l’objet <see cref="T:System.Globalization.NumberFormatInfo" /> est en lecture seule.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo ReadOnly (System.Globalization.NumberFormatInfo nfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo ReadOnly(class System.Globalization.NumberFormatInfo nfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (nfi As NumberFormatInfo) As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::NumberFormatInfo ^ ReadOnly(System::Globalization::NumberFormatInfo ^ nfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.NumberFormatInfo -&gt; System.Globalization.NumberFormatInfo" Usage="System.Globalization.NumberFormatInfo.ReadOnly nfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nfi" Type="System.Globalization.NumberFormatInfo" />
      </Parameters>
      <Docs>
        <param name="nfi">Élément <see cref="T:System.Globalization.NumberFormatInfo" /> à inclure dans un wrapper.</param>
        <summary>Retourne un wrapper <see cref="T:System.Globalization.NumberFormatInfo" /> en lecture seule.</summary>
        <returns>Wrapper <see cref="T:System.Globalization.NumberFormatInfo" /> en lecture seule autour de <paramref name="nfi" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce wrapper empêche toute modification de `nfi`.  
  
 Tente d’effectuer une assignation à une propriété en lecture seule <xref:System.Globalization.NumberFormatInfo> provoque un <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="nfi" /> a la valeur <see langword="null" />.</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      </Docs>
    </Member>
  </Members>
</Type>