<Type Name="SortVersion" FullName="System.Globalization.SortVersion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="258d831b0b363d984e93d2ee5da0ec538bb71d08" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52352957" /></Metadata><TypeSignature Language="C#" Value="public sealed class SortVersion : IEquatable&lt;System.Globalization.SortVersion&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit SortVersion extends System.Object implements class System.IEquatable`1&lt;class System.Globalization.SortVersion&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.SortVersion" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SortVersion&#xA;Implements IEquatable(Of SortVersion)" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortVersion sealed : IEquatable&lt;System::Globalization::SortVersion ^&gt;" />
  <TypeSignature Language="F#" Value="type SortVersion = class&#xA;    interface IEquatable&lt;SortVersion&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Globalization.SortVersion&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit des informations sur la version Unicode utilisée pour comparer et trier des chaînes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

### <a name="sorting-and-string-comparison-in-the-net-framework"></a>Comparaison de chaîne et de tri dans le .NET Framework

 À partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] via la [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], chaque version du.NET Framework a inclus les tables qui contiennent des pondérations de tri et les données sur la normalisation des chaînes et qui sont basées sur une version particulière de caractères Unicode. Dans le [!INCLUDE[net_v45](~/includes/net-v45-md.md)], la présence de ces tables dépend du système d’exploitation :  
  
-   Sur [!INCLUDE[win7](~/includes/win7-md.md)] et les versions précédentes du système d’exploitation Windows, les tables continuent à être utilisés pour comparer et trier les chaînes.  
  
-   Sur [!INCLUDE[win8](~/includes/win8-md.md)], le .NET Framework délègue la comparaison de chaînes et l’ordre des opérations du système d’exploitation.  
  
 Par conséquent, le résultat d’une comparaison de chaînes peut dépendre non seulement sur la version du .NET Framework, mais également sur la version de système d’exploitation, comme le tableau suivant. Notez que cette liste de versions d’Unicode prises en charge s’applique uniquement à la comparaison et au tri de caractères ; elle ne s’applique pas à la classification des caractères Unicode par catégorie.  
  
|Version du .NET Framework|Système d'exploitation|Version d’Unicode|  
|----------------------------|----------------------|---------------------|  
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|Tous les systèmes d’exploitation|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] et versions ultérieures du .NET Framework|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] et versions ultérieures du .NET Framework|[!INCLUDE[win8](~/includes/win8-md.md)] et les versions ultérieures du système d’exploitation Windows|Unicode 6.0|  
  
 Sur [!INCLUDE[win8](~/includes/win8-md.md)], car la version d’Unicode utilisée dans la comparaison de chaînes et classement dépend de la version du système d’exploitation, les résultats de comparaison de chaînes peuvent varier même pour les applications qui s’exécutent sur une version spécifique du .NET Framework.  

### <a name="sorting-and-string-comparison-in-net-core"></a>Comparaison de chaîne et de tri dans .NET Core

Toutes les versions de .NET Core s’appuient sur le système d’exploitation sous-jacent lorsque vous effectuez des comparaisons de chaînes. Par conséquent, les résultats d’une comparaison de chaînes ou de l’ordre dans lequel les chaînes sont triées dépend de la version d’Unicode utilisée par le système d’exploitation pour effectuer la comparaison. Sur Linux et macOS, [International Components for Unicode](http://site.icu-project.org/) bibliothèques fournissent l’implémentation de comparaison et tri des API.

### <a name="using-the-sortversion-class"></a>À l’aide de la classe SortVersion

 Le <xref:System.Globalization.SortVersion> classe fournit des informations sur la version Unicode utilisée par .NET pour la comparaison de chaînes et de classement. Il permet aux développeurs d’écrire des applications qui peuvent détecter et gérer correctement les modifications dans la version d’Unicode est utilisé pour comparer et trier les chaînes d’une application.  
  
 Vous pouvez instancier un <xref:System.Globalization.SortVersion> objet de deux manières :  
  
-   En appelant le <xref:System.Globalization.SortVersion.%23ctor%2A> constructeur, qui instancie un nouveau <xref:System.Globalization.SortVersion> basé sur un numéro de version de l’objet et de trier le code. Ce constructeur est particulièrement utile lorsque vous recréez un <xref:System.Globalization.SortVersion> objet à partir des données enregistrées.  
  
-   En récupérant la valeur de la <xref:System.Globalization.CompareInfo.Version%2A?displayProperty=nameWithType> propriété. Cette propriété fournit des informations sur la version d’Unicode utilisée par l’implémentation de .NET sur laquelle l’application est en cours d’exécution.  
  
 Le <xref:System.Globalization.SortVersion> classe a deux propriétés, <xref:System.Globalization.SortVersion.FullVersion%2A> et <xref:System.Globalization.SortVersion.SortId%2A>, qui indiquent la version Unicode et la culture spécifique utilisé pour la comparaison de chaîne. Le <xref:System.Globalization.SortVersion.FullVersion%2A> propriété est une valeur numérique arbitraire qui reflète la version Unicode utilisée pour la comparaison de chaînes, et le <xref:System.Globalization.SortVersion.SortId%2A> propriété est arbitraire <xref:System.Guid> qui reflète la culture dont les conventions sont utilisées pour la comparaison de chaînes. Les valeurs de ces deux propriétés sont importantes uniquement lorsque vous comparez deux <xref:System.Globalization.SortVersion> objets à l’aide de la <xref:System.Globalization.SortVersion.Equals%2A> (méthode), le <xref:System.Globalization.SortVersion.op_Equality%2A> opérateur, ou la <xref:System.Globalization.SortVersion.op_Inequality%2A> opérateur.  
  
 Vous utilisez généralement un <xref:System.Globalization.SortVersion> objet lors de l’enregistrement ou de récupérer une forme de la culture, ordonné des données de type chaîne, telles que des index ou le littéral chaînes eux-mêmes. Ce processus implique les étapes suivantes :  
  
1.  Lorsque les données de chaîne ordonné sont enregistrées, le <xref:System.Globalization.SortVersion.FullVersion%2A> et <xref:System.Globalization.SortVersion.SortId%2A> les valeurs de propriété sont également enregistrés.  
  
2.  Lorsque les données de chaîne ordonnée sont récupérées, vous pouvez recréer le <xref:System.Globalization.SortVersion> objet utilisé pour classer les chaînes en appelant le <xref:System.Globalization.SortVersion.%23ctor%2A> constructeur.  
  
3.  Ce qui vient d’être instancié <xref:System.Globalization.SortVersion> objet est comparé à une <xref:System.Globalization.SortVersion> objet qui reflète la culture dont les conventions sont utilisées pour classer les données de chaîne.  
  
4.  Si les deux <xref:System.Globalization.SortVersion> objets ne sont pas égaux, les données de chaîne doivent être réorganisées.  
  
 Cet exemple en fournit une illustration.  
  
   
  
## Examples  
 L’exemple suivant contient une partie du code source à partir d’une application qui utilise le <xref:System.Globalization.SortVersion> classe pour vous assurer que le nom natif des <xref:System.Globalization.RegionInfo> les objets sont ordonnés de manière appropriée pour le système actuel et la culture actuelle. Il utilise le <xref:System.IO.BinaryReader> et <xref:System.IO.BinaryWriter> pour stocker et récupérer les objets commandé des données à partir d’un fichier de données nommé `Regions.dat` au lieu de récupérer et de classer des données chaque fois que l’application est exécutée. L’exemple vérifie d’abord pour déterminer si le fichier de données existe. Si elle n’est pas le cas, il crée les données et définit le `reindex` indicateur qui signale que les données doivent être recourues et enregistrées à nouveau. Sinon, elle récupère les données et compare l’enregistré <xref:System.Globalization.SortVersion> de l’objet avec le <xref:System.Globalization.SortVersion> objet pour la culture actuelle sur le système actuel. Si elles ne sont pas égales, ou si le `reindex` indicateur avait été défini précédemment, il recourt le <xref:System.Globalization.RegionInfo> données.  
  
 [!code-csharp[System.Globalization.SortVersion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.sortversion/cs/example1.cs#1)]
 [!code-vb[System.Globalization.SortVersion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.sortversion/vb/example1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Globalization.CompareInfo.Version" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortVersion (int fullVersion, Guid sortId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 fullVersion, valuetype System.Guid sortId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortVersion.#ctor(System.Int32,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullVersion As Integer, sortId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortVersion(int fullVersion, Guid sortId);" />
      <MemberSignature Language="F#" Value="new System.Globalization.SortVersion : int * Guid -&gt; System.Globalization.SortVersion" Usage="new System.Globalization.SortVersion (fullVersion, sortId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullVersion" Type="System.Int32" />
        <Parameter Name="sortId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fullVersion">Numéro de version</param>
        <param name="sortId">ID de tri</param>
        <summary>Crée une instance de la classe <see cref="T:System.Globalization.SortVersion" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce constructeur instancie un <xref:System.Globalization.SortVersion> avec la version spécifiée de l’objet et de tri de code. Le `fullVersion` argument est assigné à la <xref:System.Globalization.SortVersion.FullVersion%2A> propriété. Le `sortId` argument est assigné à la <xref:System.Globalization.SortVersion.SortId%2A> propriété.  
  
 Ce constructeur est utile pour recréer un <xref:System.Globalization.SortVersion> objet à partir des données qui a été sérialisées ou enregistrées. Cette version peut ensuite être comparée à la version actuelle de l’application pour déterminer si la version d’Unicode utilisée pour afficher et trier des chaînes de l’application est disponible.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CompareInfo.Version" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne une valeur qui indique si deux instances de <see cref="T:System.Globalization.SortVersion" /> sont égales.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Globalization.SortVersion other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Globalization.SortVersion other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As SortVersion) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Globalization::SortVersion ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Globalization.SortVersion -&gt; bool" Usage="sortVersion.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Globalization.SortVersion" />
      </Parameters>
      <Docs>
        <param name="other">Objet à comparer avec cette instance.</param>
        <summary>Retourne une valeur indiquant si cette instance <see cref="T:System.Globalization.SortVersion" /> équivaut à un objet <see cref="T:System.Globalization.SortVersion" /> spécifié.</summary>
        <returns><see langword="true" /> si <paramref name="other" /> représente la même version que cette instance ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deux <xref:System.Globalization.SortVersion> objets sont égaux si leurs <xref:System.Globalization.SortVersion.FullVersion%2A> et <xref:System.Globalization.SortVersion.SortId%2A> propriétés sont égales.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortVersion.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="sortVersion.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Objet à comparer à cette instance.</param>
        <summary>Retourne une valeur indiquant si cette instance <see cref="T:System.Globalization.SortVersion" /> équivaut à un objet spécifié.</summary>
        <returns><see langword="true" /> si <paramref name="obj" /> est un objet <see cref="T:System.Globalization.SortVersion" /> qui représente la même durée que cette instance ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deux <xref:System.Globalization.SortVersion> objets sont égaux si leurs <xref:System.Globalization.SortVersion.FullVersion%2A> et <xref:System.Globalization.SortVersion.SortId%2A> propriétés sont égales.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)" />
      </Docs>
    </Member>
    <Member MemberName="FullVersion">
      <MemberSignature Language="C#" Value="public int FullVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FullVersion" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortVersion.FullVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FullVersion { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FullVersion : int" Usage="System.Globalization.SortVersion.FullVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le numéro de version complet de l’objet <see cref="T:System.Globalization.SortVersion" />.</summary>
        <value>Numéro de version de cet objet <see cref="T:System.Globalization.SortVersion" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.Globalization.SortVersion.FullVersion%2A> propriété reflète la version Unicode utilisée pour normaliser et comparer des chaînes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortVersion.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="sortVersion.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un code de hachage pour cette instance.</summary>
        <returns>Code de hachage d'un entier signé 32 bits.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Globalization.SortVersion left, System.Globalization.SortVersion right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Globalization.SortVersion left, class System.Globalization.SortVersion right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As SortVersion, right As SortVersion) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Globalization::SortVersion ^ left, System::Globalization::SortVersion ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Globalization.SortVersion * System.Globalization.SortVersion -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Globalization.SortVersion" />
        <Parameter Name="right" Type="System.Globalization.SortVersion" />
      </Parameters>
      <Docs>
        <param name="left">Première instance à comparer.</param>
        <param name="right">Deuxième instance à comparer.</param>
        <summary>Indique si deux instances de <see cref="T:System.Globalization.SortVersion" /> sont égales.</summary>
        <returns><see langword="true" /> si les valeurs de <paramref name="left" /> et de <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deux <xref:System.Globalization.SortVersion> objets sont égaux si les deux sont `null`, ou si leurs <xref:System.Globalization.SortVersion.FullVersion%2A> et <xref:System.Globalization.SortVersion.SortId%2A> propriétés sont égales.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)" />
        <altmember cref="M:System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Globalization.SortVersion left, System.Globalization.SortVersion right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Globalization.SortVersion left, class System.Globalization.SortVersion right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As SortVersion, right As SortVersion) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Globalization::SortVersion ^ left, System::Globalization::SortVersion ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Globalization.SortVersion * System.Globalization.SortVersion -&gt; bool" Usage="System.Globalization.SortVersion.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Globalization.SortVersion" />
        <Parameter Name="right" Type="System.Globalization.SortVersion" />
      </Parameters>
      <Docs>
        <param name="left">Première instance à comparer.</param>
        <param name="right">Deuxième instance à comparer.</param>
        <summary>Indique si deux instances de <see cref="T:System.Globalization.SortVersion" /> ne sont pas égales.</summary>
        <returns><see langword="true" /> si les valeurs de <paramref name="left" /> et de <paramref name="right" /> ne sont pas égales ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Deux <xref:System.Globalization.SortVersion> objets ne sont pas égales si un est `null` et l’autre n’est pas, ou s’ils ont différents <xref:System.Globalization.SortVersion.FullVersion%2A> ou <xref:System.Globalization.SortVersion.SortId%2A> les valeurs de propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)" />
        <altmember cref="M:System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)" />
      </Docs>
    </Member>
    <Member MemberName="SortId">
      <MemberSignature Language="C#" Value="public Guid SortId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid SortId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortVersion.SortId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SortId As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid SortId { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.SortId : Guid" Usage="System.Globalization.SortVersion.SortId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un identificateur global unique pour cet objet <see cref="T:System.Globalization.SortVersion" />.</summary>
        <value>Identificateur global unique pour cet objet <see cref="T:System.Globalization.SortVersion" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de la <xref:System.Globalization.SortVersion.SortId%2A> propriété reflète la culture dont les conventions influencent la comparaison de chaînes et le tri.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>