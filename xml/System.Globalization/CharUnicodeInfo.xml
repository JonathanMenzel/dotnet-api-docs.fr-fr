<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ccce2910a4409725858671f177b4fdfb5609d233" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36486785" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Retrieves information about a Unicode character. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le [norme Unicode](http://go.microsoft.com/fwlink/?linkid=37123) définit un certain nombre de catégories de caractères Unicode. Par exemple, un caractère peut être catégorisé comme une lettre majuscule, une lettre minuscule, un chiffre décimal, un nombre lettre, un séparateur de paragraphe, un symbole mathématique ou un symbole de devise. Votre application peut utiliser la catégorie de caractères pour gérer les opérations de type chaîne, telles que l’analyse ou de l’extraction de sous-chaîne avec des expressions régulières. Le <xref:System.Globalization.UnicodeCategory> énumération définit les catégories de caractères possibles.  
  
 Vous utilisez la <xref:System.Globalization.CharUnicodeInfo> classe pour obtenir la <xref:System.Globalization.UnicodeCategory> valeur pour un caractère spécifique. La <xref:System.Globalization.CharUnicodeInfo> classe définit des méthodes qui retournent les valeurs de caractère Unicode suivantes :  
  
-   La catégorie spécifique à laquelle appartient une paire de substitution ou caractère. La valeur retournée est un membre de la <xref:System.Globalization.UnicodeCategory> énumération.  
  
-   Valeur numérique. S’applique uniquement aux caractères numériques, y compris les fractions, indices, des exposants, les chiffres romains, numérateurs de devise, des nombres et les chiffres spécifiques à un script.  
  
-   Valeur de chiffre. S’applique aux caractères numériques qui peuvent être combinées avec d’autres caractères numériques pour représenter un nombre entier dans un système de numérotation.  
  
-   Valeur de chiffre décimal. S’applique uniquement aux caractères qui représentent des chiffres décimaux dans le système décimal (base 10). Un chiffre décimal peut être un des dix chiffres, de zéro à neuf. Ces caractères sont membres de la <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> catégorie.  
  
 En outre, la <xref:System.Globalization.CharUnicodeInfo> classe est utilisée en interne par un nombre d’autres types .NET Framework et les méthodes qui s’appuient sur la classification des caractères. Elles incluent notamment :  
  
-   Le <xref:System.Globalization.StringInfo> (classe), qui fonctionne avec des éléments textuels au lieu de caractères uniques dans une chaîne.  
  
-   Les surcharges de la <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> (méthode), qui déterminent la catégorie à laquelle appartient une paire de substitution ou caractère.  
  
-   Le [classes de caractères](~/docs/standard/base-types/character-classes-in-regular-expressions.md) reconnu par <xref:System.Text.RegularExpressions.Regex>, moteur des expressions régulières du .NET Framework.  
  
 Lorsque vous utilisez cette classe dans vos applications, conserve à l’esprit ce qui suit considérations sur la programmation pour l’utilisation de la <xref:System.Char> type. Le type peut être difficile à utiliser, et les chaînes sont généralement préférables pour représenter le contenu linguistique.  
  
-   A <xref:System.Char> objet ne correspond pas toujours à un caractère unique. Bien que le <xref:System.Char> type représente une valeur 16 bits unique, certains caractères (par exemple, les groupes de graphèmes et les paires de substitution) se composent de deux ou plusieurs unités de code UTF-16. Pour plus d’informations, consultez « Objets Char et caractères Unicode » dans la <xref:System.String> classe.  
  
-   La notion de « caractère » est également flexible. Un caractère est souvent considéré comme un glyphe, mais de nombreux glyphes requièrent plusieurs points de code. Par exemple, « ä » peut être représenté par deux points de code (« a » plus U + 0308, qui est le tréma de combinaison), ou par un seul point de code (« ä » ou U + 00 a 4). Certaines langues ont plusieurs des lettres, des caractères et des glyphes qui requièrent plusieurs points de code, ce qui peuvent entraîner une confusion dans la représentation du contenu linguistique. Par exemple, il existe un ΰ (U + 03 b 0, lettre minuscule grecque upsilon tréma et accent), mais il n’existe aucun équivalent majuscule. Lettres majuscules d’une telle valeur extrait simplement la valeur d’origine.  
  
   
  
## Examples  
 L’exemple de code suivant montre les valeurs retournées par chaque méthode pour différents types de caractères.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>Les catégories spécifiques auxquels ils appartiennent et caractères reconnus sont définis par la norme Unicode et peuvent changer d’une version de la norme Unicode vers un autre. Catégorisation de caractères dans une version particulière du .NET Framework est basée sur une seule version de la norme Unicode, quel que soit le système d’exploitation sous-jacent sur lequel le .NET Framework est en cours d’exécution. Le tableau suivant répertorie les versions du .NET Framework depuis le [ ! Include[net_v40_long](~/Includes/NET-V40-long-MD.MD)] et les versions de la norme Unicode utilisée pour la classification des caractères.  <list type="table"><listheader><term> Version du .NET framework </term><description> Version de la norme Unicode </description></listheader><item><term> [ ! Include[net_v40_long](~/Includes/NET-V40-long-MD.MD)] </term><description> [la norme Unicode, Version 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [ ! Include[net_v45](~/Includes/NET-V45-MD.MD)] </term><description> [la norme Unicode, Version 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [ ! Include[net_v451](~/Includes/NET-v451-MD.MD)] </term><description> [la norme Unicode, Version 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [ ! Include[net_v452](~/Includes/NET-v452-MD.MD)] </term><description> [la norme Unicode, Version 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [ ! Include[net_v46](~/Includes/NET-v46-MD.MD)] </term><description> [la norme Unicode, Version 6.3.0] (https://www.unicode.org/versions/Unicode6.3.0/) </description></item><item><term> [ ! Include[net_v461](~/Includes/NET-v461-MD.MD)] </term><description> [la norme Unicode, Version 6.3.0] (https://www.unicode.org/versions/Unicode6.3.0/) </description></item><item><term> [ ! Include[net_v462](~/Includes/NET-v462-MD.MD)] </term><description> [la norme Unicode, Version 8.0.0] (https://www.unicode.org/versions/Unicode8.0.0/) </description></item></list> chaque version de l’Unicode standard inclut des informations sur les modifications apportées à la base de données de caractères Unicode depuis la version précédente.               La base de données de caractères Unicode est utilisé par la <see cref="T:System.Globalization.CharUnicodeInfo" /> classe pour la classification des caractères.</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the decimal digit value of a numeric Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the decimal digit value.</param>
        <summary>Gets the decimal digit value of the specified numeric character.</summary>
        <returns>The decimal digit value of the specified numeric character.  -or-  -1, if the specified character is not a decimal digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode convertit les caractères qui représentent des chiffres décimaux à leurs valeurs intégrales équivalents. Chiffres décimaux sont des caractères dans le <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> catégorie qui peut représenter l’un des dix chiffres dans le séparateur décimal (base 10) système, à partir de zéro à neuf de numérotation. Il comprend des caractères tels que U + 0030 (chiffre zéro) à U + 0039 (chiffres neuf), U + 0660 (zéro chiffre de type arabe-hindi remplacent) à U + 0669 (arabe-hindi chiffre neuf), U + 07 C chiffre ne Ko zéro (0) à U + 07C 9 (ne Ko chiffre neuf) et U + 1040 (zéro chiffre de MYANMAR) à U + 1049 ( CHIFFRE BIRMAN NEUF).  
  
 Pour plus d’informations sur les caractères Unicode, consultez le [norme Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 L’exemple de code suivant montre les valeurs retournées par chaque méthode pour différents types de caractères.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the decimal digit value.</param>
        <param name="index">The index of the Unicode character for which to get the decimal digit value.</param>
        <summary>Gets the decimal digit value of the numeric character at the specified index of the specified string.</summary>
        <returns>The decimal digit value of the numeric character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a decimal digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode convertit les caractères qui représentent des chiffres décimaux à leurs valeurs intégrales équivalents. Chiffres décimaux sont des caractères dans le <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> catégorie qui peut représenter l’un des dix chiffres dans le séparateur décimal (base 10) système, à partir de zéro à neuf de numérotation. Il comprend des caractères tels que U + 0030 (chiffre zéro) à U + 0039 (chiffres neuf), U + 0660 (zéro chiffre de type arabe-hindi remplacent) à U + 0669 (arabe-hindi chiffre neuf), U + 07 C chiffre ne Ko zéro (0) à U + 07C 9 (ne Ko chiffre neuf) et U + 1040 (zéro chiffre de MYANMAR) à U + 1049 ( CHIFFRE BIRMAN NEUF).  
  
 Pour plus d’informations sur les caractères Unicode, consultez le [norme Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 L’exemple de code suivant montre les valeurs retournées par chaque méthode pour différents types de caractères.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the digit value of a numeric Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the digit value.</param>
        <summary>Gets the digit value of the specified numeric character.</summary>
        <returns>The digit value of the specified numeric character.  -or-  -1, if the specified character is not a digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valeur de chiffre est une propriété qui s’applique uniquement aux caractères numériques qui peuvent être utilisés comme chiffres. Un chiffre est un caractère numérique qui peut être combiné avec d’autres chiffres pour représenter un nombre entier dans un système de numérotation.  
  
 Pour plus d’informations sur les caractères Unicode, consultez le [norme Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 L’exemple de code suivant montre les valeurs retournées par chaque méthode pour différents types de caractères.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the digit value.</param>
        <param name="index">The index of the Unicode character for which to get the digit value.</param>
        <summary>Gets the digit value of the numeric character at the specified index of the specified string.</summary>
        <returns>The digit value of the numeric character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valeur de chiffre est une propriété qui s’applique uniquement aux caractères numériques qui peuvent être utilisés comme chiffres. Un chiffre est un caractère numérique qui peut être combiné avec d’autres chiffres pour représenter un nombre entier dans un système de numérotation.  
  
 Pour plus d’informations sur les caractères Unicode, consultez le [norme Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 L’exemple de code suivant montre les valeurs retournées par chaque méthode pour différents types de caractères.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the numeric value associated with a Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the numeric value.</param>
        <summary>Gets the numeric value associated with the specified character.</summary>
        <returns>The numeric value associated with the specified character.  -or-  -1, if the specified character is not a numeric character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valeur numérique est une propriété de caractère Unicode qui s’applique uniquement aux caractères numériques, qui incluent des fractions, indices, des exposants, les chiffres romains, numérateurs de devise, des nombres et les chiffres spécifiques à un script. Pour plus d’informations sur les caractères Unicode, consultez le [norme Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Le <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> méthode suppose que `ch` correspond à un caractère linguistique unique et vérifie si ce caractère peut être converti en un chiffre décimal. Toutefois, des nombres dans la norme Unicode sont représentées par deux <xref:System.Char> objets qui forment une paire de substitution. Par exemple, le système de numérotation égéen se compose de points de code U + 10107 et U + 10133. L’exemple suivant utilise la <xref:System.Char.ConvertFromUtf32%2A> méthode pour instancier une chaîne qui représente le mineures numéro un. Comme la sortie de l’exemple, le <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> méthode retourne -1 s’il est passé d’un substitut étendu ou faible de ce caractère.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 L’exemple de code suivant montre les valeurs retournées par chaque méthode pour différents types de caractères.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the numeric value.</param>
        <param name="index">The index of the Unicode character for which to get the numeric value.</param>
        <summary>Gets the numeric value associated with the character at the specified index of the specified string.</summary>
        <returns>The numeric value associated with the character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a numeric character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valeur numérique est une propriété de caractère Unicode qui s’applique uniquement aux caractères numériques, qui incluent des fractions, indices, des exposants, les chiffres romains, numérateurs de devise, des nombres et les chiffres spécifiques à un script. Pour plus d’informations sur les caractères Unicode, consultez le [norme Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Si le <xref:System.Char> objet à la position `index` est le premier caractère d’une paire de substitution valide, la <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> méthode détermine si la paire de substitution forme un chiffre et, si tel est le cas, retourne sa valeur numérique. Par exemple, le système de numérotation égéen se compose de points de code U + 10107 et U + 10133. L’exemple suivant utilise la <xref:System.Char.ConvertFromUtf32%2A> méthode pour instancier une chaîne qui représente chaque nombre mineures. Comme la sortie de l’exemple, le <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> méthode retourne la valeur numérique correcte si elle est passée de substitut étendu d’un nombre mineures. Toutefois, s’il est passé de substitut faible, elle considère uniquement le substitut faible de manière isolée et retourne -1.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 L’exemple de code suivant montre les valeurs retournées par chaque méthode pour différents types de caractères.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the Unicode category of a Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the Unicode category.</param>
        <summary>Gets the Unicode category of the specified character.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the specified character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les caractères Unicode sont divisées en catégories. Catégorie d’un caractère est une de ses propriétés. Par exemple, un caractère peut être une lettre majuscule, une lettre minuscule, un chiffre décimal, un lettre, un chiffre, une ponctuation de connecteur, un symbole mathématique ou un symbole de devise. La <xref:System.Globalization.UnicodeCategory> classe retourne la catégorie d’un caractère Unicode. Pour plus d’informations sur les caractères Unicode, consultez le [norme Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Le <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> méthode suppose que `ch` correspond à un caractère linguistique unique et retourne sa catégorie. Cela signifie que, pour les paires de substitution, il retourne <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> au lieu de la catégorie à laquelle appartient le substitut. Par exemple, l’alphabet Ugaritic occupe les points de code U + 10380 à U + 1039F. L’exemple suivant utilise la <xref:System.Char.ConvertFromUtf32%2A> méthode pour instancier une chaîne qui représente UGARITIC LETTRE ALPA (U + 10380), qui est la première lettre de l’alphabet Ugaritic. Comme la sortie de l’exemple, le <xref:System.Char.IsNumber%28System.Char%29> retourne de la méthode `false` si le substitut étendu ou le substitut faible de ce caractère est transmis.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Notez que <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> ne retourne pas toujours la même <xref:System.Globalization.UnicodeCategory> valeur comme vous le <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> lorsqu’il est passé d’un caractère particulier en tant que paramètre de méthode. Le <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> méthode est conçue pour refléter la version actuelle de la norme Unicode. En revanche, bien que le <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> méthode reflète généralement la version actuelle de la norme Unicode, elle peut retourner la catégorie d’un caractère basée sur une version précédente de la norme ou elle peut retourner une catégorie différente de la norme actuelle pour conserver la compatibilité descendante.  
  
   
  
## Examples  
 L’exemple de code suivant montre les valeurs retournées par chaque méthode pour différents types de caractères.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the Unicode category.</param>
        <param name="index">The index of the Unicode character for which to get the Unicode category.</param>
        <summary>Gets the Unicode category of the character at the specified index of the specified string.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the character at the specified index of the specified string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les caractères Unicode sont divisées en catégories. Catégorie d’un caractère est une de ses propriétés. Par exemple, un caractère peut être une lettre majuscule, une lettre minuscule, un chiffre décimal, un lettre, un chiffre, une ponctuation de connecteur, un symbole mathématique ou un symbole de devise. La <xref:System.Globalization.UnicodeCategory> classe retourne la catégorie d’un caractère Unicode. Pour plus d’informations sur les caractères Unicode, consultez le [norme Unicode](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Si le <xref:System.Char> objet à la position `index` est le premier caractère d’une paire de substitution valide, la <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> méthode retourne la catégorie Unicode de la paire de substitution au lieu de retourner <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>. Par exemple, l’alphabet Ugaritic occupe les points de code U + 10380 à U + 1039F. L’exemple suivant utilise la <xref:System.Char.ConvertFromUtf32%2A> méthode pour instancier une chaîne qui représente UGARITIC LETTRE ALPA (U + 10380), qui est la première lettre de l’alphabet Ugaritic. Comme la sortie de l’exemple, le <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> retourne de la méthode <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> si elle est passée de substitut étendu de ce caractère, ce qui indique qu’il considère que la paire de substitution. Toutefois, s’il est passé de substitut faible, elle considère uniquement le substitut faible de manière isolée et retourne <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Notez que <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> méthode ne retourne pas toujours la même <xref:System.Globalization.UnicodeCategory> valeur comme vous le <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> lorsqu’il est passé d’un caractère particulier en tant que paramètre de méthode. Le <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> méthode est conçue pour refléter la version actuelle de la norme Unicode. En revanche, bien que le <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> méthode reflète généralement la version actuelle de la norme Unicode, elle peut retourner la catégorie d’un caractère basée sur une version précédente de la norme ou elle peut retourner une catégorie différente de la norme actuelle pour conserver la compatibilité descendante.  
  
   
  
## Examples  
 L’exemple de code suivant montre les valeurs retournées par chaque méthode pour différents types de caractères.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>