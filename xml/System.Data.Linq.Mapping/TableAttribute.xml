<Type Name="TableAttribute" FullName="System.Data.Linq.Mapping.TableAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c558b22bb19a9d677a923b0838a837e6c591928b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37681150" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TableAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TableAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Mapping.TableAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TableAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class TableAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type TableAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Désigne une classe comme classe d'entité associée à une table de base de données.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cet attribut pour désigner une classe comme classe d'entité associée à une table ou une vue de base de données. [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] traite les classes qui ont le <xref:System.Data.Linq.Mapping.TableAttribute> attribut comme des classes persistantes.  
  
 [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] prend en charge uniquement les mappage de table unique. Autrement dit, une classe d’entité doit être mappée à une seule table de base de données, et vous ne pouvez pas mapper une table de base de données à plusieurs classes en même temps.  
  
 Vous pouvez utiliser la <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> propriété de la <xref:System.Data.Linq.Mapping.TableAttribute> d’attribut pour spécifier un nom pour la table, et vous pouvez éventuellement utiliser le nom de schéma pour qualifier un nom de table. Si vous ne spécifiez pas un nom à l’aide de la <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> propriété, le nom de table est censé pour être le même que le nom de classe.  
  
## <a name="schema-qualified-names"></a>Noms qualifiés par schéma  
 Vous pouvez éventuellement utiliser le nom de schéma pour qualifier un nom de table. Par défaut, le jeton à gauche de la première période dans le <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> chaîne est considéré comme le nom du schéma. Le reste du nom est considéré comme le nom de table. Le fournisseur met entre guillemets le nom de table comme il convient. Par exemple, le [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] fournisseur pour SQL Server permet de s’assurer que les crochets sont utilisés au moins lorsqu’ils sont nécessaires.  
  
> [!NOTE]
>  Dans certains cas, vous devez explicitement les attributs entre guillemets, car le fournisseur SQL Server ne peut pas auto-devis. Le tableau suivant présente quelques exemples.  
  
|Case|Exemple : Nom d’identificateur|Exemple : La chaîne attendue dans les attributs|Sinon...|  
|----------|------------------------------|--------------------------------------------|----------------|  
|Nom de schéma contient un point|Schéma : « A.B »<br /><br /> Table : « C »|"[A.B].C"|La première période de séparer le nom de schéma à partir du nom de table est supposée.|  
|Nom de schéma/Table commence par `@`|"@SomeName"|"[@SomeName]"|Supposé pour être un nom de paramètre.|  
|Schéma commence par `[` et se termine par `]`|« [Aboutissait] »|"[[Schema].[Table]]]"|Identificateur sans guillemets ressemble à un identificateur entre guillemets.|  
|Tableau commence par `[` et se termine par `]`|« [Table] »|« [[Table]]] »|Identificateur sans guillemets ressemble à un identificateur entre guillemets.|  
  
   
  
## Examples  
 [!code-csharp[DLinqCustomize#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCustomize/cs/Program.cs#1)]
 [!code-vb[DLinqCustomize#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCustomize/vb/Module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TableAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.TableAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TableAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Linq.Mapping.TableAttribute" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.TableAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Data.Linq.Mapping.TableAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la table ou de la vue.</summary>
        <value>Par défaut, la valeur est la même que le nom de la classe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous ne spécifiez pas un nom à l’aide de <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A>, le nom de table est supposé pour être le même que le nom de classe.  
  
> [!NOTE]
>  Vous pouvez éventuellement utiliser un nom de schéma pour qualifier le nom de table (par exemple, Schéma3.Table5). Par défaut, le jeton à gauche de la première période dans le <xref:System.Data.Linq.Mapping.TableAttribute.Name%2A> chaîne est considéré comme le nom de schéma et le reste du nom de table.  
  
 Dans l’exemple suivant, le nom de table par défaut, `Customer`, est remplacée par `Customers`.  
  
   
  
## Examples  
 [!code-csharp[DLinqCustomize#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCustomize/cs/Program.cs#1)]
 [!code-vb[DLinqCustomize#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCustomize/vb/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>