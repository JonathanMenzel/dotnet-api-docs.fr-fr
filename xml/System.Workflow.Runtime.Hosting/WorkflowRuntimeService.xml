<Type Name="WorkflowRuntimeService" FullName="System.Workflow.Runtime.Hosting.WorkflowRuntimeService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7ab23a51523641b0fb1578542115b55cb31ce463" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48730149" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class WorkflowRuntimeService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WorkflowRuntimeService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WorkflowRuntimeService" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntimeService abstract" />
  <TypeSignature Language="F#" Value="type WorkflowRuntimeService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente la classe de base abstraite à partir de laquelle les services principaux du moteur d'exécution de workflow sont dérivés.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Les services qui dérivent de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> peuvent être démarrés et arrêtés par le moteur d'exécution de workflow. Toutefois, l'ordre dans lequel les services sont démarrés ou arrêtés est indéterminé et les services peuvent requérir la prise en charge d'autres services pour être initialisés correctement lorsqu'ils sont démarrés et, inversement, peuvent requérir la prise en charge d'autres services pour être arrêtés correctement le cas échéant. Pour traiter ce problème, le moteur d'exécution de workflow fournit des mécanismes à deux phases pour démarrer et arrêter les services. Lorsque <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> est appelée, le moteur d'exécution de workflow appelle la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> pour chacun de ses services qui dérivent de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Une fois que tous ces services ont été démarrés, le moteur d'exécution de workflow déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> qui provoque l'appel de la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> pour chaque service du moteur d'exécution de workflow. Votre service peut substituer la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> pour participer à ce processus à deux phases. De même, lorsque <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> est appelée, la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>, l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> et la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> fournissent ce mécanisme à deux phases.  La propriété State contient une valeur <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState> qui indique si le service est en train d'être démarré ou arrêté, ou est complètement démarré ou arrêté.  
  
 Les services qui dérivent de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> peuvent déclencher l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType> lorsqu'ils rencontrent une condition qui provoque une exception non prise en charge en appelant <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.  
  
 Les services dérivés des classes <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> et <xref:System.Workflow.Runtime.Tracking.TrackingService> dérivent en fin de compte de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WorkflowRuntimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WorkflowRuntimeService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Lors de l'implémentation dans une classe dérivée, initialise une nouvelle instance de la classe <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> est initialisé à <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStarted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStarted ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStarted();" />
      <MemberSignature Language="F#" Value="abstract member OnStarted : unit -&gt; unit&#xA;override this.OnStarted : unit -&gt; unit" Usage="workflowRuntimeService.OnStarted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, représente la méthode qui est appelée lorsque le moteur d'exécution de workflow déclenche l'événement <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Started" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> implémente un mécanisme de démarrage à deux phases afin que les services du moteur d'exécution de workflow puissent exécuter toute initialisation qui dépend d'autres services après l'appel de la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> pour tous ses services du moteur d'exécution de workflow. Une fois que le moteur d'exécution de workflow appelle la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> de tous ses services, il déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType>. Vous pouvez substituer la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> pour fournir toutes les dernières fonctionnalités de démarrage requises par votre service lorsque l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> est déclenché. Le mécanisme d'abonnement et d'annulation d'un abonnement de l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> est contrôlé en interne.  
  
> [!NOTE]
>  Si votre service est ajouté au moteur d'exécution de workflow par un appel à la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>, après le démarrage du moteur d'exécution de workflow, ce dernier appelle la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> sur votre service. Toutefois, dans cette situation, l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Started> s'est déjà produit, par conséquent votre service devra peut-être effectuer toute initialisation qu'il exécuterait normalement dans <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> à partir de la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>. Vous pouvez tester la propriété <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> pour déterminer si le moteur d'exécution de workflow a été démarré.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> a la valeur <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started> avant l'appel de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A>.  L'implémentation par défaut de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> n'effectue aucune action.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStopped">
      <MemberSignature Language="C#" Value="protected virtual void OnStopped ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStopped() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStopped ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStopped();" />
      <MemberSignature Language="F#" Value="abstract member OnStopped : unit -&gt; unit&#xA;override this.OnStopped : unit -&gt; unit" Usage="workflowRuntimeService.OnStopped " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, représente la méthode qui est appelée lorsque le moteur d'exécution de workflow déclenche l'événement <see cref="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> implémente un mécanisme d'arrêt à deux phases afin que les services du moteur d'exécution de workflow puissent conserver certaines fonctionnalités, après l'appel de leur méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> par le moteur d'exécution de workflow, pour qu'ils puissent, si nécessaire, prendre en charge l'arrêt d'autres services. Une fois que le moteur d'exécution de workflow appelle la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> de tous ses services, il déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType>. Vous pouvez substituer la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> pour fournir toutes les dernières fonctionnalités d'arrêt requises par votre service lorsque l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> est déclenché. Le mécanisme d'abonnement et d'annulation d'un abonnement de l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> est contrôlé en interne.  
  
> [!NOTE]
>  Si votre <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> est supprimé du moteur d'exécution de workflow par un appel à <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> pendant que le moteur d'exécution de workflow s'exécute, ce dernier appelle <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> sur votre service. Toutefois, la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> ne sera pas appelée pour votre service dans cette situation. Votre service devra peut-être, par conséquent, exécuter tout dernier arrêt qu'il exécuterait normalement dans <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> à partir de la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>. Vous pouvez tester la propriété <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> pour déterminer si le moteur d'exécution de workflow s'exécute.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> a la valeur <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped> avant l'appel de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A>.  L'implémentation par défaut de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> n'effectue aucune action.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseServicesExceptionNotHandledEvent">
      <MemberSignature Language="C#" Value="protected void RaiseServicesExceptionNotHandledEvent (Exception exception, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseServicesExceptionNotHandledEvent(class System.Exception exception, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseServicesExceptionNotHandledEvent(Exception ^ exception, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.RaiseServicesExceptionNotHandledEvent : Exception * Guid -&gt; unit" Usage="workflowRuntimeService.RaiseServicesExceptionNotHandledEvent (exception, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="exception">L'exception qui n'a pas pu être gérée.</param>
        <param name="instanceId">
          <see cref="T:System.Guid" /> de l'instance de workflow associée à l'exception non prise en charge.</param>
        <summary>Déclenche l'événement <see cref="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Votre service peut appeler <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> pour déclencher l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled?displayProperty=nameWithType> lorsqu'il rencontre une exception qu'il ne peut pas gérer pendant son exécution. Vous devez passer le <xref:System.Guid> de l'instance de workflow a associée à l'exception non prise en charge. Par exemple, un service de minuteur peut passer le <xref:System.Guid> associé au minuteur pour lequel l'exception s'est produite.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Runtime">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.WorkflowRuntime Runtime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Runtime.WorkflowRuntime Runtime" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Runtime As WorkflowRuntime" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::WorkflowRuntime ^ Runtime { System::Workflow::Runtime::WorkflowRuntime ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Runtime : System.Workflow.Runtime.WorkflowRuntime" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowRuntime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> pour ce service.</summary>
        <value>Objet <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le moteur d'exécution de workflow définit cette propriété avant d'appeler la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> sur le service.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="protected internal virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Start();" />
      <MemberSignature Language="F#" Value="abstract member Start : unit -&gt; unit&#xA;override this.Start : unit -&gt; unit" Usage="workflowRuntimeService.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, démarre le service et fait passer la propriété <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> à <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> est appelée par le moteur d'exécution de workflow sur tous ses services qui dérivent de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> lorsque la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> est appelée.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> est également appelée par le moteur d'exécution de workflow lorsqu'un service lui est ajouté par un appel à la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> après son démarrage. L'implémentation par défaut de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> effectue le suivi du démarrage du service et utilise cette information pour lever l'exception appropriée si le service est démarré pendant qu'il est déjà en cours d'exécution.  
  
 Vous pouvez fournir les fonctionnalités supplémentaires nécessaires pour que le démarrage de votre service soit déclenché par le moteur d'exécution de workflow en substituant cette méthode. Il n'y a aucune garantie sur les services qui, le cas échéant, s'exécutent lorsque le moteur d'exécution de workflow appelle <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> sur votre service. Par conséquent, dans la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>, vous devez exécuter uniquement les initialisations qui ne dépendent pas des fonctionnalités fournies par d'autres services. Cela inclut les fonctionnalités fournies par les services principaux tels que le service de planificateur. Le moteur d'exécution de workflow déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Started?displayProperty=nameWithType> après l'appel de la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> de tous ses services du moteur d'exécution de workflow. Si votre service requiert une initialisation supplémentaire après le démarrage de tous les services du moteur d'exécution de workflow, vous pouvez substituer la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> pour exécuter cette initialisation lorsque l'événement <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> est déclenché.  
  
> [!NOTE]
>  Si votre service est ajouté au moteur d'exécution de workflow par un appel à la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>, après le démarrage du moteur d'exécution de workflow, ce dernier appelle la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> sur votre service. Toutefois, dans cette situation, l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Started> s'est déjà produit, par conséquent votre service devra peut-être effectuer toute initialisation qu'il exécuterait normalement dans <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A> à partir de la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A>. Vous pouvez tester la propriété <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> pour déterminer si le moteur d'exécution de workflow a été démarré.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> doit être appelée uniquement par le moteur d'exécution de workflow.  
  
   
  
## Examples  
 L'exemple suivant illustre l'appel de la méthode Start sur un objet a dérivé de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, TerminationTrackingService.  Cet exemple provient de l'exemple du Kit de développement logiciel Termination Tracking Service (SDK).  Pour plus d’informations, consultez [exemple de Service de suivi arrêt](http://msdn.microsoft.com/library/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  
  
 [!code-csharp[WF_Samples#112](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#112)]
 [!code-vb[WF_Samples#112](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> est une référence Null (<see langword="Nothing" /> en Visual Basic) 
- ou - 
Le service a déjà été démarré.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState State" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property State As WorkflowRuntimeServiceState" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState State { System::Workflow::Runtime::Hosting::WorkflowRuntimeServiceState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" Usage="System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'état de <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" />.</summary>
        <value>Une des valeurs de <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> implémente des mécanismes à deux phases pour démarrer et arrêter un service du moteur d'exécution de workflow. La première phase du mécanisme de démarrage commence lorsque le moteur d'exécution de workflow appelle l'implémentation de la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> pour le service. Cette méthode doit appeler l'implémentation de base de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> qui fait passer <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> à <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Starting>. La deuxième phase se produit après que le moteur d'exécution de workflow a démarré tous ses services lorsqu'il déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Started>. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> gère en interne un abonnement à cet événement et son gestionnaire fait passer <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> à <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Started>.  
  
 Le mécanisme à deux phases pour arrêter un service commence lorsque le moteur d'exécution de workflow appelle l'implémentation de la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> pour le service. Cette méthode doit appeler l'implémentation de base de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> qui fait passer <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> à <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping>. Après l'arrêt de tous ses services, le moteur d'exécution de workflow déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped>. <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> gère en interne un abonnement à cet événement et son gestionnaire fait passer <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State%2A> à <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopped>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="protected internal virtual void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void Stop();" />
      <MemberSignature Language="F#" Value="abstract member Stop : unit -&gt; unit&#xA;override this.Stop : unit -&gt; unit" Usage="workflowRuntimeService.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, arrête le service et fait passer la propriété <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.State" /> à <see cref="F:System.Workflow.Runtime.Hosting.WorkflowRuntimeServiceState.Stopping" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> est appelée par le moteur d'exécution de workflow sur tous ses services qui dérivent de la classe <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> lorsque la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> est appelée.  La méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> est également appelée par le moteur d'exécution de workflow lorsqu'un service en est supprimé par un appel à la méthode <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>. L'implémentation par défaut de <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> effectue le suivi du démarrage du service et utilise cette information pour lever l'exception appropriée si le service est arrêté avant qu'il ne soit démarré.  
  
 Vous pouvez fournir les fonctionnalités supplémentaires nécessaires pour que l'arrêt de votre service soit déclenché par le moteur d'exécution de workflow en substituant cette méthode. Il n'y a aucune garantie sur les services qui, le cas échéant, sont arrêtés ou exécutés lorsque <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> est appelée sur votre service. Le moteur d'exécution de workflow déclenche l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> après l'appel de la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> de tous ses services du moteur d'exécution de workflow. Votre service peut devoir conserver des fonctionnalités résiduelles pour prendre en charge d'autres services jusqu'à ce que tous les services du moteur d'exécution de workflow aient leurs méthodes d'arrêt appelées par ce dernier. Si votre service doit conserver de telles fonctionnalités, vous pouvez substituer la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> pour exécuter toute action supplémentaire requise pour terminer l'arrêt de votre service lorsque l'événement <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped?displayProperty=nameWithType> est déclenché.  
  
> [!NOTE]
>  Si votre <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> est supprimé du moteur d'exécution de workflow par un appel à <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> pendant que le moteur d'exécution de workflow s'exécute, ce dernier appelle <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> sur votre service. Toutefois, la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> ne sera pas appelée pour votre service dans cette situation. Votre service devra peut-être, par conséquent, exécuter toutes les fonctionnalités d'arrêt supplémentaires qu'il exécuterait normalement dans <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A> à partir de la méthode <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A>. Vous pouvez tester la propriété <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> pour déterminer si le moteur d'exécution de workflow s'exécute.  
  
 <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> doit être appelée uniquement par le moteur d'exécution de workflow.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Runtime" /> est une référence Null (<see langword="Nothing" /> en Visual Basic).  
  
- ou - 
Le service n'a pas encore été démarré.</exception>
      </Docs>
    </Member>
  </Members>
</Type>