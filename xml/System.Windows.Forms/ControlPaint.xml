<Type Name="ControlPaint" FullName="System.Windows.Forms.ControlPaint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd671b967a1a03cecb729905295c4a3193127df0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36347188" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ControlPaint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ControlPaint extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ControlPaint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ControlPaint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlPaint sealed" />
  <TypeSignature Language="F#" Value="type ControlPaint = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des méthodes utilisées pour peindre les contrôles Windows communs et leurs éléments. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les méthodes contenues dans la <xref:System.Windows.Forms.ControlPaint> classe permettent de dessiner vos propres contrôles ou éléments de contrôles. Vous pouvez contrôler le dessin de vos propres contrôles si le <xref:System.Windows.Forms.ControlStyles.UserPaint> bit est défini sur `true` pour le contrôle. Vous pouvez obtenir ou définir les bits de style en appelant le <xref:System.Windows.Forms.Control.GetStyle%2A> ou <xref:System.Windows.Forms.Control.SetStyle%2A> méthodes. Vous pouvez définir plusieurs bits de style pour n’importe quel contrôle. Le <xref:System.Windows.Forms.ControlStyles> membres de l’énumération peuvent être combinées avec des opérations au niveau du bit.  
  
   
  
## Examples  
 L’exemple de code suivant utilise l’un de le <xref:System.Windows.Forms.ControlPaint> constructeurs pour dessiner un plat <xref:System.Windows.Forms.Button> contrôle.  
  
 [!code-cpp[ButtonState#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ButtonState/CPP/buttonstate1.cpp#2)]
 [!code-csharp[ButtonState#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ButtonState/CS/buttonstate1.cs#2)]
 [!code-vb[ButtonState#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ButtonState/VB/buttonstate1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.ControlStyles" />
  </Docs>
  <Members>
    <Member MemberName="ContrastControlDark">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color ContrastControlDark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color ContrastControlDark" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ControlPaint.ContrastControlDark" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ContrastControlDark As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Color ContrastControlDark { System::Drawing::Color get(); };" />
      <MemberSignature Language="F#" Value="member this.ContrastControlDark : System.Drawing.Color" Usage="System.Windows.Forms.ControlPaint.ContrastControlDark" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la couleur à utiliser en tant que couleur <see cref="P:System.Drawing.SystemColors.ControlDark" />.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> à utiliser en tant que couleur <see cref="P:System.Drawing.SystemColors.ControlDark" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’utilisateur a activé le <xref:System.Windows.Forms.SystemInformation.HighContrast%2A> mode, cette propriété est définie <xref:System.Drawing.SystemColors.WindowFrame%2A?displayProperty=nameWithType>; sinon, elle est définie sur <xref:System.Drawing.SystemColors.ControlDark%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.SystemInformation" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="CreateHBitmap16Bit">
      <MemberSignature Language="C#" Value="public static IntPtr CreateHBitmap16Bit (System.Drawing.Bitmap bitmap, System.Drawing.Color background);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CreateHBitmap16Bit(class System.Drawing.Bitmap bitmap, valuetype System.Drawing.Color background) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.CreateHBitmap16Bit(System.Drawing.Bitmap,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr CreateHBitmap16Bit(System::Drawing::Bitmap ^ bitmap, System::Drawing::Color background);" />
      <MemberSignature Language="F#" Value="static member CreateHBitmap16Bit : System.Drawing.Bitmap * System.Drawing.Color -&gt; nativeint" Usage="System.Windows.Forms.ControlPaint.CreateHBitmap16Bit (bitmap, background)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" />
        <Parameter Name="background" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="bitmap">
          <see cref="T:System.Drawing.Bitmap" /> à créer.</param>
        <param name="background">
          <see cref="T:System.Drawing.Color" /> d'arrière-plan.</param>
        <summary>Crée une bitmap de couleur 16 bits.</summary>
        <returns>
          <see cref="T:System.IntPtr" /> représentant le handle du bitmap.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHBitmapColorMask">
      <MemberSignature Language="C#" Value="public static IntPtr CreateHBitmapColorMask (System.Drawing.Bitmap bitmap, IntPtr monochromeMask);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CreateHBitmapColorMask(class System.Drawing.Bitmap bitmap, native int monochromeMask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.CreateHBitmapColorMask(System.Drawing.Bitmap,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr CreateHBitmapColorMask(System::Drawing::Bitmap ^ bitmap, IntPtr monochromeMask);" />
      <MemberSignature Language="F#" Value="static member CreateHBitmapColorMask : System.Drawing.Bitmap * nativeint -&gt; nativeint" Usage="System.Windows.Forms.ControlPaint.CreateHBitmapColorMask (bitmap, monochromeMask)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" />
        <Parameter Name="monochromeMask" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="bitmap">
          <see cref="T:System.Drawing.Bitmap" /> à créer.</param>
        <param name="monochromeMask">Pointeur sur le masque monochrome.</param>
        <summary>Crée une <see langword="HBITMAP" /> Win32 hors de l'image.</summary>
        <returns>
          <see cref="T:System.IntPtr" /> représentant le handle du bitmap.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous êtes responsable de libérer la `HBITMAP`. Si l’image utilise la transparence, l’arrière-plan sera rempli avec la couleur spécifiée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHBitmapTransparencyMask">
      <MemberSignature Language="C#" Value="public static IntPtr CreateHBitmapTransparencyMask (System.Drawing.Bitmap bitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CreateHBitmapTransparencyMask(class System.Drawing.Bitmap bitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.CreateHBitmapTransparencyMask(System.Drawing.Bitmap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr CreateHBitmapTransparencyMask(System::Drawing::Bitmap ^ bitmap);" />
      <MemberSignature Language="F#" Value="static member CreateHBitmapTransparencyMask : System.Drawing.Bitmap -&gt; nativeint" Usage="System.Windows.Forms.ControlPaint.CreateHBitmapTransparencyMask bitmap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" />
      </Parameters>
      <Docs>
        <param name="bitmap">
          <see cref="T:System.Drawing.Bitmap" /> pour lequel créer le masque de transparence.</param>
        <summary>Crée un masque de couleur pour la bitmap spécifiée qui indique quelle couleur doit être affichée comme transparente.</summary>
        <returns>Handle du masque de <see cref="T:System.Drawing.Bitmap" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous êtes chargé de libérer la bitmap.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dark">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crée un nouvel objet de couleur sombre pour le contrôle.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dark">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color Dark (System.Drawing.Color baseColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Color Dark(valuetype System.Drawing.Color baseColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.Dark(System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dark (baseColor As Color) As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Color Dark(System::Drawing::Color baseColor);" />
      <MemberSignature Language="F#" Value="static member Dark : System.Drawing.Color -&gt; System.Drawing.Color" Usage="System.Windows.Forms.ControlPaint.Dark baseColor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="baseColor">
          <see cref="T:System.Drawing.Color" /> à assombrir.</param>
        <summary>Crée un nouvel objet de couleur sombre pour le contrôle à partir de la couleur spécifiée.</summary>
        <returns>
          <see cref="T:System.Drawing.Color" /> représentant la couleur sombre dans le contrôle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le texte spécifié <xref:System.Drawing.Color> est un de la <xref:System.Drawing.SystemColors>, la couleur est convertie en un <xref:System.Drawing.SystemColors.ControlDark%2A?displayProperty=nameWithType> couleur ; sinon, valeur de luminosité de la couleur est diminuée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dark">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color Dark (System.Drawing.Color baseColor, float percOfDarkDark);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Color Dark(valuetype System.Drawing.Color baseColor, float32 percOfDarkDark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.Dark(System.Drawing.Color,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dark (baseColor As Color, percOfDarkDark As Single) As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Color Dark(System::Drawing::Color baseColor, float percOfDarkDark);" />
      <MemberSignature Language="F#" Value="static member Dark : System.Drawing.Color * single -&gt; System.Drawing.Color" Usage="System.Windows.Forms.ControlPaint.Dark (baseColor, percOfDarkDark)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseColor" Type="System.Drawing.Color" />
        <Parameter Name="percOfDarkDark" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="baseColor">
          <see cref="T:System.Drawing.Color" /> à assombrir.</param>
        <param name="percOfDarkDark">Pourcentage appliqué pour assombrir le <see cref="T:System.Drawing.Color" /> spécifié.</param>
        <summary>Crée un nouvel objet de couleur sombre pour le contrôle à partir de la couleur spécifiée et l'assombrit du pourcentage spécifié.</summary>
        <returns>
          <see cref="T:System.Drawing.Color" /> représentant la couleur sombre dans le contrôle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le texte spécifié <xref:System.Drawing.Color> est un de la <xref:System.Drawing.SystemColors>, la couleur est convertie en un <xref:System.Drawing.SystemColors.ControlDark%2A?displayProperty=nameWithType> couleur ; sinon, valeur de luminosité de la couleur est diminuée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DarkDark">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DarkDark (System.Drawing.Color baseColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Color DarkDark(valuetype System.Drawing.Color baseColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DarkDark(System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DarkDark (baseColor As Color) As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Color DarkDark(System::Drawing::Color baseColor);" />
      <MemberSignature Language="F#" Value="static member DarkDark : System.Drawing.Color -&gt; System.Drawing.Color" Usage="System.Windows.Forms.ControlPaint.DarkDark baseColor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="baseColor">
          <see cref="T:System.Drawing.Color" /> à assombrir.</param>
        <summary>Crée un nouvel objet de couleur sombre pour le contrôle à partir de la couleur spécifiée.</summary>
        <returns>
          <see cref="T:System.Drawing.Color" /> représentant la couleur sombre dans le contrôle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si spécifié <xref:System.Drawing.Color> est un de le <xref:System.Drawing.SystemColors>, la couleur est convertie en la <xref:System.Drawing.SystemColors.ControlDarkDark%2A?displayProperty=nameWithType> couleur ; sinon, valeur de luminosité de la couleur est augmentée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBorder">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine une bordure sur un contrôle de type bouton.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBorder">
      <MemberSignature Language="C#" Value="public static void DrawBorder (System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, System.Drawing.Color color, System.Windows.Forms.ButtonBorderStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawBorder(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.Color color, valuetype System.Windows.Forms.ButtonBorderStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Windows.Forms.ButtonBorderStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawBorder(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle bounds, System::Drawing::Color color, System::Windows::Forms::ButtonBorderStyle style);" />
      <MemberSignature Language="F#" Value="static member DrawBorder : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Color * System.Windows.Forms.ButtonBorderStyle -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawBorder (graphics, bounds, color, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="color" Type="System.Drawing.Color" />
        <Parameter Name="style" Type="System.Windows.Forms.ButtonBorderStyle" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="bounds">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions de la bordure.</param>
        <param name="color">
          <see cref="T:System.Drawing.Color" /> de la bordure.</param>
        <param name="style">Une des valeurs de <see cref="T:System.Windows.Forms.ButtonBorderStyle" /> qui spécifie le style de la bordure.</param>
        <summary>Dessine une bordure de style et couleur spécifiés, sur la surface graphique spécifiée et dans les limites spécifiées sur un contrôle de type bouton.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de l’un de le <xref:System.Windows.Forms.ControlPaint.DrawBorder3D%2A> méthodes. Pour exécuter cet exemple, collez le code suivant dans un formulaire qui importe les <xref:System.Windows.Forms> et <xref:System.Drawing> espaces de noms. Assurez-vous du formulaire <xref:System.Windows.Forms.Control.Paint> événement est associé au gestionnaire d’événements dans cet exemple.  
  
 [!code-cpp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBorder">
      <MemberSignature Language="C#" Value="public static void DrawBorder (System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds, System.Drawing.Color leftColor, int leftWidth, System.Windows.Forms.ButtonBorderStyle leftStyle, System.Drawing.Color topColor, int topWidth, System.Windows.Forms.ButtonBorderStyle topStyle, System.Drawing.Color rightColor, int rightWidth, System.Windows.Forms.ButtonBorderStyle rightStyle, System.Drawing.Color bottomColor, int bottomWidth, System.Windows.Forms.ButtonBorderStyle bottomStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawBorder(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.Color leftColor, int32 leftWidth, valuetype System.Windows.Forms.ButtonBorderStyle leftStyle, valuetype System.Drawing.Color topColor, int32 topWidth, valuetype System.Windows.Forms.ButtonBorderStyle topStyle, valuetype System.Drawing.Color rightColor, int32 rightWidth, valuetype System.Windows.Forms.ButtonBorderStyle rightStyle, valuetype System.Drawing.Color bottomColor, int32 bottomWidth, valuetype System.Windows.Forms.ButtonBorderStyle bottomStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Int32,System.Windows.Forms.ButtonBorderStyle,System.Drawing.Color,System.Int32,System.Windows.Forms.ButtonBorderStyle,System.Drawing.Color,System.Int32,System.Windows.Forms.ButtonBorderStyle,System.Drawing.Color,System.Int32,System.Windows.Forms.ButtonBorderStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawBorder(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle bounds, System::Drawing::Color leftColor, int leftWidth, System::Windows::Forms::ButtonBorderStyle leftStyle, System::Drawing::Color topColor, int topWidth, System::Windows::Forms::ButtonBorderStyle topStyle, System::Drawing::Color rightColor, int rightWidth, System::Windows::Forms::ButtonBorderStyle rightStyle, System::Drawing::Color bottomColor, int bottomWidth, System::Windows::Forms::ButtonBorderStyle bottomStyle);" />
      <MemberSignature Language="F#" Value="static member DrawBorder : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Color * int * System.Windows.Forms.ButtonBorderStyle * System.Drawing.Color * int * System.Windows.Forms.ButtonBorderStyle * System.Drawing.Color * int * System.Windows.Forms.ButtonBorderStyle * System.Drawing.Color * int * System.Windows.Forms.ButtonBorderStyle -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawBorder (graphics, bounds, leftColor, leftWidth, leftStyle, topColor, topWidth, topStyle, rightColor, rightWidth, rightStyle, bottomColor, bottomWidth, bottomStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="leftColor" Type="System.Drawing.Color" />
        <Parameter Name="leftWidth" Type="System.Int32" />
        <Parameter Name="leftStyle" Type="System.Windows.Forms.ButtonBorderStyle" />
        <Parameter Name="topColor" Type="System.Drawing.Color" />
        <Parameter Name="topWidth" Type="System.Int32" />
        <Parameter Name="topStyle" Type="System.Windows.Forms.ButtonBorderStyle" />
        <Parameter Name="rightColor" Type="System.Drawing.Color" />
        <Parameter Name="rightWidth" Type="System.Int32" />
        <Parameter Name="rightStyle" Type="System.Windows.Forms.ButtonBorderStyle" />
        <Parameter Name="bottomColor" Type="System.Drawing.Color" />
        <Parameter Name="bottomWidth" Type="System.Int32" />
        <Parameter Name="bottomStyle" Type="System.Windows.Forms.ButtonBorderStyle" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="bounds">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions de la bordure.</param>
        <param name="leftColor">
          <see cref="T:System.Drawing.Color" /> du côté gauche de la bordure.</param>
        <param name="leftWidth">Largeur de la bordure gauche.</param>
        <param name="leftStyle">Une des valeurs de <see cref="T:System.Windows.Forms.ButtonBorderStyle" /> qui spécifie le style de la bordure gauche.</param>
        <param name="topColor">
          <see cref="T:System.Drawing.Color" /> du côté supérieur de la bordure.</param>
        <param name="topWidth">Largeur de la bordure supérieure.</param>
        <param name="topStyle">Une des valeurs de <see cref="T:System.Windows.Forms.ButtonBorderStyle" /> qui spécifie le style de la bordure supérieure.</param>
        <param name="rightColor">
          <see cref="T:System.Drawing.Color" /> du côté droit de la bordure.</param>
        <param name="rightWidth">Largeur de la bordure droite.</param>
        <param name="rightStyle">Une des valeurs de <see cref="T:System.Windows.Forms.ButtonBorderStyle" /> qui spécifie le style de la bordure droite.</param>
        <param name="bottomColor">
          <see cref="T:System.Drawing.Color" /> du côté inférieur de la bordure.</param>
        <param name="bottomWidth">Largeur de la bordure inférieure.</param>
        <param name="bottomStyle">Une des valeurs de <see cref="T:System.Windows.Forms.ButtonBorderStyle" /> qui spécifie le style de la bordure inférieure.</param>
        <summary>Dessine une bordure sur un contrôle de style bouton avec les styles, couleurs et épaisseurs de bordure spécifiés, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de l’un de le <xref:System.Windows.Forms.ControlPaint.DrawBorder3D%2A> méthodes. Pour exécuter cet exemple, collez le code suivant dans un formulaire qui importe les <xref:System.Windows.Forms> et <xref:System.Drawing> espaces de noms. Assurez-vous du formulaire <xref:System.Windows.Forms.Control.Paint> événement est associé au gestionnaire d’événements dans cet exemple.  
  
 [!code-cpp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ButtonBorderStyle" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBorder3D">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine une bordure à trois dimensions sur un contrôle.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBorder3D">
      <MemberSignature Language="C#" Value="public static void DrawBorder3D (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawBorder3D(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawBorder3D(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle);" />
      <MemberSignature Language="F#" Value="static member DrawBorder3D : System.Drawing.Graphics * System.Drawing.Rectangle -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawBorder3D (graphics, rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions de la bordure.</param>
        <summary>Dessine une bordure à trois dimensions sur la surface graphique spécifiée et dans les limites spécifiées sur un contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.Border3DStyle.Etched?displayProperty=nameWithType> style est utilisé par défaut pour dessiner la bordure.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de l’un de le <xref:System.Windows.Forms.ControlPaint.DrawBorder3D%2A> méthodes. Pour exécuter cet exemple, collez le code suivant dans un formulaire qui importe les <xref:System.Windows.Forms> et <xref:System.Drawing> espaces de noms. Assurez-vous du formulaire <xref:System.Windows.Forms.Control.Paint> événement est associé au gestionnaire d’événements dans cet exemple.  
  
 [!code-cpp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.Border3DStyle" />
      </Docs>
    </Member>
    <Member MemberName="DrawBorder3D">
      <MemberSignature Language="C#" Value="public static void DrawBorder3D (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Windows.Forms.Border3DStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawBorder3D(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Windows.Forms.Border3DStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.Border3DStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawBorder3D(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Windows::Forms::Border3DStyle style);" />
      <MemberSignature Language="F#" Value="static member DrawBorder3D : System.Drawing.Graphics * System.Drawing.Rectangle * System.Windows.Forms.Border3DStyle -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawBorder3D (graphics, rectangle, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="style" Type="System.Windows.Forms.Border3DStyle" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions de la bordure.</param>
        <param name="style">Une des valeurs de <see cref="T:System.Windows.Forms.Border3DStyle" /> qui spécifie le style de la bordure.</param>
        <summary>Dessine une bordure à trois dimensions avec le style spécifié, sur la surface graphique spécifiée et dans les limites spécifiées sur un contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de l’un de le <xref:System.Windows.Forms.ControlPaint.DrawBorder3D%2A> méthodes. Pour exécuter cet exemple, collez le code suivant dans un formulaire qui importe les <xref:System.Windows.Forms> et <xref:System.Drawing> espaces de noms. Assurez-vous du formulaire <xref:System.Windows.Forms.Control.Paint> événement est associé au gestionnaire d’événements dans cet exemple.  
  
 [!code-cpp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.Border3DStyle" />
      </Docs>
    </Member>
    <Member MemberName="DrawBorder3D">
      <MemberSignature Language="C#" Value="public static void DrawBorder3D (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Windows.Forms.Border3DStyle style, System.Windows.Forms.Border3DSide sides);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawBorder3D(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Windows.Forms.Border3DStyle style, valuetype System.Windows.Forms.Border3DSide sides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawBorder3D(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Windows::Forms::Border3DStyle style, System::Windows::Forms::Border3DSide sides);" />
      <MemberSignature Language="F#" Value="static member DrawBorder3D : System.Drawing.Graphics * System.Drawing.Rectangle * System.Windows.Forms.Border3DStyle * System.Windows.Forms.Border3DSide -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawBorder3D (graphics, rectangle, style, sides)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="style" Type="System.Windows.Forms.Border3DStyle" />
        <Parameter Name="sides" Type="System.Windows.Forms.Border3DSide" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions de la bordure.</param>
        <param name="style">Une des valeurs de <see cref="T:System.Windows.Forms.Border3DStyle" /> qui spécifie le style de la bordure.</param>
        <param name="sides">Une des valeurs de <see cref="T:System.Windows.Forms.Border3DSide" /> qui spécifie le côté du rectangle sur lequel dessiner la bordure.</param>
        <summary>Dessine une bordure à trois dimensions avec le style spécifié, sur la surface et les côtés graphiques spécifiés et dans les limites spécifiées sur un contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de l’un de le <xref:System.Windows.Forms.ControlPaint.DrawBorder3D%2A> méthodes. Pour exécuter cet exemple, collez le code suivant dans un formulaire qui importe les <xref:System.Windows.Forms> et <xref:System.Drawing> espaces de noms. Assurez-vous du formulaire <xref:System.Windows.Forms.Control.Paint> événement est associé au gestionnaire d’événements dans cet exemple.  
  
 [!code-cpp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.Border3DStyle" />
        <altmember cref="T:System.Windows.Forms.Border3DSide" />
      </Docs>
    </Member>
    <Member MemberName="DrawBorder3D">
      <MemberSignature Language="C#" Value="public static void DrawBorder3D (System.Drawing.Graphics graphics, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawBorder3D(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawBorder3D(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="static member DrawBorder3D : System.Drawing.Graphics * int * int * int * int -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawBorder3D (graphics, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de bordure.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de bordure.</param>
        <param name="width">Largeur du rectangle de bordure.</param>
        <param name="height">Hauteur du rectangle de bordure.</param>
        <summary>Dessine une bordure à trois dimensions sur la surface graphique spécifiée et dans les limites spécifiées sur un contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.Border3DStyle.Etched?displayProperty=nameWithType> style est utilisé par défaut pour dessiner la bordure.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de l’un de le <xref:System.Windows.Forms.ControlPaint.DrawBorder3D%2A> méthodes. Pour exécuter cet exemple, collez le code suivant dans un formulaire qui importe les <xref:System.Windows.Forms> et <xref:System.Drawing> espaces de noms. Assurez-vous du formulaire <xref:System.Windows.Forms.Control.Paint> événement est associé au gestionnaire d’événements dans cet exemple.  
  
 [!code-cpp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBorder3D">
      <MemberSignature Language="C#" Value="public static void DrawBorder3D (System.Drawing.Graphics graphics, int x, int y, int width, int height, System.Windows.Forms.Border3DStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawBorder3D(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.Border3DStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.Border3DStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawBorder3D(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height, System::Windows::Forms::Border3DStyle style);" />
      <MemberSignature Language="F#" Value="static member DrawBorder3D : System.Drawing.Graphics * int * int * int * int * System.Windows.Forms.Border3DStyle -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawBorder3D (graphics, x, y, width, height, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="style" Type="System.Windows.Forms.Border3DStyle" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de bordure.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de bordure.</param>
        <param name="width">Largeur du rectangle de bordure.</param>
        <param name="height">Hauteur du rectangle de bordure.</param>
        <param name="style">Une des valeurs de <see cref="T:System.Windows.Forms.Border3DStyle" /> qui spécifie le style de la bordure.</param>
        <summary>Dessine une bordure à trois dimensions avec le style spécifié, sur la surface graphique spécifiée et dans les limites spécifiées sur un contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de l’un de le <xref:System.Windows.Forms.ControlPaint.DrawBorder3D%2A> méthodes. Pour exécuter cet exemple, collez le code suivant dans un formulaire qui importe les <xref:System.Windows.Forms> et <xref:System.Drawing> espaces de noms. Assurez-vous du formulaire <xref:System.Windows.Forms.Control.Paint> événement est associé au gestionnaire d’événements dans cet exemple.  
  
 [!code-cpp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Border3DStyle" />
      </Docs>
    </Member>
    <Member MemberName="DrawBorder3D">
      <MemberSignature Language="C#" Value="public static void DrawBorder3D (System.Drawing.Graphics graphics, int x, int y, int width, int height, System.Windows.Forms.Border3DStyle style, System.Windows.Forms.Border3DSide sides);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawBorder3D(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.Border3DStyle style, valuetype System.Windows.Forms.Border3DSide sides) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawBorder3D(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.Border3DStyle,System.Windows.Forms.Border3DSide)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawBorder3D(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height, System::Windows::Forms::Border3DStyle style, System::Windows::Forms::Border3DSide sides);" />
      <MemberSignature Language="F#" Value="static member DrawBorder3D : System.Drawing.Graphics * int * int * int * int * System.Windows.Forms.Border3DStyle * System.Windows.Forms.Border3DSide -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawBorder3D (graphics, x, y, width, height, style, sides)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="style" Type="System.Windows.Forms.Border3DStyle" />
        <Parameter Name="sides" Type="System.Windows.Forms.Border3DSide" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de bordure.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de bordure.</param>
        <param name="width">Largeur du rectangle de bordure.</param>
        <param name="height">Hauteur du rectangle de bordure.</param>
        <param name="style">Une des valeurs de <see cref="T:System.Windows.Forms.Border3DStyle" /> qui spécifie le style de la bordure.</param>
        <param name="sides">
          <see cref="T:System.Windows.Forms.Border3DSide" /> du rectangle sur lequel dessiner la bordure.</param>
        <summary>Dessine une bordure à trois dimensions avec le style spécifié, sur la surface et les côtés graphiques spécifiés et dans les limites spécifiées sur un contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de l’un de le <xref:System.Windows.Forms.ControlPaint.DrawBorder3D%2A> méthodes. Pour exécuter cet exemple, collez le code suivant dans un formulaire qui importe les <xref:System.Windows.Forms> et <xref:System.Drawing> espaces de noms. Assurez-vous du formulaire <xref:System.Windows.Forms.Control.Paint> événement est associé au gestionnaire d’événements dans cet exemple.  
  
 [!code-cpp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaintMembers#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Border3DStyle" />
        <altmember cref="T:System.Windows.Forms.Border3DSide" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawButton">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un contrôle bouton.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawButton">
      <MemberSignature Language="C#" Value="public static void DrawButton (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawButton(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawButton(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawButton : System.Drawing.Graphics * System.Drawing.Rectangle * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawButton (graphics, rectangle, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du bouton.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel le bouton doit être dessiné.</param>
        <summary>Dessine un contrôle bouton dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Button" />
      </Docs>
    </Member>
    <Member MemberName="DrawButton">
      <MemberSignature Language="C#" Value="public static void DrawButton (System.Drawing.Graphics graphics, int x, int y, int width, int height, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawButton(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawButton(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawButton(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawButton : System.Drawing.Graphics * int * int * int * int * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawButton (graphics, x, y, width, height, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de dessin.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de dessin.</param>
        <param name="width">Largeur du bouton.</param>
        <param name="height">Hauteur du bouton.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel le bouton doit être dessiné.</param>
        <summary>Dessine un contrôle bouton dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[ButtonState#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ButtonState/CPP/buttonstate1.cpp#2)]
 [!code-csharp[ButtonState#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ButtonState/CS/buttonstate1.cs#2)]
 [!code-vb[ButtonState#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ButtonState/VB/buttonstate1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Button" />
        <altmember cref="T:System.Windows.Forms.ButtonState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCaptionButton">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un contrôle bouton de barre de titre.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCaptionButton">
      <MemberSignature Language="C#" Value="public static void DrawCaptionButton (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Windows.Forms.CaptionButton button, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawCaptionButton(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Windows.Forms.CaptionButton button, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawCaptionButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.CaptionButton,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawCaptionButton(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Windows::Forms::CaptionButton button, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawCaptionButton : System.Drawing.Graphics * System.Drawing.Rectangle * System.Windows.Forms.CaptionButton * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawCaptionButton (graphics, rectangle, button, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="button" Type="System.Windows.Forms.CaptionButton" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du bouton de barre de titre.</param>
        <param name="button">Une des valeurs de <see cref="T:System.Windows.Forms.CaptionButton" /> qui spécifie le type de bouton de barre de titre à dessiner.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel le bouton doit être dessiné.</param>
        <summary>Dessine le contrôle bouton de barre de titre spécifié dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Windows.Forms.ControlPaint.DrawCaptionButton%2A?displayProperty=nameWithType> (méthode) et le <xref:System.Windows.Forms.CaptionButton> énumération. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un bouton nommé `Button1`. Le formulaire doit importer le <xref:System.Windows.Forms> et <xref:System.Drawing> espaces de noms. Vérifiez que le <xref:System.Windows.Forms.Control.Paint> événement est associé au gestionnaire d’événements dans cet exemple.  
  
 [!code-cpp[System.Windows.Forms.ControlPaintMembers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlPaintMembers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlPaintMembers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CaptionButton" />
      </Docs>
    </Member>
    <Member MemberName="DrawCaptionButton">
      <MemberSignature Language="C#" Value="public static void DrawCaptionButton (System.Drawing.Graphics graphics, int x, int y, int width, int height, System.Windows.Forms.CaptionButton button, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawCaptionButton(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.CaptionButton button, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawCaptionButton(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.CaptionButton,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawCaptionButton(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height, System::Windows::Forms::CaptionButton button, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawCaptionButton : System.Drawing.Graphics * int * int * int * int * System.Windows.Forms.CaptionButton * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawCaptionButton (graphics, x, y, width, height, button, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="button" Type="System.Windows.Forms.CaptionButton" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de dessin.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de dessin.</param>
        <param name="width">Largeur du rectangle de dessin.</param>
        <param name="height">Hauteur du rectangle de dessin.</param>
        <param name="button">Une des valeurs de <see cref="T:System.Windows.Forms.CaptionButton" /> qui spécifie le type de bouton de barre de titre à dessiner.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel le bouton doit être dessiné.</param>
        <summary>Dessine le contrôle bouton de barre de titre spécifié dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Windows.Forms.ControlPaint.DrawCaptionButton%2A> (méthode) et le <xref:System.Windows.Forms.CaptionButton> énumération. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.Button> nommé `Button1`. Le formulaire doit importer le <xref:System.Windows.Forms> et <xref:System.Drawing> espaces de noms. Vérifiez que le <xref:System.Windows.Forms.Control.Paint> événement est associé au gestionnaire d’événements dans cet exemple.  
  
 [!code-cpp[System.Windows.Forms.ControlPaintMembers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlPaintMembers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlPaintMembers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaintMembers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CaptionButton" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCheckBox">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un contrôle case à cocher.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCheckBox">
      <MemberSignature Language="C#" Value="public static void DrawCheckBox (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawCheckBox(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawCheckBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawCheckBox(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawCheckBox : System.Drawing.Graphics * System.Drawing.Rectangle * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawCheckBox (graphics, rectangle, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions de la case à cocher.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel la case à cocher doit être dessinée.</param>
        <summary>Dessine un contrôle case à cocher dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawCheckBox">
      <MemberSignature Language="C#" Value="public static void DrawCheckBox (System.Drawing.Graphics graphics, int x, int y, int width, int height, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawCheckBox(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawCheckBox(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawCheckBox(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawCheckBox : System.Drawing.Graphics * int * int * int * int * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawCheckBox (graphics, x, y, width, height, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de dessin.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de dessin.</param>
        <param name="width">Largeur de la case à cocher.</param>
        <param name="height">Hauteur de la case à cocher.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel la case à cocher doit être dessinée.</param>
        <summary>Dessine un contrôle case à cocher dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawComboButton">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un bouton déroulant sur un contrôle zone de liste déroulante.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawComboButton">
      <MemberSignature Language="C#" Value="public static void DrawComboButton (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawComboButton(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawComboButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawComboButton(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawComboButton : System.Drawing.Graphics * System.Drawing.Rectangle * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawComboButton (graphics, rectangle, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions de la zone de liste déroulante.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel la zone de liste déroulante doit être dessinée.</param>
        <summary>Dessine un bouton déroulant sur un contrôle zone de liste déroulante dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawComboButton">
      <MemberSignature Language="C#" Value="public static void DrawComboButton (System.Drawing.Graphics graphics, int x, int y, int width, int height, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawComboButton(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawComboButton(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawComboButton(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawComboButton : System.Drawing.Graphics * int * int * int * int * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawComboButton (graphics, x, y, width, height, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de bordure.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de bordure.</param>
        <param name="width">Largeur de la zone de liste déroulante.</param>
        <param name="height">Hauteur de la zone de liste déroulante.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel la zone de liste déroulante doit être dessinée.</param>
        <summary>Dessine un bouton déroulant sur un contrôle zone de liste déroulante dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawContainerGrabHandle">
      <MemberSignature Language="C#" Value="public static void DrawContainerGrabHandle (System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawContainerGrabHandle(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawContainerGrabHandle(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawContainerGrabHandle(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle bounds);" />
      <MemberSignature Language="F#" Value="static member DrawContainerGrabHandle : System.Drawing.Graphics * System.Drawing.Rectangle -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawContainerGrabHandle (graphics, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="bounds">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du glyphe de handle de manipulation.</param>
        <summary>Dessine un glyphe de handle de manipulation de contrôle conteneur sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poignées de manipulation sont utilisées par les conteneurs pour indiquer à l’utilisateur que l’utilisateur peut manipuler directement les conteneurs. La manipulation peut comporter des actions telles que le dimensionnement et de déplacement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawFocusRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un rectangle de focus.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawFocusRectangle">
      <MemberSignature Language="C#" Value="public static void DrawFocusRectangle (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawFocusRectangle(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawFocusRectangle(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle);" />
      <MemberSignature Language="F#" Value="static member DrawFocusRectangle : System.Drawing.Graphics * System.Drawing.Rectangle -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawFocusRectangle (graphics, rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du glyphe de handle de manipulation.</param>
        <summary>Dessine un rectangle de focus sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un rectangle de focus est un rectangle en pointillé que Windows utilise pour indiquer le contrôle qui a le focus clavier actuel.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A> (méthode) et le <xref:System.Windows.Forms.Control.Handle%2A?displayProperty=nameWithType> propriété. Pour exécuter cet exemple, collez le code suivant dans un formulaire. Ajoutez deux boutons nommés `Button1` et `Button2` au formulaire et vérifiez que tous les événements sont associés à leurs gestionnaires d’événements.  
  
 [!code-cpp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawFocusRectangle">
      <MemberSignature Language="C#" Value="public static void DrawFocusRectangle (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Drawing.Color foreColor, System.Drawing.Color backColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawFocusRectangle(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Drawing.Color foreColor, valuetype System.Drawing.Color backColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawFocusRectangle(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Drawing::Color foreColor, System::Drawing::Color backColor);" />
      <MemberSignature Language="F#" Value="static member DrawFocusRectangle : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Color * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawFocusRectangle (graphics, rectangle, foreColor, backColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du glyphe de handle de manipulation.</param>
        <param name="foreColor">
          <see cref="T:System.Drawing.Color" /> représentant la couleur de premier plan de l'objet sur lequel dessiner le rectangle de focus.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> représentant la couleur d'arrière-plan de l'objet sur lequel dessiner le rectangle de focus.</param>
        <summary>Dessine un rectangle de focus sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un rectangle de focus est un rectangle en pointillé que Windows utilise pour indiquer le contrôle qui a le focus clavier actuel.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A> (méthode) et le <xref:System.Windows.Forms.Control.Handle%2A?displayProperty=nameWithType> propriété. Pour exécuter cet exemple, collez le code suivant dans un formulaire. Ajoutez deux boutons nommés `Button1` et Button2 au formulaire et vérifiez que tous les événements sont associés à leurs gestionnaires d’événements.  
  
 [!code-cpp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawGrabHandle">
      <MemberSignature Language="C#" Value="public static void DrawGrabHandle (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, bool primary, bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawGrabHandle(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, bool primary, bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawGrabHandle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawGrabHandle(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, bool primary, bool enabled);" />
      <MemberSignature Language="F#" Value="static member DrawGrabHandle : System.Drawing.Graphics * System.Drawing.Rectangle * bool * bool -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawGrabHandle (graphics, rectangle, primary, enabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="primary" Type="System.Boolean" />
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du glyphe de handle de manipulation.</param>
        <param name="primary">
          <see langword="true" /> pour dessiner le handle en tant que handle de manipulation primaire ; sinon, <see langword="false" />.</param>
        <param name="enabled">
          <see langword="true" /> pour dessiner le handle dans un état activé ; sinon, <see langword="false" />.</param>
        <summary>Dessine un glyphe de handle de manipulation de sélection standard sur la surface graphique spécifiée, dans les limites spécifiées et dans l'état et le style spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poignées de manipulation sont utilisées par les objets pour indiquer à l’utilisateur que l’utilisateur peut manipuler directement l’objet. La manipulation peut comporter des actions telles que le dimensionnement et de déplacement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawGrid">
      <MemberSignature Language="C#" Value="public static void DrawGrid (System.Drawing.Graphics graphics, System.Drawing.Rectangle area, System.Drawing.Size pixelsBetweenDots, System.Drawing.Color backColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawGrid(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle area, valuetype System.Drawing.Size pixelsBetweenDots, valuetype System.Drawing.Color backColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawGrid(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawGrid(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle area, System::Drawing::Size pixelsBetweenDots, System::Drawing::Color backColor);" />
      <MemberSignature Language="F#" Value="static member DrawGrid : System.Drawing.Graphics * System.Drawing.Rectangle * System.Drawing.Size * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawGrid (graphics, area, pixelsBetweenDots, backColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="area" Type="System.Drawing.Rectangle" />
        <Parameter Name="pixelsBetweenDots" Type="System.Drawing.Size" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="area">
          <see cref="T:System.Drawing.Rectangle" /> qui représente les dimensions de la grille.</param>
        <param name="pixelsBetweenDots">
          <see cref="T:System.Drawing.Size" /> définissant la hauteur et la largeur entre les points de la grille.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> de l'arrière-plan derrière la grille.</param>
        <summary>Dessine une grille de points d'un pixel avec l'espacement spécifié, dans les limites spécifiées, sur la surface graphique spécifiée et dans la couleur spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `backColor` paramètre est utilisé pour calculer la couleur de remplissage des points afin que la grille soit toujours visible sur l’arrière-plan.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImageDisabled">
      <MemberSignature Language="C#" Value="public static void DrawImageDisabled (System.Drawing.Graphics graphics, System.Drawing.Image image, int x, int y, System.Drawing.Color background);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawImageDisabled(class System.Drawing.Graphics graphics, class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Color background) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawImageDisabled(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawImageDisabled(System::Drawing::Graphics ^ graphics, System::Drawing::Image ^ image, int x, int y, System::Drawing::Color background);" />
      <MemberSignature Language="F#" Value="static member DrawImageDisabled : System.Drawing.Graphics * System.Drawing.Image * int * int * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawImageDisabled (graphics, image, x, y, background)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="background" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> à dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche de l'image de bordure.</param>
        <param name="y">Coordonnée y du coin supérieur gauche de l'image de bordure.</param>
        <param name="background">
          <see cref="T:System.Drawing.Color" /> de l'arrière-plan de l'image.</param>
        <summary>Dessine l'image spécifiée dans un état désactivé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `background` paramètre est utilisé pour calculer la couleur de remplissage de l’image désactivée afin qu’il soit toujours visible sur l’arrière-plan.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Image" />
      </Docs>
    </Member>
    <Member MemberName="DrawLockedFrame">
      <MemberSignature Language="C#" Value="public static void DrawLockedFrame (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, bool primary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawLockedFrame(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, bool primary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawLockedFrame(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawLockedFrame(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, bool primary);" />
      <MemberSignature Language="F#" Value="static member DrawLockedFrame : System.Drawing.Graphics * System.Drawing.Rectangle * bool -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawLockedFrame (graphics, rectangle, primary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="primary" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du frame.</param>
        <param name="primary">
          <see langword="true" /> pour dessiner ce frame avec les couleurs utilisées pour la sélection primaire ; sinon, <see langword="false" />.</param>
        <summary>Dessine un frame de sélection verrouillé à l'écran dans les limites spécifiées et sur la surface graphique spécifiée. Spécifie si le frame doit être dessiné avec les couleurs primaires sélectionnées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawMenuGlyph">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un glyphe de menu sur un contrôle d'élément de menu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawMenuGlyph">
      <MemberSignature Language="C#" Value="public static void DrawMenuGlyph (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Windows.Forms.MenuGlyph glyph);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawMenuGlyph(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Windows.Forms.MenuGlyph glyph) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawMenuGlyph(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.MenuGlyph)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawMenuGlyph(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Windows::Forms::MenuGlyph glyph);" />
      <MemberSignature Language="F#" Value="static member DrawMenuGlyph : System.Drawing.Graphics * System.Drawing.Rectangle * System.Windows.Forms.MenuGlyph -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawMenuGlyph (graphics, rectangle, glyph)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="glyph" Type="System.Windows.Forms.MenuGlyph" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du glyphe.</param>
        <param name="glyph">Une des valeurs de <see cref="T:System.Windows.Forms.MenuGlyph" /> qui spécifie l'image à dessiner.</param>
        <summary>Dessine le glyphe de menu spécifié sur un contrôle d'élément de menu dans les limites spécifiées et sur la surface spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque des dessins owner-drawn <xref:System.Windows.Forms.MenuItem> contrôles, vous devez vérifier les valeurs de propriété pour déterminer le glyphe correct à dessiner ou supprimer. Par exemple, lorsque le <xref:System.Windows.Forms.MenuItem.Checked%2A?displayProperty=nameWithType> est définie sur `true`, vous devez appeler la <xref:System.Windows.Forms.MenuGlyph.Checkmark> valeur <xref:System.Windows.Forms.MenuGlyph> pour dessiner une coche sur la <xref:System.Windows.Forms.MenuItem>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.MenuGlyph" />
      </Docs>
    </Member>
    <Member MemberName="DrawMenuGlyph">
      <MemberSignature Language="C#" Value="public static void DrawMenuGlyph (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Windows.Forms.MenuGlyph glyph, System.Drawing.Color foreColor, System.Drawing.Color backColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawMenuGlyph(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Windows.Forms.MenuGlyph glyph, valuetype System.Drawing.Color foreColor, valuetype System.Drawing.Color backColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawMenuGlyph(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.MenuGlyph,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawMenuGlyph(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Windows::Forms::MenuGlyph glyph, System::Drawing::Color foreColor, System::Drawing::Color backColor);" />
      <MemberSignature Language="F#" Value="static member DrawMenuGlyph : System.Drawing.Graphics * System.Drawing.Rectangle * System.Windows.Forms.MenuGlyph * System.Drawing.Color * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawMenuGlyph (graphics, rectangle, glyph, foreColor, backColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="glyph" Type="System.Windows.Forms.MenuGlyph" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du glyphe.</param>
        <param name="glyph">Une des valeurs de <see cref="T:System.Windows.Forms.MenuGlyph" /> qui spécifie l'image à dessiner.</param>
        <param name="foreColor">Couleur qui remplace <see cref="P:System.Drawing.Color.White" /> comme couleur de premier plan.</param>
        <param name="backColor">Couleur qui remplace <see cref="P:System.Drawing.Color.Black" /> comme couleur d'arrière-plan.</param>
        <summary>Dessine le glyphe de menu spécifié sur un contrôle d'élément de menu dans les limites spécifiées et sur la surface spécifiée, remplaçant <see cref="P:System.Drawing.Color.White" /> par la couleur spécifiée dans le paramètre <paramref name="backColor" /> et <see cref="P:System.Drawing.Color.Black" /> remplaçant par la couleur spécifiée dans le paramètre <paramref name="foreColor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque des dessins owner-drawn <xref:System.Windows.Forms.MenuItem> contrôles, vous devez vérifier les valeurs de propriété pour déterminer le glyphe correct à dessiner ou supprimer. Par exemple, lorsque le <xref:System.Windows.Forms.MenuItem.Checked%2A?displayProperty=nameWithType> est définie sur `true`, vous devez appeler la <xref:System.Windows.Forms.MenuGlyph.Checkmark> valeur <xref:System.Windows.Forms.MenuGlyph> pour dessiner une coche sur la <xref:System.Windows.Forms.MenuItem>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.MenuGlyph" />
      </Docs>
    </Member>
    <Member MemberName="DrawMenuGlyph">
      <MemberSignature Language="C#" Value="public static void DrawMenuGlyph (System.Drawing.Graphics graphics, int x, int y, int width, int height, System.Windows.Forms.MenuGlyph glyph);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawMenuGlyph(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.MenuGlyph glyph) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawMenuGlyph(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.MenuGlyph)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawMenuGlyph(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height, System::Windows::Forms::MenuGlyph glyph);" />
      <MemberSignature Language="F#" Value="static member DrawMenuGlyph : System.Drawing.Graphics * int * int * int * int * System.Windows.Forms.MenuGlyph -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawMenuGlyph (graphics, x, y, width, height, glyph)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="glyph" Type="System.Windows.Forms.MenuGlyph" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de dessin.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de dessin.</param>
        <param name="width">Largeur du glyphe de menu.</param>
        <param name="height">Hauteur du glyphe de menu.</param>
        <param name="glyph">Une des valeurs de <see cref="T:System.Windows.Forms.MenuGlyph" /> qui spécifie l'image à dessiner.</param>
        <summary>Dessine le glyphe de menu spécifié sur un contrôle d'élément de menu dans les limites spécifiées et sur la surface spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque des dessins owner-drawn <xref:System.Windows.Forms.MenuItem> contrôles, vous devez vérifier les valeurs de propriété pour déterminer le glyphe correct à dessiner ou supprimer. Par exemple, lorsque le <xref:System.Windows.Forms.MenuItem.Checked%2A?displayProperty=nameWithType> est définie sur true, vous appelez le <xref:System.Windows.Forms.MenuGlyph.Checkmark> valeur <xref:System.Windows.Forms.MenuGlyph> pour dessiner une coche sur la <xref:System.Windows.Forms.MenuItem>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawMenuGlyph">
      <MemberSignature Language="C#" Value="public static void DrawMenuGlyph (System.Drawing.Graphics graphics, int x, int y, int width, int height, System.Windows.Forms.MenuGlyph glyph, System.Drawing.Color foreColor, System.Drawing.Color backColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawMenuGlyph(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.MenuGlyph glyph, valuetype System.Drawing.Color foreColor, valuetype System.Drawing.Color backColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawMenuGlyph(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.MenuGlyph,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawMenuGlyph(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height, System::Windows::Forms::MenuGlyph glyph, System::Drawing::Color foreColor, System::Drawing::Color backColor);" />
      <MemberSignature Language="F#" Value="static member DrawMenuGlyph : System.Drawing.Graphics * int * int * int * int * System.Windows.Forms.MenuGlyph * System.Drawing.Color * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawMenuGlyph (graphics, x, y, width, height, glyph, foreColor, backColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="glyph" Type="System.Windows.Forms.MenuGlyph" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de dessin.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de dessin.</param>
        <param name="width">Largeur du glyphe de menu.</param>
        <param name="height">Hauteur du glyphe de menu.</param>
        <param name="glyph">Une des valeurs de <see cref="T:System.Windows.Forms.MenuGlyph" /> qui spécifie l'image à dessiner.</param>
        <param name="foreColor">Couleur qui remplace <see cref="P:System.Drawing.Color.White" /> comme couleur de premier plan.</param>
        <param name="backColor">Couleur qui remplace <see cref="P:System.Drawing.Color.Black" /> comme couleur d'arrière-plan.</param>
        <summary>Dessine le glyphe de menu spécifié sur un contrôle d'élément de menu dans les coordonnées, la hauteur et la largeur spécifiées, remplaçant <see cref="P:System.Drawing.Color.White" /> par la couleur spécifiée dans le paramètre <paramref name="backColor" /> et remplaçant <see cref="P:System.Drawing.Color.Black" /> par la couleur spécifiée dans le paramètre <paramref name="foreColor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque des dessins owner-drawn <xref:System.Windows.Forms.MenuItem> contrôles, vous devez vérifier les valeurs de propriété pour déterminer le glyphe correct à dessiner ou supprimer. Par exemple, lorsque le <xref:System.Windows.Forms.MenuItem.Checked%2A?displayProperty=nameWithType> est définie sur `true`, vous devez appeler la <xref:System.Windows.Forms.MenuGlyph.Checkmark> valeur <xref:System.Windows.Forms.MenuGlyph> pour dessiner une coche sur la <xref:System.Windows.Forms.MenuItem>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.MenuGlyph" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawMixedCheckBox">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un contrôle case à cocher à trois états.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawMixedCheckBox">
      <MemberSignature Language="C#" Value="public static void DrawMixedCheckBox (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawMixedCheckBox(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawMixedCheckBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawMixedCheckBox(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawMixedCheckBox : System.Drawing.Graphics * System.Drawing.Rectangle * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawMixedCheckBox (graphics, rectangle, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions de la case à cocher.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel la case à cocher doit être dessinée.</param>
        <summary>Dessine le contrôle case à cocher à trois états dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.CheckBox.ThreeState" />
      </Docs>
    </Member>
    <Member MemberName="DrawMixedCheckBox">
      <MemberSignature Language="C#" Value="public static void DrawMixedCheckBox (System.Drawing.Graphics graphics, int x, int y, int width, int height, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawMixedCheckBox(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawMixedCheckBox(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawMixedCheckBox(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawMixedCheckBox : System.Drawing.Graphics * int * int * int * int * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawMixedCheckBox (graphics, x, y, width, height, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de dessin.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de dessin.</param>
        <param name="width">Largeur de la case à cocher.</param>
        <param name="height">Hauteur de la case à cocher.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel la case à cocher doit être dessinée.</param>
        <summary>Dessine le contrôle case à cocher à trois états dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.CheckBox.ThreeState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRadioButton">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un contrôle case d'option.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRadioButton">
      <MemberSignature Language="C#" Value="public static void DrawRadioButton (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawRadioButton(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawRadioButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawRadioButton(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawRadioButton : System.Drawing.Graphics * System.Drawing.Rectangle * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawRadioButton (graphics, rectangle, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions de la case d'option.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel la case d'option doit être dessinée.</param>
        <summary>Dessine un contrôle case d'option dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.RadioButton" />
      </Docs>
    </Member>
    <Member MemberName="DrawRadioButton">
      <MemberSignature Language="C#" Value="public static void DrawRadioButton (System.Drawing.Graphics graphics, int x, int y, int width, int height, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawRadioButton(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawRadioButton(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawRadioButton(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawRadioButton : System.Drawing.Graphics * int * int * int * int * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawRadioButton (graphics, x, y, width, height, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de dessin.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de dessin.</param>
        <param name="width">Largeur de la case d'option.</param>
        <param name="height">Hauteur de la case d'option.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel la case d'option doit être dessinée.</param>
        <summary>Dessine un contrôle case d'option dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawReversibleFrame">
      <MemberSignature Language="C#" Value="public static void DrawReversibleFrame (System.Drawing.Rectangle rectangle, System.Drawing.Color backColor, System.Windows.Forms.FrameStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawReversibleFrame(valuetype System.Drawing.Rectangle rectangle, valuetype System.Drawing.Color backColor, valuetype System.Windows.Forms.FrameStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawReversibleFrame(System.Drawing.Rectangle,System.Drawing.Color,System.Windows.Forms.FrameStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawReversibleFrame(System::Drawing::Rectangle rectangle, System::Drawing::Color backColor, System::Windows::Forms::FrameStyle style);" />
      <MemberSignature Language="F#" Value="static member DrawReversibleFrame : System.Drawing.Rectangle * System.Drawing.Color * System.Windows.Forms.FrameStyle -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawReversibleFrame (rectangle, backColor, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
        <Parameter Name="style" Type="System.Windows.Forms.FrameStyle" />
      </Parameters>
      <Docs>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du rectangle à dessiner, en coordonnées d'écran.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> de l'arrière-plan derrière le frame.</param>
        <param name="style">Une des valeurs de <see cref="T:System.Windows.Forms.FrameStyle" /> qui spécifie le style du frame.</param>
        <summary>Dessine un frame réversible à l'écran dans les limites spécifiées, avec la couleur d'arrière-plan spécifiée et dans l'état spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `backColor` paramètre est utilisé pour calculer la couleur de remplissage du cadre afin qu’il soit toujours visible sur l’arrière-plan.  
  
 Les résultats de cette méthode peuvent être annulées par la même image de dessin à nouveau. Dessin d’un frame à l’aide de cette méthode ressemble à inversion d’une région de l’écran, sauf qu’elle offre de meilleures performances pour un plus grand nombre de couleurs.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.Control.RectangleToScreen%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.PointToScreen%2A?displayProperty=nameWithType>et le <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A> membres. Pour exécuter l’exemple, collez le code suivant dans un formulaire nommé `Form1` contenant plusieurs contrôles. Cet exemple requiert que les événements de souris sont connectés aux gestionnaires d’événements définis dans l’exemple.  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.FrameStyle" />
      </Docs>
    </Member>
    <Member MemberName="DrawReversibleLine">
      <MemberSignature Language="C#" Value="public static void DrawReversibleLine (System.Drawing.Point start, System.Drawing.Point end, System.Drawing.Color backColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawReversibleLine(valuetype System.Drawing.Point start, valuetype System.Drawing.Point end, valuetype System.Drawing.Color backColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawReversibleLine(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DrawReversibleLine (start As Point, end As Point, backColor As Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawReversibleLine(System::Drawing::Point start, System::Drawing::Point end, System::Drawing::Color backColor);" />
      <MemberSignature Language="F#" Value="static member DrawReversibleLine : System.Drawing.Point * System.Drawing.Point * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawReversibleLine (start, end, backColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Drawing.Point" />
        <Parameter Name="end" Type="System.Drawing.Point" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="start">
          <see cref="T:System.Drawing.Point" /> de départ de la ligne, en coordonnées d'écran.</param>
        <param name="end">
          <see cref="T:System.Drawing.Point" /> de fin de la ligne, en coordonnées d'écran.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> de l'arrière-plan de la ligne.</param>
        <summary>Dessine une ligne réversible à l'écran entre les points de départ et de fin spécifiés et avec la couleur d'arrière-plan spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `backColor` paramètre est utilisé pour calculer la couleur de remplissage de la ligne afin qu’il soit toujours visible sur l’arrière-plan.  
  
 Le résultat de cette méthode peut être inversé en dessinant de nouveau la même ligne. Dessin d’une ligne à l’aide de cette méthode ressemble à inversion d’une région de l’écran, sauf qu’elle offre de meilleures performances pour un plus grand nombre de couleurs.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.ControlPaint.DrawReversibleLine%2A?displayProperty=nameWithType> et <xref:System.Windows.Forms.Control.PointToScreen%2A?displayProperty=nameWithType> méthodes. Pour exécuter l’exemple, collez le code suivant dans un formulaire. Ajoutez un bouton nommé `Button3` au formulaire et vérifiez que tous les événements sont associés à leurs gestionnaires d’événements.  
  
 [!code-cpp[System.Windows.Forms.ControlPaint1#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.ControlPaint1#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.ControlPaint1#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.FrameStyle" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawScrollButton">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine un bouton de défilement sur un contrôle barre de défilement.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawScrollButton">
      <MemberSignature Language="C#" Value="public static void DrawScrollButton (System.Drawing.Graphics graphics, System.Drawing.Rectangle rectangle, System.Windows.Forms.ScrollButton button, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawScrollButton(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle rectangle, valuetype System.Windows.Forms.ScrollButton button, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawScrollButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawScrollButton(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle rectangle, System::Windows::Forms::ScrollButton button, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawScrollButton : System.Drawing.Graphics * System.Drawing.Rectangle * System.Windows.Forms.ScrollButton * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawScrollButton (graphics, rectangle, button, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="button" Type="System.Windows.Forms.ScrollButton" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du glyphe.</param>
        <param name="button">Une des valeurs de <see cref="T:System.Windows.Forms.ScrollButton" /> qui spécifie le type de flèche de défilement à dessiner.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel le bouton de défilement doit être dessiné.</param>
        <summary>Dessine le bouton de défilement spécifié sur un contrôle barre de défilement dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.ScrollButton" />
        <altmember cref="T:System.Windows.Forms.ButtonState" />
        <altmember cref="T:System.Windows.Forms.ScrollBar" />
      </Docs>
    </Member>
    <Member MemberName="DrawScrollButton">
      <MemberSignature Language="C#" Value="public static void DrawScrollButton (System.Drawing.Graphics graphics, int x, int y, int width, int height, System.Windows.Forms.ScrollButton button, System.Windows.Forms.ButtonState state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawScrollButton(class System.Drawing.Graphics graphics, int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.ScrollButton button, valuetype System.Windows.Forms.ButtonState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawScrollButton(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawScrollButton(System::Drawing::Graphics ^ graphics, int x, int y, int width, int height, System::Windows::Forms::ScrollButton button, System::Windows::Forms::ButtonState state);" />
      <MemberSignature Language="F#" Value="static member DrawScrollButton : System.Drawing.Graphics * int * int * int * int * System.Windows.Forms.ScrollButton * System.Windows.Forms.ButtonState -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawScrollButton (graphics, x, y, width, height, button, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="button" Type="System.Windows.Forms.ScrollButton" />
        <Parameter Name="state" Type="System.Windows.Forms.ButtonState" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="x">Coordonnée x du coin supérieur gauche du rectangle de dessin.</param>
        <param name="y">Coordonnée y du coin supérieur gauche du rectangle de dessin.</param>
        <param name="width">Largeur du bouton de défilement.</param>
        <param name="height">Hauteur du bouton de défilement.</param>
        <param name="button">Une des valeurs de <see cref="T:System.Windows.Forms.ScrollButton" /> qui spécifie le type de flèche de défilement à dessiner.</param>
        <param name="state">Combinaison d'opérations de bits des valeurs de <see cref="T:System.Windows.Forms.ButtonState" /> qui spécifie l'état dans lequel le bouton de défilement doit être dessiné.</param>
        <summary>Dessine le bouton de défilement spécifié sur un contrôle barre de défilement dans l'état spécifié, sur la surface graphique spécifiée et dans les limites spécifiées.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.ScrollButton" />
        <altmember cref="T:System.Windows.Forms.ButtonState" />
        <altmember cref="T:System.Windows.Forms.ScrollBar" />
      </Docs>
    </Member>
    <Member MemberName="DrawSelectionFrame">
      <MemberSignature Language="C#" Value="public static void DrawSelectionFrame (System.Drawing.Graphics graphics, bool active, System.Drawing.Rectangle outsideRect, System.Drawing.Rectangle insideRect, System.Drawing.Color backColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawSelectionFrame(class System.Drawing.Graphics graphics, bool active, valuetype System.Drawing.Rectangle outsideRect, valuetype System.Drawing.Rectangle insideRect, valuetype System.Drawing.Color backColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawSelectionFrame(System.Drawing.Graphics,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawSelectionFrame(System::Drawing::Graphics ^ graphics, bool active, System::Drawing::Rectangle outsideRect, System::Drawing::Rectangle insideRect, System::Drawing::Color backColor);" />
      <MemberSignature Language="F#" Value="static member DrawSelectionFrame : System.Drawing.Graphics * bool * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawSelectionFrame (graphics, active, outsideRect, insideRect, backColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="active" Type="System.Boolean" />
        <Parameter Name="outsideRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="insideRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="active">
          <see langword="true" /> pour dessiner le frame de sélection dans un état activé ; sinon, <see langword="false" />.</param>
        <param name="outsideRect">
          <see cref="T:System.Drawing.Rectangle" /> représentant la limite extérieure du frame de sélection.</param>
        <param name="insideRect">
          <see cref="T:System.Drawing.Rectangle" /> représentant la limite intérieure du frame de sélection.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> de l'arrière-plan derrière le frame.</param>
        <summary>Dessine un frame de sélection standard dans l'état spécifié, sur la surface graphique spécifiée, avec les dimensions intérieures et extérieures spécifiées et avec la couleur d'arrière-plan spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un cadre de sélection est une image qui est dessinée autour d’un composant sélectionné au moment du design.  
  
 Le `backColor` paramètre est utilisé pour calculer la couleur de remplissage du cadre afin qu’il soit toujours visible sur l’arrière-plan.  
  
 Si le `active` paramètre est défini sur `true`, le frame de sélection est dessiné comme un ensemble de marques de hachage indiquant que le composant a été activé ; sinon, le frame de sélection est dessiné avec un modèle en pointillés ou nothing, selon l’implémentation .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawSizeGrip">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine une poignée de dimensionnement dans un formulaire.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawSizeGrip">
      <MemberSignature Language="C#" Value="public static void DrawSizeGrip (System.Drawing.Graphics graphics, System.Drawing.Color backColor, System.Drawing.Rectangle bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawSizeGrip(class System.Drawing.Graphics graphics, valuetype System.Drawing.Color backColor, valuetype System.Drawing.Rectangle bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawSizeGrip(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawSizeGrip(System::Drawing::Graphics ^ graphics, System::Drawing::Color backColor, System::Drawing::Rectangle bounds);" />
      <MemberSignature Language="F#" Value="static member DrawSizeGrip : System.Drawing.Graphics * System.Drawing.Color * System.Drawing.Rectangle -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawSizeGrip (graphics, backColor, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> de l'arrière-plan utilisé pour déterminer les couleurs de la poignée de dimensionnement.</param>
        <param name="bounds">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions de la poignée de dimensionnement.</param>
        <summary>Dessine une poignée de dimensionnement dans un formulaire avec les limites et la couleur d'arrière-plan spécifiées et sur la surface graphique spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `backColor` paramètre est utilisé pour calculer la couleur de la poignée de dimensionnement afin qu’il soit toujours visible sur l’arrière-plan.  
  
 Lorsque vous définissez une fenêtre dimensionnable, vous pouvez inclure une poignée de dimensionnement. Une poignée de dimensionnement est un handle spécial qui permet à l’utilisateur redimensionner une fenêtre.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.Windows.Forms.SizeGripStyle" />
      </Docs>
    </Member>
    <Member MemberName="DrawSizeGrip">
      <MemberSignature Language="C#" Value="public static void DrawSizeGrip (System.Drawing.Graphics graphics, System.Drawing.Color backColor, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawSizeGrip(class System.Drawing.Graphics graphics, valuetype System.Drawing.Color backColor, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawSizeGrip(System.Drawing.Graphics,System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawSizeGrip(System::Drawing::Graphics ^ graphics, System::Drawing::Color backColor, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="static member DrawSizeGrip : System.Drawing.Graphics * System.Drawing.Color * int * int * int * int -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawSizeGrip (graphics, backColor, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> de l'arrière-plan utilisé pour déterminer les couleurs de la poignée de dimensionnement.</param>
        <param name="x">Coordonnée x du coin supérieur gauche de la poignée de dimensionnement.</param>
        <param name="y">Coordonnée y du coin supérieur gauche de la poignée de dimensionnement.</param>
        <param name="width">Largeur de la poignée de dimensionnement.</param>
        <param name="height">Hauteur de la poignée de dimensionnement.</param>
        <summary>Dessine une poignée de dimensionnement dans un formulaire avec les limites et la couleur d'arrière-plan spécifiées et sur la surface graphique spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `backColor` paramètre est utilisé pour calculer la couleur de la poignée de dimensionnement afin qu’il soit toujours visible sur l’arrière-plan.  
  
 Lorsque vous définissez une fenêtre dimensionnable, vous pouvez inclure une poignée de dimensionnement. Une poignée de dimensionnement est un handle spécial qui permet à l’utilisateur redimensionner une fenêtre.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.Windows.Forms.SizeGripStyle" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawStringDisabled">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine la chaîne spécifiée dans un état désactivé.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawStringDisabled">
      <MemberSignature Language="C#" Value="public static void DrawStringDisabled (System.Drawing.Graphics graphics, string s, System.Drawing.Font font, System.Drawing.Color color, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawStringDisabled(class System.Drawing.Graphics graphics, string s, class System.Drawing.Font font, valuetype System.Drawing.Color color, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawStringDisabled(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawStringDisabled(System::Drawing::Graphics ^ graphics, System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Color color, System::Drawing::RectangleF layoutRectangle, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="static member DrawStringDisabled : System.Drawing.Graphics * string * System.Drawing.Font * System.Drawing.Color * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawStringDisabled (graphics, s, font, color, layoutRectangle, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="color" Type="System.Drawing.Color" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="s">Chaîne à dessiner.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> utilisé pour dessiner la chaîne.</param>
        <param name="color">
          <see cref="T:System.Drawing.Color" /> de l'arrière-plan de la chaîne.</param>
        <param name="layoutRectangle">
          <see cref="T:System.Drawing.RectangleF" /> représentant les dimensions de la chaîne.</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" /> à appliquer à la chaîne.</param>
        <summary>Dessine la chaîne spécifiée dans un état désactivé sur la surface graphique spécifiée, dans les limites spécifiées et dans les police, couleur et format spécifiés.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawStringDisabled">
      <MemberSignature Language="C#" Value="public static void DrawStringDisabled (System.Drawing.IDeviceContext dc, string s, System.Drawing.Font font, System.Drawing.Color color, System.Drawing.Rectangle layoutRectangle, System.Windows.Forms.TextFormatFlags format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawStringDisabled(class System.Drawing.IDeviceContext dc, string s, class System.Drawing.Font font, valuetype System.Drawing.Color color, valuetype System.Drawing.Rectangle layoutRectangle, valuetype System.Windows.Forms.TextFormatFlags format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawStringDisabled(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Rectangle,System.Windows.Forms.TextFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawStringDisabled(System::Drawing::IDeviceContext ^ dc, System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Color color, System::Drawing::Rectangle layoutRectangle, System::Windows::Forms::TextFormatFlags format);" />
      <MemberSignature Language="F#" Value="static member DrawStringDisabled : System.Drawing.IDeviceContext * string * System.Drawing.Font * System.Drawing.Color * System.Drawing.Rectangle * System.Windows.Forms.TextFormatFlags -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawStringDisabled (dc, s, font, color, layoutRectangle, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="color" Type="System.Drawing.Color" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="format" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="dc">
          <see cref="T:System.Windows.Forms.TextRenderer" /> GDI.</param>
        <param name="s">Chaîne à dessiner.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> utilisé pour dessiner la chaîne.</param>
        <param name="color">
          <see cref="T:System.Drawing.Color" /> de l'arrière-plan de la chaîne.</param>
        <param name="layoutRectangle">
          <see cref="T:System.Drawing.RectangleF" /> représentant les dimensions de la chaîne.</param>
        <param name="format">
          <see cref="T:System.Drawing.StringFormat" /> à appliquer à la chaîne.</param>
        <summary>Dessine la chaîne spécifiée dans un état désactivé sur la surface graphique spécifiée, dans les limites spécifiées et dans les police, couleur et format spécifiés à l'aide du <see cref="T:System.Windows.Forms.TextRenderer" /> GDI spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawVisualStyleBorder">
      <MemberSignature Language="C#" Value="public static void DrawVisualStyleBorder (System.Drawing.Graphics graphics, System.Drawing.Rectangle bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawVisualStyleBorder(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.DrawVisualStyleBorder(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawVisualStyleBorder(System::Drawing::Graphics ^ graphics, System::Drawing::Rectangle bounds);" />
      <MemberSignature Language="F#" Value="static member DrawVisualStyleBorder : System.Drawing.Graphics * System.Drawing.Rectangle -&gt; unit" Usage="System.Windows.Forms.ControlPaint.DrawVisualStyleBorder (graphics, bounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> sur lequel dessiner.</param>
        <param name="bounds">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions de la bordure.</param>
        <summary>Dessine une bordure dans le style approprié pour les éléments désactivés.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FillReversibleRectangle">
      <MemberSignature Language="C#" Value="public static void FillReversibleRectangle (System.Drawing.Rectangle rectangle, System.Drawing.Color backColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FillReversibleRectangle(valuetype System.Drawing.Rectangle rectangle, valuetype System.Drawing.Color backColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.FillReversibleRectangle(System.Drawing.Rectangle,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FillReversibleRectangle(System::Drawing::Rectangle rectangle, System::Drawing::Color backColor);" />
      <MemberSignature Language="F#" Value="static member FillReversibleRectangle : System.Drawing.Rectangle * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.ControlPaint.FillReversibleRectangle (rectangle, backColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> représentant les dimensions du rectangle à remplir, en coordonnées d'écran.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> de l'arrière-plan du remplissage.</param>
        <summary>Dessine un rectangle réversible rempli à l'écran.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `backColor` paramètre est utilisé pour calculer la couleur de remplissage du rectangle, afin qu’il soit toujours visible sur l’arrière-plan.  
  
 Les résultats de cette méthode peuvent être annulées par le même rectangle de dessin à nouveau. Dessin d’un rectangle à l’aide de cette méthode ressemble à inversion d’une région de l’écran, sauf qu’elle offre de meilleures performances pour un plus grand nombre de couleurs.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.ControlPaint.FillReversibleRectangle%2A> (méthode). Pour exécuter l’exemple, collez le code suivant dans un formulaire. Ajoutez un bouton nommé `Button2` au formulaire et vérifiez que tous les événements sont associés à leurs gestionnaires d’événements.  
  
 [!code-cpp[System.Windows.Forms.ControlPaint1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlPaint1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlPaint1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Light">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crée un nouvel objet de couleur claire pour le contrôle.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Light">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color Light (System.Drawing.Color baseColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Color Light(valuetype System.Drawing.Color baseColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.Light(System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Light (baseColor As Color) As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Color Light(System::Drawing::Color baseColor);" />
      <MemberSignature Language="F#" Value="static member Light : System.Drawing.Color -&gt; System.Drawing.Color" Usage="System.Windows.Forms.ControlPaint.Light baseColor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="baseColor">
          <see cref="T:System.Drawing.Color" /> à éclaircir.</param>
        <summary>Crée un nouvel objet de couleur claire pour le contrôle à partir de la couleur spécifiée.</summary>
        <returns>
          <see cref="T:System.Drawing.Color" /> représentant la couleur claire dans le contrôle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le texte spécifié <xref:System.Drawing.Color> est un de la <xref:System.Drawing.SystemColors>, la couleur est convertie en un <xref:System.Drawing.SystemColors.ControlLight%2A?displayProperty=nameWithType> couleur ; sinon, valeur de luminosité de la couleur est diminuée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Light">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color Light (System.Drawing.Color baseColor, float percOfLightLight);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Color Light(valuetype System.Drawing.Color baseColor, float32 percOfLightLight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.Light(System.Drawing.Color,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Light (baseColor As Color, percOfLightLight As Single) As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Color Light(System::Drawing::Color baseColor, float percOfLightLight);" />
      <MemberSignature Language="F#" Value="static member Light : System.Drawing.Color * single -&gt; System.Drawing.Color" Usage="System.Windows.Forms.ControlPaint.Light (baseColor, percOfLightLight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseColor" Type="System.Drawing.Color" />
        <Parameter Name="percOfLightLight" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="baseColor">
          <see cref="T:System.Drawing.Color" /> à éclaircir.</param>
        <param name="percOfLightLight">Pourcentage appliqué pour éclaircir le <see cref="T:System.Drawing.Color" /> spécifié.</param>
        <summary>Crée un nouvel objet de couleur claire pour le contrôle à partir de la couleur spécifiée et l'éclaircit du pourcentage spécifié.</summary>
        <returns>
          <see cref="T:System.Drawing.Color" /> représentant la couleur claire dans le contrôle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le texte spécifié <xref:System.Drawing.Color> est un de la <xref:System.Drawing.SystemColors>, la couleur est convertie en un <xref:System.Drawing.SystemColors.ControlLight%2A?displayProperty=nameWithType> couleur ; sinon, valeur de luminosité de la couleur est diminuée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LightLight">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color LightLight (System.Drawing.Color baseColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Color LightLight(valuetype System.Drawing.Color baseColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ControlPaint.LightLight(System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LightLight (baseColor As Color) As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Color LightLight(System::Drawing::Color baseColor);" />
      <MemberSignature Language="F#" Value="static member LightLight : System.Drawing.Color -&gt; System.Drawing.Color" Usage="System.Windows.Forms.ControlPaint.LightLight baseColor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="baseColor">
          <see cref="T:System.Drawing.Color" /> à éclaircir.</param>
        <summary>Crée un nouvel objet de couleur claire pour le contrôle à partir de la couleur spécifiée.</summary>
        <returns>
          <see cref="T:System.Drawing.Color" /> représentant la couleur claire dans le contrôle.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si spécifié <xref:System.Drawing.Color> est un de le <xref:System.Drawing.SystemColors>, la couleur est convertie en la <xref:System.Drawing.SystemColors.ControlLightLight%2A?displayProperty=nameWithType> couleur ; sinon, valeur de luminosité de la couleur est augmentée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>