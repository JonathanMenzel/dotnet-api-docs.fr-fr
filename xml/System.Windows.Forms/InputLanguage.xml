<Type Name="InputLanguage" FullName="System.Windows.Forms.InputLanguage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7aa3e5b9b06c0ed44b9a94f33dc858608165aa7d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30647763" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class InputLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InputLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.InputLanguage" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InputLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputLanguage sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des méthodes et des champs pour gérer la langue d'entrée. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une langue d’entrée est une paire de mise en page de culture et le clavier qui détermine comment les touches du clavier physiques mappent ou tracer des caractères dans une langue. La langue d’entrée est basée sur un identificateur de paramètres régionaux Windows, tel que retourné par la fonction Platform SDK, `GetKeyboardLayout`. Identificateur de paramètres régionaux d’entrée est également appelé un handle à une valeur de disposition (HKL) du clavier.  
  
 Utilisez le `static` méthodes fournies pour rechercher tous les installés mappages du système et pour modifier la langue d’entrée pour un thread ou un processus. Appelez <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> langue d’entrée pour obtenir en cours. Appelez <xref:System.Windows.Forms.InputLanguage.DefaultInputLanguage%2A> pour la langue par défaut. Appelez <xref:System.Windows.Forms.InputLanguage.InstalledInputLanguages%2A> pour obtenir toutes les langues installées sur ce système. Une fois que vous avez une liste de toutes les langues installées, utilisez <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> pour modifier actuel langue vers une autre langue d’entrée.  
  
   
  
## Examples  
 L’exemple de code suivant obtient une liste des langues installées. L’exemple requiert que `textBox1` a été instancié et que `textBox1.MultiLine` a été défini sur `true`.  
  
 [!code-cpp[Classic InputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage Example/VB/source.vb#1)]  
  
 L’exemple suivant définit la langue d’entrée par défaut comme le langage d’entrée actuel. L’exemple requiert que `textBox1` a été instancié et que `textBox1.MultiLine` a été défini sur `true`.  
  
 [!code-cpp[Classic InputLanguage Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage Example/CPP/source.cpp#2)]
 [!code-csharp[Classic InputLanguage Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage Example/CS/source.cs#2)]
 [!code-vb[Classic InputLanguage Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage Example/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.Culture" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la culture de la langue d'entrée en cours.</summary>
        <value>
          <see cref="T:System.Globalization.CultureInfo" /> représentant la culture de la langue d'entrée en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Le code suivant obtient de l’exemple le <xref:System.Windows.Forms.InputLanguage> pour le langage d’entrée actuel. Une zone de texte affiche cette langue d’entrée et le nom de la langue d’entrée.  
  
 Ce code suppose que `textBox1` a été instancié.  
  
 [!code-cpp[Classic InputLanguage.Culture Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.Culture Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.Culture Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.Culture Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.Culture Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.Culture Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Windows.Forms.InputLanguage.InstalledInputLanguages" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInputLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage CurrentInputLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguage CurrentInputLanguage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentInputLanguage As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguage ^ CurrentInputLanguage { System::Windows::Forms::InputLanguage ^ get(); void set(System::Windows::Forms::InputLanguage ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la langue d'entrée pour le thread en cours.</summary>
        <value>
          <see cref="T:System.Windows.Forms.InputLanguage" /> représentant la langue d'entrée pour le thread en cours.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant obtient et affiche le nom de la langue d’entrée actuel. Ce code suppose que `textBox1` a été instancié.  
  
 [!code-cpp[Classic InputLanguage.CurrentInputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.CurrentInputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.CurrentInputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.CurrentInputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.CurrentInputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.CurrentInputLanguage Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La langue d'entrée n'est pas reconnue par le système.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour accéder au code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Windows.Forms.InputLanguage.DefaultInputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="DefaultInputLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage DefaultInputLanguage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguage DefaultInputLanguage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.DefaultInputLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultInputLanguage As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguage ^ DefaultInputLanguage { System::Windows::Forms::InputLanguage ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la langue d'entrée par défaut pour le système.</summary>
        <value>
          <see cref="T:System.Windows.Forms.InputLanguage" /> représentant la langue d'entrée par défaut pour le système.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant obtient la langue d’entrée par défaut et affiche son nom dans une zone de texte. Ce code suppose que `textBox1` a été instancié.  
  
 [!code-cpp[Classic InputLanguage.DefaultInputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.DefaultInputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.DefaultInputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.DefaultInputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.DefaultInputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.DefaultInputLanguage Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
        <altmember cref="M:System.Windows.Forms.InputLanguage.Equals(System.Object)" />
        <altmember cref="P:System.Windows.Forms.InputLanguage.LayoutName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.InputLanguage.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Langue à comparer.</param>
        <summary>Spécifie si deux langues d'entrée sont identiques.</summary>
        <returns>
          <see langword="true" /> si les deux langues sont identiques ; sinon <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCulture">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage FromCulture (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.InputLanguage FromCulture(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.InputLanguage.FromCulture(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromCulture (culture As CultureInfo) As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::InputLanguage ^ FromCulture(System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <see cref="T:System.Globalization.CultureInfo" /> qui spécifie la culture à partir de laquelle la conversion doit être effectuée.</param>
        <summary>Retourne la langue d'entrée associée à la culture spécifiée.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.InputLanguage" /> représentant la langue d'entrée précédemment sélectionnée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.InputLanguage.FromCulture%2A> méthode sélectionne parmi des claviers installés. Plus précisément, cette méthode effectue les opérations suivantes :  
  
1.  Obtient le LCID associé `culture`.  
  
2.  Obtient la liste complète des identificateurs de langue d’entrée disponibles (HKL) à partir de la `GetKeyboardLayoutList` (fonction).  
  
3.  Recherche le HKL qui correspond au LCID de `culture`, s’il en existe.  
  
4.  Retourne le clavier installé associé à ce HKL.  
  
5.  Si aucun clavier n’est trouvé, retourne `null`.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.InputLanguage.FromCulture%2A> méthode ne tente jamais de charger ou d’installer un clavier supplémentaire si une n’a pas déjà été installée pour `culture`. Utilisez la fonction Platform SDK, `LoadKeyboardLayout`, pour installer un clavier supplémentaire.  
  
   
  
## Examples  
 L’exemple de code suivant définit la langue d’entrée par défaut comme le langage d’entrée actuel.  
  
 Tout d’abord, <xref:System.Windows.Forms.InputLanguage.DefaultInputLanguage%2A> est appelé pour obtenir la langue par défaut du système. Ensuite, <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> est appelé pour obtenir la langue d’entrée actuelle. Les résultats sont imprimés dans une zone de texte. Ensuite, l’appel <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> avec la valeur par défaut une langue d’entrée change la langue d’entrée actuelle à la valeur par défaut. Le nouveau langage d’entrée actuel s’affiche dans une zone de texte.  
  
 Ce code suppose que `textBox1` a été instancié.  
  
 [!code-cpp[Classic InputLanguage.FromCulture Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.FromCulture Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.FromCulture Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.FromCulture Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.FromCulture Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.FromCulture Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.DefaultInputLanguage" />
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
        <altmember cref="M:System.Windows.Forms.InputLanguage.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.InputLanguage.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le code de hachage de cette instance.</summary>
        <returns>Code de hachage de cette instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le handle pour la langue d'entrée.</summary>
        <value>
          <see cref="T:System.IntPtr" /> représentant le handle de la langue d'entrée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant obtient la langue d’entrée actuelle. Ensuite, il appelle <xref:System.Windows.Forms.InputLanguage.Handle%2A> pour obtenir le handle et imprime les résultats dans une zone de texte. L’exemple requiert que `textBox1` a été instancié.  
  
 [!code-cpp[Classic InputLanguage.Handle Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.Handle Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.Handle Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.Handle Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.Handle Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.Handle Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="InstalledInputLanguages">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguageCollection InstalledInputLanguages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguageCollection InstalledInputLanguages" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.InstalledInputLanguages" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledInputLanguages As InputLanguageCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguageCollection ^ InstalledInputLanguages { System::Windows::Forms::InputLanguageCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguageCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la liste de toutes les langues d'entrée installées.</summary>
        <value>Tableau d'objets <see cref="T:System.Windows.Forms.InputLanguage" /> représentant les langues d'entrée installées sur l'ordinateur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant récupère toutes les langues d’entrée installées sur l’ordinateur et affiche leurs noms. Le code appelle <xref:System.Windows.Forms.InputLanguage.InstalledInputLanguages%2A> pour obtenir les langues installées. Une zone de texte affiche la liste des noms de langue.  
  
 Ce code suppose que `textBox1` a été instancié et que `textBox1.MultiLine` a été défini sur `true`.  
  
 [!code-cpp[Classic InputLanguage.InstalledInputLanguages Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.InstalledInputLanguages Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.InstalledInputLanguages Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.InstalledInputLanguages Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.InstalledInputLanguages Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.InstalledInputLanguages Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.LayoutName" />
      </Docs>
    </Member>
    <Member MemberName="LayoutName">
      <MemberSignature Language="C#" Value="public string LayoutName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LayoutName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.InputLanguage.LayoutName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LayoutName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LayoutName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nom de la configuration de clavier en cours telle qu'elle apparaît dans les paramètres régionaux du système d'exploitation de l'ordinateur.</summary>
        <value>Nom de la configuration.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant obtient la culture associée à la langue d’entrée en cours et affiche le nom de culture.  
  
 Tout d’abord, <xref:System.Windows.Forms.InputLanguage.CurrentInputLanguage%2A> est appelé pour obtenir la langue d’entrée actuelle. Ensuite, <xref:System.Windows.Forms.InputLanguage.Culture%2A> est appelé pour obtenir les informations de culture pour cette langue d’entrée. Enfin, <xref:System.Globalization.CultureInfo.EnglishName%2A> est récupéré et affiché dans une zone de texte.  
  
 [!code-cpp[Classic InputLanguage.LayoutName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic InputLanguage.LayoutName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic InputLanguage.LayoutName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic InputLanguage.LayoutName Example/CS/source.cs#1)]
 [!code-vb[Classic InputLanguage.LayoutName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic InputLanguage.LayoutName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.InputLanguage.CurrentInputLanguage" />
      </Docs>
    </Member>
  </Members>
</Type>