<Type Name="Binding" FullName="System.Windows.Forms.Binding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d4af73d31e4176ed1cbfa02c4a8d37010400a36" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659729" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Binding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ListBindingConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente la liaison simple entre la valeur de propriété d'un objet et la valeur de propriété du contrôle.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la <xref:System.Windows.Forms.Binding> classe pour créer et gérer une liaison simple entre la propriété d’un contrôle et la propriété d’un objet, ou la propriété de l’objet actuel dans une liste d’objets.  
  
 Par exemple le premier cas, vous pouvez lier le <xref:System.Windows.Forms.Control.Text%2A> propriété d’un <xref:System.Windows.Forms.TextBox> le contrôle à la `FirstName` propriété d’un `Customer` objet. Par exemple le second cas, vous pouvez lier le <xref:System.Windows.Forms.Control.Text%2A> propriété d’un <xref:System.Windows.Forms.TextBox> le contrôle à la `FirstName` propriété d’un <xref:System.Data.DataTable> contenant des clients.  
  
 Le <xref:System.Windows.Forms.Binding> classe vous permet également de formater des valeurs pour l’affichage via le <xref:System.Windows.Forms.Binding.Format> événement et récupérer des valeurs mises en forme par le biais le <xref:System.Windows.Forms.Binding.Parse> événement.  
  
 Lorsque vous construisez un <xref:System.Windows.Forms.Binding> avec l’instance <xref:System.Windows.Forms.Binding.%23ctor%2A> constructeur, vous devez spécifier trois éléments :  
  
-   Le nom de la propriété du contrôle à lier.  
  
-   Source de données.  
  
-   Le chemin d’accès de navigation qui est résolue en une liste ou une propriété dans la source de données. Le chemin d’accès de navigation est également utilisé pour créer l’objet <xref:System.Windows.Forms.Binding.BindingMemberInfo%2A> propriété.  
  
 Tout d’abord, vous devez spécifier le nom de la propriété de contrôle que vous souhaitez lier les données. Par exemple, pour afficher des données dans un <xref:System.Windows.Forms.TextBox> contrôler, spécifiez la <xref:System.Windows.Forms.TextBoxBase.Text%2A> propriété.  
  
 Ensuite, vous pouvez spécifier une instance de l’une des classes dans le tableau suivant comme source de données.  
  
  Troisièmement, vous devez spécifier le chemin d’accès de navigation, qui peut être une chaîne vide (" »), un nom de propriété ou une hiérarchie délimitée de noms. Si vous définissez le chemin d’accès de navigation sur une chaîne vide, le <xref:System.Object.ToString%2A> méthode sera être appelée sur l’objet de source de données sous-jacente.  
  
 Si la source de données est un <xref:System.Data.DataTable>, qui peut contenir plusieurs <xref:System.Data.DataColumn> des objets, le chemin d’accès de navigation doit être utilisé pour correspondre à une colonne spécifique.  
  
> [!NOTE]
>  Lorsque la source de données est un <xref:System.Data.DataSet>, <xref:System.Data.DataViewManager>, ou <xref:System.Data.DataTable>, vous liez en fait à un <xref:System.Data.DataView>. Par conséquent, les lignes liées sont en fait <xref:System.Data.DataRowView> objets.  
  
 Un chemin de navigation séparé est requis lorsque la source de données est définie sur un objet qui contient plusieurs <xref:System.Data.DataTable> objets (comme un <xref:System.Data.DataSet> ou <xref:System.Data.DataViewManager>). Vous pouvez également utiliser un chemin d’accès de navigation séparé lorsque vous liez à un objet dont les propriétés retournent des références à d’autres objets (par exemple, une classe avec des propriétés qui retournent d’autres objets de classe). Par exemple, les chemins de navigation suivants toutes les décrivent les champs de données valides :  
  
-   « Size.Height »  
  
-   "Suppliers.CompanyName"  
  
-   "Regions.regionsToCustomers.CustomerFirstName"  
  
-   "Regions.regionsToCustomers.customersToOrders.ordersToDetails.Quantity"  
  
 Chaque membre du chemin d’accès peut retourner une propriété qui est résolue en une valeur unique (par exemple, un nombre entier), ou une liste de valeurs (par exemple, un tableau de chaînes). Bien que chaque membre dans le chemin d’accès peut être une liste ou une propriété, le membre final doit correspondre à une propriété. Chaque membre s’appuie sur le membre précédent : « Size.Height » correspond à la <xref:System.Drawing.Size.Height%2A> propriété actuel <xref:System.Drawing.Size>; « REGIONS.RegionsToCustomers.CustomerFirstName "correspond au prénom du client actuel, où le client est un des clients de la région actuelle.  
  
 A <xref:System.Data.DataRelation> renvoie une liste de valeurs en liant un <xref:System.Data.DataTable> à un deuxième <xref:System.Data.DataTable> dans un <xref:System.Data.DataSet>. Si le <xref:System.Data.DataSet> contient <xref:System.Data.DataRelation> objets, vous pouvez spécifier le membre de données comme un <xref:System.Data.DataTable.TableName%2A> suivi d’un <xref:System.Data.DataRelation.RelationName%2A>, puis un <xref:System.Data.DataColumn.ColumnName%2A>. Par exemple, si le <xref:System.Data.DataTable> nommé « Fournisseurs » contient un <xref:System.Data.DataRelation> nommé « suppliers2products », le membre de données peut être « Suppliers.suppliers2products.ProductName ».  
  
 La source de données peut se composer d’un ensemble de classes connexes. Par exemple, imaginez un ensemble de classes qui répertorie les systèmes solaire. La classe nommée `System` contient une propriété nommée `Stars` qui retourne une collection de `Star` objets. Chaque `Star` objet a `Name` et `Mass` propriétés, ainsi qu’un `Planets` propriété qui retourne une collection de `Planet` objets. Dans ce système, chaque planète possède également `Mass` et `Name` propriétés. Chaque `Planet` objet a un `Moons` propriété qui retourne une collection de `Moon` objets, chacun d’eux a également `Name` et `Mass` propriétés. Si vous spécifiez un `System` de l’objet en tant que la source de données, vous pouvez spécifier les éléments suivants en tant que le membre de données :  
  
-   « Stars.Name »  
  
-   « Stars.Mass »  
  
-   "Stars.Planets.Name"  
  
-   « Stars.Planets.Mass »  
  
-   "Stars.Planets.Moons.Name"  
  
-   "Stars.Planets.Moons.Mass"  
  
 Les contrôles qui peuvent être à liaison simple comprennent une collection de <xref:System.Windows.Forms.Binding> des objets dans une <xref:System.Windows.Forms.ControlBindingsCollection>, auquel vous pouvez accéder par le biais du contrôle <xref:System.Windows.Forms.Control.DataBindings%2A> propriété. Vous ajoutez un <xref:System.Windows.Forms.Binding> à la collection en appelant le <xref:System.Windows.Forms.ControlBindingsCollection.Add%2A> méthode, liez ainsi une propriété du contrôle à une propriété d’un objet (ou à une propriété de l’objet actuel dans une liste).  
  
 Vous pouvez créer une liaison simple pour tout objet qui dérive de la <xref:System.Windows.Forms.Control?displayProperty=nameWithType> classe, par exemple, les contrôles Windows suivants :  
  
-   <xref:System.Windows.Forms.Button>  
  
-   <xref:System.Windows.Forms.CheckBox>  
  
-   <xref:System.Windows.Forms.CheckedListBox>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.DomainUpDown>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel>  
  
-   <xref:System.Windows.Forms.ListBox>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.NumericUpDown>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.RadioButton>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.ScrollBar>  
  
-   <xref:System.Windows.Forms.StatusBar>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
> [!NOTE]
>  Uniquement les <xref:System.Windows.Forms.ListControl.SelectedValue%2A> propriété de la <xref:System.Windows.Forms.ComboBox>, <xref:System.Windows.Forms.CheckedListBox>, et <xref:System.Windows.Forms.ListBox> contrôle est lié aux simple.  
  
 Le <xref:System.Windows.Forms.BindingManagerBase> classe est une classe abstraite qui gère toutes les <xref:System.Windows.Forms.Binding> les objets d’une source de données particulier et d’un membre de données. Les classes qui dérivent de <xref:System.Windows.Forms.BindingManagerBase> sont les <xref:System.Windows.Forms.CurrencyManager> et <xref:System.Windows.Forms.PropertyManager> classes. Comment un <xref:System.Windows.Forms.Binding> est géré varie selon que le <xref:System.Windows.Forms.Binding> est une liaison de la liste ou d’une liaison de propriété. Par exemple, s’il s’agit d’une liaison de la liste, vous pouvez utiliser la <xref:System.Windows.Forms.BindingManagerBase> pour spécifier un <xref:System.Windows.Forms.BindingManagerBase.Position%2A> dans la liste ; le <xref:System.Windows.Forms.BindingManagerBase.Position%2A>, par conséquent, détermine l’élément (parmi tous les éléments dans la liste) est effectivement lié à un contrôle. Pour retourner les <xref:System.Windows.Forms.BindingManagerBase>, utilisez le <xref:System.Windows.Forms.BindingContext>.  
  
 Pour ajouter une nouvelle ligne à un ensemble de contrôles liés à la même <xref:System.Windows.Forms.Binding.DataSource%2A>, utilisez le <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> méthode de la <xref:System.Windows.Forms.BindingManagerBase> classe. Utilisez le <xref:System.Windows.Forms.BindingContext.Item%2A> propriété de la <xref:System.Windows.Forms.BindingContext> classe pour retourner les <xref:System.Windows.Forms.CurrencyManager>. Pour abandonner l’ajout de la nouvelle ligne, utilisez le <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant crée un Windows Form avec plusieurs contrôles qui illustrent la liaison de données simple. L’exemple crée un <xref:System.Data.DataSet> avec deux tables nommées `Customers` et `Orders`et un <xref:System.Data.DataRelation> nommé `custToOrders`. Quatre contrôles (un <xref:System.Windows.Forms.DateTimePicker> et trois <xref:System.Windows.Forms.TextBox> contrôles) sont liés aux colonnes dans les tables de données. Pour chaque contrôle, l’exemple crée et ajoute un <xref:System.Windows.Forms.Binding> pour le contrôle via le <xref:System.Windows.Forms.Control.DataBindings%2A> propriété. L’exemple retourne un <xref:System.Windows.Forms.BindingManagerBase> pour chaque table par le biais du formulaire <xref:System.Windows.Forms.BindingContext>. Quatre <xref:System.Windows.Forms.Button> contrôle l’incrémentation ou décrémentation le <xref:System.Windows.Forms.BindingManagerBase.Position%2A> propriété sur le <xref:System.Windows.Forms.BindingManagerBase> objets.  
  
 [!code-cpp[Classic Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
    <altmember cref="T:System.Windows.Forms.ComboBox" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Binding" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nom de la propriété du contrôle à lier.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> représentant la source de données.</param>
        <param name="dataMember">Propriété ou liste à lier.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Binding" /> qui établit une liaison simple de la propriété du contrôle indiquée aux données membres spécifiées de la source de données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier une instance d’une des classes suivantes pour la source de données :  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Toute classe qui implémente le <xref:System.Collections.IList> interface  
  
-   N’importe quelle classe  
  
 Consultez le <xref:System.Windows.Forms.Binding> classe pour plus d’informations sur la création de la `dataMember` chaîne.  
  
 Lorsque vous créez une liaison à la propriété d’un contrôle, la nouvelle <xref:System.Windows.Forms.Binding> inspecte les événements exposés par le contrôle dépendant et l’attache à deux événements particuliers :  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un événement nommé *PropertyName* `Changed` (par exemple, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 Si vous tentez de lier à une propriété qui n’existe pas, un <xref:System.ArgumentException> est levée quand le <xref:System.Windows.Forms.Binding> est ajouté au contrôle <xref:System.Windows.Forms.Control.DataBindings%2A?displayProperty=nameWithType> collection.  
  
   
  
## Examples  
 Le code suivant lie l’exemple un <xref:System.Windows.Forms.TextBox> contrôle à une colonne de table dans un <xref:System.Data.DataSet> nommé `myDataSet`. L’exemple requiert que vous avez déclaré `myDataSet` dans la section Déclarations du module.  
  
 [!code-cpp[Classic Binding.Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Binding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <paramref name="propertyName" /> ne doit pas être une propriété valide d'un contrôle ou une chaîne vide ("").</exception>
        <exception cref="T:System.ArgumentException">La propriété fournie par <paramref name="propertyName" /> n'existe pas dans le contrôle.</exception>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.CurrencyManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nom de la propriété du contrôle à lier.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> représentant la source de données.</param>
        <param name="dataMember">Propriété ou liste à lier.</param>
        <param name="formattingEnabled">
          <see langword="true" /> pour mettre en forme les données affichées ; sinon <see langword="false" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Binding" /> qui lie la propriété du contrôle indiquée aux données membres spécifiées de la source de données et permet éventuellement l'application de la mise en forme.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">La propriété fournie par <paramref name="propertyName" /> n'existe pas dans le contrôle.  
  
 - ou -  
  
 La propriété donnée est en lecture seule.</exception>
        <exception cref="T:System.Exception">La mise en forme est désactivée et <paramref name="propertyName" /> n'est ni une propriété valide d'un contrôle ni une chaîne vide ("").</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nom de la propriété du contrôle à lier.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> représentant la source de données.</param>
        <param name="dataMember">Propriété ou liste à lier.</param>
        <param name="formattingEnabled">
          <see langword="true" /> pour mettre en forme les données affichées ; sinon <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Une des valeurs de <see cref="T:System.Windows.Forms.DataSourceUpdateMode" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Binding" /> qui établit une liaison de la propriété du contrôle spécifiée aux données membres spécifiées de la source de données indiquée. Active éventuellement la mise en forme et propage les valeurs à la source de données en fonction du paramètre de mise à jour spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier une instance d’une des classes suivantes pour la source de données :  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Toute classe qui implémente le <xref:System.Collections.IList> interface  
  
-   N’importe quelle classe  
  
 Consultez le <xref:System.Windows.Forms.Binding> classe pour plus d’informations sur la création de la `dataMember` chaîne.  
  
 Lorsque vous créez une liaison à la propriété d’un contrôle, la nouvelle <xref:System.Windows.Forms.Binding> inspecte les événements exposés par le contrôle dépendant et l’attache à deux événements particuliers :  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>.  
  
-   Un événement nommé *PropertyName* `Changed` (par exemple, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propriété fournie par <paramref name="propertyName" /> n'existe pas dans le contrôle.  
  
 - ou -  
  
 La source de données, la donnée membre ou la propriété du contrôle spécifiée sont associées à une autre liaison de la collection.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nom de la propriété du contrôle à lier.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> représentant la source de données.</param>
        <param name="dataMember">Propriété ou liste à lier.</param>
        <param name="formattingEnabled">
          <see langword="true" /> pour mettre en forme les données affichées ; sinon <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Une des valeurs de <see cref="T:System.Windows.Forms.DataSourceUpdateMode" />.</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> devant être appliqué à la propriété du contrôle lié si la valeur de la source de données est <see cref="T:System.DBNull" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Binding" /> qui établit une liaison de la propriété du contrôle spécifiée aux données membres spécifiées de la source de données indiquée. Active éventuellement la mise en forme, propage les valeurs à la source de données en fonction du paramètre de mise à jour spécifié et affecte à la propriété la valeur spécifiée lorsqu'un <see cref="T:System.DBNull" /> est retourné à partir de la source de données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier une instance d’une des classes suivantes pour la source de données :  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Toute classe qui implémente le <xref:System.Collections.IList> interface  
  
-   N’importe quelle classe  
  
 Consultez le <xref:System.Windows.Forms.Binding> classe pour plus d’informations sur la création de la `dataMember` chaîne.  
  
 Lorsque vous créez une liaison à la propriété d’un contrôle, la nouvelle <xref:System.Windows.Forms.Binding> inspecte les événements exposés par le contrôle dépendant et l’attache à deux événements particuliers :  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un événement nommé *PropertyName* `Changed` (par exemple, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propriété fournie par <paramref name="propertyName" /> n'existe pas dans le contrôle.  
  
 - ou -  
  
 La source de données, la donnée membre ou la propriété du contrôle spécifiée sont associées à une autre liaison de la collection.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nom de la propriété du contrôle à lier.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> représentant la source de données.</param>
        <param name="dataMember">Propriété ou liste à lier.</param>
        <param name="formattingEnabled">
          <see langword="true" /> pour mettre en forme les données affichées ; sinon <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Une des valeurs de <see cref="T:System.Windows.Forms.DataSourceUpdateMode" />.</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> devant être appliqué à la propriété du contrôle lié si la valeur de la source de données est <see cref="T:System.DBNull" />.</param>
        <param name="formatString">Un ou plusieurs caractères spécificateurs de format qui indiquent comment une valeur doit s'afficher.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Binding" /> qui établit une liaison de la propriété du contrôle spécifiée aux données membres spécifiées de la source de données indiquée. Active éventuellement la mise en forme avec la chaîne de format spécifiée, propage les valeurs à la source de données en fonction du paramètre de mise à jour spécifié, et affecte à la propriété la valeur spécifiée lorsque <see cref="T:System.DBNull" /> est retourné à partir de la source de données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier une instance d’une des classes suivantes pour la source de données :  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Toute classe qui implémente le <xref:System.Collections.IList> interface  
  
-   N’importe quelle classe  
  
 Consultez le <xref:System.Windows.Forms.Binding> classe pour plus d’informations sur la création de la `dataMember` chaîne.  
  
 Lorsque vous créez une liaison à la propriété d’un contrôle, la nouvelle <xref:System.Windows.Forms.Binding> inspecte les événements exposés par le contrôle dépendant et l’attache à deux événements particuliers :  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un événement nommé *PropertyName* `Changed` (par exemple, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propriété fournie par <paramref name="propertyName" /> n'existe pas dans le contrôle.  
  
 - ou -  
  
 La source de données, la donnée membre ou la propriété du contrôle spécifiée sont associées à une autre liaison de la collection.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, class System.IFormatProvider formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString, IFormatProvider ^ formatInfo);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nom de la propriété du contrôle à lier.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> représentant la source de données.</param>
        <param name="dataMember">Propriété ou liste à lier.</param>
        <param name="formattingEnabled">
          <see langword="true" /> pour mettre en forme les données affichées ; sinon <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Une des valeurs de <see cref="T:System.Windows.Forms.DataSourceUpdateMode" />.</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> devant être appliqué à la propriété du contrôle lié si la valeur de la source de données est <see cref="T:System.DBNull" />.</param>
        <param name="formatString">Un ou plusieurs caractères spécificateurs de format qui indiquent comment une valeur doit s'afficher.</param>
        <param name="formatInfo">Implémentation de <see cref="T:System.IFormatProvider" /> pour substituer le comportement de mise en forme par défaut.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Binding" /> avec la propriété du contrôle spécifiée aux données membres spécifiées de la source de données indiquée. Active éventuellement la mise en forme avec la chaîne de mise en forme spécifiée, propage les valeurs à la source de données en fonction du paramètre de mise à jour spécifié, active la mise en forme avec la chaîne de mise en forme spécifiée, affecte à la propriété la valeur spécifiée lorsqu'un <see cref="T:System.DBNull" /> est retourné à partir de la source de données et définit le fournisseur de format spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez spécifier une instance d’une des classes suivantes pour la source de données :  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Toute classe qui implémente le <xref:System.Collections.IList> interface  
  
-   N’importe quelle classe  
  
 Consultez le <xref:System.Windows.Forms.Binding> classe pour plus d’informations sur la création de la `dataMember` chaîne.  
  
 Lorsque vous créez une liaison à la propriété d’un contrôle, la nouvelle <xref:System.Windows.Forms.Binding> inspecte les événements exposés par le contrôle dépendant et l’attache à deux événements particuliers :  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Un événement nommé *PropertyName* `Changed` (par exemple, <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La propriété fournie par <paramref name="propertyName" /> n'existe pas dans le contrôle.  
  
 - ou -  
  
 La source de données, la donnée membre ou la propriété du contrôle spécifiée sont associées à une autre liaison de la collection.</exception>
      </Docs>
    </Member>
    <Member MemberName="BindableComponent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IBindableComponent BindableComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IBindableComponent BindableComponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindableComponent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindableComponent As IBindableComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IBindableComponent ^ BindableComponent { System::Windows::Forms::IBindableComponent ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IBindableComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le contrôle auquel <see cref="T:System.Windows.Forms.Binding" /> est associé.</summary>
        <value>
          <see cref="T:System.Windows.Forms.IBindableComponent" /> auquel <see cref="T:System.Windows.Forms.Binding" /> est associé.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.BindingComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingComplete As BindingCompleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::BindingCompleteEventHandler ^ BindingComplete;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la propriété <see cref="P:System.Windows.Forms.Binding.FormattingEnabled" /> a la valeur <see langword="true" /> et lorsqu'une opération de liaison est terminée, comme lorsque des données font l'objet d'un push depuis le contrôle vers la source de données ou inversement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est déclenché si l’une de ces conditions <xref:System.Windows.Forms.Binding.FormattingEnabled%2A> est `true`:  
  
-   Les données à partir de la source de données sont placées sur la propriété du contrôle.  
  
-   Les données à partir de la propriété du contrôle sont placées sur la source de données.  
  
 Cet événement est déclenché à la fin de ces opérations, indépendamment de l’état d’achèvement. Par exemple, si une opération de liaison lie une valeur null à un <xref:System.Windows.Forms.DateTimePicker.Value%2A> propriété, une exception est levée, mais la <xref:System.Windows.Forms.Binding.BindingComplete> événement se produit. Le Gestionnaire de cet événement peut prendre les mesures appropriées, en fonction de la réussite, erreur ou exceptions dans le processus de liaison, en examinant le <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> propriété de le <xref:System.Windows.Forms.BindingCompleteEventArgs> paramètre.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment gérer les <xref:System.Windows.Forms.Binding.BindingComplete> événement.  
  
 [!code-cpp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.FormattingEnabled" />
        <altmember cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BindingManagerBase">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase BindingManagerBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase BindingManagerBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingManagerBase As BindingManagerBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingManagerBase ^ BindingManagerBase { System::Windows::Forms::BindingManagerBase ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Windows.Forms.BindingManagerBase" /> pour ce <see cref="T:System.Windows.Forms.Binding" />.</summary>
        <value>
          <see cref="T:System.Windows.Forms.BindingManagerBase" /> qui gère ce <see cref="T:System.Windows.Forms.Binding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Windows.Forms.BindingManagerBase> pour parcourir une liste liée aux données en incrémentant ou décrémentant la <xref:System.Windows.Forms.BindingManagerBase.Position%2A> propriété. La <xref:System.Windows.Forms.BindingManagerBase> classe est abstraite. Le <xref:System.Windows.Forms.CurrencyManager> hérite de la classe, qui gère des listes liées aux données, la <xref:System.Windows.Forms.BindingManagerBase> classe.  
  
   
  
## Examples  
 Le code suivant obtient de l’exemple le <xref:System.Windows.Forms.BindingManagerBase> de chaque <xref:System.Windows.Forms.Binding> sur le formulaire et imprime la <xref:System.Windows.Forms.BindingManagerBase.Position%2A> propriété pour chaque <xref:System.Windows.Forms.BindingManagerBase>.  
  
 [!code-cpp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingMemberInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingMemberInfo BindingMemberInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BindingMemberInfo BindingMemberInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingMemberInfo As BindingMemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingMemberInfo BindingMemberInfo { System::Windows::Forms::BindingMemberInfo get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingMemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Extrait un objet qui contient des informations sur cette liaison par l'intermédiaire du paramètre <paramref name="dataMember" /> dans le constructeur <see cref="Overload:System.Windows.Forms.Binding.#ctor" />.</summary>
        <value>
          <see cref="T:System.Windows.Forms.BindingMemberInfo" /> qui contient des informations sur <see cref="T:System.Windows.Forms.Binding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.BindingMemberInfo> est créé à partir de la `dataMember` chaîne passée à la <xref:System.Windows.Forms.Binding.%23ctor%2A> constructeur.  
  
   
  
## Examples  
 Le code suivant obtient de l’exemple le <xref:System.Windows.Forms.BindingMemberInfo> de chaque <xref:System.Windows.Forms.Binding> sur un formulaire et imprime la <xref:System.Windows.Forms.BindingMemberInfo.BindingPath%2A>, <xref:System.Windows.Forms.BindingMemberInfo.BindingField%2A>, et <xref:System.Windows.Forms.BindingMemberInfo.BindingMember%2A> pour que les valeurs de propriété <xref:System.Windows.Forms.Binding>.  
  
 [!code-cpp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Control { System::Windows::Forms::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le contrôle auquel cette liaison appartient.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Control" /> auquel appartient cette liaison.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Le code suivant obtient de l’exemple le <xref:System.Windows.Forms.BindingManagerBase> pour une source de données spécifique et imprime des informations sur chacune d’elles <xref:System.Windows.Forms.Binding.Control%2A> propriété qui est liée à la source de données. L’exemple utilise le <xref:System.Windows.Forms.BindingManagerBase.Bindings%2A> propriété de la <xref:System.Windows.Forms.BindingManagerBase> pour obtenir tous les contrôles.  
  
 [!code-cpp[Classic Binding.Control Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Control Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Control Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Control Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Control Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Control Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlUpdateMode ControlUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ControlUpdateMode ControlUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlUpdateMode As ControlUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlUpdateMode ControlUpdateMode { System::Windows::Forms::ControlUpdateMode get(); void set(System::Windows::Forms::ControlUpdateMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit lorsque les modifications à la source de données sont propagées à la propriété du contrôle lié.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.ControlUpdateMode" />. La valeur par défaut est <see cref="F:System.Windows.Forms.ControlUpdateMode.OnPropertyChanged" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la source de données pour cette liaison.</summary>
        <value>
          <see cref="T:System.Object" /> représentant la source de données.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sources de données possibles sont les suivantes :  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   Tout objet qui implémente le <xref:System.Collections.IList> interface  
  
-   Tout objet  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.Binding.DataSource%2A> propriété à retourner un <xref:System.Data.DataSet>.  
  
 [!code-cpp[Classic Binding.DataSource Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceNullValue">
      <MemberSignature Language="C#" Value="public object DataSourceNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSourceNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSourceNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur à stocker dans la source de données si la valeur de contrôle est <see langword="null" /> ou vide.</summary>
        <value>
          <see cref="T:System.Object" /> à stocker dans la source de données lorsque la propriété du contrôle est vide ou <see langword="null" />. La valeur par défaut est <see cref="T:System.DBNull" /> pour les types valeur et <see langword="null" /> pour les types non-valeur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.Windows.Forms.Binding.NullValue%2A> propriété pour spécifier la valeur affichée dans un contrôle dépendant lorsque la source de données contient <xref:System.DBNull>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.NullValue" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceUpdateMode As DataSourceUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataSourceUpdateMode DataSourceUpdateMode { System::Windows::Forms::DataSourceUpdateMode get(); void set(System::Windows::Forms::DataSourceUpdateMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur lorsque les modifications de la propriété du contrôle lié sont propagées à la source de données.</summary>
        <value>Valeur qui indique quand les modifications sont propagées. La valeur par défaut est <see cref="F:System.Windows.Forms.DataSourceUpdateMode.OnValidation" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Notez que même si cette propriété est définie sur <xref:System.Windows.Forms.DataSourceUpdateMode.Never>, la liaison est mise à jour au moins une fois, quand il est établi au préalable.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Format;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Format" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Format" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Format As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Format;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la propriété du contrôle est liée à une valeur de données.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.Binding.Format> événement est déclenché lorsque les données sont transmises à partir de la source de données dans le contrôle. Vous pouvez gérer le <xref:System.Windows.Forms.Binding.Format> événements pour convertir des données non mises en forme à partir de la source de données en mise en forme des données pour l’affichage. Lorsque les données sont extraites à partir du contrôle dans la source de données, le <xref:System.Windows.Forms.Binding.Parse> événement est déclenché pour annuler la mise en forme la valeur affichée, puis la <xref:System.Windows.Forms.Binding.Format> événement se produit pour remettre en forme les données à afficher. Cela garantit que le contrôle lié affiche correctement mis en forme des données, quelle que soit l’utilisateur entre des données mises en forme ou non mis en forme dans le contrôle.  
  
 Le <xref:System.Windows.Forms.Binding.Format> et <xref:System.Windows.Forms.Binding.Parse> les événements permettent de créer des formats personnalisés pour afficher les données. Par exemple, si les données dans une table seront de type <xref:System.Decimal>, vous pouvez afficher les données dans le format de devise locale en définissant le <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> propriété de la <xref:System.Windows.Forms.ConvertEventArgs> à la valeur mise en forme dans le <xref:System.Windows.Forms.Binding.Format> événement. Vous devez par conséquent annuler mise en forme la valeur affichée dans le <xref:System.Windows.Forms.Binding.Parse> événement.  
  
 Le <xref:System.Windows.Forms.Binding.Format> événement se produit chaque fois que le <xref:System.Windows.Forms.BindingManagerBase.Current%2A> valeur de la <xref:System.Windows.Forms.BindingManagerBase> modifications, ce qui inclut :  
  
-   La première fois que la propriété est liée.  
  
-   N’importe quel moment le <xref:System.Windows.Forms.BindingManagerBase.Position%2A> modifications.  
  
-   Chaque fois que la liste liée aux données est triée ou filtrée, ce qui est effectuée lorsqu’un <xref:System.Data.DataView> fournit la liste.  
  
 Le <xref:System.Windows.Forms.Binding.Format> événement se produit également après le <xref:System.Windows.Forms.Binding.Parse> événement. Par exemple, lorsqu’un contrôle perd le focus, son contenu est analysé. Immédiatement après, lorsque de nouvelles données sont placées dans le contrôle, le <xref:System.Windows.Forms.Binding.Format> événement se produit ce qui permet de mettre en forme le nouveau contenu.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.Binding>, ajoute un <xref:System.Windows.Forms.ConvertEventHandler> délégué à la fois à la <xref:System.Windows.Forms.Binding.Parse> et <xref:System.Windows.Forms.Binding.Format> événements et ajoute le <xref:System.Windows.Forms.Binding> à la <xref:System.Windows.Forms.BindingsCollection> d’un <xref:System.Windows.Forms.TextBox> contrôler par le biais le <xref:System.Windows.Forms.Control.DataBindings%2A> propriété. Le `DecimalToCurrencyString` délégué d’événement ajouté à la <xref:System.Windows.Forms.Binding.Format> événement, formate la valeur liée (un <xref:System.Decimal> type) comme devise à l’aide la <xref:System.Decimal.ToString%2A> (méthode). Le `CurrencyStringToDecimal` délégué d’événement ajouté à la <xref:System.Windows.Forms.Binding.Parse> événement, convertit la valeur affichée par le contrôle à la <xref:System.Decimal> type.  
  
 Cet exemple suppose la présence d’un <xref:System.Data.DataSet> nommé `ds`.  
  
 [!code-cpp[Classic Binding.Format Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Format Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Format Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Format Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Format Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Format Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FormatInfo">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatInfo As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatInfo { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit <see cref="T:System.IFormatProvider" /> qui fournit le comportement de mise en forme personnalisé.</summary>
        <value>L'implémentation de <see cref="T:System.IFormatProvider" /> qui fournit le comportement de mise en forme personnalisé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définition de cette propriété remplace la valeur par défaut de mise en forme de comportement, qui utilise le <xref:System.Windows.Forms.Application.CurrentCulture%2A?displayProperty=nameWithType> paramètre de propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatString">
      <MemberSignature Language="C#" Value="public string FormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les caractères spécificateurs de format qui indiquent comment une valeur doit s'afficher.</summary>
        <value>Chaîne de caractères spécificateurs de format qui indiquent comment une valeur doit s'afficher.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de format utilisée doit suivre les spécifications de format .NET Framework standards. Pour plus d’informations, consultez [mise en forme des Types dans le .NET Framework](~/docs/standard/base-types/formatting-types.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormattingEnabled">
      <MemberSignature Language="C#" Value="public bool FormattingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FormattingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property FormattingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FormattingEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si la conversion de type et la mise en forme s'appliquent aux données de propriété du contrôle.</summary>
        <value>
          <see langword="true" /> si la conversion de type et la mise en forme de données de propriété de contrôle sont activées ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cette propriété `true` également Active le comportement de gestion des erreurs et provoque le <xref:System.Windows.Forms.Binding.BindingComplete> événement soit déclenché. Le Gestionnaire de cet événement peut prendre les mesures appropriées, en fonction de la réussite, erreur ou exceptions dans le processus de liaison, en examinant le <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> propriété de le <xref:System.Windows.Forms.BindingCompleteEventArgs> paramètre.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.BindingComplete" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.IsBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBinding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBinding { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si la liaison est active.</summary>
        <value>
          <see langword="true" /> si la liaison est active ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une liaison est active lorsqu’elle satisfait aux conditions suivantes :  
  
-   Toutes ses propriétés sont définies.  
  
-   L’utilisateur n’a pas appelé <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> ou <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> sur la <xref:System.Windows.Forms.BindingManagerBase> qui le <xref:System.Windows.Forms.Binding> appartient.  
  
-   Le contrôle auquel la <xref:System.Windows.Forms.Binding> appartient a été créé.  
  
   
  
## Examples  
 Le code suivant exemple imprime le <xref:System.Windows.Forms.Binding.PropertyName%2A> et <xref:System.Windows.Forms.Binding.IsBinding%2A> valeur pour chaque <xref:System.Windows.Forms.Binding> sur un formulaire.  
  
 [!code-cpp[Classic Binding.IsBinding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.IsBinding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.IsBinding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.IsBinding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullValue">
      <MemberSignature Language="C#" Value="public object NullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.NullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property NullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit <see cref="T:System.Object" /> à définir comme propriété du contrôle lorsque la source de données contient une valeur <see cref="T:System.DBNull" />.</summary>
        <value>
          <see cref="T:System.Object" /> à définir comme propriété du contrôle lorsque la source de données contient une valeur <see cref="T:System.DBNull" />. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La source de données doit contenir <xref:System.DBNull> pour le <xref:System.Windows.Forms.Binding.NullValue%2A> propriété à être appliquées correctement. Si le type de source de données est un type tel qu’une chaîne ou un entier de la valeur de la <xref:System.Windows.Forms.Binding.NullValue%2A> propriété sera ignorée. En outre, le <xref:System.Windows.Forms.Binding.NullValue%2A> propriété est ignorée si elle est définie sur `null`.  
  
 Une valeur null sera ajoutée à la source de données lorsque la propriété du contrôle est définie sur l’objet de <xref:System.Windows.Forms.Binding.NullValue%2A>. Si <xref:System.Windows.Forms.Binding.NullValue%2A> est définie à une valeur de chaîne, les comparaisons respectent la casse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingComplete (e As BindingCompleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingComplete(System::Windows::Forms::BindingCompleteEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Binding.BindingComplete" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.Binding.OnBindingComplete%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFormat">
      <MemberSignature Language="C#" Value="protected virtual void OnFormat (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFormat(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFormat (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFormat(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">
          <see cref="T:System.Windows.Forms.ConvertEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Binding.Format" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.Binding.OnFormat%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="OnParse">
      <MemberSignature Language="C#" Value="protected virtual void OnParse (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParse(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParse (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParse(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">
          <see cref="T:System.Windows.Forms.ConvertEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Binding.Parse" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.Binding.OnParse%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Parse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Parse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Parse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Parse As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Parse;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la valeur d'un contrôle lié aux données est modifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.Binding.Format> et <xref:System.Windows.Forms.Binding.Parse> les événements permettent de créer des formats personnalisés pour afficher les données. Par exemple, si les données dans une table seront de type <xref:System.Decimal>, vous pouvez afficher les données dans le format de devise locale en définissant le <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> propriété de la <xref:System.Windows.Forms.ConvertEventArgs> à la valeur mise en forme dans le <xref:System.Windows.Forms.Binding.Format> événement. Vous devez par conséquent annuler mise en forme la valeur affichée dans le <xref:System.Windows.Forms.Binding.Parse> événement.  
  
 Le <xref:System.Windows.Forms.Binding.Parse> événement se produit dans les conditions suivantes :  
  
-   Après le <xref:System.Windows.Forms.Control.Validated> l’événement de le <xref:System.Windows.Forms.Control> se produit.  
  
-   Lorsque le <xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A> méthode de la <xref:System.Windows.Forms.BindingManagerBase> est appelée.  
  
-   Lorsque le <xref:System.Windows.Forms.BindingManagerBase.Current%2A> de la <xref:System.Windows.Forms.BindingManagerBase> modifications (en d’autres termes, lorsque le <xref:System.Windows.Forms.BindingManagerBase.Position%2A> modifications).  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.Binding>, ajoute un <xref:System.Windows.Forms.ConvertEventHandler> délégué à la fois à la <xref:System.Windows.Forms.Binding.Parse> et <xref:System.Windows.Forms.Binding.Format> événements et ajoute le <xref:System.Windows.Forms.Binding> à la <xref:System.Windows.Forms.BindingsCollection> d’un <xref:System.Windows.Forms.TextBox> contrôler par le biais le <xref:System.Windows.Forms.Control.DataBindings%2A> propriété. Le `DecimalToCurrencyString` délégué d’événement ajouté à la <xref:System.Windows.Forms.Binding.Format> événement, formate la valeur liée (un <xref:System.Decimal> type) comme devise à l’aide la <xref:System.Decimal.ToString%2A> (méthode). Le `CurrencyStringToDecimal` délégué d’événement ajouté à la <xref:System.Windows.Forms.Binding.Parse> événement, convertit la valeur affichée par le contrôle à la <xref:System.Decimal> type.  
  
 [!code-cpp[Classic Binding.Parse Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Parse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Parse Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Parse Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Parse Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Parse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="PropertyName">
      <MemberSignature Language="C#" Value="public string PropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.PropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PropertyName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de la propriété du contrôle lié aux données.</summary>
        <value>Nom de la propriété du contrôle à lier.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Windows.Forms.Binding.PropertyName%2A> pour spécifier la propriété du contrôle que vous souhaitez lier à une liste dans une source de données. Plus généralement, vous liez une propriété d’affichage tels que le <xref:System.Windows.Forms.Control.Text%2A> propriété d’un <xref:System.Windows.Forms.TextBox> contrôle. Toutefois, étant donné que vous pouvez lier n’importe quelle propriété d’un contrôle, vous pouvez créer par programmation des contrôles au moment de l’exécution à l’aide des données à partir d’une base de données.  
  
   
  
## Examples  
 Le code suivant exemple imprime le <xref:System.Windows.Forms.Binding.PropertyName%2A> valeur de chaque <xref:System.Windows.Forms.Binding> pour chaque contrôle sur un formulaire.  
  
 [!code-cpp[Classic Binding.PropertyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.PropertyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.PropertyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.PropertyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadValue">
      <MemberSignature Language="C#" Value="public void ReadValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.ReadValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Affecte la valeur lue de la source de données à la propriété du contrôle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public void WriteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.WriteValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lit la valeur actuelle de la propriété du contrôle et l'écrit dans la source de données.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>