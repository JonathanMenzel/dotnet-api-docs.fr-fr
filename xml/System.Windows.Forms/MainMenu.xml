<Type Name="MainMenu" FullName="System.Windows.Forms.MainMenu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cb92868273782e56dcd6b5b873d2b6645c34b0f6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37510099" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MainMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MainMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MainMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class MainMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MainMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type MainMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms.MainMenu")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente la structure de menus d'un formulaire. Bien que <see cref="T:System.Windows.Forms.MenuStrip" /> remplace et ajoute des fonctionnalités au contrôle <see cref="T:System.Windows.Forms.MainMenu" /> des versions antérieures, <see cref="T:System.Windows.Forms.MainMenu" /> est conservé pour la compatibilité descendante et l'utilisation future si tel est votre choix.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.MainMenu> contrôle représente le conteneur de la structure de menus d’un formulaire. Un menu est composé de <xref:System.Windows.Forms.MenuItem> objets qui représentent les commandes de menu dans la structure de menus. Chaque <xref:System.Windows.Forms.MenuItem> peut être une commande pour votre application ou un menu parent pour d’autres éléments de sous-menu. Pour lier le <xref:System.Windows.Forms.MainMenu> à la <xref:System.Windows.Forms.Form> qui va l’afficher, affecter le <xref:System.Windows.Forms.MainMenu> à la <xref:System.Windows.Forms.Form.Menu%2A> propriété de la <xref:System.Windows.Forms.Form>.  
  
 Pour les applications qui prend en charge plusieurs langues, vous pouvez utiliser le <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> propriété pour afficher le texte du menu de droite à gauche pour prendre en charge des langues telles que l’arabe.  
  
 Vous pouvez créer différents <xref:System.Windows.Forms.MainMenu> objets pour représenter des structures de menus différentes de votre formulaire. Si vous souhaitez réutiliser la structure de menu contenue dans un spécifique <xref:System.Windows.Forms.MainMenu>, vous pouvez utiliser ses <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> méthode pour créer une copie. Une fois que vous avez une copie de la structure de menus, vous pouvez apporter les modifications appropriées pour votre nouvelle structure de menu.  
  
> [!NOTE]
>  Couper-coller de menu éléments d’une forme à un autre dans le concepteur peut ne pas fonctionneront comme prévu si le formulaire que vous collez dans n’a aucun élément de menu défini.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.MainMenu>, assigne deux <xref:System.Windows.Forms.MenuItem> des objets sur le <xref:System.Windows.Forms.MainMenu> et le lie à un formulaire. Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.Form> créé qui est nommé `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
    <altmember cref="P:System.Windows.Forms.Form.Menu" />
    <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
    <altmember cref="T:System.Windows.Forms.MenuStrip" />
    <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.MainMenu" /> sans éléments de menu spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette version du constructeur crée un <xref:System.Windows.Forms.MainMenu> sans aucune spécifié <xref:System.Windows.Forms.MenuItem> objets. Pour ajouter des éléments de menu au contrôle utilisent l’autre version du constructeur qui accepte un tableau de <xref:System.Windows.Forms.MenuItem> objets comme paramètre ou utilisez le <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> méthode de la <xref:System.Windows.Forms.Menu.MenuItems%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.MainMenu>, assigne deux <xref:System.Windows.Forms.MenuItem> des objets sur le <xref:System.Windows.Forms.MainMenu> et le lie à un formulaire. Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.Form> créé qui est nommé `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="P:System.Windows.Forms.Form.Menu" />
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.ComponentModel.IContainer -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">
          <see cref="T:System.ComponentModel.IContainer" /> représentant le conteneur du <see cref="T:System.Windows.Forms.MainMenu" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.MainMenu" /> avec le conteneur spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MainMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MainMenu" Usage="new System.Windows.Forms.MainMenu items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">Tableau d'objets <see cref="T:System.Windows.Forms.MenuItem" /> à ajouter à <see cref="T:System.Windows.Forms.MainMenu" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.MainMenu" /> avec un ensemble spécifié d'objets <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser ce constructeur pour assigner un tableau de <xref:System.Windows.Forms.MenuItem> des objets sur le <xref:System.Windows.Forms.MainMenu> au moment de sa création. Après le <xref:System.Windows.Forms.MainMenu> a été créé vous pouvez ajouter d’autres <xref:System.Windows.Forms.MenuItem> des objets sur le <xref:System.Windows.Forms.MainMenu> à l’aide de la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> méthode de la <xref:System.Windows.Forms.Menu.MenuItems%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.MainMenu>et assigne deux <xref:System.Windows.Forms.MenuItem> des objets sur le <xref:System.Windows.Forms.MainMenu> à l’aide de cette version du constructeur. L’exemple lie ensuite le <xref:System.Windows.Forms.MainMenu> à un <xref:System.Windows.Forms.Form>. Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.Form> créé qui est nommé `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MainMenu CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MainMenu CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MainMenu ^ CloneMenu();" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : unit -&gt; System.Windows.Forms.MainMenu" Usage="mainMenu.CloneMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée un nouveau <see cref="T:System.Windows.Forms.MainMenu" /> qui est un doublon du <see cref="T:System.Windows.Forms.MainMenu" /> en cours.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.MainMenu" /> qui représente le menu cloné.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette méthode pour créer une copie de la structure de menu stockés dans un <xref:System.Windows.Forms.MainMenu>. Vous pouvez utiliser cette méthode pour réutiliser la structure de menu stockés dans un <xref:System.Windows.Forms.MainMenu> comme base pour un nouveau <xref:System.Windows.Forms.MainMenu>. Par exemple, si vous souhaitez créer une structure de menu qui a les mêmes éléments de menu comme existant <xref:System.Windows.Forms.MainMenu> mais aussi supplémentaires <xref:System.Windows.Forms.MenuItem> objets ajoutés, vous pouvez utiliser la <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> méthode pour créer une copie de l’original <xref:System.Windows.Forms.MainMenu> et ajouter la nouvelle <xref:System.Windows.Forms.MenuItem> objets cloné <xref:System.Windows.Forms.MainMenu>.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.MainMenu.GetForm%2A> méthode pour déterminer si un <xref:System.Windows.Forms.MainMenu> est actuellement apparenté au formulaire. Si l’appel dans l’exemple de code à <xref:System.Windows.Forms.MainMenu.GetForm%2A> ne retourne pas `null`, le code clone la structure de menus de la <xref:System.Windows.Forms.MainMenu> à l’aide de la <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> (méthode). Le code définit ensuite la <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> propriété sur true sur la nouvelle copie de la <xref:System.Windows.Forms.MainMenu> pour créer un <xref:System.Windows.Forms.MainMenu> qui peut être utilisé pour les langages qui prennent en charge de droite à gauche. Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.MainMenu> créé qui est nommé `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MainMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lors de la réduction du menu principal.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d'informations sur la gestion des événements, voir [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Dans la mesure où le  hérite de la classe , vous pouvez également utiliser cette propriété si le  est associé à un formulaire. Dans l’exemple, un gestionnaire d’événements des rapports sur l’occurrence de la <xref:System.Windows.Forms.MainMenu.Collapse> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un multiligne <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.MainMenu> nommé `MainMenu1`. Puis vous assurer que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.MainMenu.Collapse> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#483](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#483)]
 [!code-vb[System.Windows.Forms.EventExamples#483](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#483)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected override IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr CreateMenuHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateMenuHandle : unit -&gt; nativeint" Usage="mainMenu.CreateMenuHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée un nouveau handle pour le menu.</summary>
        <returns>Handle vers le menu si la méthode réussit ; sinon, <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="mainMenu.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
        <summary>Libère les ressources (autres que la mémoire) utilisées par <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez la méthode <xref:System.Windows.Forms.MainMenu.Dispose%2A> une fois que vous avez terminé d'utiliser <xref:System.Windows.Forms.MainMenu>. La méthode <xref:System.Windows.Forms.MainMenu.Dispose%2A> rend le <xref:System.Windows.Forms.MainMenu> inutilisable. Après avoir appelé <xref:System.Windows.Forms.MainMenu.Dispose%2A>, vous devez libérer toutes les références à la <xref:System.Windows.Forms.MainMenu> afin que la mémoire occupée peut être récupérée par le garbage collection.  
  
> [!NOTE]
>  Appelez toujours <xref:System.Windows.Forms.MainMenu.Dispose%2A> avant de libérer votre dernière référence à <xref:System.Windows.Forms.MainMenu>. Sinon, les ressources du <xref:System.Windows.Forms.MainMenu> est ne seront pas libérées jusqu'à ce que le garbage collection appelle le <xref:System.Windows.Forms.MainMenu> destructeur de l’objet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form GetForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form GetForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.GetForm" />
      <MemberSignature Language="VB.NET" Value="Public Function GetForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ GetForm();" />
      <MemberSignature Language="F#" Value="member this.GetForm : unit -&gt; System.Windows.Forms.Form" Usage="mainMenu.GetForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient le <see cref="T:System.Windows.Forms.Form" /> qui contient ce contrôle.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.Form" /> conteneur de ce contrôle. Retourne <see langword="null" /> si <see cref="T:System.Windows.Forms.MainMenu" /> n'est pas actuellement hébergé par un formulaire.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété vous permet de déterminer si un spécifique <xref:System.Windows.Forms.MainMenu> est apparenté à un formulaire. La propriété est généralement utilisée lorsque plusieurs <xref:System.Windows.Forms.MainMenu> objets sont utilisés sur un formulaire et vous devez déterminer lequel est actuellement utilisé par un formulaire.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.MainMenu.GetForm%2A> méthode pour déterminer si un <xref:System.Windows.Forms.MainMenu> est actuellement apparenté au formulaire. Si l’appel dans l’exemple de code à <xref:System.Windows.Forms.MainMenu.GetForm%2A> ne retourne pas `null`, le code clone la structure de menus de la <xref:System.Windows.Forms.MainMenu> à l’aide de la <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> (méthode). Le code définit ensuite la <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> propriété sur true sur la nouvelle copie de la <xref:System.Windows.Forms.MainMenu> pour créer un <xref:System.Windows.Forms.MainMenu> qui peut être utilisé pour les langages qui prennent en charge de droite à gauche. Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.MainMenu> créé qui est nommé `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="mainMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.MainMenu.Collapse" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.MainMenu.OnCollapse%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le texte du contrôle est affiché de droite à gauche.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.RightToLeft" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété permet aux menus de prendre en charge les langues qui sont écrits de droite à gauche. Lorsque cette propriété est définie `RightToLeft.Yes`, le texte de l’élément de menu s’affichera de droite à gauche au lieu de la valeur par défaut de gauche à droite.  
  
> [!NOTE]
>  Pour plus d’informations sur l’activation d’alignement de droite à gauche sur les contrôles Windows Forms, consultez le <xref:System.Windows.Forms.Control.RightToLeft%2A> propriété.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.MainMenu.GetForm%2A> méthode pour déterminer si un <xref:System.Windows.Forms.MainMenu> est actuellement apparenté au formulaire. Si l’appel dans l’exemple de code à <xref:System.Windows.Forms.MainMenu.GetForm%2A> ne retourne pas `null`, le code clone la structure de menus de la <xref:System.Windows.Forms.MainMenu> à l’aide de la <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> (méthode). L’exemple de code définit ensuite la <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> propriété `RightToLeft.Yes` sur la nouvelle copie de la <xref:System.Windows.Forms.MainMenu> pour créer un <xref:System.Windows.Forms.MainMenu> qui peut être utilisé pour les langages qui prennent en charge de droite à gauche. Cet exemple nécessite que vous avez un <xref:System.Windows.Forms.MainMenu> créé qui est nommé `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La valeur assignée à la propriété n'est pas un membre valide de l'énumération <see cref="T:System.Windows.Forms.RightToLeft" />.</exception>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="mainMenu.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une chaîne qui représente <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <returns>Chaîne qui représente le <see cref="T:System.Windows.Forms.MainMenu" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne de retour inclut le type et la chaîne retournée par la <xref:System.Windows.Forms.Form.ToString%2A> méthode si le <xref:System.Windows.Forms.MainMenu> est affecté à un formulaire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>