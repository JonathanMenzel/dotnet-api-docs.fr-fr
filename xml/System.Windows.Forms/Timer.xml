<Type Name="Timer" FullName="System.Windows.Forms.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="18e249c0dd124f71453f47d1cab943dc0f4e46ee" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36513510" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Tick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implémente une minuterie déclenchant un événement selon un intervalle défini par l'utilisateur. L’utilisation de cette minuterie a été optimisée pour les applications Windows Forms et doit avoir lieu dans une fenêtre.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.Timer> est utilisé pour déclencher un événement à intervalles définis par l’utilisateur. Cette minuterie Windows est conçue pour un environnement monothread où les threads d’interface utilisateur sont utilisées pour effectuer le traitement. Il requiert que le code utilisateur possède une pompe de messages de l’interface utilisateur disponible toujours fonctionner à partir du même thread ou marshaler l’appel vers un autre thread.  
  
 Lorsque vous utilisez cette minuterie, utilisez le <xref:System.Windows.Forms.Timer.Tick> événement pour effectuer une opération d’interrogation ou pour afficher un écran de démarrage pour une période spécifiée. Chaque fois que le <xref:System.Windows.Forms.Timer.Enabled%2A> est définie sur `true` et <xref:System.Windows.Forms.Timer.Interval%2A> est supérieure à zéro, le <xref:System.Windows.Forms.Timer.Tick> événement est déclenché à des intervalles en fonction de la <xref:System.Windows.Forms.Timer.Interval%2A> paramètre de propriété.  
  
 Cette classe fournit des méthodes pour définir l’intervalle et pour démarrer et arrêter le minuteur.  
  
> [!NOTE]
>  Le composant Timer Windows Forms est monothread et est limité à une précision de 55 millisecondes. Si vous avez besoin d’une minuterie multithread avec une précision supérieure, utilisez la <xref:System.Timers.Timer> classe dans le <xref:System.Timers> espace de noms.  
  
   
  
## Examples  
 L’exemple suivant implémente une minuterie simple qui déclenche une alarme toutes les cinq secondes. Lorsque l’alerte se produit, un <xref:System.Windows.Forms.MessageBox> affiche le nombre de fois où l’alarme a démarré et qu’il demande à l’utilisateur si la minuterie doit continuer à exécuter.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Timer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Timer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’une nouvelle minuterie est créée, il est désactivé ; Autrement dit, <xref:System.Windows.Forms.Timer.Enabled%2A> a la valeur `false`. Pour activer le minuteur, appelez le <xref:System.Windows.Forms.Timer.Start%2A> méthode ou un ensemble <xref:System.Windows.Forms.Timer.Enabled%2A> à `true`.  
  
 Si la minuterie est désactivée et la minuterie est hors de portée, la minuterie sera supprimée lorsque le garbage collection se produit. Si la minuterie est activée, même si elle est hors de portée, il n’est pas soumis au garbage collection.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Timer : System.ComponentModel.IContainer -&gt; System.Windows.Forms.Timer" Usage="new System.Windows.Forms.Timer container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">
          <see cref="T:System.ComponentModel.IContainer" /> représentant le conteneur de la minuterie.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Timer" /> avec le conteneur spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.Timer> constructeur vous permet d’associer un <xref:System.Windows.Forms.Timer> avec n’importe quelle <xref:System.ComponentModel.Container> objet. En associant le <xref:System.Windows.Forms.Timer> de cette façon, vous cédez le contrôle de la durée de vie de la <xref:System.Windows.Forms.Timer> à la <xref:System.ComponentModel.Container>. Cela peut être utile si vous utilisez un nombre de composants dans votre application et que vous souhaitez supprimer simultanément tous les. Par exemple, si vous associez un <xref:System.Windows.Forms.ToolTip>, un <xref:System.Windows.Forms.ImageList>et un <xref:System.Windows.Forms.Timer> avec un <xref:System.ComponentModel.Container>, l’appel <xref:System.ComponentModel.Container.Dispose%2A> sur la <xref:System.ComponentModel.Container> entraînera la suppression de tous ces composants également.  
  
 Lorsqu’une nouvelle minuterie est créée, il est désactivé ; Autrement dit, <xref:System.Windows.Forms.Timer.Enabled%2A> a la valeur `false`. Pour activer le minuteur, appelez le <xref:System.Windows.Forms.Timer.Start%2A> méthode ou un ensemble <xref:System.Windows.Forms.Timer.Enabled%2A> à `true`.  
  
 Cette instance existe jusqu'à ce que son conteneur la libère pour le garbage collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées et non managées. <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
        <summary>Libère les ressources (autres que la mémoire) utilisées par la minuterie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez <xref:System.Windows.Forms.Timer.Dispose%2A> lorsque vous avez terminé à l’aide de la minuterie. Le <xref:System.Windows.Forms.Timer.Dispose%2A> méthode rend la minuterie dans un état inutilisable. Après avoir appelé <xref:System.Windows.Forms.Timer.Dispose%2A>, vous devez libérer toutes les références à la minuterie afin que la mémoire occupée puisse être récupérée par le garbage collection.  
  
> [!NOTE]
>  Appelez toujours <xref:System.Windows.Forms.Timer.Dispose%2A> avant de libérer votre dernière référence à la minuterie. Dans le cas contraire, les ressources utilisées par la minuterie ne seront pas libérées tant que le garbage collection appelle le destructeur de l’objet timer.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit si la minuterie est en cours d'exécution.</summary>
        <value>
          <see langword="true" /> si la minuterie est activée ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le minuteur n’est pas soumis au garbage collection lorsque la valeur est `true`.  
  
 Appel de la <xref:System.Windows.Forms.Timer.Start%2A> méthode est le même que le paramètre <xref:System.Windows.Forms.Timer.Enabled%2A> à `true`. De même, l’appel du <xref:System.Windows.Forms.Timer.Stop%2A> méthode est le même que le paramètre <xref:System.Windows.Forms.Timer.Enabled%2A> à `false`.  
  
   
  
## Examples  
 L’exemple suivant implémente une minuterie simple qui déclenche une alarme toutes les cinq secondes. Lorsque l’alerte se produit, un <xref:System.Windows.Forms.MessageBox> affiche le nombre de fois où l’alarme a démarré et qu’il demande à l’utilisateur si la minuterie doit continuer à s’exécuter.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public int Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Interval { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : int with get, set" Usage="System.Windows.Forms.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'heure, en millisecondes, avant le déclenchement de l'événement <see cref="E:System.Windows.Forms.Timer.Tick" /> par rapport à la dernière occurrence de l'événement <see cref="E:System.Windows.Forms.Timer.Tick" />.</summary>
        <value>
          <see cref="T:System.Int32" /> qui spécifie le nombre de millisecondes avant le déclenchement de l'événement <see cref="E:System.Windows.Forms.Timer.Tick" /> par rapport à la dernière occurrence de l'événement <see cref="E:System.Windows.Forms.Timer.Tick" />. La valeur ne peut pas être inférieure à 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour obtenir le nombre de secondes dans l’intervalle, divisez ce nombre par 1 000.  
  
   
  
## Examples  
 L’exemple de code suivant implémente une minuterie simple qui déclenche une alarme toutes les cinq secondes. Lorsque l’alerte se produit, un <xref:System.Windows.Forms.MessageBox> affiche le nombre de fois où l’alarme a démarré et qu’il demande à l’utilisateur si la minuterie doit continuer à s’exécuter.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTick">
      <MemberSignature Language="C#" Value="protected virtual void OnTick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTick : EventArgs -&gt; unit&#xA;override this.OnTick : EventArgs -&gt; unit" Usage="timer.OnTick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement. Il s'agit toujours de <see cref="F:System.EventArgs.Empty" />.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Timer.Tick" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée pour chaque cycle d’horloge. Il appelle les méthodes qui sont ajoutés via <xref:System.Windows.Forms.Timer.Tick>. Si vous héritez de <xref:System.Windows.Forms.Timer>, vous pouvez substituer cette méthode.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> dans une classe dérivée, assurez-vous que vous appelez la classe de base <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> (méthode).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Démarre la minuterie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez également démarrer la minuterie en définissant le <xref:System.Windows.Forms.Timer.Enabled%2A> propriété `true`.  
  
   
  
## Examples  
 L’exemple de code suivant implémente une minuterie simple qui déclenche une alarme toutes les cinq secondes. Lorsque l’alerte se produit, un <xref:System.Windows.Forms.MessageBox> affiche le nombre de fois où l’alarme a démarré et qu’il demande à l’utilisateur si la minuterie doit continuer à s’exécuter.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arrête la minuterie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez également arrêter le minuteur en définissant le <xref:System.Windows.Forms.Timer.Enabled%2A> propriété `false`. A <xref:System.Windows.Forms.Timer> objet peut être activé et désactivé plusieurs fois dans la même session d’application.  
  
 Appel de <xref:System.Windows.Forms.Timer.Start%2A> une fois que vous avez désactivé un <xref:System.Windows.Forms.Timer> en appelant <xref:System.Windows.Forms.Timer.Stop%2A> entraîne le <xref:System.Windows.Forms.Timer> pour reprendre l’intervalle interrompu. Si votre <xref:System.Windows.Forms.Timer> est défini pour un intervalle de 5 000 millisecondes, et que vous appelez <xref:System.Windows.Forms.Timer.Stop%2A> à environ 3000 millisecondes, en appelant <xref:System.Windows.Forms.Timer.Start%2A> entraîne la <xref:System.Windows.Forms.Timer> d’attente de 5 000 millisecondes avant de déclencher la <xref:System.Windows.Forms.Timer.Tick> événement.  
  
> [!NOTE]
>  Appel d’arrêt sur n’importe quel <xref:System.Windows.Forms.Timer> dans les Windows Forms application peut entraîner des messages à partir d’autres <xref:System.Windows.Forms.Timer> composants dans l’application pour être traité immédiatement, car tous les <xref:System.Windows.Forms.Timer> composants fonctionnent sur le thread d’application principal. Si vous avez deux <xref:System.Windows.Forms.Timer> composants, la valeur 700 millisecondes et une valeur 500 millisecondes, et que vous appelez <xref:System.Windows.Forms.Timer.Stop%2A> sur le premier <xref:System.Windows.Forms.Timer>, votre application peut recevoir en premier un rappel d’événement pour le second composant. Si cela pose problème, envisagez d’utiliser le <xref:System.Threading.Timer> classe dans le <xref:System.Threading> espace de noms à la place.  
  
   
  
## Examples  
 L’exemple de code suivant implémente une minuterie simple qui déclenche une alarme toutes les cinq secondes. Lorsque l’alerte se produit, un <xref:System.Windows.Forms.MessageBox> affiche le nombre de fois où l’alarme a démarré et qu’il demande à l’utilisateur si la minuterie doit continuer à s’exécuter.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Timer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une chaîne arbitraire représentant un certain type d'état d'utilisateur.</summary>
        <value>Chaîne arbitraire représentant un certain type d'état d'utilisateur.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Timer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'intervalle spécifié est écoulé et que la minuterie est activée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelant le <xref:System.Diagnostics.Debug.Assert%2A> méthode sur le <xref:System.Diagnostics.Debug> classe à partir la <xref:System.Windows.Forms.Timer.Tick> événement peut ne pas fonctionner comme prévu, les en tant que l’affichage de la boîte de dialogue d’assertion, boîte peut-être provoquer Windows déclencher le <xref:System.Windows.Forms.Timer.Tick> événement à plusieurs reprises. Nous vous recommandons d’éviter de tester les assertions dans cet événement et d’utiliser le <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, ou <xref:System.Diagnostics.Debug.WriteLineIf%2A> méthodes à la place.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant implémente une minuterie simple qui déclenche une alarme toutes les cinq secondes. Lorsque l’alerte se produit, un <xref:System.Windows.Forms.MessageBox> affiche le nombre de fois où l’alarme a démarré et qu’il demande à l’utilisateur si la minuterie doit continuer à s’exécuter.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="timer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une chaîne qui représente <see cref="T:System.Windows.Forms.Timer" />.</summary>
        <returns>Chaîne qui représente le <see cref="T:System.Windows.Forms.Timer" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.Timer.ToString%2A> méthode retourne une chaîne qui inclut la valeur de la <xref:System.Windows.Forms.Timer.Interval%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>