<Type Name="LabelEditEventArgs" FullName="System.Windows.Forms.LabelEditEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ac0c1a4d06a43e8a9959887a2b0b0779f1ffa38d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39978960" /></Metadata><TypeSignature Language="C#" Value="public class LabelEditEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LabelEditEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.LabelEditEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LabelEditEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LabelEditEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LabelEditEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des données pour les événements <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> et <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.LabelEditEventArgs> Spécifie l’index et la légende d’un <xref:System.Windows.Forms.ListViewItem> et la légende après qu’elle a été modifié par l’utilisateur. Cette classe fournit également un <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> propriété. Vous pouvez utiliser cette propriété dans un <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> Gestionnaire d’événements pour empêcher l’utilisateur de modifier l’étiquette. Vous pouvez également l’utiliser dans un <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> Gestionnaire d’événements pour annuler la modification, en retournant l’étiquette à sa valeur d’origine. Cela est utile lorsque vous souhaitez valider l’entrée utilisateur avant de valider la modification.  
  
> [!NOTE]
>  Étant donné que le <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> événement intervient avant la modification de l’étiquette est validée, l’appel la <xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType> méthode dans un gestionnaire pour cet événement sera tri de l’élément à l’aide de la valeur d’origine.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la gestion du <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> événement et à l’aide de la <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> et <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> propriétés. Pour exécuter l’exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.ListView> contrôle nommé `ListView1` et rempli avec au moins 3 éléments. Vérifiez que tous les événements sont associés à leurs méthodes de gestion des événements.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListView" />
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
    <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.LabelEditEventArgs" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LabelEditEventArgs (int item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LabelEditEventArgs(int item);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LabelEditEventArgs : int -&gt; System.Windows.Forms.LabelEditEventArgs" Usage="new System.Windows.Forms.LabelEditEventArgs item" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">Index de base zéro de <see cref="T:System.Windows.Forms.ListViewItem" />, contenant l'étiquette à modifier.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> avec l'index spécifié de <see cref="T:System.Windows.Forms.ListViewItem" /> en vue d'une modification.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser ce constructeur lors du déclenchement de la <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> ou <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> événement en cours d’exécution pour spécifier un élément de liste spécifique dans le <xref:System.Windows.Forms.ListView> à modifier.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LabelEditEventArgs (int item, string label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 item, string label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item As Integer, label As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LabelEditEventArgs(int item, System::String ^ label);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LabelEditEventArgs : int * string -&gt; System.Windows.Forms.LabelEditEventArgs" Usage="new System.Windows.Forms.LabelEditEventArgs (item, label)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="item" Type="System.Int32" />
        <Parameter Name="label" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="item">Index de base zéro de <see cref="T:System.Windows.Forms.ListViewItem" />, contenant l'étiquette à modifier.</param>
        <param name="label">Nouveau texte assigné à l'étiquette de <see cref="T:System.Windows.Forms.ListViewItem" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> avec l'index spécifié de <see cref="T:System.Windows.Forms.ListViewItem" /> qui est en train d'être modifié et le nouveau texte pour l'étiquette de <see cref="T:System.Windows.Forms.ListViewItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser ce constructeur lors du déclenchement de la <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> ou <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> événement en cours d’exécution pour spécifier un élément de liste dans le <xref:System.Windows.Forms.ListView> à modifier. Le constructeur vous permet également de spécifier le nouveau texte associé à l’étiquette de la <xref:System.Windows.Forms.ListViewItem>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public bool CancelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property CancelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancelEdit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CancelEdit : bool with get, set" Usage="System.Windows.Forms.LabelEditEventArgs.CancelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les modifications apportées à l'étiquette de <see cref="T:System.Windows.Forms.ListViewItem" /> doivent être annulées.</summary>
        <value><see langword="true" /> si l'opération de modification de l'étiquette pour <see cref="T:System.Windows.Forms.ListViewItem" /> doit être annulée ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette propriété pour annuler les modifications apportées à l’étiquette d’un <xref:System.Windows.Forms.ListViewItem> et restaurer son texte d’origine. Utilisez cette propriété pour empêcher la légende d’un élément à partir d’une valeur qui ne répond pas aux exigences de votre application en cours de modification.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la gestion du <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> événement et à l’aide de la <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> et <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> propriétés. Pour exécuter l’exemple, collez le code suivant dans un formulaire contenant un contrôle ListView nommé ListView1 et rempli avec au moins 3 éléments. Vérifiez que tous les événements sont associés à leurs méthodes de gestion des événements.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public int Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Item" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.Item" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Item { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Item : int" Usage="System.Windows.Forms.LabelEditEventArgs.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'index de base zéro de <see cref="T:System.Windows.Forms.ListViewItem" />, contenant l'étiquette à modifier.</summary>
        <value>Index de base zéro de <see cref="T:System.Windows.Forms.ListViewItem" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre la gestion du <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> événement et à l’aide de la <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> et <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> propriétés. Pour exécuter l’exemple, collez le code suivant dans un formulaire contenant un contrôle ListView nommé ListView1 et rempli avec au moins 3 éléments. Vérifiez que tous les événements sont associés à leurs méthodes de gestion des événements.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.Label" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Label : string" Usage="System.Windows.Forms.LabelEditEventArgs.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nouveau texte assigné à l'étiquette de <see cref="T:System.Windows.Forms.ListViewItem" />.</summary>
        <value>Le nouveau texte à associer au <see cref="T:System.Windows.Forms.ListViewItem" /> ou <see langword="null" /> si le texte est inchangé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements des rapports sur l’occurrence de la <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un multiligne <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.ListView> nommé `ListView1`. Puis vous assurer que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#463](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#463)]
 [!code-vb[System.Windows.Forms.EventExamples#463](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#463)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>