<Type Name="ContainerControl" FullName="System.Windows.Forms.ContainerControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3a7dadb514f0520d08b7dd706963b46dfae309e9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30640453" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ContainerControl : System.Windows.Forms.ScrollableControl, System.Windows.Forms.IContainerControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContainerControl extends System.Windows.Forms.ScrollableControl implements class System.Windows.Forms.IContainerControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ContainerControl" />
  <TypeSignature Language="VB.NET" Value="Public Class ContainerControl&#xA;Inherits ScrollableControl&#xA;Implements IContainerControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContainerControl : System::Windows::Forms::ScrollableControl, System::Windows::Forms::IContainerControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ScrollableControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IContainerControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit des fonctionnalités de gestion du focus destinées aux contrôles qui peuvent fonctionner comme conteneurs pour d'autres contrôles.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.ContainerControl> représente un contrôle qui peut fonctionner comme un conteneur pour d’autres contrôles et fournit la gestion du focus. Les contrôles qui héritent de cette classe peuvent de suivre le contrôle actif qu’ils contiennent, même quand le focus se déplace dans un autre conteneur.  
  
 <xref:System.Windows.Forms.ContainerControl> objets fournissent une limite logique pour les contrôles de contenu. Le contrôle conteneur peut capturer la touche de l’onglet et déplacer le focus vers le contrôle suivant dans la collection.  
  
> [!NOTE]
>  Le contrôle conteneur ne reçoit pas le focus ; le focus est toujours défini sur le premier contrôle enfant dans la collection de contrôles contenus.  
  
 Vous n’héritez généralement pas directement à partir de la <xref:System.Windows.Forms.ContainerControl> classe. <xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.UserControl>, et <xref:System.Windows.Forms.UpDownBase> héritent de classes <xref:System.Windows.Forms.ContainerControl>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.UserControl" />
    <altmember cref="T:System.Windows.Forms.UpDownBase" />
    <altmember cref="T:System.Windows.Forms.IContainerControl" />
    <altmember cref="T:System.Windows.Forms.ScrollableControl" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContainerControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.ContainerControl" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant hérite de la <xref:System.Windows.Forms.ScrollableControl> classe et implémente la <xref:System.Windows.Forms.IContainerControl> interface. L’implémentation est ajoutée à la <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> propriété et la <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> (méthode).  
  
 [!code-cpp[IContainerControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control ActiveControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control ActiveControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.ActiveControl" />
      <MemberSignature Language="VB.NET" Value="Public Property ActiveControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ ActiveControl { System::Windows::Forms::Control ^ get(); void set(System::Windows::Forms::Control ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IContainerControl.ActiveControl</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le contrôle actif sur le contrôle conteneur.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Control" /> qui est actuellement actif sur <see cref="T:System.Windows.Forms.ContainerControl" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> propriété Active ou récupère le contrôle actif sur le contrôle conteneur.  
  
 Afin de recevoir une valeur valide à partir de cette propriété, l’objet qui l’appelle doit contenir ou être contenu dans le contrôle qu’il appelle. Si un formulaire essaie d’appeler un autre formulaire <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> propriétés, il recevra une valeur indéfinie. Dans ce cas, vous devez définir votre propre mécanisme de communication entre les formulaires pour passer ces données.  
  
   
  
## Examples  
 L’exemple de code suivant hérite de la <xref:System.Windows.Forms.ScrollableControl> classe et implémente la <xref:System.Windows.Forms.IContainerControl> interface. L’implémentation est ajoutée à la <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> propriété et la <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> (méthode).  
  
 [!code-cpp[IContainerControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le <see cref="T:System.Windows.Forms.Control" /> assigné n'a pas pu être activé.</exception>
        <altmember cref="T:System.Windows.Forms.ScrollableControl" />
        <altmember cref="T:System.Windows.Forms.Control" />
      </Docs>
    </Member>
    <Member MemberName="AdjustFormScrollbars">
      <MemberSignature Language="C#" Value="protected override void AdjustFormScrollbars (bool displayScrollbars);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AdjustFormScrollbars(bool displayScrollbars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.AdjustFormScrollbars(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub AdjustFormScrollbars (displayScrollbars As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void AdjustFormScrollbars(bool displayScrollbars);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="displayScrollbars" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="displayScrollbars">
          <see langword="true" /> pour afficher les barres de défilement ; sinon, <see langword="false" />.</param>
        <summary>Ajuste les barres de défilement sur le conteneur en fonction des positions actuelles des contrôles et du contrôle sélectionné actuellement.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ScrollableControl.AdjustFormScrollbars(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="AutoScaleDimensions">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF AutoScaleDimensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF AutoScaleDimensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.AutoScaleDimensions" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoScaleDimensions As SizeF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::SizeF AutoScaleDimensions { System::Drawing::SizeF get(); void set(System::Drawing::SizeF value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les dimensions pour lesquelles le contrôle a été conçu.</summary>
        <value>
          <see cref="T:System.Drawing.SizeF" /> contenant la taille en points par pouce ou <see cref="T:System.Drawing.Font" /> pour laquelle le contrôle a été conçu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> propriété représente le paramètre PPP ou de la police de l’écran, que le contrôle a été mis à l’échelle à ou conçu pour. Plus précisément, lors de la conception temps que cette propriété est définie par le Concepteur Windows Forms à la valeur de votre moniteur est actuellement utilisée. Ensuite, lorsque le formulaire est chargé au moment de l’exécution, si le <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> propriété diffère de la <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A>, le <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> méthode sera appelée pour effectuer la mise à l’échelle du contrôle et tous ses enfants. Ensuite, <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> sera mise à jour pour refléter la nouvelle taille de mise à l’échelle.  
  
 Pour plus d’informations sur la mise à l’échelle automatique, consultez [mise à l’échelle automatique dans les Windows Forms](~/docs/framework/winforms/automatic-scaling-in-windows-forms.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La largeur ou la hauteur de la valeur <see cref="T:System.Drawing.SizeF" /> est inférieure à 0 lors de la définition de cette valeur.</exception>
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleFactor" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.PerformAutoScale" />
      </Docs>
    </Member>
    <Member MemberName="AutoScaleFactor">
      <MemberSignature Language="C#" Value="protected System.Drawing.SizeF AutoScaleFactor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF AutoScaleFactor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.AutoScaleFactor" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property AutoScaleFactor As SizeF" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Drawing::SizeF AutoScaleFactor { System::Drawing::SizeF get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le facteur d'échelle entre les dimensions de mise à l'échelle actuelles et les dimensions de mise à l'échelle automatiques au moment du design.</summary>
        <value>
          <see cref="T:System.Drawing.SizeF" /> contenant le rapport de mise à l'échelle entre les dimensions de mise à l'échelle actuelles et les dimensions de mise à l'échelle automatiques au moment du design.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A> propriété représente le facteur d’échelle entre les <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> et <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> propriétés. Cette valeur est calculée lorsque cela est nécessaire. Par exemple, si <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> est (192, 144) et <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> est (96, 96) le <xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A> est (2.0, 1.5).  
  
 Pour plus d’informations sur la mise à l’échelle automatique, consultez [mise à l’échelle automatique dans les Windows Forms](~/docs/framework/winforms/automatic-scaling-in-windows-forms.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleDimensions" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.PerformAutoScale" />
      </Docs>
    </Member>
    <Member MemberName="AutoScaleMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoScaleMode AutoScaleMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AutoScaleMode AutoScaleMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoScaleMode As AutoScaleMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AutoScaleMode AutoScaleMode { System::Windows::Forms::AutoScaleMode get(); void set(System::Windows::Forms::AutoScaleMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoScaleMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le mode de mise à l'échelle automatique du contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.AutoScaleMode" /> qui représente le mode actuel de mise à l'échelle. La valeur par défaut est <see cref="F:System.Windows.Forms.AutoScaleMode.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> propriété spécifie le mode de mise à l’échelle automatique en cours de ce contrôle. Mise à l’échelle par <xref:System.Windows.Forms.AutoScaleMode.Font> est utile si vous souhaitez avoir un contrôle ou un formulaire d’étendre ou réduire en fonction de la taille des polices dans le système d’exploitation et devez être utilisée lorsque la taille absolue de l’écran ou le contrôle n’a pas d’importance. Mise à l’échelle par <xref:System.Windows.Forms.AutoScaleMode.Dpi> est utile lorsque vous souhaitez dimensionner un contrôle ou un formulaire par rapport à l’écran. Par exemple, il pouvez que vous souhaitez utiliser des points par pouce (PPP) mise à l’échelle sur un contrôle affichant un graphique ou un autre graphique afin qu’il occupe toujours un certain pourcentage de l’écran.  
  
 Pour plus d’informations sur la mise à l’échelle automatique, consultez [mise à l’échelle automatique dans les Windows Forms](~/docs/framework/winforms/automatic-scaling-in-windows-forms.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Une valeur <see cref="T:System.Windows.Forms.AutoScaleMode" /> qui n'est pas valide a été utilisée pour définir cette propriété.</exception>
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleFactor" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleDimensions" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.PerformAutoScale" />
      </Docs>
    </Member>
    <Member MemberName="AutoValidate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.AutoValidate AutoValidate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AutoValidate AutoValidate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.AutoValidate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoValidate As AutoValidate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::AutoValidate AutoValidate { System::Windows::Forms::AutoValidate get(); void set(System::Windows::Forms::AutoValidate value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoValidate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les contrôles dans ce conteneur seront validés automatiquement quand le focus changera.</summary>
        <value>Valeur d’énumération <see cref="T:System.Windows.Forms.AutoValidate" /> qui indique si les contrôles contenus sont validés implicitement lors du changement de focus. La valeur par défaut est <see cref="F:System.Windows.Forms.AutoValidate.Inherit" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur par défaut <xref:System.Windows.Forms.ContainerControl.AutoValidate%2A> varient pour chaque contrôle. Pour plus d’informations sur la validation implicite, consultez [Validation d’entrée d’utilisateur dans les Windows Forms](~/docs/framework/winforms/user-input-validation-in-windows-forms.md).  
  
 La définition de cette propriété à une nouvelle valeur déclenchera la <xref:System.Windows.Forms.ContainerControl.AutoValidateChanged> événement.  
  
   
  
## Examples  
 L’exemple de code suivant désactive la validation implicite pour un formulaire et tous ses contrôles contenus et exécute manuellement une validation de tous les enfants du formulaire lorsque vous cliquez sur le bouton de la souris.  
  
 [!code-csharp[ValidateChildren#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidateChildren/CS/Form1.cs#1)]
 [!code-vb[ValidateChildren#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidateChildren/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Une valeur <see cref="T:System.Windows.Forms.AutoValidate" /> qui n'est pas valide a été utilisée pour définir cette propriété.</exception>
        <altmember cref="T:System.Windows.Forms.AutoValidate" />
        <altmember cref="Overload:System.Windows.Forms.ContainerControl.Validate" />
        <altmember cref="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" />
      </Docs>
    </Member>
    <Member MemberName="AutoValidateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoValidateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoValidateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AutoValidateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AutoValidateChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand la propriété <see cref="P:System.Windows.Forms.ContainerControl.AutoValidate" /> change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 <xref:System.Windows.Forms.ContainerControl.AutoValidate%2A>  
  
 <xref:System.Windows.Forms.ContainerControl.OnAutoValidateChanged%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.BindingContext" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BindingContext As BindingContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::BindingContext ^ BindingContext { System::Windows::Forms::BindingContext ^ get(); void set(System::Windows::Forms::BindingContext ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Windows.Forms.BindingContext" /> du contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.BindingContext" /> du contrôle.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.BindingContext" />
      </Docs>
    </Member>
    <Member MemberName="CanEnableIme">
      <MemberSignature Language="C#" Value="protected override bool CanEnableIme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEnableIme" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.CanEnableIme" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CanEnableIme As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool CanEnableIme { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si une valeur active peut être affectée à la propriété <see cref="P:System.Windows.Forms.Control.ImeMode" /> pour activer la prise en charge de l'éditeur de méthode d'entrée (IME).</summary>
        <value>
          <see langword="false" /> dans tous les cas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans le [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] et versions ultérieures, fonctionnalité IME est gérée par l’infrastructure et IME prise en charge native des contrôles individuels est désactivée.  
  
 Un contrôle utilisateur qui dérive de la <xref:System.Windows.Forms.ContainerControl> classe peut activer la prise en charge native des IME en substituant cette propriété pour retourner `true`. Toutefois, l’application est ensuite chargée de vérifier qu’il n’y a aucun conflit entre l’éditeur IME natif et de l’IME Windows Forms. Ce scénario n’est pas pris en charge.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le paramètre de création requis lors de la création du handle du contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.CreateParams" /> qui contient les paramètres de création requis quand le handle du contrôle est créé.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentAutoScaleDimensions">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF CurrentAutoScaleDimensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF CurrentAutoScaleDimensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentAutoScaleDimensions As SizeF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::SizeF CurrentAutoScaleDimensions { System::Drawing::SizeF get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les dimensions actuelles de l'écran à l'exécution.</summary>
        <value>
          <see cref="T:System.Drawing.SizeF" /> contenant la taille actuelle de l'écran en points par pouce ou <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> propriété représente les dimensions de référence sur l’écran actuel. En revanche, le <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A> propriété représente les dimensions de référence de la conception de l’environnement de conception pour le contrôle actuel, tandis que le <xref:System.Windows.Forms.ContainerControl.AutoScaleFactor%2A> propriété est le rapport entre les deux.  
  
 L’interprétation de la valeur de la dimension dépend du <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> propriété comme suit :  
  
-   Si le mode est <xref:System.Windows.Forms.AutoScaleMode.Dpi>, cette propriété représente la résolution de l’écran, en points par pouce.  
  
-   Si le mode est <xref:System.Windows.Forms.AutoScaleMode.Font>, cette propriété représente la taille moyenne de caractère en pixels.  
  
 Si le <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> est définie sur <xref:System.Windows.Forms.AutoScaleMode.None>, <xref:System.Windows.Forms.ContainerControl.CurrentAutoScaleDimensions%2A> a la valeur <xref:System.Windows.Forms.ContainerControl.AutoScaleDimensions%2A>.  
  
 Pour plus d’informations sur la mise à l’échelle automatique, consultez [mise à l’échelle automatique dans les Windows Forms](~/docs/framework/winforms/automatic-scaling-in-windows-forms.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Un contexte de périphérique (Device Context) Win32 n'a pas pu être créé pour l'écran actuel.</exception>
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleFactor" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleDimensions" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.PerformAutoScale" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
        <summary>Libère les ressources non managées utilisées par <see cref="T:System.Windows.Forms.Control" /> et ses contrôles enfants et libère éventuellement les ressources managées.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="OnAutoValidateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoValidateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoValidateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.OnAutoValidateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAutoValidateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAutoValidateChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ContainerControl.OnAutoValidateChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Windows.Forms.ContainerControl.OnAutoValidateChanged(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Windows.Forms.ContainerControl.OnAutoValidateChanged(System.EventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoValidate" />
        <altmember cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateControl">
      <MemberSignature Language="C#" Value="protected override void OnCreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnCreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.OnCreateControl" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnCreateControl ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnCreateControl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Déclenche la méthode <see cref="M:System.Windows.Forms.Control.CreateControl" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCreateControl" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.FontChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modification de la police utilisée par un <xref:System.Windows.Forms.ContainerControl> entraîne la disposition sera recalculée et réappliqué aux contrôles de contenu si le <xref:System.Windows.Forms.ContainerControl.AutoScaleMode%2A> propriété a la valeur <xref:System.Windows.Forms.AutoScaleMode.Font>.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ContainerControl.OnFontChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Windows.Forms.ContainerControl.OnFontChanged(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Windows.Forms.ContainerControl.OnFontChanged(System.EventArgs)" /> méthode afin que les délégués inscrits reçoivent l’événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected override void OnLayout (System.Windows.Forms.LayoutEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnLayout (e As LayoutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnLayout(System::Windows::Forms::LayoutEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.LayoutEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.Layout" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.ParentChanged" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ParentForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form ParentForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form ParentForm" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContainerControl.ParentForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParentForm As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Form ^ ParentForm { System::Windows::Forms::Form ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le formulaire auquel le contrôle conteneur est assigné.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Form" /> auquel le contrôle conteneur est assigné. Cette propriété retourne la valeur Null si le contrôle est hébergé dans Internet Explorer ou dans tout autre contexte d'hébergement où il n'y a pas de formulaire parent.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre comment créer deux formulaires : `Form1` et `Form2`. Définir le <xref:System.Windows.Forms.Form.IsMdiContainer%2A> propriété du `Form1` à `true` et le rendre le <xref:System.Windows.Forms.Form.MdiParent%2A> de `Form2`. Ensuite, créez un bouton, `button1`, sur chaque formulaire. Lorsque vous cliquez sur le bouton du formulaire parent, le Gestionnaire d’événements affiche le formulaire enfant. Lorsque vous cliquez sur le bouton du formulaire enfant, le Gestionnaire d’événements affiche les <xref:System.Windows.Forms.Control.Name%2A> propriété de son formulaire parent. Utiliser les segments de deux fichiers de code suivant pour remplacer `button1` gestionnaires d’événements dans les deux formes.  
  
 [!code-cpp[ParentForm2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ParentForm2/CPP/form1.cpp#1)]
 [!code-csharp[ParentForm2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ParentForm2/CS/form1.cs#1)]
 [!code-vb[ParentForm2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ParentForm2/VB/form1.vb#1)]  
  
 [!code-cpp[ParentForm2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ParentForm2/CPP/form2.cpp#2)]
 [!code-csharp[ParentForm2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ParentForm2/CS/form2.cs#2)]
 [!code-vb[ParentForm2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ParentForm2/VB/form2.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">pour toutes les fenêtres obtenir la valeur de cette propriété. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="PerformAutoScale">
      <MemberSignature Language="C#" Value="public void PerformAutoScale ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformAutoScale() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.PerformAutoScale" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformAutoScale ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformAutoScale();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute une mise à l'échelle du contrôle conteneur et de ses enfants.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un appel explicite à la <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> méthode est généralement requis uniquement après que des modifications par programme à la disposition pendant l’exécution. <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> est appelé implicitement à partir du <xref:System.Windows.Forms.ContainerControl.OnLayout%2A> (méthode).  
  
 <xref:System.Windows.Forms.ContainerControl.PerformAutoScale%2A> est récursif ; chaque contrôle enfant, s’il s’agit d’un conteneur, aura sa version de cette méthode à appeler lorsque la version du conteneur s’exécute.  
  
 Pour plus d’informations sur la mise à l’échelle automatique, consultez [mise à l’échelle automatique dans les Windows Forms](~/docs/framework/winforms/automatic-scaling-in-windows-forms.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Form.AutoScale" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleMode" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoScaleFactor" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">
          <see cref="T:System.Windows.Forms.Message" />, passé par référence, qui représente le message de fenêtre à traiter.</param>
        <param name="keyData">Une des valeurs <see cref="T:System.Windows.Forms.Keys" /> qui représente la touche à traiter.</param>
        <summary>Traite une touche de commande.</summary>
        <returns>
          <see langword="true" /> si le caractère a été traité par le contrôle ; sinon <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogChar">
      <MemberSignature Language="C#" Value="protected override bool ProcessDialogChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessDialogChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ProcessDialogChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessDialogChar (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessDialogChar(char charCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">Caractère à traiter.</param>
        <summary>Traite un caractère de boîte de dialogue.</summary>
        <returns>
          <see langword="true" /> si le caractère a été traité par le contrôle ; sinon <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ProcessDialogKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessDialogKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessDialogKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Une des valeurs <see cref="T:System.Windows.Forms.Keys" /> qui représente la touche à traiter.</param>
        <summary>Traite une touche de boîte de dialogue.</summary>
        <returns>
          <see langword="true" /> si la touche a été traitée par le contrôle ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessMnemonic (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessMnemonic(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ProcessMnemonic(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessMnemonic (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessMnemonic(char charCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">Caractère à traiter.</param>
        <summary>Traite un caractère mnémonique.</summary>
        <returns>
          <see langword="true" /> si le caractère a été traité comme un mnémonique par le contrôle ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessTabKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessTabKey (bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessTabKey(bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ProcessTabKey(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessTabKey (forward As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessTabKey(bool forward);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forward">
          <see langword="true" /> pour parcourir un à un les contrôles de <see cref="T:System.Windows.Forms.ContainerControl" /> ; sinon, <see langword="false" />.</param>
        <summary>Sélectionne le contrôle suivant disponible et en fait le contrôle actif.</summary>
        <returns>
          <see langword="true" /> si un contrôle est sélectionné ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un contrôle avec son <xref:System.Windows.Forms.Control.TabStop%2A> propriété `false` ne peut pas être sélectionné, de sorte que le contrôle suivant disponible est sélectionné.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="protected override void Select (bool directed, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Select(bool directed, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.Select(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Select (directed As Boolean, forward As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Select(bool directed, bool forward);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directed" Type="System.Boolean" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="directed">
          <see langword="true" /> pour spécifier la direction du contrôle à sélectionner ; sinon, <see langword="false" />.</param>
        <param name="forward">
          <see langword="true" /> pour se déplacer vers le bas dans l'ordre de tabulation ; <see langword="false" /> pour se déplacer vers le haut dans l'ordre de tabulation.</param>
        <summary>Active un contrôle enfant. Spécifie éventuellement la direction de l'ordre de tabulation pour sélectionner le contrôle.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IContainerControl.ActivateControl">
      <MemberSignature Language="C#" Value="bool IContainerControl.ActivateControl (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Forms.IContainerControl.ActivateControl(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.System#Windows#Forms#IContainerControl#ActivateControl(System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Forms.IContainerControl.ActivateControl(System::Windows::Forms::Control ^ control) = System::Windows::Forms::IContainerControl::ActivateControl;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IContainerControl.ActivateControl(System.Windows.Forms.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">
          <see cref="T:System.Windows.Forms.Control" /> à activer.</param>
        <summary>Active le contrôle spécifié.</summary>
        <returns>
          <see langword="true" /> si l'activation du contrôle réussit ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `control` paramètre doit être un enfant du contrôle conteneur.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment hériter de la <xref:System.Windows.Forms.ScrollableControl> classe et implémenter la <xref:System.Windows.Forms.IContainerControl> interface. L’implémentation est ajoutée à la <xref:System.Windows.Forms.IContainerControl.ActiveControl%2A> propriété et la <xref:System.Windows.Forms.IContainerControl.ActivateControl%2A> (méthode).  
  
 [!code-cpp[IContainerControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IContainerControl Implementation/CPP/mycontainercontrol.cpp#1)]
 [!code-csharp[IContainerControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IContainerControl Implementation/CS/mycontainercontrol.cs#1)]
 [!code-vb[IContainerControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IContainerControl Implementation/VB/mycontainercontrol.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ContainerControl.ActiveControl" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultButton">
      <MemberSignature Language="C#" Value="protected virtual void UpdateDefaultButton ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UpdateDefaultButton() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.UpdateDefaultButton" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub UpdateDefaultButton ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void UpdateDefaultButton();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution par une classe dérivée, met à jour le bouton qui est le bouton par défaut.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ContainerControl> classe ne fournit pas d’implémentation pour la <xref:System.Windows.Forms.ContainerControl.UpdateDefaultButton%2A> (méthode). Les classes qui héritent de cette méthode doivent implémenter <xref:System.Windows.Forms.ContainerControl.UpdateDefaultButton%2A> pour mettre à jour le bouton par défaut.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Vérifie la valeur du contrôle qui perd le focus et, en conséquence, les événements <see cref="E:System.Windows.Forms.Control.Validating" /> et <see cref="E:System.Windows.Forms.Control.Validated" /> se produisent, dans cet ordre.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public bool Validate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Validate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.Validate" />
      <MemberSignature Language="VB.NET" Value="Public Function Validate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Validate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Vérifie la valeur du contrôle qui perd le focus et, en conséquence, les événements <see cref="E:System.Windows.Forms.Control.Validating" /> et <see cref="E:System.Windows.Forms.Control.Validated" /> se produisent, dans cet ordre.</summary>
        <returns>
          <see langword="true" /> si la validation réussit ; sinon, <see langword="false" />. Si cette méthode est appelée à partir des gestionnaires d’événements <see cref="E:System.Windows.Forms.Control.Validating" /> ou <see cref="E:System.Windows.Forms.Control.Validated" />, elle retourne toujours <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ContainerControl.Validate%2A> méthode valide le dernier contrôle enfant qui n’est pas validé et ses ancêtres jusqu’à, mais le contrôle conteneur actuel non compris. Cette version surchargée exécute toujours la validation, quelle que soit la valeur de la <xref:System.Windows.Forms.ContainerControl.AutoValidate%2A> propriété du parent du contrôle. Par conséquent, utilisez-la pour forcer la validation sans condition.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ContainerControl.ValidateChildren" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoValidate" />
        <altmember cref="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public bool Validate (bool checkAutoValidate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Validate(bool checkAutoValidate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.Validate(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Validate (checkAutoValidate As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Validate(bool checkAutoValidate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="checkAutoValidate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="checkAutoValidate">Si <see langword="true" />, la valeur de la propriété <see cref="P:System.Windows.Forms.ContainerControl.AutoValidate" /> est utilisée pour déterminer si la validation doit être effectuée ; si <see langword="false" />, la validation est effectuée sans conditions.</param>
        <summary>Vérifie la valeur du contrôle qui perd le focus; dépendant de façon conditionnelle de l'activation ou non de la validation automatique.</summary>
        <returns>
          <see langword="true" /> si la validation réussit ; sinon, <see langword="false" />. Si cette méthode est appelée à partir des gestionnaires d’événements <see cref="E:System.Windows.Forms.Control.Validating" /> ou <see cref="E:System.Windows.Forms.Control.Validated" />, elle retourne toujours <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ContainerControl.Validate%2A> méthode valide le dernier contrôle enfant qui n’est pas validé et ses ancêtres jusqu’à, mais le contrôle conteneur actuel non compris. Cette version surchargée exécute la validation basée sur les conditions suivantes :  
  
-   Si le `checkAutoValidate` paramètre est `true`, validation se produit toujours pour les contrôles enfants qui ne sont pas validées.  
  
-   Si le `checkAutoValidate` paramètre est `false`, la validation se produit uniquement si le <xref:System.Windows.Forms.ContainerControl.AutoValidate%2A> propriété du parent du contrôle est activée.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ContainerControl.AutoValidate" />
        <altmember cref="M:System.Windows.Forms.ContainerControl.ValidateChildren(System.Windows.Forms.ValidationConstraints)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.ContainerControl.AutoValidateChanged" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateChildren">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Provoque la validation des données de tous les contrôles enfants d’un contrôle qui prennent en charge la validation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateChildren">
      <MemberSignature Language="C#" Value="public virtual bool ValidateChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ValidateChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ValidateChildren" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateChildren () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ValidateChildren();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provoque la validation des données de tous les contrôles enfants d’un contrôle qui prennent en charge la validation.</summary>
        <returns>
          <see langword="true" /> si la validation de tous les enfants est réussie ; sinon, <see langword="false" />. Si cette méthode est appelée à partir des gestionnaires d’événements <see cref="E:System.Windows.Forms.Control.Validating" /> ou <see cref="E:System.Windows.Forms.Control.Validated" />, elle retourne toujours <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> descendra la hiérarchie d’un contrôle et examiner chaque contrôle pour voir si elle prend en charge la validation. Si le contrôle peut être sélectionné par l’utilisateur et son <xref:System.Windows.Forms.Control.CausesValidation%2A> propriété `true`, <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> entraîne la <xref:System.Windows.Forms.Control.Validating> événement se produise. Si chacun des contrôles annule le <xref:System.Windows.Forms.Control.Validating> événement, cette méthode retournera `false`; sinon, elle retournera `true`.  
  
 Si un contrôle est lié à une source de données et le <xref:System.Windows.Forms.Control.Validating> événement se produit, elle entraîne le contrôle à remettre ses données en cours à la source de données.  
  
 Appel de <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> équivaut à appeler la méthode <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> avec un <xref:System.Windows.Forms.ValidationConstraints> de <xref:System.Windows.Forms.ValidationConstraints.None>.  
  
   
  
## Examples  
 L’exemple de code suivant désactive la validation implicite pour un formulaire et tous ses contrôles contenus et exécute manuellement une validation de tous les enfants du formulaire lorsque vous cliquez sur le bouton de la souris.  
  
 [!code-csharp[ValidateChildren#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidateChildren/CS/Form1.cs#1)]
 [!code-vb[ValidateChildren#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidateChildren/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateChildren">
      <MemberSignature Language="C#" Value="public virtual bool ValidateChildren (System.Windows.Forms.ValidationConstraints validationConstraints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ValidateChildren(valuetype System.Windows.Forms.ValidationConstraints validationConstraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.ValidateChildren(System.Windows.Forms.ValidationConstraints)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ValidateChildren(System::Windows::Forms::ValidationConstraints validationConstraints);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validationConstraints" Type="System.Windows.Forms.ValidationConstraints" />
      </Parameters>
      <Docs>
        <param name="validationConstraints">Place des restrictions sur les contrôles dont l’événement <see cref="E:System.Windows.Forms.Control.Validating" /> est déclenché.</param>
        <summary>Provoque la validation des données de tous les contrôles enfants d’un contrôle qui prennent en charge la validation.</summary>
        <returns>
          <see langword="true" /> si la validation de tous les enfants est réussie ; sinon, <see langword="false" />. Si cette méthode est appelée à partir des gestionnaires d’événements <see cref="E:System.Windows.Forms.Control.Validating" /> ou <see cref="E:System.Windows.Forms.Control.Validated" />, elle retourne toujours <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> examine tous les enfants du contrôle actuel, à l’origine de la <xref:System.Windows.Forms.Control.Validating> événement se produit sur un contrôle, si elle répond aux critères décrits par <xref:System.Windows.Forms.ValidationConstraints>.  
  
 Vous pouvez utiliser plusieurs <xref:System.Windows.Forms.ValidationConstraints> paramètres à la fois en les combinant avec un opérateur OR au niveau du bit. Combinaison de paramètres avec un opérateur de bits OR provoquera une opération AND logique. Par exemple, l’appel `ValidateChildren(ValidationConstraints.ImmediateChildren | ValidationConstraints.Enabled)` déclenchera seulement le <xref:System.Windows.Forms.Control.Validating> événements sur des contrôles qui sont les enfants immédiats du conteneur et activés.  
  
 Quel que soit les paramètres que vous spécifiez pour cette méthode, un contrôle doit avoir son <xref:System.Windows.Forms.Control.CausesValidation%2A> propriété la valeur `true` afin que ses <xref:System.Windows.Forms.Control.Validating> événement se produise. Vous devez également définir le <xref:System.Windows.Forms.ContainerControl.AutoValidate%2A> propriété du contrôle ou du conteneur du contrôle à `false` si vous souhaitez que la validation doit se produire uniquement lorsque vous appelez <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A>, et pas lorsque l’utilisateur déplace le focus du contrôle.  
  
 Si un contrôle est lié à une source de données et le <xref:System.Windows.Forms.Control.Validating> événement se produit, elle entraîne le contrôle à remettre ses données en cours à la source de données.  
  
 Vous ne pouvez pas obtenir l’effet inverse d’un <xref:System.Windows.Forms.ValidationConstraints> paramètre en appliquant un opérateur de négation au niveau du bit. Par exemple, si vous fournissez la valeur négative de la <xref:System.Windows.Forms.ValidationConstraints.Visible> au champ <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A>, cela ne validera pas tous les enfants qui ne sont pas visibles sur le conteneur. Tout paramètre négatif fourni à <xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A> n’a aucun effet sur le conteneur ou ses enfants.  
  
   
  
## Examples  
 L’exemple de code suivant provoquera uniquement le <xref:System.Windows.Forms.Control.Validating> événement pour les enfants immédiats du formulaire dont <xref:System.Windows.Forms.Control.Enabled%2A> propriété est `true`.  
  
 [!code-csharp[ValidateChildrenWithConstraints#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidateChildrenWithConstraints/CS/Form1.cs#1)]
 [!code-vb[ValidateChildrenWithConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidateChildrenWithConstraints/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContainerControl.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <see cref="T:System.Windows.Forms.Message" /> Windows à traiter.</param>
        <summary>Traite les messages Windows.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>