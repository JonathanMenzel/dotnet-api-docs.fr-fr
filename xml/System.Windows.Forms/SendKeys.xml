<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata><Meta Name="ms.openlocfilehash" Value="928cd476312384e2f7d1033542661ae526636e6f" /><Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/09/2018" /><Meta Name="ms.locfileid" Value="51310792" /></Metadata><TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des méthodes permettant d'envoyer des séquences de touches à une application</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez <xref:System.Windows.Forms.SendKeys> pour envoyer des séquences de touches et combinaisons à l’application active de la frappe. Cette classe ne peut pas être instanciée. Pour envoyer une séquence de touches à une classe et poursuivre immédiatement le flux de votre programme, utilisez <xref:System.Windows.Forms.SendKeys.Send%2A>. Pour attendre tous les processus démarrés par la séquence de touches, utilisez <xref:System.Windows.Forms.SendKeys.SendWait%2A>.  
  
 Chaque clé est représentée par un ou plusieurs caractères. Pour spécifier un seul caractère du clavier, utilisez le caractère lui-même. Par exemple, pour représenter la lettre A, passez la chaîne « A » à la méthode. Pour représenter plusieurs caractères, ajoutez chaque caractère supplémentaire à celle qui précèdent. Pour représenter les lettres A, B et C, spécifiez le paramètre en tant que « ABC ».  
  
 Signe plus (+), signe insertion (^), signe de pourcentage (%), tilde (~), les parenthèses () ont des significations spéciales pour <xref:System.Windows.Forms.SendKeys>. Pour spécifier un de ces caractères, placez-le entre accolades ({}). Par exemple, pour spécifier le signe plus, utilisez {+} ». Pour spécifier les caractères d’accolade, utilisez « {{}« et »{}} ». Crochets ([]) n’ont aucune signification spéciale pour <xref:System.Windows.Forms.SendKeys>, mais vous devez les placer entre accolades. Dans d’autres applications, ils ont une signification spéciale qui peut être importante lorsque l’échange dynamique de données (DDE) se produit.  
  
> [!CAUTION]
>  Si votre application est prévue pour une utilisation internationale avec différents claviers, l'utilisation de <xref:System.Windows.Forms.SendKeys.Send%2A> peut produire des résultats imprévisibles et doit être évitée.  
  
 Pour spécifier des caractères qui ne sont pas affichées lorsque vous appuyez sur une touche, telles que l’entrée ou de tabulation et de clés qui représentent des actions plutôt que des caractères, utilisez les codes dans le tableau suivant.  
  
|Touche|Code|  
|---------|----------|  
|RETOUR ARRIÈRE|{Retour arrière}, {BS,} ou {RET}|  
|BREAK|SAUT DE {}|  
|VERR. MAJ|{CAPSLOCK}|  
|Suppr ou DELETE|{SUPPRIMER} ou {Suppr}|  
|BAS|{BAS}|  
|FIN|{FIN}|  
|ENTRÉE|{ENTER} ou ~|  
|ÉCHAP|{ÉCHAP}|  
|AIDE|{HELP}|  
|ORIGINE|{ACCUEIL}|  
|INS ou INSERT|{Insérer le} ou {INS}|  
|GAUCHE|{LEFT}|  
|VERR. NUM|{NUM}|  
|Page suivante|{PG. SUIV}|  
|Page précédente|{PG PRÉC.}|  
|IMPR. ÉCRAN|{PRTSC} (réservé pour une utilisation ultérieure)|  
|DROITE|{RIGHT}|  
|ARRÊT DÉFIL|{ARRÊT DÉFIL}|  
|TAB|{TAB}|  
|HAUT|{DISTANCE}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Addition du pavé numérique|{ADD}|  
|Soustraction du pavé numérique|{SOUSTRAIRE}|  
|Multiplication du pavé numérique|{MULTIPLIER}|  
|Division du pavé numérique|{DIVISION}|  
  
 Pour spécifier des touches combinées avec n’importe quelle combinaison de MAJ, CTRL et ALT enfoncées, faites précéder le code de touche avec un ou plusieurs des codes suivants.  
  
|Touche|Code|  
|---------|----------|  
|MAJ|+|  
|CTRL|^|  
|ALT|%|  
  
 Pour spécifier que n’importe quelle combinaison des touches MAJ, CTRL et ALT doit être maintenu enfoncé tandis que d’autres touches sont utilisées, mettez le code pour ces clés entre parenthèses. Par exemple, pour la touche la touche MAJ ENFONCÉE pendant que E et C sont utilisées, indiquez « + (EC) ». Pour maintenez la touche MAJ ENFONCÉE et E est enfoncé, suivie de C sans MAJ, indiquez « + EC ».  
  
 Pour spécifier des clés extensibles, utilisez la forme {touche nombre}. Vous devez placer un espace entre la clé et le nombre. Par exemple, {LEFT 42} signifie appuyez sur la touche GAUCHE 42 fois. {h 10} indique que la touche que h 10 fois.  
  
> [!NOTE]
>  Comme il n’existe aucune méthode managée permettant d’activer une autre application, vous pouvez utiliser cette classe dans l’application actuelle ou utiliser les méthodes Windows natives, telles que `FindWindow` et `SetForegroundWindow`, pour forcer le focus sur d’autres applications.  
  
> [!NOTE]
>  La classe <xref:System.Windows.Forms.SendKeys> a été mise à jour pour .NET Framework 3.0 pour pouvoir être utilisée dans les applications qui s'exécutent sur Windows Vista. La sécurité renforcée de Windows Vista (également appelée Contrôle de compte d'utilisateur) empêche le fonctionnement correcte de l'implémentation précédente.  
>   
>  La classe <xref:System.Windows.Forms.SendKeys> est vulnérable aux problèmes de synchronisation, que certains développeurs ont dû contourner. L'implémentation mise à jour est toujours vulnérable aux problèmes de synchronisation, mais est légèrement plus rapide et peut nécessiter certaines modifications des solutions de contournement. La classe <xref:System.Windows.Forms.SendKeys> tente d'abord d'utiliser l'implémentation précédente et, en cas d'échec, utilise la nouvelle implémentation. Ainsi, la classe <xref:System.Windows.Forms.SendKeys> peut se comporter différemment sur différents systèmes d'exploitation. En outre, quand la classe <xref:System.Windows.Forms.SendKeys> utilise la nouvelle implémentation, la méthode <xref:System.Windows.Forms.SendKeys.SendWait%2A> n'attend pas que les messages soient traités quand ils sont envoyés à un autre processus.  
>   
>  Si votre application repose sur un comportement cohérent indépendamment du système d'exploitation, vous pouvez forcer la classe <xref:System.Windows.Forms.SendKeys> à utiliser la nouvelle implémentation en ajoutant le paramètre d'application suivant à votre fichier app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Pour forcer la classe <xref:System.Windows.Forms.SendKeys> à utiliser l'implémentation précédente, utilisez plutôt la valeur `"JournalHook"` .  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de la méthode <xref:System.Windows.Forms.SendKeys.Send%2A>. Pour exécuter l’exemple, collez le code suivant dans un formulaire nommé Form1 contenant un bouton nommé Button1. Vérifiez que les événements click sont associés à leurs méthodes de gestion des événements dans cet exemple. Le contrôle bouton <xref:System.Windows.Forms.Control.TabIndex%2A> propriété doit être définie sur 0. Lorsque l’exemple est en cours d’exécution, double-cliquez sur le formulaire pour déclencher click du bouton événements.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Traite tous les messages Windows présents dans la file d'attente de messages.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez <xref:System.Windows.Forms.SendKeys.Flush%2A> d’attente de l’application de traiter les séquences de touches et autres messages du système d’exploitation qui se trouvent dans la file d’attente. Cela équivaut à appeler <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> jusqu'à ce qu’aucune clé plus à traiter.  
  
> [!NOTE]
>  Comme il n’existe aucune méthode managée permettant d’activer une autre application, vous pouvez utiliser cette classe dans l’application actuelle ou utiliser les méthodes Windows natives, telles que `FindWindow` et `SetForegroundWindow`, pour forcer le focus sur d’autres applications.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Chaîne de séquences de touches à envoyer.</param>
        <summary>Envoie des séquences de touches à l'application active.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque clé est représentée par un ou plusieurs caractères. Pour spécifier un seul caractère du clavier, utilisez le caractère lui-même. Par exemple, pour représenter la lettre A, passez la chaîne « A » à la méthode. Pour représenter plusieurs caractères, ajoutez chaque caractère supplémentaire à celle qui précèdent. Pour représenter les lettres A, B et C, spécifiez le paramètre en tant que « ABC ».  
  
 Signe plus (+), signe insertion (^), signe de pourcentage (%), tilde (~), les parenthèses () ont des significations spéciales pour <xref:System.Windows.Forms.SendKeys>. Pour spécifier un de ces caractères, placez-le entre accolades ({}). Par exemple, pour spécifier le signe plus, utilisez {+} ». Pour spécifier les caractères d’accolade, utilisez « {{}« et »{}} ». Crochets ([]) n’ont aucune signification spéciale pour <xref:System.Windows.Forms.SendKeys>, mais vous devez les placer entre accolades. Dans d’autres applications, ils ont une signification spéciale qui peut être importante lorsque l’échange dynamique de données (DDE) se produit.  
  
> [!CAUTION]
>  Si votre application est prévue pour une utilisation internationale avec différents claviers, l'utilisation de <xref:System.Windows.Forms.SendKeys.Send%2A> peut produire des résultats imprévisibles et doit être évitée.  
  
 Pour spécifier des caractères qui ne sont pas affichées lorsque vous appuyez sur une touche, telles que l’entrée ou de tabulation et de clés qui représentent des actions plutôt que des caractères, utilisez les codes dans le tableau suivant.  
  
|Touche|Code|  
|---------|----------|  
|RETOUR ARRIÈRE|{Retour arrière}, {BS,} ou {RET}|  
|BREAK|SAUT DE {}|  
|VERR. MAJ|{CAPSLOCK}|  
|Suppr ou DELETE|{SUPPRIMER} ou {Suppr}|  
|BAS|{BAS}|  
|FIN|{FIN}|  
|ENTRÉE|{ENTER} ou ~|  
|ÉCHAP|{ÉCHAP}|  
|AIDE|{HELP}|  
|ORIGINE|{ACCUEIL}|  
|INS ou INSERT|{Insérer le} ou {INS}|  
|GAUCHE|{LEFT}|  
|VERR. NUM|{NUM}|  
|Page suivante|{PG. SUIV}|  
|Page précédente|{PG PRÉC.}|  
|IMPR. ÉCRAN|{PRTSC} (réservé pour une utilisation ultérieure)|  
|DROITE|{RIGHT}|  
|ARRÊT DÉFIL|{ARRÊT DÉFIL}|  
|TAB|{TAB}|  
|HAUT|{DISTANCE}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Addition du pavé numérique|{ADD}|  
|Soustraction du pavé numérique|{SOUSTRAIRE}|  
|Multiplication du pavé numérique|{MULTIPLIER}|  
|Division du pavé numérique|{DIVISION}|  
  
 Pour spécifier des touches combinées avec n’importe quelle combinaison de MAJ, CTRL et ALT enfoncées, faites précéder le code de touche avec un ou plusieurs des codes suivants.  
  
|Touche|Code|  
|---------|----------|  
|MAJ|+|  
|CTRL|^|  
|ALT|%|  
  
 Pour spécifier que n’importe quelle combinaison des touches MAJ, CTRL et ALT doit être maintenu enfoncé tandis que d’autres touches sont utilisées, mettez le code pour ces clés entre parenthèses. Par exemple, pour la touche la touche MAJ ENFONCÉE pendant que E et C sont utilisées, indiquez « + (EC) ». Pour maintenez la touche MAJ ENFONCÉE et E est enfoncé, suivie de C sans MAJ, indiquez « + EC ».  
  
 Pour spécifier des clés extensibles, utilisez la forme {touche nombre}. Vous devez placer un espace entre la clé et le nombre. Par exemple, {LEFT 42} signifie appuyez sur la touche GAUCHE 42 fois. {h 10} indique que la touche que h 10 fois.  
  
> [!NOTE]
>  Comme il n’existe aucune méthode managée permettant d’activer une autre application, vous pouvez utiliser cette classe dans l’application actuelle ou utiliser les méthodes Windows natives, telles que `FindWindow` et `SetForegroundWindow`, pour forcer le focus sur d’autres applications.  
  
> [!NOTE]
>  La classe <xref:System.Windows.Forms.SendKeys> a été mise à jour pour .NET Framework 3.0 pour pouvoir être utilisée dans les applications qui s'exécutent sur Windows Vista. La sécurité renforcée de Windows Vista (également appelée Contrôle de compte d'utilisateur) empêche le fonctionnement correcte de l'implémentation précédente.  
>   
>  La classe <xref:System.Windows.Forms.SendKeys> est vulnérable aux problèmes de synchronisation, que certains développeurs ont dû contourner. L'implémentation mise à jour est toujours vulnérable aux problèmes de synchronisation, mais est légèrement plus rapide et peut nécessiter certaines modifications des solutions de contournement. La classe <xref:System.Windows.Forms.SendKeys> tente d'abord d'utiliser l'implémentation précédente et, en cas d'échec, utilise la nouvelle implémentation. Ainsi, la classe <xref:System.Windows.Forms.SendKeys> peut se comporter différemment sur différents systèmes d'exploitation. En outre, quand la classe <xref:System.Windows.Forms.SendKeys> utilise la nouvelle implémentation, la méthode <xref:System.Windows.Forms.SendKeys.SendWait%2A> n'attend pas que les messages soient traités quand ils sont envoyés à un autre processus.  
>   
>  Si votre application repose sur un comportement cohérent indépendamment du système d'exploitation, vous pouvez forcer la classe <xref:System.Windows.Forms.SendKeys> à utiliser la nouvelle implémentation en ajoutant le paramètre d'application suivant à votre fichier app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Pour forcer la classe <xref:System.Windows.Forms.SendKeys> à utiliser l'implémentation précédente, utilisez plutôt la valeur `"JournalHook"` .  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.SendKeys.Send%2A> (méthode). Pour exécuter l’exemple, collez le code suivant dans un formulaire nommé Form1 contenant un bouton nommé Button1. Vérifiez que les événements click sont associés à leurs méthodes de gestion des événements dans cet exemple. Le contrôle bouton <xref:System.Windows.Forms.Control.TabIndex%2A> propriété doit être définie sur 0. Lorsque l’exemple est en cours d’exécution, double-cliquez sur le formulaire pour déclencher click du bouton événements.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il n'existe aucune application active à laquelle envoyer des séquences de touches.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keys" /> ne représente pas des séquences de touches valides</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">du code non managé d’appeler cette méthode. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Chaîne de séquences de touches à envoyer.</param>
        <summary>Envoie les touches données à l'application active, puis attend que les messages soient traités.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez <xref:System.Windows.Forms.SendKeys.SendWait%2A> pour envoyer des séquences de touches ou des combinaisons de touches à l’application active et attendre que les messages à traiter. Vous pouvez utiliser cette méthode pour envoyer des séquences de touches à une application et attendez que tous les processus démarrés par les séquences de touches à remplir. Cela peut être important si l’autre application doit se terminer avant que votre application puisse continuer.  
  
> [!NOTE]
>  Comme il n’existe aucune méthode managée permettant d’activer une autre application, vous pouvez utiliser cette classe dans l’application actuelle ou utiliser les méthodes Windows natives, telles que `FindWindow` et `SetForegroundWindow`, pour forcer le focus sur d’autres applications.  
  
> [!NOTE]
>  La classe <xref:System.Windows.Forms.SendKeys> a été mise à jour pour .NET Framework 3.0 pour pouvoir être utilisée dans les applications qui s'exécutent sur Windows Vista. La sécurité renforcée de Windows Vista (également appelée Contrôle de compte d'utilisateur) empêche le fonctionnement correcte de l'implémentation précédente.  
>   
>  La classe <xref:System.Windows.Forms.SendKeys> est vulnérable aux problèmes de synchronisation, que certains développeurs ont dû contourner. L'implémentation mise à jour est toujours vulnérable aux problèmes de synchronisation, mais est légèrement plus rapide et peut nécessiter certaines modifications des solutions de contournement. La classe <xref:System.Windows.Forms.SendKeys> tente d'abord d'utiliser l'implémentation précédente et, en cas d'échec, utilise la nouvelle implémentation. Ainsi, la classe <xref:System.Windows.Forms.SendKeys> peut se comporter différemment sur différents systèmes d'exploitation. En outre, quand la classe <xref:System.Windows.Forms.SendKeys> utilise la nouvelle implémentation, la méthode <xref:System.Windows.Forms.SendKeys.SendWait%2A> n'attend pas que les messages soient traités quand ils sont envoyés à un autre processus.  
>   
>  Si votre application repose sur un comportement cohérent indépendamment du système d'exploitation, vous pouvez forcer la classe <xref:System.Windows.Forms.SendKeys> à utiliser la nouvelle implémentation en ajoutant le paramètre d'application suivant à votre fichier app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Pour forcer la classe <xref:System.Windows.Forms.SendKeys> à utiliser l'implémentation précédente, utilisez plutôt la valeur `"JournalHook"` .  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">du code non managé d’appeler cette méthode. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>