<Type Name="IDataGridViewEditingControl" FullName="System.Windows.Forms.IDataGridViewEditingControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50269d82218fb858d594b5025d5cea2d72788127" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52193330" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataGridViewEditingControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataGridViewEditingControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataGridViewEditingControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataGridViewEditingControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataGridViewEditingControl" />
  <TypeSignature Language="F#" Value="type IDataGridViewEditingControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Définit les fonctionnalités courantes pour les contrôles hébergés dans les cellules d'un <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette interface est implémentée par les contrôles, tels que <xref:System.Windows.Forms.DataGridViewComboBoxEditingControl> et <xref:System.Windows.Forms.DataGridViewTextBoxEditingControl>, qui sont hébergés par correspondant <xref:System.Windows.Forms.DataGridView> de cellules, tel que <xref:System.Windows.Forms.DataGridViewComboBoxCell> et <xref:System.Windows.Forms.DataGridViewTextBoxCell>, lorsqu’ils sont en mode édition.  
  
 Types de cellules qui peuvent héberger de jeu de contrôles d’édition leurs <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> propriété un <xref:System.Type> type de contrôle qui représente la modification. Lorsque la cellule passe en mode édition, les étapes suivantes sont effectuées :  
  
1.  Le <xref:System.Windows.Forms.DataGridView> contrôle crée une instance du type de contrôle de modification.  
  
2.  Le <xref:System.Windows.Forms.DataGridView> contrôle appelle la cellule <xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A> (méthode). Vous pouvez remplacer cette méthode pour transférer la valeur de cellule dans le contrôle d’édition.  
  
3.  Le <xref:System.Windows.Forms.DataGridView> contrôle appelle le contrôle d’édition <xref:System.Windows.Forms.IDataGridViewEditingControl.ApplyCellStyleToEditingControl%2A> et transmet le style de cellule en cours. Vous pouvez implémenter cette méthode pour initialiser l’apparence du contrôle d’édition afin qu’elle corresponde à l’apparence de la cellule.  
  
4.  Le <xref:System.Windows.Forms.DataGridView> contrôle appelle le contrôle d’édition <xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A> (méthode). Vous pouvez implémenter cette méthode pour effectuer des ajustements finales dans le contrôle d’édition, telles que la sélection de la valeur du contrôle.  
  
 Pour plus d’informations sur l’implémentation <xref:System.Windows.Forms.IDataGridViewEditingControl>, consultez [Comment : héberger des contrôles dans les cellules DataGridView Windows Forms](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 Types, tels que la cellule <xref:System.Windows.Forms.DataGridViewCheckBoxCell> qui fournissent une interface utilisateur (IU) pour spécifier des valeurs sans héberger un contrôle d’édition implémentent la <xref:System.Windows.Forms.IDataGridViewEditingCell> interface. L’interface utilisateur dans ce cas s’affiche que la cellule soit en mode édition.  
  
 Autres types de cellules, telles que <xref:System.Windows.Forms.DataGridViewButtonCell>, fournir une interface utilisateur, mais ne stockent pas de valeurs spécifié par l’utilisateur. Dans ce cas, le type de cellule n’implémente pas <xref:System.Windows.Forms.IDataGridViewEditingCell> ou héberger un contrôle d’édition.  
  
   
  
## Examples  
 L’exemple de code suivant fournit une implémentation de cette interface qui dérive de <xref:System.Windows.Forms.DateTimePicker>. Cet exemple fait partie d’un exemple plus complet disponible dans [Comment : héberger des contrôles dans les cellules DataGridView Windows Forms](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#300](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#300)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#300](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#300)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataGridView" />
    <altmember cref="T:System.Windows.Forms.DataGridViewCell" />
    <altmember cref="T:System.Windows.Forms.IDataGridViewEditingCell" />
    <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxCell" />
    <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxEditingControl" />
    <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxCell" />
    <altmember cref="P:System.Windows.Forms.DataGridViewCell.EditType" />
    <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxEditingControl" />
    <related type="Article" href="https://msdn.microsoft.com/library/e79a9d4e-64ec-41f5-93ec-f5492633cbb2">Comment : héberger des contrôles dans des cellules DataGridView Windows Forms</related>
  </Docs>
  <Members>
    <Member MemberName="ApplyCellStyleToEditingControl">
      <MemberSignature Language="C#" Value="public void ApplyCellStyleToEditingControl (System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyCellStyleToEditingControl(class System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyCellStyleToEditingControl(System::Windows::Forms::DataGridViewCellStyle ^ dataGridViewCellStyle);" />
      <MemberSignature Language="F#" Value="abstract member ApplyCellStyleToEditingControl : System.Windows.Forms.DataGridViewCellStyle -&gt; unit" Usage="iDataGridViewEditingControl.ApplyCellStyleToEditingControl dataGridViewCellStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewCellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
      </Parameters>
      <Docs>
        <param name="dataGridViewCellStyle">
          <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> à utiliser comme modèle pour l'interface utilisateur.</param>
        <summary>Modifie l'interface utilisateur du contrôle pour être qu'elle soit cohérente avec le style de cellule spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, une implémentation de cette méthode définit les propriétés de l’interface utilisateur pour le contrôle d’édition, telles que la police, couleur d’arrière-plan et couleur de premier plan, les valeurs des propriétés correspondantes dans le `dataGridViewCellStyle`, qui est le style utilisé pour la cellule d’hébergement la contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant fournit une implémentation de ce membre. Cet exemple fait partie d’un exemple plus complet disponible dans [Comment : héberger des contrôles dans les cellules DataGridView Windows Forms](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#303](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#303)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#303](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#303)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlDataGridView">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridView EditingControlDataGridView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridView EditingControlDataGridView" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlDataGridView As DataGridView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridView ^ EditingControlDataGridView { System::Windows::Forms::DataGridView ^ get(); void set(System::Windows::Forms::DataGridView ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlDataGridView : System.Windows.Forms.DataGridView with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Windows.Forms.DataGridView" /> qui contient la cellule.</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> qui contient le <see cref="T:System.Windows.Forms.DataGridViewCell" /> qui est en cours de modification ; <see langword="null" /> s'il n'y a aucun <see cref="T:System.Windows.Forms.DataGridView" /> associé.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlFormattedValue">
      <MemberSignature Language="C#" Value="public object EditingControlFormattedValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object EditingControlFormattedValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlFormattedValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ EditingControlFormattedValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlFormattedValue : obj with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la valeur mise en forme de la cellule en cours de modification par l'éditeur.</summary>
        <value>
          <see cref="T:System.Object" /> qui représente la valeur mise en forme de la cellule.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur mise en forme représente la valeur tel qu’il est affiché dans l’interface utilisateur du contrôle. La valeur mise en forme peut être différente en valeur absolue et en type de données à partir de la valeur réelle contenue dans le contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant fournit une implémentation de ce membre. Cet exemple fait partie d’un exemple plus complet disponible dans [Comment : héberger des contrôles dans les cellules DataGridView Windows Forms](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#301](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#301)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#301](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#301)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlRowIndex">
      <MemberSignature Language="C#" Value="public int EditingControlRowIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditingControlRowIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlRowIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlRowIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int EditingControlRowIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlRowIndex : int with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'index de la ligne parente de la cellule d'hébergement.</summary>
        <value>Index de la ligne qui contient la cellule, ou -1 s'il n'y a aucune ligne parente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.IDataGridViewEditingControl> interface ne définit pas un correspondant `ColumnIndex` propriété. Vous pouvez utiliser la <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView%2A> propriété à récupérer le parent <xref:System.Windows.Forms.DataGridView> contrôler et utiliser le <xref:System.Windows.Forms.DataGridView.CurrentCellAddress%2A?displayProperty=nameWithType> propriété afin de déterminer l’index de ligne et colonne de la cellule active.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRow" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlValueChanged">
      <MemberSignature Language="C#" Value="public bool EditingControlValueChanged { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EditingControlValueChanged" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlValueChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EditingControlValueChanged { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlValueChanged : bool with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la valeur du contrôle d'édition diffère de la valeur de la cellule d'hébergement.</summary>
        <value>
          <see langword="true" /> si la valeur du contrôle diffère de la valeur de la cellule ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged%2A> propriété est définie sur `true` pour indiquer qu’état de la cellule d’hébergement a changé et que son interface utilisateur (IU) doit être mis à jour pour refléter ce changement de valeur. La cellule ou la table propriétaire devra réinitialiser cette propriété à `false` après une mise à jour.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Retour <see langword="true" /> dans votre implémentation de cette propriété ne change pas automatiquement la valeur affichée. Lorsque la valeur change dans le contrôle d’édition, vous devez informer le <see cref="T:System.Windows.Forms.DataGridView" /> de la modification en passant <see langword="true" /> à la <see cref="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" /> (méthode).</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlWantsInputKey">
      <MemberSignature Language="C#" Value="public bool EditingControlWantsInputKey (System.Windows.Forms.Keys keyData, bool dataGridViewWantsInputKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EditingControlWantsInputKey(valuetype System.Windows.Forms.Keys keyData, bool dataGridViewWantsInputKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EditingControlWantsInputKey (keyData As Keys, dataGridViewWantsInputKey As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EditingControlWantsInputKey(System::Windows::Forms::Keys keyData, bool dataGridViewWantsInputKey);" />
      <MemberSignature Language="F#" Value="abstract member EditingControlWantsInputKey : System.Windows.Forms.Keys * bool -&gt; bool" Usage="iDataGridViewEditingControl.EditingControlWantsInputKey (keyData, dataGridViewWantsInputKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
        <Parameter Name="dataGridViewWantsInputKey" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keyData">
          <see cref="T:System.Windows.Forms.Keys" /> qui représente la touche enfoncée.</param>
        <param name="dataGridViewWantsInputKey">
          <see langword="true" /> lorsque <see cref="T:System.Windows.Forms.DataGridView" /> souhaite traiter <see cref="T:System.Windows.Forms.Keys" /> dans <paramref name="keyData" /> ; sinon, <see langword="false" />.</param>
        <summary>Détermine si la touche spécifiée est une touche de saisie normale que le contrôle d'édition doit traiter ou une touche spéciale que le <see cref="T:System.Windows.Forms.DataGridView" /> doit traiter.</summary>
        <returns>
          <see langword="true" /> si la touche spécifiée est une touche de saisie normale qui doit être gérée par le contrôle d'édition ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un contrôle d’édition implémente cette méthode pour déterminer les clés d’entrée doivent être traités par le contrôle, et qui doit être traité par le <xref:System.Windows.Forms.DataGridView>.  
  
 Le <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> méthode est appelée par le <xref:System.Windows.Forms.DataGridView>. Le <xref:System.Windows.Forms.DataGridView> transmettra `true` pour `dataGridViewWantsInputKey` lorsqu’il peut traiter le `keyData`. Si le contrôle d’édition permet à la <xref:System.Windows.Forms.DataGridView> gérer le `keyData`, <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> doit retourner `false` lorsque `dataGridViewWantsInputKey` est `true`. D’autres implémentations de <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> peut ignorer un `dataGridViewWantsInputKey` valeur `true` et gérer le `keyData` dans le contrôle d’édition.  
  
   
  
## Examples  
 L’exemple de code suivant fournit une implémentation de ce membre. Cet exemple fait partie d’un exemple plus complet disponible dans [Comment : héberger des contrôles dans les cellules DataGridView Windows Forms](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#305](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#305)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#305](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#305)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="EditingPanelCursor">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Cursor EditingPanelCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor EditingPanelCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditingPanelCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Cursor ^ EditingPanelCursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EditingPanelCursor : System.Windows.Forms.Cursor" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le curseur utilisé lorsque le pointeur de la souris se trouve sur <see cref="P:System.Windows.Forms.DataGridView.EditingPanel" /> mais pas sur le contrôle d'édition.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Cursor" /> qui représente le pointeur de la souris utilisé pour le panneau d'édition.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le panneau d’édition est la <xref:System.Windows.Forms.Panel> que héberge le contrôle d’édition lorsque la <xref:System.Windows.Forms.DataGridView> contrôle est en mode édition. Le contrôle d’édition réel peut ne pas couvre la zone entière du panneau d’édition. Dans ce cas, le <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor%2A> implémentation doit retourner le curseur à utiliser lorsque le pointeur de la souris est sur le panneau, mais pas sur le contrôle. En règle générale, vous devez retourner le même curseur utilise le contrôle. Si vous souhaitez modifier le curseur qui apparaît lorsque le pointeur se trouve sur le contrôle, vous devez définir le <xref:System.Windows.Forms.Control.Cursor%2A> propriété. Vous pouvez le définir dans le constructeur de la <xref:System.Windows.Forms.IDataGridViewEditingControl> implémentation, ou vous pouvez la définir dans le <xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A> implémentation.  
  
   
  
## Examples  
 L’exemple de code suivant fournit une implémentation de ce membre. Cet exemple fait partie d’un exemple plus complet disponible dans [Comment : héberger des contrôles dans les cellules DataGridView Windows Forms](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#311](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#311)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#311](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#311)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.Panel" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetEditingControlFormattedValue">
      <MemberSignature Language="C#" Value="public object GetEditingControlFormattedValue (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEditingControlFormattedValue(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEditingControlFormattedValue (context As DataGridViewDataErrorContexts) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetEditingControlFormattedValue(System::Windows::Forms::DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="F#" Value="abstract member GetEditingControlFormattedValue : System.Windows.Forms.DataGridViewDataErrorContexts -&gt; obj" Usage="iDataGridViewEditingControl.GetEditingControlFormattedValue context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context">Une combinaison d'opérations de bits de valeurs <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> qui spécifie le contexte dans lequel les données sont exigées.</param>
        <summary>Récupère la valeur mise en forme de la cellule.</summary>
        <returns>
          <see cref="T:System.Object" /> qui représente la version mise en forme du contenu de la cellule.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur mise en forme représente la valeur tel qu’il est affiché dans l’interface utilisateur du contrôle. La valeur mise en forme peut être différente en valeur absolue et en type de données à partir de la valeur réelle contenue dans le contrôle.  
  
 Pour définir la valeur mise en forme du contrôle, utilisez le <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue%2A> propriété.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Modification de la valeur de retournée dans votre implémentation de cette méthode ne change pas automatiquement la valeur affichée. Lorsque la valeur change dans le contrôle d’édition, vous devez informer le <see cref="T:System.Windows.Forms.DataGridView" /> de la modification en passant <see langword="true" /> à la <see cref="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" /> (méthode).</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      </Docs>
    </Member>
    <Member MemberName="PrepareEditingControlForEdit">
      <MemberSignature Language="C#" Value="public void PrepareEditingControlForEdit (bool selectAll);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareEditingControlForEdit(bool selectAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrepareEditingControlForEdit (selectAll As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PrepareEditingControlForEdit(bool selectAll);" />
      <MemberSignature Language="F#" Value="abstract member PrepareEditingControlForEdit : bool -&gt; unit" Usage="iDataGridViewEditingControl.PrepareEditingControlForEdit selectAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selectAll">
          <see langword="true" /> pour sélectionner tout le contenu de la cellule ; sinon <see langword="false" />.</param>
        <summary>Prépare la cellule actuellement sélectionnée pour la modification.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objectif de cette méthode consiste à préparer le contrôle et son contenu pour la modification. Par exemple, vous souhaiterez peut-être placer le point d’insertion à la fin du contenu, ou modifier la façon dont le contenu est aligné.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="RepositionEditingControlOnValueChange">
      <MemberSignature Language="C#" Value="public bool RepositionEditingControlOnValueChange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RepositionEditingControlOnValueChange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.RepositionEditingControlOnValueChange" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RepositionEditingControlOnValueChange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RepositionEditingControlOnValueChange { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RepositionEditingControlOnValueChange : bool" Usage="System.Windows.Forms.IDataGridViewEditingControl.RepositionEditingControlOnValueChange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le contenu de la cellule doit être repositionné à chaque fois que la valeur change.</summary>
        <value>
          <see langword="true" /> si le contenu doit être repositionné ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Certaines situations nécessitent que le contenu de la cellule repositionner lorsque la valeur change. Par exemple, contenu de la cellule deviez repositionner quand une cellule encapsule le texte et le contenu est développé.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
  </Members>
</Type>