<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f08773771fb4a10a7de82ed774e9bbcb32dbf4e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39979285" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="12ea6-101">Fournit une encapsulation de niveau inférieur d'un handle de fenêtre et d'une procédure de fenêtre.</span>
      <span class="sxs-lookup">
        <span data-stu-id="12ea6-101">Provides a low-level encapsulation of a window handle and a window procedure.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-102">Cette classe gère automatiquement l’inscription et la création de classes de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-102">This class automatically manages window class creation and registration.</span></span>  
  
 <span data-ttu-id="12ea6-103">Une fenêtre n’est pas éligible pour le garbage collection lorsqu’il est associé à un handle de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-103">A window is not eligible for garbage collection when it is associated with a window handle.</span></span> <span data-ttu-id="12ea6-104">Pour garantir un nettoyage approprié, les handles doivent être détruits manuellement à l’aide <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> ou publié à l’aide de <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="12ea6-104">To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12ea6-105">Le <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> méthode est appelée lorsque le message WM_NCDESTROY est traité.</span><span class="sxs-lookup"><span data-stu-id="12ea6-105">The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed.</span></span> <span data-ttu-id="12ea6-106">Cela signifie qu’il existe des cas où vous n’avez pas besoin d’appeler manuellement <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, mais il est conseillé de le faire.</span><span class="sxs-lookup"><span data-stu-id="12ea6-106">This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.</span></span>  
  
 <span data-ttu-id="12ea6-107">Le <xref:System.Windows.Forms.NativeWindow> classe fournit les propriétés et méthodes pour gérer les handles suivantes : <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, et <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="12ea6-107">The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12ea6-108">L’exemple de code suivant illustre l’interception des messages système d’exploitation fenêtre dans une procédure de fenêtre et la création d’une fenêtre avec un nom de classe de fenêtre de système d’exploitation spécifique.</span><span class="sxs-lookup"><span data-stu-id="12ea6-108">The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="12ea6-109">L’exemple crée deux classes qui héritent de <xref:System.Windows.Forms.NativeWindow> qui effectuent cette opération.</span><span class="sxs-lookup"><span data-stu-id="12ea6-109">The example creates two classes that inherit from <xref:System.Windows.Forms.NativeWindow> that accomplish this.</span></span>  
  
 <span data-ttu-id="12ea6-110">Le `MyNativeWindowListener` classe s’intègre à la procédure de fenêtre du formulaire passée au constructeur et remplace le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode d’intercepter le `WM_ACTIVATEAPP` message de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-110">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="12ea6-111">La classe illustre l’utilisation de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> et <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> méthodes pour identifier le handle de fenêtre le <xref:System.Windows.Forms.NativeWindow> utilisera.</span><span class="sxs-lookup"><span data-stu-id="12ea6-111">The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="12ea6-112">Le handle est assigné en fonction de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> et <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> événements.</span><span class="sxs-lookup"><span data-stu-id="12ea6-112">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="12ea6-113">Lorsque le `WM_ACTIVATEAPP` fenêtre message est reçu, la classe appelle le `form1.ApplicationActivated` (méthode).</span><span class="sxs-lookup"><span data-stu-id="12ea6-113">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="12ea6-114">Le `MyNativeWindow` classe crée une nouvelle fenêtre avec le <xref:System.Windows.Forms.CreateParams.ClassName%2A> défini sur `BUTTON`.</span><span class="sxs-lookup"><span data-stu-id="12ea6-114">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="12ea6-115">La classe illustre l’utilisation de la <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> (méthode) et en remplaçant le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode à intercepter les messages de fenêtre qui ont été reçus.</span><span class="sxs-lookup"><span data-stu-id="12ea6-115">The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span>  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="12ea6-116">à l’appelant immédiat d’appeler du code non managé.</span>
      <span class="sxs-lookup">
        <span data-stu-id="12ea6-116">for the immediate caller to call unmanaged code.</span>
      </span>
      <span data-ttu-id="12ea6-117">Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="12ea6-117">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      </span>
    </permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="12ea6-118">Initialise une instance de la classe <see cref="T:System.Windows.Forms.NativeWindow" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-118">Initializes an instance of the <see cref="T:System.Windows.Forms.NativeWindow" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-119">Ceci est la valeur par défaut <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructeur fourni par le compilateur.</span><span class="sxs-lookup"><span data-stu-id="12ea6-119">This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler.</span></span> <span data-ttu-id="12ea6-120">Le <xref:System.Windows.Forms.NativeWindow> classe a également un constructeur statique qui initialise les gestionnaires de messages à l’échelle du domaine d’application et les tables de hachage.</span><span class="sxs-lookup"><span data-stu-id="12ea6-120">The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="12ea6-121">Handle à assigner à la fenêtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-121">The handle to assign to this window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12ea6-122">Assigne un handle à la fenêtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-122">Assigns a handle to this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepte les messages de fenêtre envoyés à la `handle` paramètre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter.</span></span> <span data-ttu-id="12ea6-124">Utilisez <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> pour réinitialiser la procédure de fenêtre du handle à la procédure de fenêtre par défaut.</span><span class="sxs-lookup"><span data-stu-id="12ea6-124">Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.</span></span>  
  
 <span data-ttu-id="12ea6-125">Le <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> les appels de méthode le <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> méthode pour indiquer que la valeur de la <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriété a été modifiée.</span><span class="sxs-lookup"><span data-stu-id="12ea6-125">The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12ea6-126">Handle à assigner ne peut pas être dans un processus d’application différents.</span><span class="sxs-lookup"><span data-stu-id="12ea6-126">The handle to assign cannot be in a different application process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12ea6-127">L’exemple de code suivant illustre l’interception des messages système d’exploitation fenêtre dans une procédure de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-127">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="12ea6-128">L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération.</span><span class="sxs-lookup"><span data-stu-id="12ea6-128">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="12ea6-129">Le `MyNativeWindowListener` classe s’intègre à la procédure de fenêtre du formulaire passée au constructeur et remplace le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode afin d’intercepter le `WM_ACTIVATEAPP` message de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-129">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="12ea6-130">La classe illustre l’utilisation de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> et <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> méthodes pour identifier la fenêtre qui gèrent le <xref:System.Windows.Forms.NativeWindow> utilisera.</span><span class="sxs-lookup"><span data-stu-id="12ea6-130">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="12ea6-131">Le handle est assigné en fonction de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> et <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> événements.</span><span class="sxs-lookup"><span data-stu-id="12ea6-131">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="12ea6-132">Lorsque le `WM_ACTIVATEAPP` fenêtre message est reçu, la classe appelle le `form1.ApplicationActivated` (méthode).</span><span class="sxs-lookup"><span data-stu-id="12ea6-132">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="12ea6-133">Ce code est un extrait de l’exemple illustré dans la <xref:System.Windows.Forms.NativeWindow> vue d’ensemble de la classe.</span><span class="sxs-lookup"><span data-stu-id="12ea6-133">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="12ea6-134">Du code n’est pas affiché à des fins de concision.</span><span class="sxs-lookup"><span data-stu-id="12ea6-134">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="12ea6-135">Consultez <xref:System.Windows.Forms.NativeWindow> pour obtenir la liste de l’ensemble du code.</span><span class="sxs-lookup"><span data-stu-id="12ea6-135">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="12ea6-136">Cette fenêtre possède déjà un handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-136">This window already has a handle.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="12ea6-137">La procédure de fenêtres pour la fenêtre native associée n'a pas pu être récupérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-137">The windows procedure for the associated native window could not be retrieved.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">
          <span data-ttu-id="12ea6-138">
            <see cref="T:System.Windows.Forms.CreateParams" /> qui spécifie les paramètres de création pour cette fenêtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-138">A <see cref="T:System.Windows.Forms.CreateParams" /> that specifies the creation parameters for this window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12ea6-139">Crée une fenêtre et son handle avec les paramètres de création spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-139">Creates a window and its handle with the specified creation parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-140">Le `cp` paramètre spécifie les valeurs qui sont passées à Win32 natif `CreateWindowEx` méthode pour créer une fenêtre et son handle.</span><span class="sxs-lookup"><span data-stu-id="12ea6-140">The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.</span></span>  
  
 <span data-ttu-id="12ea6-141">Lorsque le <xref:System.Windows.Forms.CreateParams.ClassName%2A> champ n’est pas `null`, le handle de fenêtre nouvellement créé hérite de la classe spécifiée.</span><span class="sxs-lookup"><span data-stu-id="12ea6-141">When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class.</span></span> <span data-ttu-id="12ea6-142">Par exemple, si <xref:System.Windows.Forms.CreateParams.ClassName%2A> a la valeur `BUTTON`, la fenêtre nouvellement créée est basée sur Win32 `BUTTON` classe de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-142">For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class.</span></span> <span data-ttu-id="12ea6-143">Le <xref:System.Windows.Forms.CreateParams.Param%2A> propriété de la <xref:System.Windows.Forms.CreateParams.ClassName%2A> objet doit être `null` ou une instance d’une classe qui a été déclarée en tant que structure de référence.</span><span class="sxs-lookup"><span data-stu-id="12ea6-143">The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.</span></span>  
  
 <span data-ttu-id="12ea6-144">Ce code est un extrait de l’exemple illustré dans la <xref:System.Windows.Forms.NativeWindow> vue d’ensemble de la classe.</span><span class="sxs-lookup"><span data-stu-id="12ea6-144">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="12ea6-145">Du code n’est pas affiché à des fins de concision.</span><span class="sxs-lookup"><span data-stu-id="12ea6-145">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="12ea6-146">Consultez <xref:System.Windows.Forms.NativeWindow> pour obtenir la liste de l’ensemble du code.</span><span class="sxs-lookup"><span data-stu-id="12ea6-146">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12ea6-147">Le nom de classe fourni est inscrit avec le système d’exploitation.</span><span class="sxs-lookup"><span data-stu-id="12ea6-147">The class name provided is registered with the operating system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12ea6-148">L’exemple de code suivant illustre la création d’une fenêtre avec un nom de classe de fenêtre de système d’exploitation spécifique.</span><span class="sxs-lookup"><span data-stu-id="12ea6-148">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="12ea6-149">L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération.</span><span class="sxs-lookup"><span data-stu-id="12ea6-149">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="12ea6-150">Le `MyNativeWindow` classe crée une nouvelle fenêtre avec le <xref:System.Windows.Forms.CreateParams.ClassName%2A> défini sur `BUTTON`.</span><span class="sxs-lookup"><span data-stu-id="12ea6-150">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="12ea6-151">Cette opération crée une fenêtre de bouton Win32.</span><span class="sxs-lookup"><span data-stu-id="12ea6-151">This creates a Win32 button window.</span></span> <span data-ttu-id="12ea6-152">L’emplacement et la taille du bouton est défini, ainsi que de styles de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-152">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="12ea6-153">La classe montre comment utiliser le <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> (méthode) et que vous remplacez le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode à intercepter les messages de fenêtre qui ont été reçus.</span><span class="sxs-lookup"><span data-stu-id="12ea6-153">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="12ea6-154">Bien que l’exemple recherche le message WM_ACTIVATEAPP, il peut être remplacé dans un programme réel par des messages de fenêtre propres au type créé.</span><span class="sxs-lookup"><span data-stu-id="12ea6-154">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12ea6-155">Certains types de contrôles envoient leurs messages de fenêtre pour le parent de la fenêtre au lieu de la fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-155">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="12ea6-156">Consultez le SDK de plateforme Windows pour plus d’informations.</span><span class="sxs-lookup"><span data-stu-id="12ea6-156">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="12ea6-157">Le système d'exploitation a manqué de ressources lors de la tentative de création de la fenêtre native.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-157">The operating system ran out of resources when trying to create the native window.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="12ea6-158">L'API Win32 native n'a pas pu créer la fenêtre spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-158">The native Win32 API could not create the specified window.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="12ea6-159">Le handle de la fenêtre native active est déjà assigné ; plus précisément, la propriété <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> n'est pas égale à <see cref="F:System.IntPtr.Zero" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-159">The handle of the current native window is already assigned; in explanation, the <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> property is not equal to <see cref="F:System.IntPtr.Zero" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="12ea6-160">Pour créer une fenêtre de niveau supérieur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-160">to create a top-level window.</span>
          </span>
          <span data-ttu-id="12ea6-161">Cette autorisation est requise uniquement si le style de fenêtre n’est pas un enfant ou si la fenêtre n’a pas de parent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-161">This permission is only demanded if the window style is not a child or if the window does not have a parent.</span>
          </span>
          <span data-ttu-id="12ea6-162">Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-162">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="12ea6-163">Message en cours de traitement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-163">The message that is currently being processed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12ea6-164">Appelle la procédure de fenêtre par défaut associée à la fenêtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-164">Invokes the default window procedure associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-165">En règle générale, vous appelez uniquement les <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> méthode lorsque vous interceptez des messages de fenêtre et souhaitez que la procédure de fenêtre par défaut pour gérer le message.</span><span class="sxs-lookup"><span data-stu-id="12ea6-165">Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message.</span></span> <span data-ttu-id="12ea6-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> ne doit pas être appelée pour envoyer un message de fenêtre à la fenêtre. Appelez Win32 `SendMessage` fonctionner à la place.</span><span class="sxs-lookup"><span data-stu-id="12ea6-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.</span></span>  
  
 <span data-ttu-id="12ea6-167">C’est une erreur d’appeler <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> lorsque le <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriété est 0.</span><span class="sxs-lookup"><span data-stu-id="12ea6-167">It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="12ea6-168">
            <para>Substituez cette méthode dans une classe dérivée pour implémenter des messages personnalisée généralisée pour une fenêtre native spécifique ou les .NET Windows Forms de gestion des <see cref="T:System.Windows.Forms.Control" />. Traitement personnalisé peut être effectué avant, après ou au lieu d’un appel à l’implémentation de classe de base de cette méthode, qui effectue le traitement de message standard.  En revanche, ajout de gestion de messages personnalisés pour une application peut être accomplie par le biais du <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> méthode de la <see cref="T:System.Windows.Forms.Application" /> classe.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-168">
              <para>Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />. Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.  In contrast, adding customized message handling for an application can be accomplished through the <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> method of the <see cref="T:System.Windows.Forms.Application" /> class.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="12ea6-169">Détruit la fenêtre et son handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-169">Destroys the window and its handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-170">Cette méthode détruit la fenêtre associée du <xref:System.Windows.Forms.NativeWindow.Handle%2A>, définit le <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriété sur 0 et appelle le <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> méthode pour refléter la modification.</span><span class="sxs-lookup"><span data-stu-id="12ea6-170">This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change.</span></span> <span data-ttu-id="12ea6-171">En règle générale, vous appelez uniquement <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> lorsque vous avez terminé avec la fenêtre native.</span><span class="sxs-lookup"><span data-stu-id="12ea6-171">Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12ea6-172">Le <xref:System.Windows.Forms.NativeWindow> classe automatiquement détruit la fenêtre associée et libère ses ressources en réponse à un message WM_DESTROY.</span><span class="sxs-lookup"><span data-stu-id="12ea6-172">The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="12ea6-173">Libère les ressources associées à la fenêtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-173">Releases the resources associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-174">Le <xref:System.Windows.Forms.NativeWindow.Finalize%2A> méthode supprime la classe dérivée Win32 associée actuel <xref:System.Windows.Forms.NativeWindow> instance, libère le handle et publie un message WM_CLOSE sur la fenêtre associée.</span><span class="sxs-lookup"><span data-stu-id="12ea6-174">The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="12ea6-175">Handle d'une fenêtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-175">A handle to a window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12ea6-176">Récupère la fenêtre associée au handle spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-176">Retrieves the window associated with the specified handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="12ea6-177">
            <see cref="T:System.Windows.Forms.NativeWindow" /> associé au handle spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-177">The <see cref="T:System.Windows.Forms.NativeWindow" /> associated with the specified handle.</span>
          </span>
          <span data-ttu-id="12ea6-178">Cette méthode retourne <see langword="null" /> si le handle n'est pas associé à une fenêtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-178">This method returns <see langword="null" /> when the handle does not have an associated window.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-179">Si vous recevez un handle à partir d’une autre méthode, utilisez cette méthode pour récupérer la fenêtre associée au handle.</span><span class="sxs-lookup"><span data-stu-id="12ea6-179">If you receive a handle from another method, use this method to retrieve the window associated with the handle.</span></span> <span data-ttu-id="12ea6-180">Le handle doit déjà être détenu par un autre <xref:System.Windows.Forms.NativeWindow> en cours traités ; sinon, `null` est retournée.</span><span class="sxs-lookup"><span data-stu-id="12ea6-180">The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="12ea6-181">Obtient le handle de la fenêtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-181">Gets the handle for this window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="12ea6-182">Si l'opération réussit, un <see cref="T:System.IntPtr" /> représentant le handle de la fenêtre Win32 native associée ; sinon, 0 si aucun handle n'est associé à la fenêtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-182">If successful, an <see cref="T:System.IntPtr" /> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-183">Utilisez cette méthode lors de l’appel des méthodes de l’API de Windows qui requièrent un handle pour une fenêtre ou un contrôle.</span><span class="sxs-lookup"><span data-stu-id="12ea6-183">Use this method when calling Windows API methods that require a handle for a window or control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12ea6-184">L’exemple de code suivant illustre la création d’une fenêtre avec un nom de classe de fenêtre de système d’exploitation spécifique.</span><span class="sxs-lookup"><span data-stu-id="12ea6-184">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="12ea6-185">L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération.</span><span class="sxs-lookup"><span data-stu-id="12ea6-185">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="12ea6-186">L’exemple illustre également la substitution de la <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> méthode à être notifié lorsque le <xref:System.Windows.Forms.NativeWindow.Handle%2A> modifications.</span><span class="sxs-lookup"><span data-stu-id="12ea6-186">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="12ea6-187">Le `MyNativeWindow` classe crée une nouvelle fenêtre avec le <xref:System.Windows.Forms.CreateParams.ClassName%2A> défini sur le bouton.</span><span class="sxs-lookup"><span data-stu-id="12ea6-187">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON.</span></span> <span data-ttu-id="12ea6-188">Cette opération crée une fenêtre de bouton Win32.</span><span class="sxs-lookup"><span data-stu-id="12ea6-188">This creates a Win32 button window.</span></span> <span data-ttu-id="12ea6-189">L’emplacement et la taille du bouton est défini, ainsi que de styles de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-189">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="12ea6-190">La classe montre comment utiliser le <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> (méthode) et que vous remplacez le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode à intercepter les messages de fenêtre qui ont été reçus.</span><span class="sxs-lookup"><span data-stu-id="12ea6-190">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="12ea6-191">Bien que l’exemple recherche le message WM_ACTIVATEAPP, il peut être remplacé dans un programme réel par messages de fenêtre propres au type créé.</span><span class="sxs-lookup"><span data-stu-id="12ea6-191">Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12ea6-192">Certains types de contrôles envoient leurs messages de fenêtre pour le parent de la fenêtre au lieu de la fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-192">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="12ea6-193">Consultez le SDK de plateforme Windows pour plus d’informations.</span><span class="sxs-lookup"><span data-stu-id="12ea6-193">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="12ea6-194">Spécifie une méthode de notification qui est appelée quand le handle d'une fenêtre est modifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-194">Specifies a notification method that is called when the handle for a window is changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-195">Cette méthode est appelée lorsque la valeur de la <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriété a été modifiée.</span><span class="sxs-lookup"><span data-stu-id="12ea6-195">This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12ea6-196">L’exemple de code suivant illustre la création d’une fenêtre avec un nom de classe de fenêtre de système d’exploitation spécifique.</span><span class="sxs-lookup"><span data-stu-id="12ea6-196">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="12ea6-197">L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération.</span><span class="sxs-lookup"><span data-stu-id="12ea6-197">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="12ea6-198">L’exemple illustre également la substitution de la <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> méthode à être notifié lorsque le <xref:System.Windows.Forms.NativeWindow.Handle%2A> modifications.</span><span class="sxs-lookup"><span data-stu-id="12ea6-198">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="12ea6-199">Le `MyNativeWindow` classe crée une nouvelle fenêtre avec le <xref:System.Windows.Forms.CreateParams.ClassName%2A> défini sur `BUTTON`.</span><span class="sxs-lookup"><span data-stu-id="12ea6-199">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="12ea6-200">Cette opération crée une fenêtre de bouton Win32.</span><span class="sxs-lookup"><span data-stu-id="12ea6-200">This creates a Win32 button window.</span></span> <span data-ttu-id="12ea6-201">L’emplacement et la taille du bouton est défini, ainsi que de styles de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-201">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="12ea6-202">La classe montre comment utiliser le <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> (méthode) et que vous remplacez le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode à intercepter les messages de fenêtre qui ont été reçus.</span><span class="sxs-lookup"><span data-stu-id="12ea6-202">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="12ea6-203">Bien que l’exemple recherche le message WM_ACTIVATEAPP, il peut être remplacé dans un programme réel par des messages de fenêtre propres au type créé.</span><span class="sxs-lookup"><span data-stu-id="12ea6-203">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
 <span data-ttu-id="12ea6-204">Ce code est un extrait de l’exemple illustré dans la <xref:System.Windows.Forms.NativeWindow> vue d’ensemble de la classe.</span><span class="sxs-lookup"><span data-stu-id="12ea6-204">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="12ea6-205">Du code n’est pas affiché à des fins de concision.</span><span class="sxs-lookup"><span data-stu-id="12ea6-205">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="12ea6-206">Consultez <xref:System.Windows.Forms.NativeWindow> pour obtenir la liste de l’ensemble du code.</span><span class="sxs-lookup"><span data-stu-id="12ea6-206">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="12ea6-207">Certains types de contrôles envoient leurs messages de fenêtre pour le parent de la fenêtre au lieu de la fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-207">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="12ea6-208">Consultez le SDK de plateforme Windows pour plus d’informations.</span><span class="sxs-lookup"><span data-stu-id="12ea6-208">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="12ea6-209">
            <para>Substituez cette méthode pour effectuer le suivi des modifications apportées au handle de fenêtre.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-209">
              <para>Override this method to track changes that are made to the window handle.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="12ea6-210">
            <see cref="T:System.Exception" /> qui spécifie l'exception de thread non gérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-210">An <see cref="T:System.Exception" /> that specifies the unhandled thread exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12ea6-211">En cas de substitution dans une classe dérivée, cette méthode gère une exception de thread non gérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-211">When overridden in a derived class, manages an unhandled thread exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-212">En règle générale, <xref:System.Windows.Forms.Application.OnThreadException%2A> gère les exceptions de thread.</span><span class="sxs-lookup"><span data-stu-id="12ea6-212">Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="12ea6-213">Libère le handle associé à la fenêtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-213">Releases the handle associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-214">Cette méthode ne détruit pas le handle de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-214">This method does not destroy the window handle.</span></span> <span data-ttu-id="12ea6-215">Au lieu de cela, il définit la procédure de fenêtre du handle à la procédure de fenêtre par défaut.</span><span class="sxs-lookup"><span data-stu-id="12ea6-215">Instead, it sets the handle's window procedure to the default window procedure.</span></span> <span data-ttu-id="12ea6-216">Il définit le <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriété sur 0 et appelle <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> pour refléter la modification.</span><span class="sxs-lookup"><span data-stu-id="12ea6-216">It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.</span></span>  
  
 <span data-ttu-id="12ea6-217">Une fenêtre appelle automatiquement cette méthode si elle reçoit un message Win32 WM_NCDESTROY natif, indiquant que Windows a détruit le handle.</span><span class="sxs-lookup"><span data-stu-id="12ea6-217">A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12ea6-218">L’exemple de code suivant illustre l’interception des messages système d’exploitation fenêtre dans une procédure de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-218">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="12ea6-219">L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération.</span><span class="sxs-lookup"><span data-stu-id="12ea6-219">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="12ea6-220">Le `MyNativeWindowListener` classe s’intègre à la procédure de fenêtre du formulaire passée au constructeur et remplace le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode afin d’intercepter le `WM_ACTIVATEAPP` message de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-220">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="12ea6-221">La classe illustre l’utilisation de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> et <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> méthodes pour identifier le handle de fenêtre le <xref:System.Windows.Forms.NativeWindow> utilisera.</span><span class="sxs-lookup"><span data-stu-id="12ea6-221">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="12ea6-222">Le handle est assigné en fonction de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> et <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> événements.</span><span class="sxs-lookup"><span data-stu-id="12ea6-222">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="12ea6-223">Lorsque le `WM_ACTIVATEAPP` fenêtre message est reçu, la classe appelle le `form1.ApplicationActivated` (méthode).</span><span class="sxs-lookup"><span data-stu-id="12ea6-223">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="12ea6-224">Ce code est un extrait de l’exemple illustré dans la <xref:System.Windows.Forms.NativeWindow> vue d’ensemble de la classe.</span><span class="sxs-lookup"><span data-stu-id="12ea6-224">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="12ea6-225">Du code n’est pas affiché à des fins de concision.</span><span class="sxs-lookup"><span data-stu-id="12ea6-225">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="12ea6-226">Consultez <xref:System.Windows.Forms.NativeWindow> pour obtenir la liste de l’ensemble du code.</span><span class="sxs-lookup"><span data-stu-id="12ea6-226">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="12ea6-227">
            <see cref="T:System.Windows.Forms.Message" /> qui est associé au message Windows en cours.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-227">A <see cref="T:System.Windows.Forms.Message" /> that is associated with the current Windows message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="12ea6-228">Appelle la procédure de fenêtre par défaut associée à la fenêtre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-228">Invokes the default window procedure associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="12ea6-229">Cette méthode est appelée lorsqu’un message de fenêtre est envoyé au handle de la fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-229">This method is called when a window message is sent to the handle of the window.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="12ea6-230">L’exemple de code suivant illustre l’interception des messages système d’exploitation fenêtre dans une procédure de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-230">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="12ea6-231">L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération.</span><span class="sxs-lookup"><span data-stu-id="12ea6-231">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="12ea6-232">Le `MyNativeWindowListener` classe s’intègre à la procédure de fenêtre du formulaire passée au constructeur et remplace le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode d’intercepter le `WM_ACTIVATEAPP` message de fenêtre.</span><span class="sxs-lookup"><span data-stu-id="12ea6-232">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="12ea6-233">La classe illustre l’utilisation de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> et <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> méthodes pour identifier le handle de fenêtre le <xref:System.Windows.Forms.NativeWindow> utilisera.</span><span class="sxs-lookup"><span data-stu-id="12ea6-233">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="12ea6-234">Le handle est assigné en fonction de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> et <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> événements.</span><span class="sxs-lookup"><span data-stu-id="12ea6-234">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="12ea6-235">Lorsque le `WM_ACTIVATEAPP` fenêtre message est reçu, la classe appelle le `form1.ApplicationActivated` (méthode).</span><span class="sxs-lookup"><span data-stu-id="12ea6-235">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="12ea6-236">Ce code est un extrait de l’exemple illustré dans la <xref:System.Windows.Forms.NativeWindow> vue d’ensemble de la classe.</span><span class="sxs-lookup"><span data-stu-id="12ea6-236">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="12ea6-237">Du code n’est pas affiché à des fins de concision.</span><span class="sxs-lookup"><span data-stu-id="12ea6-237">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="12ea6-238">Consultez <xref:System.Windows.Forms.NativeWindow> pour obtenir la liste de l’ensemble du code.</span><span class="sxs-lookup"><span data-stu-id="12ea6-238">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="12ea6-239">
            <para>Substituez cette méthode pour implémenter le traitement de message spécifique. Appelez <c>base. WndProc</c> pour les messages non prise en charge.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="12ea6-239">
              <para>Override this method to implement specific message processing. Call <c>base.WndProc</c> for unhandled messages.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>