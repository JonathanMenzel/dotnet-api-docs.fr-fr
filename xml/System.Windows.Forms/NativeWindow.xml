<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="71dc1294fdc41e7ab109521f05c37a384badb750" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="04/17/2019" /><Meta Name="ms.locfileid" Value="59676778" /></Metadata><TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fournit une encapsulation de niveau inférieur d'un handle de fenêtre et d'une procédure de fenêtre.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette classe gère automatiquement l’inscription et la création de classes de fenêtre.  
  
 Une fenêtre n’est pas éligible pour le garbage collection lorsqu’il est associé à un handle de fenêtre. Pour garantir un nettoyage approprié, les handles doivent être détruits manuellement à l’aide <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> ou publié à l’aide de <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> méthode est appelée lorsque le message WM_NCDESTROY est traité. Cela signifie qu’il existe des cas où vous n’avez pas besoin d’appeler manuellement <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, mais il est conseillé de le faire.  
  
 Le <xref:System.Windows.Forms.NativeWindow> classe fournit les propriétés et méthodes pour gérer les handles suivantes : <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, et <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’interception des messages système d’exploitation fenêtre dans une procédure de fenêtre et la création d’une fenêtre avec un nom de classe de fenêtre de système d’exploitation spécifique. L’exemple crée deux classes qui héritent de <xref:System.Windows.Forms.NativeWindow> qui effectuent cette opération.  
  
 Le `MyNativeWindowListener` classe s’intègre à la procédure de fenêtre du formulaire passée au constructeur et remplace le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode d’intercepter le `WM_ACTIVATEAPP` message de fenêtre. La classe illustre l’utilisation de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> et <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> méthodes pour identifier le handle de fenêtre le <xref:System.Windows.Forms.NativeWindow> utilisera. Le handle est assigné en fonction de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> et <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> événements. Lorsque le `WM_ACTIVATEAPP` fenêtre message est reçu, la classe appelle le `form1.ApplicationActivated` (méthode).  
  
 Le `MyNativeWindow` classe crée une nouvelle fenêtre avec le <xref:System.Windows.Forms.CreateParams.ClassName%2A> défini sur `BUTTON`. La classe illustre l’utilisation de la <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> (méthode) et en remplaçant le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode à intercepter les messages de fenêtre qui ont été reçus.  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">à l’appelant immédiat d’appeler du code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une instance de la classe <see cref="T:System.Windows.Forms.NativeWindow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ceci est la valeur par défaut <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructeur fourni par le compilateur. Le <xref:System.Windows.Forms.NativeWindow> classe a également un constructeur statique qui initialise les gestionnaires de messages à l’échelle du domaine d’application et les tables de hachage.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Handle à assigner à la fenêtre.</param>
        <summary>Assigne un handle à la fenêtre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepte les messages de fenêtre envoyés à la `handle` paramètre. Utilisez <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> pour réinitialiser la procédure de fenêtre du handle à la procédure de fenêtre par défaut.  
  
 Le <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> les appels de méthode le <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> méthode pour indiquer que la valeur de la <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriété a été modifiée.  
  
> [!NOTE]
>  Handle à assigner ne peut pas être dans un processus d’application différents.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’interception des messages système d’exploitation fenêtre dans une procédure de fenêtre. L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération.  
  
 Le `MyNativeWindowListener` classe s’intègre à la procédure de fenêtre du formulaire passée au constructeur et remplace le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode afin d’intercepter le `WM_ACTIVATEAPP` message de fenêtre. La classe illustre l’utilisation de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> et <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> méthodes pour identifier la fenêtre qui gèrent le <xref:System.Windows.Forms.NativeWindow> utilisera. Le handle est assigné en fonction de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> et <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> événements. Lorsque le `WM_ACTIVATEAPP` fenêtre message est reçu, la classe appelle le `form1.ApplicationActivated` (méthode).  
  
 Ce code est un extrait de l’exemple illustré dans la <xref:System.Windows.Forms.NativeWindow> vue d’ensemble de la classe. Du code n’est pas affiché à des fins de concision. Consultez <xref:System.Windows.Forms.NativeWindow> pour obtenir la liste de l’ensemble du code.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Cette fenêtre possède déjà un handle.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">La procédure de fenêtres pour la fenêtre native associée n'a pas pu être récupérée.</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp"><see cref="T:System.Windows.Forms.CreateParams" /> qui spécifie les paramètres de création pour cette fenêtre.</param>
        <summary>Crée une fenêtre et son handle avec les paramètres de création spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `cp` paramètre spécifie les valeurs qui sont passées à Win32 natif `CreateWindowEx` méthode pour créer une fenêtre et son handle.  
  
 Lorsque le <xref:System.Windows.Forms.CreateParams.ClassName%2A> champ n’est pas `null`, le handle de fenêtre nouvellement créé hérite de la classe spécifiée. Par exemple, si <xref:System.Windows.Forms.CreateParams.ClassName%2A> a la valeur `BUTTON`, la fenêtre nouvellement créée est basée sur Win32 `BUTTON` classe de fenêtre. Le <xref:System.Windows.Forms.CreateParams.Param%2A> propriété de la <xref:System.Windows.Forms.CreateParams.ClassName%2A> objet doit être `null` ou une instance d’une classe qui a été déclarée en tant que structure de référence.  
  
 Ce code est un extrait de l’exemple illustré dans la <xref:System.Windows.Forms.NativeWindow> vue d’ensemble de la classe. Du code n’est pas affiché à des fins de concision. Consultez <xref:System.Windows.Forms.NativeWindow> pour obtenir la liste de l’ensemble du code.  
  
> [!NOTE]
>  Le nom de classe fourni est inscrit avec le système d’exploitation.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la création d’une fenêtre avec un nom de classe de fenêtre de système d’exploitation spécifique. L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération.  
  
 Le `MyNativeWindow` classe crée une nouvelle fenêtre avec le <xref:System.Windows.Forms.CreateParams.ClassName%2A> défini sur `BUTTON`. Cette opération crée une fenêtre de bouton Win32. L’emplacement et la taille du bouton est défini, ainsi que de styles de fenêtre. La classe montre comment utiliser le <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> (méthode) et que vous remplacez le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode à intercepter les messages de fenêtre qui ont été reçus. Bien que l’exemple recherche le message WM_ACTIVATEAPP, il peut être remplacé dans un programme réel par des messages de fenêtre propres au type créé.  
  
> [!NOTE]
>  Certains types de contrôles envoient leurs messages de fenêtre pour le parent de la fenêtre au lieu de la fenêtre. Consultez le SDK de plateforme Windows pour plus d’informations.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Le système d'exploitation a manqué de ressources lors de la tentative de création de la fenêtre native.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">L'API Windows native n'a pas pu créer la fenêtre spécifiée.</exception>
        <exception cref="T:System.InvalidOperationException">Le handle de la fenêtre native active est déjà assigné ; plus précisément, la propriété <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> n'est pas égale à <see cref="F:System.IntPtr.Zero" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Pour créer une fenêtre de niveau supérieur. Cette autorisation est requise uniquement si le style de fenêtre n’est pas un enfant ou si la fenêtre n’a pas de parent. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Message en cours de traitement.</param>
        <summary>Appelle la procédure de fenêtre par défaut associée à la fenêtre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, vous appelez uniquement les <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> méthode lorsque vous interceptez des messages de fenêtre et souhaitez que la procédure de fenêtre par défaut pour gérer le message. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> ne doit pas être appelée pour envoyer un message de fenêtre à la fenêtre. Appelez Win32 `SendMessage` fonctionner à la place.  
  
 C’est une erreur d’appeler <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> lorsque le <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriété est 0.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Substituez cette méthode dans une classe dérivée pour implémenter des messages personnalisée généralisée pour une fenêtre native spécifique ou les .NET Windows Forms de gestion des <see cref="T:System.Windows.Forms.Control" />. Traitement personnalisé peut être effectué avant, après ou au lieu d’un appel à l’implémentation de classe de base de cette méthode, qui effectue le traitement de message standard.  
  
En revanche, ajout de gestion de messages personnalisés pour une application peut être accomplie par le biais du <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> méthode de la <see cref="T:System.Windows.Forms.Application" /> classe.</para></block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Détruit la fenêtre et son handle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode détruit la fenêtre associée du <xref:System.Windows.Forms.NativeWindow.Handle%2A>, définit le <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriété sur 0 et appelle le <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> méthode pour refléter la modification. En règle générale, vous appelez uniquement <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> lorsque vous avez terminé avec la fenêtre native.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.NativeWindow> classe automatiquement détruit la fenêtre associée et libère ses ressources en réponse à un message WM_DESTROY.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère les ressources associées à la fenêtre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.NativeWindow.Finalize%2A> méthode supprime la classe dérivée Win32 associée actuel <xref:System.Windows.Forms.NativeWindow> instance, libère le handle et publie un message WM_CLOSE sur la fenêtre associée.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Handle d'une fenêtre.</param>
        <summary>Récupère la fenêtre associée au handle spécifié.</summary>
        <returns><see cref="T:System.Windows.Forms.NativeWindow" /> associé au handle spécifié. Cette méthode retourne <see langword="null" /> si le handle n'est pas associé à une fenêtre.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous recevez un handle à partir d’une autre méthode, utilisez cette méthode pour récupérer la fenêtre associée au handle. Le handle doit déjà être détenu par un autre <xref:System.Windows.Forms.NativeWindow> en cours traités ; sinon, `null` est retournée.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le handle de la fenêtre.</summary>
        <value>Si l'opération réussit, un <see cref="T:System.IntPtr" /> représentant le handle de la fenêtre Win32 native associée ; sinon, 0 si aucun handle n'est associé à la fenêtre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode lors de l’appel des méthodes de l’API de Windows qui requièrent un handle pour une fenêtre ou un contrôle.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la création d’une fenêtre avec un nom de classe de fenêtre de système d’exploitation spécifique. L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération. L’exemple illustre également la substitution de la <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> méthode à être notifié lorsque le <xref:System.Windows.Forms.NativeWindow.Handle%2A> modifications.  
  
 Le `MyNativeWindow` classe crée une nouvelle fenêtre avec le <xref:System.Windows.Forms.CreateParams.ClassName%2A> défini sur le bouton. Cette opération crée une fenêtre de bouton Win32. L’emplacement et la taille du bouton est défini, ainsi que de styles de fenêtre. La classe montre comment utiliser le <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> (méthode) et que vous remplacez le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode à intercepter les messages de fenêtre qui ont été reçus. Bien que l’exemple recherche le message WM_ACTIVATEAPP, il peut être remplacé dans un programme réel par messages de fenêtre propres au type créé.  
  
> [!NOTE]
>  Certains types de contrôles envoient leurs messages de fenêtre pour le parent de la fenêtre au lieu de la fenêtre. Consultez le SDK de plateforme Windows pour plus d’informations.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Spécifie une méthode de notification qui est appelée quand le handle d'une fenêtre est modifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée lorsque la valeur de la <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriété a été modifiée.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la création d’une fenêtre avec un nom de classe de fenêtre de système d’exploitation spécifique. L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération. L’exemple illustre également la substitution de la <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> méthode à être notifié lorsque le <xref:System.Windows.Forms.NativeWindow.Handle%2A> modifications.  
  
 Le `MyNativeWindow` classe crée une nouvelle fenêtre avec le <xref:System.Windows.Forms.CreateParams.ClassName%2A> défini sur `BUTTON`. Cette opération crée une fenêtre de bouton Win32. L’emplacement et la taille du bouton est défini, ainsi que de styles de fenêtre. La classe montre comment utiliser le <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> (méthode) et que vous remplacez le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode à intercepter les messages de fenêtre qui ont été reçus. Bien que l’exemple recherche le message WM_ACTIVATEAPP, il peut être remplacé dans un programme réel par des messages de fenêtre propres au type créé.  
  
 Ce code est un extrait de l’exemple illustré dans la <xref:System.Windows.Forms.NativeWindow> vue d’ensemble de la classe. Du code n’est pas affiché à des fins de concision. Consultez <xref:System.Windows.Forms.NativeWindow> pour obtenir la liste de l’ensemble du code.  
  
> [!NOTE]
>  Certains types de contrôles envoient leurs messages de fenêtre pour le parent de la fenêtre au lieu de la fenêtre. Consultez le SDK de plateforme Windows pour plus d’informations.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Substituez cette méthode pour effectuer le suivi des modifications apportées au handle de fenêtre.</para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Exception" /> qui spécifie l'exception de thread non gérée.</param>
        <summary>En cas de substitution dans une classe dérivée, cette méthode gère une exception de thread non gérée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, <xref:System.Windows.Forms.Application.OnThreadException%2A> gère les exceptions de thread.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère le handle associé à la fenêtre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode ne détruit pas le handle de fenêtre. Au lieu de cela, il définit la procédure de fenêtre du handle à la procédure de fenêtre par défaut. Il définit le <xref:System.Windows.Forms.NativeWindow.Handle%2A> propriété sur 0 et appelle <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> pour refléter la modification.  
  
 Une fenêtre appelle automatiquement cette méthode si elle reçoit un message Win32 WM_NCDESTROY natif, indiquant que Windows a détruit le handle.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’interception des messages système d’exploitation fenêtre dans une procédure de fenêtre. L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération.  
  
 Le `MyNativeWindowListener` classe s’intègre à la procédure de fenêtre du formulaire passée au constructeur et remplace le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode afin d’intercepter le `WM_ACTIVATEAPP` message de fenêtre. La classe illustre l’utilisation de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> et <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> méthodes pour identifier le handle de fenêtre le <xref:System.Windows.Forms.NativeWindow> utilisera. Le handle est assigné en fonction de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> et <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> événements. Lorsque le `WM_ACTIVATEAPP` fenêtre message est reçu, la classe appelle le `form1.ApplicationActivated` (méthode).  
  
 Ce code est un extrait de l’exemple illustré dans la <xref:System.Windows.Forms.NativeWindow> vue d’ensemble de la classe. Du code n’est pas affiché à des fins de concision. Consultez <xref:System.Windows.Forms.NativeWindow> pour obtenir la liste de l’ensemble du code.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><see cref="T:System.Windows.Forms.Message" /> qui est associé au message Windows en cours.</param>
        <summary>Appelle la procédure de fenêtre par défaut associée à la fenêtre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée lorsqu’un message de fenêtre est envoyé au handle de la fenêtre.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’interception des messages système d’exploitation fenêtre dans une procédure de fenêtre. L’exemple crée une classe qui hérite de <xref:System.Windows.Forms.NativeWindow> pour effectuer cette opération.  
  
 Le `MyNativeWindowListener` classe s’intègre à la procédure de fenêtre du formulaire passée au constructeur et remplace le <xref:System.Windows.Forms.NativeWindow.WndProc%2A> méthode d’intercepter le `WM_ACTIVATEAPP` message de fenêtre. La classe illustre l’utilisation de la <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> et <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> méthodes pour identifier le handle de fenêtre le <xref:System.Windows.Forms.NativeWindow> utilisera. Le handle est assigné en fonction de la <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> et <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> événements. Lorsque le `WM_ACTIVATEAPP` fenêtre message est reçu, la classe appelle le `form1.ApplicationActivated` (méthode).  
  
 Ce code est un extrait de l’exemple illustré dans la <xref:System.Windows.Forms.NativeWindow> vue d’ensemble de la classe. Du code n’est pas affiché à des fins de concision. Consultez <xref:System.Windows.Forms.NativeWindow> pour obtenir la liste de l’ensemble du code.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Substituez cette méthode pour implémenter le traitement de message spécifique. Appelez <c>base. WndProc</c> pour les messages non prise en charge.</para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>