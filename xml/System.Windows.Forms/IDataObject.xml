<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c4e7cff63d5b6c5e96d7cef0d617257a97de4598" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30650283" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit un mécanisme indépendant du format destiné au transfert de données.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `IDataObject` interface est utilisée par la <xref:System.Windows.Forms.Clipboard> classe et dans les opérations de glisser-déplacer.  
  
 En cas d’implémentation dans une classe, le <xref:System.Windows.Forms.IDataObject> méthodes permettent à l’utilisateur stocker les données dans plusieurs formats dans une instance de la classe. Le stockage des données dans plusieurs formats augmente le risque qu’une application cible dont vous ne savez pas, les spécifications de format peut récupérer les données stockées. Pour stocker les données dans une instance de <xref:System.Windows.Forms.IDataObject>, appelez le <xref:System.Windows.Forms.IDataObject.SetData%2A> (méthode) et spécifiez le format de données dans le `format` paramètre. Définir le `autoConvert` paramètre `false` si vous ne souhaitez pas que les données stockées à convertir en un autre format lorsqu’il est extrait. Appeler <xref:System.Windows.Forms.IDataObject.SetData%2A> plusieurs fois sur une instance de <xref:System.Windows.Forms.IDataObject> pour stocker les données dans plusieurs formats.  
  
 Récupérer les données stockées dans un <xref:System.Windows.Forms.IDataObject> en appelant le <xref:System.Windows.Forms.IDataObject.GetData%2A> méthode et en spécifiant les données de format dans le `format` paramètre. Définir le `autoConvert` paramètre `false` pour récupérer uniquement les données qui a été enregistrées dans le format spécifié. Pour convertir les données stockées dans le format spécifié, affectez `autoConvert` à `true`, ou n’utilisez pas `autoConvert`.  
  
 Pour déterminer les formats des données stockées dans un <xref:System.Windows.Forms.IDataObject>, utilisez ce qui suit <xref:System.Windows.Forms.IDataObject> méthodes.  
  
-   Appelez le <xref:System.Windows.Forms.IDataObject.GetFormats%2A> méthode pour récupérer un tableau de tous les formats dans lesquels les données sont disponibles. Définir le `autoConvert` paramètre `false` pour obtenir uniquement les formats dans laquelle les données sont stockées. Pour obtenir tous les formats dans laquelle les données sont disponibles, définissez `autoConvert` à `true`, ou n’utilisez pas ce paramètre.  
  
-   Appelez le <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> méthode pour déterminer si les données stockées sont disponibles dans un format particulier. Si vous ne souhaitez pas que les données stockées à convertir au format spécifié, définissez la `autoConvert` paramètre `false`.  
  
 Consultez la <xref:System.Windows.Forms.DataObject> classe pour une implémentation de cette interface. Consultez le <xref:System.Windows.Forms.DataFormats> classe pour prédéfinis <xref:System.Windows.Forms.Clipboard> formats de données.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Récupère les données associées au format de données spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Format des données à récupérer. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour obtenir les formats prédéfinis.</param>
        <summary>Récupère les données associées au format de données spécifié.</summary>
        <returns>Données associées au format spécifié ou <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cette méthode ne peut pas rechercher des données dans le format spécifié, il tente de convertir les données au format. Si les données ne peut pas être converties au format spécifié, cette méthode retourne `null`.  
  
 Pour déterminer si les données sont associées, ou peuvent être converties en un format, appelez <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour obtenir la liste des formats valides pour les données stockées dans cette instance.  
  
> [!NOTE]
>  Données peuvent être converties vers un autre format, si elle a été stockée en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en tant que Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject,` pour illustrer l’utilisation de la `GetData` (méthode). La méthode est utilisée pour récupérer les données stockées dans `myDataObject`, qui est associé le `Text` format. L’exemple part du principe que vous avez déjà créé un <xref:System.Windows.Forms.Form> nommé `Form1` et un <xref:System.Windows.Forms.TextBox> nommé `textBox1`.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">
          <see cref="T:System.Type" /> représentant le format des données à récupérer. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour obtenir les formats prédéfinis.</param>
        <summary>Récupère les données associées au format du type classe spécifié.</summary>
        <returns>Données associées au format spécifié ou <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cette méthode ne peut pas rechercher des données dans le format spécifié, il tente de convertir les données au format. Si les données ne peut pas être converties au format spécifié, cette méthode retourne `null`.  
  
 Pour déterminer si les données sont associées, ou peuvent être converties en un format, appelez <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour obtenir la liste des formats valides pour les données stockées dans cette instance.  
  
> [!NOTE]
>  Données peuvent être converties vers un autre format, si elle a été stockée en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en tant que Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetData` (méthode). La méthode est utilisée pour récupérer les données stockées dans `myObject`, qui est associé à un type spécifique, `myType`. Le type des données récupérées s’affiche dans une boîte de message. L’exemple part du principe que vous avez déjà créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Format des données à récupérer. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour obtenir les formats prédéfinis.</param>
        <param name="autoConvert">
          <see langword="true" /> en cas de conversion des données dans le format spécifié ; sinon <see langword="false" />.</param>
        <summary>Récupère les données associées au format de données spécifié, grâce à une valeur booléenne permettant de déterminer si les données doivent être converties dans le format spécifié.</summary>
        <returns>Données associées au format spécifié ou <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le `autoConvert` paramètre est `true` et que cette méthode ne peut pas trouver de données dans le format spécifié, il essaie de convertir les données au format. Si les données ne peut pas être converties au format spécifié, ou si les données ont été stockées avec la `autoConvert` paramètre la valeur `false`, cette méthode retourne `null`.  
  
 Si le `autoConvert` paramètre est `false`, cette méthode retourne les données dans le format spécifié, ou `null` si aucune donnée dans ce format ne peut être trouvée.  
  
 Pour déterminer si les données sont associées, ou peuvent être converties en un format, appelez <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour obtenir la liste des formats valides pour les données stockées dans cette instance.  
  
> [!NOTE]
>  Données peuvent être converties vers un autre format, si elle a été stockée en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en tant que Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetData` (méthode). L’exemple récupère les données stockées dans un `DataObject`, à l’aide du `autoConvert` paramètre pour spécifier s’il faut ou non convertir le format de données. Tout d’abord, `myDataObject` est créé avec les données texte. L’exemple essaie à deux reprises récupérer les données. Lors du premier essai, il spécifie que son format comme une chaîne et attribue le `autoConvert` paramètre `false`. Cette version d’évaluation échoue et le résultat est affiché dans une boîte de message intitulée « Message #1 ». Dans la deuxième version d’évaluation, l’exemple récupère les mêmes données avec le `autoConvert` paramètre la valeur `true`. Cette version d’évaluation réussit et le résultat est affiché dans une boîte de message intitulée « Message #2 ». L’exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Détermine si les données stockées dans cette instance sont associées au format spécifié.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Format à vérifier. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour obtenir les formats prédéfinis.</param>
        <summary>Détermine si les données stockées dans cette instance sont associées au format spécifié ou si elles peuvent être converties dans le format spécifié.</summary>
        <returns>
          <see langword="true" /> si les données stockées dans cette instance sont associées ou peuvent être converties au format spécifié ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour déterminer l’existence d’un format dans cette <xref:System.Windows.Forms.DataObject> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour les formats disponibles dans cette instance.  
  
> [!NOTE]
>  Données peuvent être converties vers un autre format, si elle a été stockée en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en tant que Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetDataPresent` (méthode). Tout d’abord, il crée un objet de données à l’aide d’une chaîne et le `Text` format. Ensuite, il vérifie que les données sont présentes dans le `Text` mettre en forme et affiche les résultats dans une boîte de message. L’exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">
          <see cref="T:System.Type" /> représentant le format à vérifier. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour obtenir les formats prédéfinis.</param>
        <summary>Détermine si les données stockées dans cette instance sont associées au format spécifié ou si elles peuvent être converties dans le format spécifié.</summary>
        <returns>
          <see langword="true" /> si les données stockées dans cette instance sont associées ou peuvent être converties au format spécifié ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour déterminer l’existence d’un format dans cette <xref:System.Windows.Forms.DataObject> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour les formats disponibles dans cette instance.  
  
> [!NOTE]
>  Données peuvent être converties vers un autre format, si elle a été stockée en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en tant que Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetDataPresent` (méthode). Tout d’abord, il crée un composant (`myComponent`) et le stocke dans un objet de données (`myDataObject`). Ensuite, il vérifie si les données spécifiées sont stockées dans `myDataObject`. Si le test a la valeur `true`, elle affiche le résultat dans une boîte de message et affiche le type de données dans une zone de texte. Cet exemple suppose que vous avez déjà créé un <xref:System.Windows.Forms.Form> nommé `Form1` et un <xref:System.Windows.Forms.TextBox> nommé `textBox1`.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Format à vérifier. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour obtenir les formats prédéfinis.</param>
        <param name="autoConvert">
          <see langword="true" /> pour déterminer si les données stockées dans cette instance peuvent être converties dans le format spécifié ; <see langword="false" /> pour vérifier si les données correspondent au format spécifié.</param>
        <summary>Détermine si les données stockées dans cette instance sont associées au format spécifié, grâce à une valeur booléenne permettant de déterminer si les données doivent être converties dans le format spécifié.</summary>
        <returns>
          <see langword="true" /> en présence de données dans le format spécifié ou en cas de possibilité de conversion des données dans le format spécifié ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour déterminer l’existence d’un format dans cette <xref:System.Windows.Forms.DataObject> avant d’appeler <xref:System.Windows.Forms.IDataObject.GetData%2A>. Appelez <xref:System.Windows.Forms.IDataObject.GetFormats%2A> pour les formats disponibles dans cette instance.  
  
 Cette méthode retourne `true` lorsque :  
  
-   Le `autoConvert` paramètre est `true` et les données sont dans un format qui peut être converti au format approprié.  
  
-   Le `autoConvert` paramètre est `false` et les données sont au format approprié.  
  
 Cette méthode retourne `false` lorsque :  
  
-   Le `autoConvert` paramètre est `true` et cette méthode ne peut pas trouver de données dans le format spécifié et elle ne peut pas convertir les données au format spécifié, ou les données ont été stockées avec `autoConvert` la valeur `false`.  
  
-   Le `autoConvert` paramètre est `false`, et les données n’existent pas dans cette instance au format spécifié.  
  
> [!NOTE]
>  Données peuvent être converties vers un autre format, si elle a été stockée en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en tant que Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetDataPresent` (méthode). Tout d’abord, il crée un objet de données (`myDataObject`) à l’aide d’une chaîne et le `Text` format. Puis il interroge l’objet pour les données associées à la `Text` format, avec la `autoConvert` paramètre la valeur `false`. Cette version d’évaluation échoue et le résultat est affiché dans une boîte de message intitulée « Message #1 ». Dans la deuxième version d’évaluation, il définit le `autoConvert` paramètre `true`. Cette version d’évaluation réussit et le résultat est affiché dans une boîte de message intitulée « Message #2 ». L’exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne la liste de tous les formats auxquels les données stockées dans cette instance sont associées ou dans lesquels ces données peuvent être converties.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne la liste de tous les formats auxquels les données stockées dans cette instance sont associées ou dans lesquels ces données peuvent être converties.</summary>
        <returns>Tableau de noms représentant la liste de tous les formats pris en charge par les données stockées dans cet objet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour obtenir les formats de données pris en charge avant d’appeler le <xref:System.Windows.Forms.IDataObject.GetData%2A> (méthode). Consultez la <xref:System.Windows.Forms.DataFormats> classe pour les formats prédéfinis.  
  
> [!NOTE]
>  Données peuvent être converties vers un autre format, si elle a été stockée en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en tant que Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetFormats` (méthode). Tout d’abord, il crée un objet de données (`myDataObject`) à l’aide d’une chaîne et le `Text` format. Puis il récupère tous les formats de données et les formats de conversion de données dans l’objet de données et affiche la liste des résultats dans une boîte de message. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert">
          <see langword="true" /> en cas de récupération de tous les formats auxquels les données stockées dans cette instance sont associées ou dans lesquels elles peuvent être converties ; <see langword="false" /> en cas de récupération des formats de données natifs uniquement.</param>
        <summary>Obtient la liste de tous les formats auxquels les données stockées dans cette instance sont associées ou dans lesquels ces données peuvent être converties, grâce à une valeur booléenne permettant de déterminer si seuls les formats natifs ou si l'ensemble des formats dans lesquels les données peuvent être converties doivent être récupérés.</summary>
        <returns>Tableau de noms représentant la liste de tous les formats pris en charge par les données stockées dans cet objet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez cette méthode pour obtenir les formats de données pris en charge avant d’appeler le <xref:System.Windows.Forms.IDataObject.GetData%2A> (méthode). Consultez la <xref:System.Windows.Forms.DataFormats> classe pour les formats prédéfinis.  
  
> [!NOTE]
>  Données peuvent être converties vers un autre format, si elle a été stockée en spécifiant que la conversion est autorisée, et si le format demandé est compatible avec le format stocké. Par exemple, les données stockées en tant que Unicode peut être converti en texte.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `GetFormats` (méthode). Tout d’abord, il crée un objet de données (`myDataObject`) à l’aide d’une chaîne et le `UnicodeText` format. Il effectue ensuite les deux requêtes pour obtenir les formats associés aux données. Dans la première requête, il définit le `autoConvert` paramètre `false` : dans ce cas, seul le format natif des données est retourné. Dans la deuxième requête, il définit le `autoConvert` paramètre `true`, afin qu’il obtient la liste des formats, y compris les formats de données peuvent être converties en. Dans chaque cas, la liste résultante est affichée dans une boîte de message. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stocke les données spécifiées et le format associé dans cette instance.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Données à stocker.</param>
        <summary>Stocke les données spécifiées dans cette instance à l'aide de la classe des données correspondant au format.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le format est dérivé de la classe de données.  
  
 Les données stockées à l’aide de cette méthode peuvent être converties en un format compatible lorsqu’il est extrait.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `SetData` (méthode). Tout d’abord, il crée un composant (`myComponent`) et le stocke dans un objet de données (`myDataObject`). Il vérifie ensuite si les données spécifiées sont stockées dans l’objet de données et affiche le résultat dans une boîte de message. L’exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Format associé aux données. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour obtenir les formats prédéfinis.</param>
        <param name="data">Données à stocker.</param>
        <summary>Stocke les données spécifiées et le format associé dans cette instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous ne connaissez pas le format de l’application cible, vous pouvez stocker des données dans plusieurs formats à l’aide de cette méthode.  
  
 Les données stockées à l’aide de cette méthode peuvent être converties en un format compatible lorsqu’il est extrait.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `SetData` (méthode). Tout d’abord, il crée un objet de données (`myDataObject`) et stocke une chaîne dans l’objet en spécifiant le `UnicodeText` format. Puis il récupère ces données stockées dans l’objet en spécifiant le `Text` mettre en forme, afin que les données sont converties à le `Text` format. Le résultat est affiché dans une boîte de message. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">
          <see cref="T:System.Type" /> représentant le format associé aux données. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour obtenir les formats prédéfinis.</param>
        <param name="data">Données à stocker.</param>
        <summary>Stocke les données spécifiées et le type classe associé dans cette instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous ne connaissez pas le format de l’application cible, vous pouvez stocker des données dans plusieurs formats à l’aide de cette méthode.  
  
 Les données stockées à l’aide de cette méthode peuvent être converties en un format compatible lorsqu’il est extrait.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `SetData` (méthode). Tout d’abord, il crée un composant (`myComponent`) et le stocke dans un objet de données (`myDataObject`), à l’aide `myType` pour spécifier le format de données. Il vérifie ensuite si les données du type spécifié sont stockées dans l’objet et affiche le résultat dans une boîte de message. L’exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Format associé aux données. Consultez <see cref="T:System.Windows.Forms.DataFormats" /> pour obtenir les formats prédéfinis.</param>
        <param name="autoConvert">
          <see langword="true" /> en cas d'autorisation de conversion des données dans un autre format ; sinon <see langword="false" />.</param>
        <param name="data">Données à stocker.</param>
        <summary>Stocke dans cette instance les données spécifiées et les formats associés, à l'aide d'une valeur booléenne permettant d'indiquer si les données peuvent être converties dans un autre format.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous ne connaissez pas le format de l’application cible, vous pouvez stocker des données dans plusieurs formats à l’aide de cette méthode.  
  
 Pour une implémentation de cette méthode, consultez <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Cet exemple utilise le <xref:System.Windows.Forms.DataObject> classe qui implémente `IDataObject`, pour illustrer l’utilisation de la `SetData` (méthode). Tout d’abord, il crée un objet de données (`myDataObject`) et stocke une `UnicodeText` de chaîne, avec la `autoConvert` paramètre la valeur `false`. Ensuite, il récupère les formats associés aux données stockées dans l’objet et affiche le résultat dans une boîte de message. Le seul format associé aux données est le `UnicodeText` format. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>