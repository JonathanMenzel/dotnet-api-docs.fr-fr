<Type Name="TextRenderer" FullName="System.Windows.Forms.TextRenderer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e1839a393e20aa4ca67aec799d2650ab7b4e2914" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37564735" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TextRenderer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TextRenderer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TextRenderer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TextRenderer" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextRenderer sealed" />
  <TypeSignature Language="F#" Value="type TextRenderer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des méthodes utilisées pour mesurer et restituer du texte. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TextRenderer> classe fournit un ensemble de `static` méthodes qui peuvent être utilisées pour mesurer et dessiner du texte sur un contrôle Windows Form.  
  
 Vous pouvez manipuler le dessin du texte en utilisant une des surcharges de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> qui prend un paramètre <xref:System.Windows.Forms.TextFormatFlags>. Par exemple, le comportement par défaut de <xref:System.Windows.Forms.TextRenderer> est d'ajouter le remplissage au rectangle englobant du texte dessiné pour recevoir des glyphes surplombants. Si vous devez dessiner une ligne de texte sans ces espaces supplémentaires, vous devez utiliser les versions de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> et <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> qui prennent un paramètre <xref:System.Drawing.Size> et <xref:System.Windows.Forms.TextFormatFlags>. Pour obtenir un exemple, consultez <xref:System.Windows.Forms.TextRenderer.MeasureText%28System.Drawing.IDeviceContext%2CSystem.String%2CSystem.Drawing.Font%2CSystem.Drawing.Size%2CSystem.Windows.Forms.TextFormatFlags%29>.  
  
> [!NOTE]
>  Le méthodes <xref:System.Windows.Forms.TextRenderer.DrawText%2A> de <xref:System.Windows.Forms.TextRenderer> ne sont pas prises en charge pour l'impression. Vous devez toujours utiliser le <xref:System.Drawing.Graphics.DrawString%2A> méthodes de la <xref:System.Drawing.Graphics> classe.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de la méthode <xref:System.Windows.Forms.TextRenderer.DrawText%2A>. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `RenderText1` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="DrawText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dessine le texte spécifié à l'emplacement indiqué, à l'aide du contexte de périphérique (Device Context), de la couleur et de la police spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le rendu de texte offertes par la <xref:System.Windows.Forms.TextRenderer> classe est basée sur le rendu de texte GDI et n’est pas pris en charge pour l’impression à partir de Windows Forms. Au lieu de cela, utilisez le <xref:System.Drawing.Graphics.DrawString%2A> méthodes de la <xref:System.Drawing.Graphics> classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public static void DrawText (System.Drawing.IDeviceContext dc, string text, System.Drawing.Font font, System.Drawing.Point pt, System.Drawing.Color foreColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawText(class System.Drawing.IDeviceContext dc, string text, class System.Drawing.Font font, valuetype System.Drawing.Point pt, valuetype System.Drawing.Color foreColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawText(System::Drawing::IDeviceContext ^ dc, System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Point pt, System::Drawing::Color foreColor);" />
      <MemberSignature Language="F#" Value="static member DrawText : System.Drawing.IDeviceContext * string * System.Drawing.Font * System.Drawing.Point * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.TextRenderer.DrawText (dc, text, font, pt, foreColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="dc">Contexte de périphérique (Device Context) dans lequel dessiner le texte.</param>
        <param name="text">Texte à dessiner.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte dessiné.</param>
        <param name="pt">
          <see cref="T:System.Drawing.Point" /> qui représente le coin supérieur gauche du texte dessiné.</param>
        <param name="foreColor">
          <see cref="T:System.Drawing.Color" /> à appliquer au texte dessiné.</param>
        <summary>Dessine le texte spécifié à l'emplacement indiqué, à l'aide du contexte de périphérique (Device Context), de la police et de la couleur spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez manipuler le dessin du texte en utilisant une des surcharges de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> qui prend un paramètre <xref:System.Windows.Forms.TextFormatFlags>.  
  
 Si `font` est `null` ou `forecolor` est <xref:System.Drawing.Color.Empty?displayProperty=nameWithType>, le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthode dessine le texte dans la police ou la couleur actuellement sélectionnée dans le contexte de périphérique spécifié par `dc`. Si `forecolor` est <xref:System.Drawing.Color.Transparent%2A>, le texte n’est pas dessiné.  
  
 Le rendu de texte offertes par la <xref:System.Windows.Forms.TextRenderer> classe est basée sur le rendu de texte GDI et n’est pas pris en charge pour l’impression à partir de Windows Forms. Au lieu de cela, utilisez le <xref:System.Drawing.Graphics.DrawString%2A> méthodes de la <xref:System.Drawing.Graphics> classe.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthodes qui spécifient un <xref:System.Drawing.Point> en tant que le coin supérieur gauche du texte dessiné ne s’affichent pas correctement sur Windows 2000. Si votre application est prévue pour une utilisation sur les ordinateurs exécutant Windows 2000, vous devez utiliser une de la <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthodes qui spécifient un <xref:System.Drawing.Rectangle> pour les limites du texte dessiné.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de la méthode <xref:System.Windows.Forms.TextRenderer.DrawText%2A>. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `RenderText1` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dc" /> est <see langword="null" />.</exception>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public static void DrawText (System.Drawing.IDeviceContext dc, string text, System.Drawing.Font font, System.Drawing.Rectangle bounds, System.Drawing.Color foreColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawText(class System.Drawing.IDeviceContext dc, string text, class System.Drawing.Font font, valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.Color foreColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawText(System::Drawing::IDeviceContext ^ dc, System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Rectangle bounds, System::Drawing::Color foreColor);" />
      <MemberSignature Language="F#" Value="static member DrawText : System.Drawing.IDeviceContext * string * System.Drawing.Font * System.Drawing.Rectangle * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.TextRenderer.DrawText (dc, text, font, bounds, foreColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="dc">Contexte de périphérique (Device Context) dans lequel dessiner le texte.</param>
        <param name="text">Texte à dessiner.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte dessiné.</param>
        <param name="bounds">
          <see cref="T:System.Drawing.Rectangle" /> qui représente les limites du texte.</param>
        <param name="foreColor">
          <see cref="T:System.Drawing.Color" /> à appliquer au texte dessiné.</param>
        <summary>Dessine le texte spécifié dans les limites indiquées, à l'aide du contexte de périphérique (Device Context), de la police et de la couleur spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `font` ou `forecolor` est `null` ou <xref:System.Drawing.Color.Empty?displayProperty=nameWithType>, respectivement ; le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthode dessine le texte dans la police ou la couleur actuellement sélectionnée dans le contexte de périphérique spécifié par `dc`. Si `forecolor` est <xref:System.Drawing.Color.Transparent%2A>, le texte n’est pas dessiné.  
  
 Cette méthode entraîne le texte est centré horizontalement et verticalement dans le rectangle spécifié par le `bounds` paramètre. Pour modifier la façon dont le texte est dessiné, utilisez une version de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> qui accepte un <xref:System.Windows.Forms.TextFormatFlags> type de paramètre.  
  
 Le rendu de texte offertes par la <xref:System.Windows.Forms.TextRenderer> classe est basée sur le rendu de texte GDI et n’est pas pris en charge pour l’impression à partir de Windows Forms. Au lieu de cela, utilisez le <xref:System.Drawing.Graphics.DrawString%2A> méthodes de la <xref:System.Drawing.Graphics> classe.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de la méthode <xref:System.Windows.Forms.TextRenderer.DrawText%2A>. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `RenderText2` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dc" /> est <see langword="null" />.</exception>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public static void DrawText (System.Drawing.IDeviceContext dc, string text, System.Drawing.Font font, System.Drawing.Point pt, System.Drawing.Color foreColor, System.Drawing.Color backColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawText(class System.Drawing.IDeviceContext dc, string text, class System.Drawing.Font font, valuetype System.Drawing.Point pt, valuetype System.Drawing.Color foreColor, valuetype System.Drawing.Color backColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawText(System::Drawing::IDeviceContext ^ dc, System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Point pt, System::Drawing::Color foreColor, System::Drawing::Color backColor);" />
      <MemberSignature Language="F#" Value="static member DrawText : System.Drawing.IDeviceContext * string * System.Drawing.Font * System.Drawing.Point * System.Drawing.Color * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.TextRenderer.DrawText (dc, text, font, pt, foreColor, backColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="dc">Contexte de périphérique (Device Context) dans lequel dessiner le texte.</param>
        <param name="text">Texte à dessiner.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte dessiné.</param>
        <param name="pt">
          <see cref="T:System.Drawing.Point" /> qui représente le coin supérieur gauche du texte dessiné.</param>
        <param name="foreColor">
          <see cref="T:System.Drawing.Color" /> à appliquer au texte dessiné.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> à appliquer à la zone d'arrière-plan du texte dessiné.</param>
        <summary>Dessine le texte spécifié à l'emplacement indiqué, à l'aide du contexte de périphérique (Device Context), de la police, de la couleur et de la couleur d'arrière-plan spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `backColor` paramètre est appliqué à la zone rectangulaire qui contient le texte dessiné. Si `font`, `backcolor` ou `forecolor` est `null` ou <xref:System.Drawing.Color.Empty?displayProperty=nameWithType>, respectivement ; le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthode dessine le texte dans la police ou la couleur actuellement sélectionnée dans le contexte de périphérique spécifié par `dc`. Si `forecolor` est <xref:System.Drawing.Color.Transparent%2A>, le texte n’est pas dessiné.  
  
 Vous pouvez manipuler le dessin du texte en utilisant une des surcharges de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> qui prend un paramètre <xref:System.Windows.Forms.TextFormatFlags>.  
  
 Le rendu de texte offertes par la <xref:System.Windows.Forms.TextRenderer> classe est basée sur le rendu de texte GDI et n’est pas pris en charge pour l’impression à partir de Windows Forms. Au lieu de cela, utilisez le <xref:System.Drawing.Graphics.DrawString%2A> méthodes de la <xref:System.Drawing.Graphics> classe.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthodes qui spécifient un <xref:System.Drawing.Point> en tant que le coin supérieur gauche du texte dessiné ne s’affichent pas correctement sur Windows 2000. Si votre application est prévue pour une utilisation sur les ordinateurs exécutant Windows 2000, vous devez utiliser une de la <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthodes qui spécifient un <xref:System.Drawing.Rectangle> pour les limites du texte dessiné.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de la méthode <xref:System.Windows.Forms.TextRenderer.DrawText%2A>. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `RenderText3` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dc" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public static void DrawText (System.Drawing.IDeviceContext dc, string text, System.Drawing.Font font, System.Drawing.Point pt, System.Drawing.Color foreColor, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawText(class System.Drawing.IDeviceContext dc, string text, class System.Drawing.Font font, valuetype System.Drawing.Point pt, valuetype System.Drawing.Color foreColor, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color,System.Windows.Forms.TextFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawText(System::Drawing::IDeviceContext ^ dc, System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Point pt, System::Drawing::Color foreColor, System::Windows::Forms::TextFormatFlags flags);" />
      <MemberSignature Language="F#" Value="static member DrawText : System.Drawing.IDeviceContext * string * System.Drawing.Font * System.Drawing.Point * System.Drawing.Color * System.Windows.Forms.TextFormatFlags -&gt; unit" Usage="System.Windows.Forms.TextRenderer.DrawText (dc, text, font, pt, foreColor, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="dc">Contexte de périphérique (Device Context) dans lequel dessiner le texte.</param>
        <param name="text">Texte à dessiner.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte dessiné.</param>
        <param name="pt">
          <see cref="T:System.Drawing.Point" /> qui représente le coin supérieur gauche du texte dessiné.</param>
        <param name="foreColor">
          <see cref="T:System.Drawing.Color" /> à appliquer au texte dessiné.</param>
        <param name="flags">Combinaison d'opérations de bits des valeurs <see cref="T:System.Windows.Forms.TextFormatFlags" />.</param>
        <summary>Dessine le texte spécifié à l'emplacement indiqué, à l'aide des instructions de contexte de périphérique (Device Context), de police, de couleur et de mise en forme spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez manipuler le dessin du texte en utilisant une des surcharges de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> qui prend un paramètre <xref:System.Windows.Forms.TextFormatFlags>. Par exemple, le comportement par défaut de <xref:System.Windows.Forms.TextRenderer> est d'ajouter le remplissage au rectangle englobant du texte dessiné pour recevoir des glyphes surplombants. Si vous devez dessiner une ligne de texte sans ces espaces supplémentaires, vous devez utiliser les versions de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> et <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> qui prennent un paramètre <xref:System.Drawing.Size> et <xref:System.Windows.Forms.TextFormatFlags>. Pour obtenir un exemple, consultez <xref:System.Windows.Forms.TextRenderer.MeasureText%28System.Drawing.IDeviceContext%2CSystem.String%2CSystem.Drawing.Font%2CSystem.Drawing.Size%2CSystem.Windows.Forms.TextFormatFlags%29>.  
  
 Le `backColor` paramètre est appliqué à la zone dans le `bounds` paramètre. Si `font` ou `forecolor` est `null` ou <xref:System.Drawing.Color.Empty?displayProperty=nameWithType>, respectivement ; le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthode dessine le texte dans la police ou la couleur actuellement sélectionnée dans le contexte de périphérique spécifié par `dc`. Si `forecolor` est <xref:System.Drawing.Color.Transparent%2A>, le texte n’est pas dessiné.  
  
 Le rendu de texte offertes par la <xref:System.Windows.Forms.TextRenderer> classe est basée sur le rendu de texte GDI et n’est pas pris en charge pour l’impression à partir de Windows Forms. Au lieu de cela, utilisez le <xref:System.Drawing.Graphics.DrawString%2A> méthodes de la <xref:System.Drawing.Graphics> classe.  
  
 Le <xref:System.Windows.Forms.TextRenderer> prend pas en charge l’ajout de taquets de tabulation au texte dessiné, bien que vous pouvez développer onglet existant s’arrête à l’aide de la <xref:System.Windows.Forms.TextFormatFlags.ExpandTabs> indicateur.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthodes qui spécifient un <xref:System.Drawing.Point> en tant que le coin supérieur gauche du texte dessiné ne s’affichent pas correctement sur Windows 2000. Si votre application est prévue pour une utilisation sur les ordinateurs exécutant Windows 2000, vous devez utiliser une de la <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthodes qui spécifient un <xref:System.Drawing.Rectangle> pour les limites du texte dessiné.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de la méthode <xref:System.Windows.Forms.TextRenderer.DrawText%2A>. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `RenderText5` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dc" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public static void DrawText (System.Drawing.IDeviceContext dc, string text, System.Drawing.Font font, System.Drawing.Rectangle bounds, System.Drawing.Color foreColor, System.Drawing.Color backColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawText(class System.Drawing.IDeviceContext dc, string text, class System.Drawing.Font font, valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.Color foreColor, valuetype System.Drawing.Color backColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawText(System::Drawing::IDeviceContext ^ dc, System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Rectangle bounds, System::Drawing::Color foreColor, System::Drawing::Color backColor);" />
      <MemberSignature Language="F#" Value="static member DrawText : System.Drawing.IDeviceContext * string * System.Drawing.Font * System.Drawing.Rectangle * System.Drawing.Color * System.Drawing.Color -&gt; unit" Usage="System.Windows.Forms.TextRenderer.DrawText (dc, text, font, bounds, foreColor, backColor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="dc">Contexte de périphérique (Device Context) dans lequel dessiner le texte.</param>
        <param name="text">Texte à dessiner.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte dessiné.</param>
        <param name="bounds">
          <see cref="T:System.Drawing.Rectangle" /> qui représente les limites du texte.</param>
        <param name="foreColor">
          <see cref="T:System.Drawing.Color" /> à appliquer au texte dessiné.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> à appliquer à la zone représentée par <c>bounds</c>.</param>
        <summary>Dessine le texte spécifié dans les limites indiquées, à l'aide du contexte de périphérique (Device Context), de la police, de la couleur et de la couleur d'arrière-plan spécifiés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `backColor` paramètre est appliqué à la zone dans le `bounds` paramètre. Si `font`, `backcolor` ou `forecolor` est `null` ou <xref:System.Drawing.Color.Empty>, respectivement ; le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthode dessine le texte dans la police ou la couleur actuellement sélectionnée dans le contexte de périphérique spécifié par `dc`. Si `forecolor` est <xref:System.Drawing.Color.Transparent%2A>, le texte n’est pas dessiné.  
  
 Cette méthode entraîne le texte est centré horizontalement et verticalement dans le rectangle spécifié par le `bounds` paramètre. Pour modifier la façon dont le texte est dessiné, utilisez une version de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> qui accepte un <xref:System.Windows.Forms.TextFormatFlags> type de paramètre.  
  
 Le rendu de texte offertes par la <xref:System.Windows.Forms.TextRenderer> classe est basée sur le rendu de texte GDI et n’est pas pris en charge pour l’impression à partir de Windows Forms. Au lieu de cela, utilisez le <xref:System.Drawing.Graphics.DrawString%2A> méthodes de la <xref:System.Drawing.Graphics> classe.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de la méthode <xref:System.Windows.Forms.TextRenderer.DrawText%2A>. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `RenderText4` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dc" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public static void DrawText (System.Drawing.IDeviceContext dc, string text, System.Drawing.Font font, System.Drawing.Rectangle bounds, System.Drawing.Color foreColor, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawText(class System.Drawing.IDeviceContext dc, string text, class System.Drawing.Font font, valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.Color foreColor, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Drawing.Color,System.Windows.Forms.TextFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawText(System::Drawing::IDeviceContext ^ dc, System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Rectangle bounds, System::Drawing::Color foreColor, System::Windows::Forms::TextFormatFlags flags);" />
      <MemberSignature Language="F#" Value="static member DrawText : System.Drawing.IDeviceContext * string * System.Drawing.Font * System.Drawing.Rectangle * System.Drawing.Color * System.Windows.Forms.TextFormatFlags -&gt; unit" Usage="System.Windows.Forms.TextRenderer.DrawText (dc, text, font, bounds, foreColor, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="dc">Contexte de périphérique (Device Context) dans lequel dessiner le texte.</param>
        <param name="text">Texte à dessiner.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte dessiné.</param>
        <param name="bounds">
          <see cref="T:System.Drawing.Rectangle" /> qui représente les limites du texte.</param>
        <param name="foreColor">
          <see cref="T:System.Drawing.Color" /> à appliquer au texte dessiné.</param>
        <param name="flags">Combinaison d'opérations de bits des valeurs <see cref="T:System.Windows.Forms.TextFormatFlags" />.</param>
        <summary>Dessine le texte spécifié dans les limites indiquées, à l'aide des instructions de contexte de périphérique (Device Context), de police, de couleur et de mise en forme spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `font` ou `color` est `null` ou <xref:System.Drawing.Color.Empty>, respectivement ; le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthode dessine le texte dans la police ou la couleur actuellement sélectionnée dans le contexte de périphérique spécifié par `dc`. Si `forecolor` est <xref:System.Drawing.Color.Transparent%2A>, le texte n’est pas dessiné.  
  
 Vous pouvez manipuler le dessin du texte en utilisant une des surcharges de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> qui prend un paramètre <xref:System.Windows.Forms.TextFormatFlags>. Par exemple, le comportement par défaut de <xref:System.Windows.Forms.TextRenderer> est d'ajouter le remplissage au rectangle englobant du texte dessiné pour recevoir des glyphes surplombants. Si vous devez dessiner une ligne de texte sans ces espaces supplémentaires, vous devez utiliser les versions de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> et <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> qui prennent un paramètre <xref:System.Drawing.Size> et <xref:System.Windows.Forms.TextFormatFlags>. Pour obtenir un exemple, consultez <xref:System.Windows.Forms.TextRenderer.MeasureText%28System.Drawing.IDeviceContext%2CSystem.String%2CSystem.Drawing.Font%2CSystem.Drawing.Size%2CSystem.Windows.Forms.TextFormatFlags%29>.  
  
 Le rendu de texte offertes par la <xref:System.Windows.Forms.TextRenderer> classe est basée sur le rendu de texte GDI et n’est pas pris en charge pour l’impression à partir de Windows Forms. Au lieu de cela, utilisez le <xref:System.Drawing.Graphics.DrawString%2A> méthodes de la <xref:System.Drawing.Graphics> classe.  
  
 Le <xref:System.Windows.Forms.TextRenderer> prend pas en charge l’ajout de taquets de tabulation au texte dessiné, bien que vous pouvez développer onglet existant s’arrête à l’aide de la <xref:System.Windows.Forms.TextFormatFlags.ExpandTabs> indicateur.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de la méthode <xref:System.Windows.Forms.TextRenderer.DrawText%2A>. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `RenderText6` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dc" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public static void DrawText (System.Drawing.IDeviceContext dc, string text, System.Drawing.Font font, System.Drawing.Point pt, System.Drawing.Color foreColor, System.Drawing.Color backColor, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawText(class System.Drawing.IDeviceContext dc, string text, class System.Drawing.Font font, valuetype System.Drawing.Point pt, valuetype System.Drawing.Color foreColor, valuetype System.Drawing.Color backColor, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color,System.Windows.Forms.TextFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawText(System::Drawing::IDeviceContext ^ dc, System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Point pt, System::Drawing::Color foreColor, System::Drawing::Color backColor, System::Windows::Forms::TextFormatFlags flags);" />
      <MemberSignature Language="F#" Value="static member DrawText : System.Drawing.IDeviceContext * string * System.Drawing.Font * System.Drawing.Point * System.Drawing.Color * System.Drawing.Color * System.Windows.Forms.TextFormatFlags -&gt; unit" Usage="System.Windows.Forms.TextRenderer.DrawText (dc, text, font, pt, foreColor, backColor, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="pt" Type="System.Drawing.Point" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="dc">Contexte de périphérique (Device Context) dans lequel dessiner le texte.</param>
        <param name="text">Texte à dessiner.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte dessiné.</param>
        <param name="pt">
          <see cref="T:System.Drawing.Point" /> qui représente le coin supérieur gauche du texte dessiné.</param>
        <param name="foreColor">
          <see cref="T:System.Drawing.Color" /> à appliquer au texte.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> à appliquer à la zone d'arrière-plan du texte dessiné.</param>
        <param name="flags">Combinaison d'opérations de bits des valeurs <see cref="T:System.Windows.Forms.TextFormatFlags" />.</param>
        <summary>Dessine le texte spécifié à l'emplacement indiqué, à l'aide des instructions de contexte de périphérique (Device Context), de police, de couleur, de couleur d'arrière-plan et de mise en forme spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `backcolor` paramètre est appliqué la zone rectangulaire qui contient le texte dessiné. Si `font` ou `forecolor` est `null` ou <xref:System.Drawing.Color.Empty>, respectivement ; le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthode dessine le texte dans la police ou la couleur actuellement sélectionnée dans le contexte de périphérique spécifié par `dc`. Si `forecolor` est <xref:System.Drawing.Color.Transparent%2A>, le texte n’est pas dessiné.  
  
 Vous pouvez manipuler le dessin du texte en utilisant une des surcharges de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> qui prend un paramètre <xref:System.Windows.Forms.TextFormatFlags>. Par exemple, le comportement par défaut de <xref:System.Windows.Forms.TextRenderer> est d'ajouter le remplissage au rectangle englobant du texte dessiné pour recevoir des glyphes surplombants. Si vous devez dessiner une ligne de texte sans ces espaces supplémentaires, vous devez utiliser les versions de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> et <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> qui prennent un paramètre <xref:System.Drawing.Size> et <xref:System.Windows.Forms.TextFormatFlags>. Pour obtenir un exemple, consultez <xref:System.Windows.Forms.TextRenderer.MeasureText%28System.Drawing.IDeviceContext%2CSystem.String%2CSystem.Drawing.Font%2CSystem.Drawing.Size%2CSystem.Windows.Forms.TextFormatFlags%29>.  
  
 Le rendu de texte offertes par la <xref:System.Windows.Forms.TextRenderer> classe est basée sur le rendu de texte GDI et n’est pas pris en charge pour l’impression à partir de Windows Forms. Au lieu de cela, utilisez le <xref:System.Drawing.Graphics.DrawString%2A> méthodes de la <xref:System.Drawing.Graphics> classe.  
  
 Le <xref:System.Windows.Forms.TextRenderer> prend pas en charge l’ajout de taquets de tabulation au texte dessiné, bien que vous pouvez développer onglet existant s’arrête à l’aide de la <xref:System.Windows.Forms.TextFormatFlags.ExpandTabs> indicateur.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthodes qui spécifient un <xref:System.Drawing.Point> en tant que le coin supérieur gauche du texte dessiné ne s’affichent pas correctement sur Windows 2000. Si votre application est prévue pour une utilisation sur les ordinateurs exécutant Windows 2000, vous devez utiliser une de la <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthodes qui spécifient un <xref:System.Drawing.Rectangle> pour les limites du texte dessiné.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de la méthode <xref:System.Windows.Forms.TextRenderer.DrawText%2A>. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `RenderText7` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dc" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public static void DrawText (System.Drawing.IDeviceContext dc, string text, System.Drawing.Font font, System.Drawing.Rectangle bounds, System.Drawing.Color foreColor, System.Drawing.Color backColor, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DrawText(class System.Drawing.IDeviceContext dc, string text, class System.Drawing.Font font, valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.Color foreColor, valuetype System.Drawing.Color backColor, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Windows.Forms.TextFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DrawText(System::Drawing::IDeviceContext ^ dc, System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Rectangle bounds, System::Drawing::Color foreColor, System::Drawing::Color backColor, System::Windows::Forms::TextFormatFlags flags);" />
      <MemberSignature Language="F#" Value="static member DrawText : System.Drawing.IDeviceContext * string * System.Drawing.Font * System.Drawing.Rectangle * System.Drawing.Color * System.Drawing.Color * System.Windows.Forms.TextFormatFlags -&gt; unit" Usage="System.Windows.Forms.TextRenderer.DrawText (dc, text, font, bounds, foreColor, backColor, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="foreColor" Type="System.Drawing.Color" />
        <Parameter Name="backColor" Type="System.Drawing.Color" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="dc">Contexte de périphérique (Device Context) dans lequel dessiner le texte.</param>
        <param name="text">Texte à dessiner.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte dessiné.</param>
        <param name="bounds">
          <see cref="T:System.Drawing.Rectangle" /> qui représente les limites du texte.</param>
        <param name="foreColor">
          <see cref="T:System.Drawing.Color" /> à appliquer au texte.</param>
        <param name="backColor">
          <see cref="T:System.Drawing.Color" /> à appliquer à la zone représentée par <c>bounds</c>.</param>
        <param name="flags">Combinaison d'opérations de bits des valeurs <see cref="T:System.Windows.Forms.TextFormatFlags" />.</param>
        <summary>Dessine le texte spécifié dans les limites indiquées, à l'aide des instructions de contexte de périphérique (Device Context), de police, de couleur, de couleur d'arrière-plan et de mise en forme spécifiées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `backcolor` paramètre est appliqué à la zone dans le `bounds` paramètre`.` si `font`, `forecolor` ou `backcolor` est `null` ou <xref:System.Drawing.Color.Empty>, respectivement ; le <xref:System.Windows.Forms.TextRenderer.DrawText%2A> sera (méthode) dessiner le texte dans la police ou la couleur actuellement sélectionnée dans le contexte de périphérique spécifié par `dc`. Si `forecolor` est <xref:System.Drawing.Color.Transparent%2A>, le texte n’est pas dessiné.  
  
 Vous pouvez manipuler le dessin du texte en utilisant une des surcharges de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> qui prend un paramètre <xref:System.Windows.Forms.TextFormatFlags>. Par exemple, le comportement par défaut de <xref:System.Windows.Forms.TextRenderer> est d'ajouter le remplissage au rectangle englobant du texte dessiné pour recevoir des glyphes surplombants. Si vous devez dessiner une ligne de texte sans ces espaces supplémentaires, vous devez utiliser les versions de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> et <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> qui prennent un paramètre <xref:System.Drawing.Size> et <xref:System.Windows.Forms.TextFormatFlags>. Pour obtenir un exemple, consultez <xref:System.Windows.Forms.TextRenderer.MeasureText%28System.Drawing.IDeviceContext%2CSystem.String%2CSystem.Drawing.Font%2CSystem.Drawing.Size%2CSystem.Windows.Forms.TextFormatFlags%29>.  
  
 Le rendu de texte offertes par la <xref:System.Windows.Forms.TextRenderer> classe est basée sur le rendu de texte GDI et n’est pas pris en charge pour l’impression à partir de Windows Forms. Au lieu de cela, utilisez le <xref:System.Drawing.Graphics.DrawString%2A> méthodes de la <xref:System.Drawing.Graphics> classe.  
  
 Le <xref:System.Windows.Forms.TextRenderer> prend pas en charge l’ajout de taquets de tabulation au texte dessiné, bien que vous pouvez développer onglet existant s’arrête à l’aide de la <xref:System.Windows.Forms.TextFormatFlags.ExpandTabs> indicateur.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de la méthode <xref:System.Windows.Forms.TextRenderer.DrawText%2A>. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `RenderText8` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dc" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mesure le texte spécifié lors de son dessin avec la police indiquée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size MeasureText (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size MeasureText(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.MeasureText(System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Size MeasureText(System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberSignature Language="F#" Value="static member MeasureText : string * System.Drawing.Font -&gt; System.Drawing.Size" Usage="System.Windows.Forms.TextRenderer.MeasureText (text, font)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">Texte à mesurer.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte mesuré.</param>
        <summary>Fournit la taille, en pixels, du texte spécifié lors de son dessin avec la police indiquée.</summary>
        <returns>
          <see cref="T:System.Drawing.Size" />, en pixels, de <paramref name="text" /> dessiné sur une ligne unique avec la police spécifiée (<paramref name="font" />). Vous pouvez manipuler le dessin du texte en utilisant une des surcharges de <see cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Drawing.Color,System.Windows.Forms.TextFormatFlags)" /> qui prend un paramètre <see cref="T:System.Windows.Forms.TextFormatFlags" />. Par exemple, le comportement par défaut de <see cref="T:System.Windows.Forms.TextRenderer" /> est d'ajouter le remplissage au rectangle englobant du texte dessiné pour recevoir des glyphes surplombants. Si vous devez dessiner une ligne de texte sans ces espaces supplémentaires, vous devez utiliser les versions de <see cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" /> et <see cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font)" /> qui prennent un paramètre <see cref="T:System.Drawing.Size" /> et <see cref="T:System.Windows.Forms.TextFormatFlags" />. Pour obtenir un exemple, consultez <see cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> méthode requiert que le texte est dessiné sur une seule ligne.  
  
   
  
## Examples  
 L'exemple de code suivant illustre l'utilisation de la méthode <xref:System.Windows.Forms.TextRenderer.MeasureText%2A>. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `MeasureText1` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size MeasureText (System.Drawing.IDeviceContext dc, string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size MeasureText(class System.Drawing.IDeviceContext dc, string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Size MeasureText(System::Drawing::IDeviceContext ^ dc, System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberSignature Language="F#" Value="static member MeasureText : System.Drawing.IDeviceContext * string * System.Drawing.Font -&gt; System.Drawing.Size" Usage="System.Windows.Forms.TextRenderer.MeasureText (dc, text, font)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="dc">Contexte de périphérique (Device Context) dans lequel mesurer le texte.</param>
        <param name="text">Texte à mesurer.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte mesuré.</param>
        <summary>Fournit la taille, en pixels, du texte spécifié dessiné avec la police indiquée dans le contexte de périphérique (Device Context) spécifié.</summary>
        <returns>
          <see cref="T:System.Drawing.Size" />, en pixels, de <paramref name="text" /> dessiné sur une ligne unique avec la police indiquée (<paramref name="font" />) dans le contexte de périphérique (Device Context) spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> méthode requiert que le texte est dessiné sur une seule ligne.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une de la <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> méthodes. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `DrawALineOfText` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size MeasureText (string text, System.Drawing.Font font, System.Drawing.Size proposedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size MeasureText(string text, class System.Drawing.Font font, valuetype System.Drawing.Size proposedSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.MeasureText(System.String,System.Drawing.Font,System.Drawing.Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Size MeasureText(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Size proposedSize);" />
      <MemberSignature Language="F#" Value="static member MeasureText : string * System.Drawing.Font * System.Drawing.Size -&gt; System.Drawing.Size" Usage="System.Windows.Forms.TextRenderer.MeasureText (text, font, proposedSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="proposedSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="text">Texte à mesurer.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte mesuré.</param>
        <param name="proposedSize">
          <see cref="T:System.Drawing.Size" /> du rectangle englobant initial.</param>
        <summary>Fournit la taille, en pixels, du texte spécifié lors de son dessin avec la police indiquée, en utilisant la taille spécifiée pour créer un rectangle englobant initial.</summary>
        <returns>
          <see cref="T:System.Drawing.Size" />, en pixels, de <paramref name="text" /> dessiné avec la police spécifiée (<paramref name="font" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> méthode utilise le `proposedSize` paramètre pour indiquer la relation entre la hauteur et la largeur lors de la détermination de la taille du texte. Lors de la mesure texte sur une seule ligne, si le `proposedSize` paramètre représente un <xref:System.Drawing.Size> avec une hauteur supérieure à <xref:System.Int32.MaxValue?displayProperty=nameWithType>, retourné <xref:System.Drawing.Size> sera ajusté pour refléter la hauteur réelle du texte.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une de la <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> méthodes. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `DrawALineOfText` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size MeasureText (System.Drawing.IDeviceContext dc, string text, System.Drawing.Font font, System.Drawing.Size proposedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size MeasureText(class System.Drawing.IDeviceContext dc, string text, class System.Drawing.Font font, valuetype System.Drawing.Size proposedSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Size MeasureText(System::Drawing::IDeviceContext ^ dc, System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Size proposedSize);" />
      <MemberSignature Language="F#" Value="static member MeasureText : System.Drawing.IDeviceContext * string * System.Drawing.Font * System.Drawing.Size -&gt; System.Drawing.Size" Usage="System.Windows.Forms.TextRenderer.MeasureText (dc, text, font, proposedSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="proposedSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="dc">Contexte de périphérique (Device Context) dans lequel mesurer le texte.</param>
        <param name="text">Texte à mesurer.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte mesuré.</param>
        <param name="proposedSize">
          <see cref="T:System.Drawing.Size" /> du rectangle englobant initial.</param>
        <summary>Fournit la taille, en pixels, du texte spécifié lors de son dessin avec la police indiquée dans le contexte de périphérique (Device Context) spécifié, en utilisant la taille spécifiée pour créer un rectangle englobant initial pour le texte.</summary>
        <returns>
          <see cref="T:System.Drawing.Size" />, en pixels, de <paramref name="text" /> dessiné avec la police spécifiée (<paramref name="font" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> méthode utilise le `proposedSize` paramètre pour indiquer la relation entre la hauteur et la largeur lors de la détermination de la taille du texte. Lors de la mesure texte sur une seule ligne, si le `proposedSize` paramètre représente un <xref:System.Drawing.Size> avec une hauteur supérieure à <xref:System.Int32.MaxValue?displayProperty=nameWithType>, retourné <xref:System.Drawing.Size> sera ajusté pour refléter la hauteur réelle du texte.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une de la <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> méthodes. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `DrawALineOfText` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dc" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MeasureText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size MeasureText (string text, System.Drawing.Font font, System.Drawing.Size proposedSize, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size MeasureText(string text, class System.Drawing.Font font, valuetype System.Drawing.Size proposedSize, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.MeasureText(System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Size MeasureText(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Size proposedSize, System::Windows::Forms::TextFormatFlags flags);" />
      <MemberSignature Language="F#" Value="static member MeasureText : string * System.Drawing.Font * System.Drawing.Size * System.Windows.Forms.TextFormatFlags -&gt; System.Drawing.Size" Usage="System.Windows.Forms.TextRenderer.MeasureText (text, font, proposedSize, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="proposedSize" Type="System.Drawing.Size" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="text">Texte à mesurer.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte mesuré.</param>
        <param name="proposedSize">
          <see cref="T:System.Drawing.Size" /> du rectangle englobant initial.</param>
        <param name="flags">Instructions de mise en forme à appliquer au texte mesuré.</param>
        <summary>Fournit la taille, en pixels, du texte spécifié lors de son dessin à l'aide des instructions de mise en forme et de police indiquées, en utilisant la taille spécifiée pour créer le rectangle englobant initial du texte.</summary>
        <returns>
          <see cref="T:System.Drawing.Size" />, en pixels, de <paramref name="text" /> dessiné avec la police (<paramref name="font" />) et le format spécifiés.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> utilise le `proposedSize` et `flags` paramètres pour indiquer la relation entre la hauteur et la largeur lors de la détermination de la taille du texte. Lors de la mesure texte sur une seule ligne, si le `proposedSize` paramètre représente un <xref:System.Drawing.Size> avec une hauteur supérieure à <xref:System.Int32.MaxValue?displayProperty=nameWithType>, retourné <xref:System.Drawing.Size> sera ajusté pour refléter la hauteur réelle du texte.  
  
 Vous pouvez manipuler le dessin du texte en utilisant une des surcharges de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> qui prend un paramètre <xref:System.Windows.Forms.TextFormatFlags>. Par exemple, le comportement par défaut de <xref:System.Windows.Forms.TextRenderer> est d'ajouter le remplissage au rectangle englobant du texte dessiné pour recevoir des glyphes surplombants. Si vous devez dessiner une ligne de texte sans ces espaces supplémentaires, vous devez utiliser les versions de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> et <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> qui prennent un paramètre <xref:System.Drawing.Size> et <xref:System.Windows.Forms.TextFormatFlags>. Pour obtenir un exemple, consultez <xref:System.Windows.Forms.TextRenderer.MeasureText%28System.Drawing.IDeviceContext%2CSystem.String%2CSystem.Drawing.Font%2CSystem.Drawing.Size%2CSystem.Windows.Forms.TextFormatFlags%29>.  
  
> [!NOTE]
>  Cette surcharge de <xref:System.Windows.Forms.TextRenderer.MeasureText%28System.String%2CSystem.Drawing.Font%2CSystem.Drawing.Size%2CSystem.Windows.Forms.TextFormatFlags%29> ignore un <xref:System.Windows.Forms.TextFormatFlags> valeur <xref:System.Windows.Forms.TextFormatFlags.NoPadding> ou <xref:System.Windows.Forms.TextFormatFlags.LeftAndRightPadding>. Si vous spécifiez une valeur de remplissage que la valeur par défaut, vous devez utiliser la surcharge de <xref:System.Windows.Forms.TextRenderer.MeasureText%28System.Drawing.IDeviceContext%2CSystem.String%2CSystem.Drawing.Font%2CSystem.Drawing.Size%2CSystem.Windows.Forms.TextFormatFlags%29> qui accepte un <xref:System.Drawing.IDeviceContext> objet.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser une de la <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> méthodes. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `DrawALineOfText` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureText">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size MeasureText (System.Drawing.IDeviceContext dc, string text, System.Drawing.Font font, System.Drawing.Size proposedSize, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size MeasureText(class System.Drawing.IDeviceContext dc, string text, class System.Drawing.Font font, valuetype System.Drawing.Size proposedSize, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Size MeasureText(System::Drawing::IDeviceContext ^ dc, System::String ^ text, System::Drawing::Font ^ font, System::Drawing::Size proposedSize, System::Windows::Forms::TextFormatFlags flags);" />
      <MemberSignature Language="F#" Value="static member MeasureText : System.Drawing.IDeviceContext * string * System.Drawing.Font * System.Drawing.Size * System.Windows.Forms.TextFormatFlags -&gt; System.Drawing.Size" Usage="System.Windows.Forms.TextRenderer.MeasureText (dc, text, font, proposedSize, flags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Drawing.IDeviceContext" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="proposedSize" Type="System.Drawing.Size" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="dc">Contexte de périphérique (Device Context) dans lequel mesurer le texte.</param>
        <param name="text">Texte à mesurer.</param>
        <param name="font">
          <see cref="T:System.Drawing.Font" /> à appliquer au texte mesuré.</param>
        <param name="proposedSize">
          <see cref="T:System.Drawing.Size" /> du rectangle englobant initial.</param>
        <param name="flags">Instructions de mise en forme à appliquer au texte mesuré.</param>
        <summary>Fournit la taille, en pixels, du texte spécifié lors de son dessin à l'aide des instructions de contexte de périphérique (Device Context), de police et de mise en forme indiquées, en utilisant la taille spécifiée pour créer le rectangle englobant initial du texte.</summary>
        <returns>
          <see cref="T:System.Drawing.Size" />, en pixels, de <paramref name="text" /> dessiné avec la police (<paramref name="font" />) et le format spécifiés.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> méthode utilise le `proposedSize` et `flags` paramètres pour indiquer la relation entre la hauteur et la largeur lors de la détermination de la taille du texte. Lors de la mesure texte sur une seule ligne, si le `proposedSize` paramètre représente un <xref:System.Drawing.Size> avec une hauteur supérieure à <xref:System.Int32.MaxValue?displayProperty=nameWithType>, retourné <xref:System.Drawing.Size> sera ajusté pour refléter la hauteur réelle du texte.  
  
 Vous pouvez manipuler le dessin du texte en utilisant une des surcharges de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> qui prend un paramètre <xref:System.Windows.Forms.TextFormatFlags>. Par exemple, le comportement par défaut de <xref:System.Windows.Forms.TextRenderer> est d'ajouter le remplissage au rectangle englobant du texte dessiné pour recevoir des glyphes surplombants. Si vous avez besoin dessiner une ligne de texte sans ces espaces supplémentaires, utilisez les versions de <xref:System.Windows.Forms.TextRenderer.DrawText%2A> et <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> qui prennent un <xref:System.Drawing.Size> et <xref:System.Windows.Forms.TextFormatFlags> paramètre, comme indiqué dans l’exemple.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le <xref:System.Windows.Forms.TextRenderer.MeasureText%2A> et <xref:System.Windows.Forms.TextRenderer.DrawText%2A> méthodes pour dessiner une ligne unique de texte dans différents styles de police. Pour exécuter cet exemple, collez le code suivant dans un Windows Form et appelez `DrawALineOfText` à partir du formulaire <xref:System.Windows.Forms.Control.Paint> Gestionnaire d’événements, en passant `e` comme <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Windows.Forms.TextRendererExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.TextRendererExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.TextRendererExamples/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dc" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>