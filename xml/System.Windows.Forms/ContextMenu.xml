<Type Name="ContextMenu" FullName="System.Windows.Forms.ContextMenu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32a273f5bb7f99ebc8a00e3b264698b541cfb0b9" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37514620" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ContextMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContextMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ContextMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class ContextMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContextMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type ContextMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Popup")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un menu contextuel. Bien que <see cref="T:System.Windows.Forms.ContextMenuStrip" /> remplace et ajoute des fonctionnalités au contrôle <see cref="T:System.Windows.Forms.ContextMenu" /> des versions antérieures, <see cref="T:System.Windows.Forms.ContextMenu" /> est conservé pour la compatibilité descendante et l'utilisation future si tel est votre choix.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ContextMenu> classe représente des menus contextuels qui peuvent être affichées lorsque l’utilisateur clique sur le bouton droit de la souris sur un contrôle ou de la zone du formulaire. Menus contextuels sont généralement utilisés pour combiner différents éléments de menu à partir d’un <xref:System.Windows.Forms.MainMenu> d’un formulaire qui sont utiles pour l’utilisateur étant donné le contexte de l’application. Par exemple, vous pouvez utiliser un menu contextuel assigné à un <xref:System.Windows.Forms.TextBox> contrôle afin de fournir des éléments de menu pour la modification de la police du texte, rechercher du texte dans le contrôle, ou les fonctionnalités du Presse-papiers pour copier et coller le texte. Vous pouvez également afficher les nouveaux <xref:System.Windows.Forms.MenuItem> dans un menu contextuel des objets qui ne sont pas situés dans un <xref:System.Windows.Forms.MainMenu> pour fournir des commandes spécifiques qui ne sont pas appropriées pour le <xref:System.Windows.Forms.MainMenu> à afficher.  
  
 En règle générale, un menu contextuel s’affiche quand un utilisateur clique sur le bouton droit de la souris sur un contrôle ou le formulaire lui-même. Les contrôles visibles et <xref:System.Windows.Forms.Form> ont un <xref:System.Windows.Forms.Control.ContextMenu%2A> propriété qui lie la <xref:System.Windows.Forms.ContextMenu> classe au contrôle qui affiche le menu contextuel. Plus d’un contrôle peut utiliser un <xref:System.Windows.Forms.ContextMenu>. Vous pouvez utiliser le <xref:System.Windows.Forms.ContextMenu.SourceControl%2A> propriété afin de déterminer quel contrôle dernier affiché le menu contextuel afin d’effectuer des tâches spécifiques au contrôle ou modifier le menu contextuel affiché pour le contrôle.  
  
 Vous souhaiterez peut-être savoir quand le menu contextuel s’affiche afin de définir des coches, désactivez les éléments et effectuer d’autres tâches de menu avant le menu s’affiche à l’utilisateur. Vous pouvez gérer le <xref:System.Windows.Forms.ContextMenu.Popup> événement pour déterminer quand le menu contextuel s’affiche.  
  
> [!NOTE]
>  Afin de le réutiliser <xref:System.Windows.Forms.MenuItem> les objets qui sont affichés dans un <xref:System.Windows.Forms.MainMenu> pour une utilisation dans un <xref:System.Windows.Forms.ContextMenu>, vous devez créer une copie du menu en utilisant la <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> méthode de la <xref:System.Windows.Forms.MenuItem> classe. Vous pouvez également fusionner des éléments de menu et leurs éléments de sous-menu dans un seul <xref:System.Windows.Forms.MenuItem> à l’aide de l’objet le <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> méthode de la <xref:System.Windows.Forms.MenuItem> classe.  
  
   
  
## Examples  
 L’exemple de code suivant crée un gestionnaire d’événements pour le <xref:System.Windows.Forms.ContextMenu.Popup> événements de la <xref:System.Windows.Forms.ContextMenu>. Le code dans le Gestionnaire d’événements détermine laquelle des deux contrôles un <xref:System.Windows.Forms.PictureBox> nommé `pictureBox1` et un <xref:System.Windows.Forms.TextBox> nommé `textBox1` est le contrôle affiche le menu contextuel. Selon le contrôle qui a provoqué la <xref:System.Windows.Forms.ContextMenu> pour afficher son menu contextuel, le contrôle ajoute approprié <xref:System.Windows.Forms.MenuItem> des objets sur le <xref:System.Windows.Forms.ContextMenu>. Cet exemple nécessite que vous disposez d’une instance de la <xref:System.Windows.Forms.ContextMenu> classe, nommée `contextMenu1`, défini dans le formulaire. Cet exemple nécessite également que vous avez un <xref:System.Windows.Forms.TextBox> et <xref:System.Windows.Forms.PictureBox> ajouté à un formulaire et que le <xref:System.Windows.Forms.Control.ContextMenu%2A> propriété de ces contrôles est définie sur `contextMenu1`.  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="T:System.Windows.Forms.MainMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.ContextMenu" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.ContextMenu" /> dans laquelle aucun élément de menu n'est spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une fois que vous avez utilisé cette version du constructeur, vous pouvez ajouter des éléments de menu pour le <xref:System.Windows.Forms.ContextMenu> à l’aide de la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> méthode de la <xref:System.Windows.Forms.Menu.MenuItemCollection> classe. Vous pouvez accéder à la <xref:System.Windows.Forms.Menu.MenuItemCollection> via la <xref:System.Windows.Forms.Menu.MenuItems%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu (System.Windows.Forms.MenuItem[] menuItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] menuItems) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (menuItems As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ menuItems);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ContextMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.ContextMenu" Usage="new System.Windows.Forms.ContextMenu menuItems" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="menuItems" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="menuItems">Tableau d'objets <see cref="T:System.Windows.Forms.MenuItem" /> représentant les éléments de menu à ajouter au menu contextuel.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.ContextMenu" /> avec un jeu d'objets <see cref="T:System.Windows.Forms.MenuItem" /> spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette version du constructeur pour créer un <xref:System.Windows.Forms.ContextMenu> qui a ses éléments de menu spécifiés au moment de sa création. Une fois que vous avez utilisé cette version du constructeur, vous pouvez ajouter des éléments de menu supplémentaires pour le <xref:System.Windows.Forms.ContextMenu> à l’aide de la <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> méthode de la <xref:System.Windows.Forms.Menu.MenuItemCollection> classe. Vous pouvez accéder à la <xref:System.Windows.Forms.Menu.MenuItemCollection> via la <xref:System.Windows.Forms.Menu.MenuItems%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la construction d’un menu contextuel et à l’aide de la <xref:System.Windows.Forms.ContextMenu.Show%2A> (méthode). Pour exécuter l’exemple, collez le code suivant dans un formulaire contenant un bouton nommé Button1. Vous pouvez utiliser cette propriété dans le  événements pour vous assurer que le contrôle affiche les éléments de menu appropriées.  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le menu contextuel est réduit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d'informations sur la gestion des événements, voir [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Dans la mesure où le  hérite de la classe , vous pouvez également utiliser cette propriété si le  est associé à un formulaire. Dans l’exemple, un gestionnaire d’événements des rapports sur l’occurrence de la <xref:System.Windows.Forms.ContextMenu.Collapse> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un multiligne <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.ContextMenu> nommé `ContextMenu1`. Puis vous assurer que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.ContextMenu.Collapse> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#170](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#170)]
 [!code-vb[System.Windows.Forms.EventExamples#170](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="contextMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ContextMenu.Collapse" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPopup : EventArgs -&gt; unit&#xA;override this.OnPopup : EventArgs -&gt; unit" Usage="contextMenu.OnPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ContextMenu.Popup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberSignature Language="F#" Value="member this.Popup : EventHandler " Usage="member this.Popup : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit avant que le menu contextuel soit affiché.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cet événement pour initialiser le <xref:System.Windows.Forms.MenuItem> objets avant de les afficher. Par exemple, si vous utilisez un <xref:System.Windows.Forms.ContextMenu> pour trois <xref:System.Windows.Forms.TextBox> contrôles et que vous souhaitez désactiver certains éléments de menu dans le <xref:System.Windows.Forms.ContextMenu> selon lequel <xref:System.Windows.Forms.TextBox> est affiche le menu contextuel, vous pouvez créer un gestionnaire d’événements pour cet événement. Vous pouvez utiliser la <xref:System.Windows.Forms.ContextMenu.SourceControl%2A> propriété pour déterminer quelle <xref:System.Windows.Forms.TextBox> doit afficher le <xref:System.Windows.Forms.ContextMenu> et désactiver approprié <xref:System.Windows.Forms.MenuItem> objets.  
  
 Pour plus d'informations sur la gestion des événements, voir [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant crée un gestionnaire d’événements pour le <xref:System.Windows.Forms.ContextMenu.Popup> événements de la <xref:System.Windows.Forms.ContextMenu>. Le code dans le Gestionnaire d’événements détermine laquelle des deux contrôles un <xref:System.Windows.Forms.PictureBox> nommé `pictureBox1` et un <xref:System.Windows.Forms.TextBox> nommé `textBox1` est le contrôle affiche le menu contextuel. Selon le contrôle qui a provoqué la <xref:System.Windows.Forms.ContextMenu> pour afficher son menu contextuel, le contrôle ajoute approprié <xref:System.Windows.Forms.MenuItem> des objets sur le <xref:System.Windows.Forms.ContextMenu>. Cet exemple nécessite que vous disposez d’une instance de la <xref:System.Windows.Forms.ContextMenu> classe, nommée `contextMenu1`, défini dans le formulaire. Cet exemple nécessite également que vous avez un <xref:System.Windows.Forms.TextBox> et <xref:System.Windows.Forms.PictureBox> ajouté à un formulaire et que le <xref:System.Windows.Forms.Control.ContextMenu%2A> propriété de ces contrôles est définie sur `contextMenu1`.  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData, System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData, class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys,System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData, System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey :  * System.Windows.Forms.Keys * System.Windows.Forms.Control -&gt; bool" Usage="contextMenu.ProcessCmdKey (msg, keyData, control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="msg">
          <see cref="T:System.Windows.Forms.Message" />, passé par référence, qui représente le message de fenêtre à traiter.</param>
        <param name="keyData">Une des valeurs <see cref="T:System.Windows.Forms.Keys" /> qui représente la touche à traiter.</param>
        <param name="control">Contrôle auquel s'applique la touche de commande.</param>
        <summary>Traite une touche de commande.</summary>
        <returns>
          <see langword="true" /> si le caractère a été traité par le contrôle ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est appelée pendant le prétraitement du message pour gérer les touches de commande. Touches de commande sont des clés qui ont toujours priorité sur les touches d’entrée standards. Accélérateurs et des raccourcis de menu sont des exemples de touches de commande. La méthode doit retourner `true` pour indiquer qu’il a traité la touche de commande, ou `false` pour indiquer que la clé n’est pas une touche de commande. Cette méthode est appelée uniquement lorsque le contrôle est hébergé dans une application Windows Forms ou comme un contrôle ActiveX.  
  
 Le <xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A> méthode détermine d’abord si le contrôle a un <xref:System.Windows.Forms.ContextMenu>et si tel est le cas, permet la <xref:System.Windows.Forms.ContextMenu> pour traiter la touche de commande. Si la clé de commande n’est pas un raccourci du menu et le contrôle a un parent, la clé est transmise à du parent <xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A> (méthode). L’effet net est que les clés sont « propagés » à la hiérarchie des contrôles de commande. En plus de la touche de l’utilisateur, les données de clé indiquent également quelle, le cas échéant, les touches de modification ont été enfoncées en même temps que la clé. Touches de modification incluent les touches MAJ, CTRL et ALT.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">à l’appelant immédiat d’appeler du code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides">
          <para>Lors du remplacement de la <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> méthode dans une classe dérivée, un contrôle doit retourner <see langword="true" /> pour indiquer qu’il a traité la clé. Pour les clés qui ne sont pas traités par le contrôle, le résultat de l’appel de la classe de base <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> méthode doit être retournée. Contrôles rarement, voire jamais, devez substituer cette méthode.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le texte géré par le contrôle est affiché de droite à gauche.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.RightToLeft" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété permet aux menus de prendre en charge les langues qui sont écrits de droite à gauche. Lorsque cette propriété est définie `RightToLeft.Yes`, le texte de l’élément de menu est affiché de droite à gauche au lieu de la valeur par défaut de gauche à droite.  
  
> [!NOTE]
>  Pour plus d’informations sur l’activation d’alignement de droite à gauche sur les contrôles Windows Forms, consultez le <xref:System.Windows.Forms.Control.RightToLeft%2A> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La valeur assignée à la propriété n'est pas un membre valide de l'énumération <see cref="T:System.Windows.Forms.RightToLeft" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Show">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Affiche le menu contextuel à la position spécifiée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point -&gt; unit" Usage="contextMenu.Show (control, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="control">
          <see cref="T:System.Windows.Forms.Control" /> qui spécifie le contrôle auquel est associé le menu contextuel.</param>
        <param name="pos">
          <see cref="T:System.Drawing.Point" /> qui spécifie les coordonnées au niveau desquelles doit être affiché le menu. Ces coordonnées sont spécifiées par rapport aux coordonnées clientes du contrôle spécifié dans le paramètre <c>control</c>.</param>
        <summary>Affiche le menu contextuel à la position spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En règle générale, un <xref:System.Windows.Forms.ContextMenu> s’affiche lorsque l’utilisateur clique sur le bouton droit de la souris sur un contrôle ou de la zone du formulaire qui le <xref:System.Windows.Forms.ContextMenu> est lié. Vous pouvez utiliser cette méthode pour afficher le menu contextuel à un emplacement spécifique manuellement et les lier à un contrôle spécifique. Cette méthode ne retourne pas jusqu'à ce que le menu disparaît.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la construction d’un menu contextuel et à l’aide de la <xref:System.Windows.Forms.ContextMenu.Show%2A> (méthode). Pour exécuter l’exemple, collez le code suivant dans un formulaire contenant un bouton nommé Button1. Vous pouvez utiliser cette propriété dans le  événements pour vous assurer que le contrôle affiche les éléments de menu appropriées.  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="control" /> a la valeur <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Le handle du contrôle n'existe pas ou le contrôle n'est pas visible.</exception>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos, System.Windows.Forms.LeftRightAlignment alignment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos, valuetype System.Windows.Forms.LeftRightAlignment alignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos, System::Windows::Forms::LeftRightAlignment alignment);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point * System.Windows.Forms.LeftRightAlignment -&gt; unit" Usage="contextMenu.Show (control, pos, alignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
        <Parameter Name="alignment" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="control">
          <see cref="T:System.Windows.Forms.Control" /> qui spécifie le contrôle auquel est associé le menu contextuel.</param>
        <param name="pos">
          <see cref="T:System.Drawing.Point" /> qui spécifie les coordonnées au niveau desquelles doit être affiché le menu. Ces coordonnées sont spécifiées par rapport aux coordonnées clientes du contrôle spécifié dans le paramètre <c>control</c>.</param>
        <param name="alignment">
          <see cref="T:System.Windows.Forms.LeftRightAlignment" /> qui spécifie l’alignement du contrôle par rapport au paramètre <c>pos</c>.</param>
        <summary>Affiche le menu contextuel à la position spécifiée et avec l'alignement spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control SourceControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control SourceControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ SourceControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le contrôle qui affiche le menu contextuel.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Control" /> représentant le contrôle qui affiche le menu contextuel. Si aucun contrôle n'a affiché le menu contextuel, la propriété retourne la valeur <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété vous permet de déterminer le contrôle qui affiche actuellement le menu contextuel défini dans le <xref:System.Windows.Forms.ContextMenu>. Si le menu contextuel n’est pas affiché, vous pouvez utiliser cette propriété pour déterminer quel contrôle dernier affiché le menu contextuel. Vous pouvez utiliser cette propriété dans le <xref:System.Windows.Forms.ContextMenu.Popup> événements pour vous assurer que le contrôle affiche les éléments de menu appropriées. Vous pouvez également utiliser cette propriété pour transmettre une référence au contrôle à une méthode qui effectue les tâches associées à une commande de menu affichée dans le menu contextuel. Dans la mesure où le <xref:System.Windows.Forms.Form> hérite de la classe <xref:System.Windows.Forms.Control>, vous pouvez également utiliser cette propriété si le <xref:System.Windows.Forms.ContextMenu> est associé à un formulaire.  
  
   
  
## Examples  
 L’exemple de code suivant crée un gestionnaire d’événements pour le <xref:System.Windows.Forms.ContextMenu.Popup> événements de la <xref:System.Windows.Forms.ContextMenu>. Le code dans le Gestionnaire d’événements détermine laquelle des deux contrôles un <xref:System.Windows.Forms.PictureBox> nommé `pictureBox1` et un <xref:System.Windows.Forms.TextBox> nommé `textBox1` est le contrôle affiche le menu contextuel. Selon le contrôle qui a provoqué la <xref:System.Windows.Forms.ContextMenu> pour afficher son menu contextuel, le contrôle ajoute approprié <xref:System.Windows.Forms.MenuItem> des objets sur le <xref:System.Windows.Forms.ContextMenu>. Cet exemple nécessite que vous disposez d’une instance de la <xref:System.Windows.Forms.ContextMenu> classe, nommée `contextMenu1`, défini dans le formulaire. Cet exemple nécessite également que vous avez un <xref:System.Windows.Forms.TextBox> et <xref:System.Windows.Forms.PictureBox> ajouté à un formulaire et que le <xref:System.Windows.Forms.Control.ContextMenu%2A> propriété de ces contrôles est définie sur `contextMenu1`.  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>