<Type Name="Menu" FullName="System.Windows.Forms.Menu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="adf082395a798050141636ba818758d1dede43a6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36517452" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Menu : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Menu extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Menu" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Menu&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Menu abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Menu = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente les fonctionnalités de base pour tous les menus. Bien que <see cref="T:System.Windows.Forms.ToolStripDropDown" /> et <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" /> remplacent et ajoutent des fonctionnalités au contrôle <see cref="T:System.Windows.Forms.Menu" /> des versions antérieures, <see cref="T:System.Windows.Forms.Menu" /> est conservé pour la compatibilité descendante et l'utilisation ultérieure, si tel est votre choix.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette classe est la classe de base pour le <xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.MenuItem>, et <xref:System.Windows.Forms.ContextMenu> classes. Vous ne pouvez pas créer une instance de cette classe. Les menus d’une application sont constitués de <xref:System.Windows.Forms.MenuItem> objets. Elles peuvent contenir d’autres <xref:System.Windows.Forms.MenuItem> objets représentant des éléments de sous-menu. Le <xref:System.Windows.Forms.MenuItem> objets peuvent être stockés dans un <xref:System.Windows.Forms.MainMenu> pour s’afficher comme une structure de menus complète d’un formulaire ou un <xref:System.Windows.Forms.ContextMenu> qui est utilisé pour afficher les menus contextuels. Cette classe fournit des fonctionnalités communes pour toutes les classes de menu.  
  
 Contrairement à nombreuses classes de base, la <xref:System.Windows.Forms.Menu> classe utilise ses classes dérivées pour définir le nombre de ses propriétés. Si vous utilisez votre menu dans une application de l’interface multidocument (MDI), vous pouvez utiliser la <xref:System.Windows.Forms.Menu.MdiListItem%2A> propriété pour spécifier un <xref:System.Windows.Forms.MenuItem> qui affiche une liste de formulaires enfants MDI ouverts dans votre application. Le <xref:System.Windows.Forms.Menu.MenuItems%2A> propriété contient une liste de <xref:System.Windows.Forms.MenuItem> objets stockés dans la classe de menu. Pour un <xref:System.Windows.Forms.MainMenu> ou <xref:System.Windows.Forms.ContextMenu>, cette propriété contient tous les <xref:System.Windows.Forms.MenuItem> objets qui sont affichés. Pour un <xref:System.Windows.Forms.MenuItem>, le <xref:System.Windows.Forms.Menu.MenuItems%2A> propriété représente les éléments de sous-menu associés.  
  
 Outre les propriétés fournies pour toutes les classes de menu dérivées, la <xref:System.Windows.Forms.Menu> classe fournit également des méthodes, telles que <xref:System.Windows.Forms.Menu.CloneMenu%2A> et <xref:System.Windows.Forms.Menu.MergeMenu%2A>, qui vous permettent de créer de nouveaux menus à partir des menus existants et également fusionner deux structures de menu ensemble.  
  
 Le <xref:System.Windows.Forms.Menu> classe définit également la classe imbriquée <xref:System.Windows.Forms.Menu.MenuItemCollection>. Cette classe définit la collection de <xref:System.Windows.Forms.MenuItem> objets utilisés par le <xref:System.Windows.Forms.Menu.MenuItems%2A> propriété. Vous pouvez utiliser les méthodes de la <xref:System.Windows.Forms.Menu.MenuItemCollection> classe pour ajouter et supprimer des éléments de menu d’un <xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.ContextMenu>, ou <xref:System.Windows.Forms.MenuItem>.  
  
   
  
## Examples  
 L’exemple de code suivant utilise la classe dérivée, <xref:System.Windows.Forms.MenuItem>, pour créer une structure de menu pour un formulaire. L’exemple de code ajoute une <xref:System.Windows.Forms.MenuItem> pour représenter l’élément de menu de niveau supérieur, lui ajoute un élément de sous-menu qui permet de sélectionner une taille de police, puis ajoute deux éléments de sous-menu à cet élément de menu qui représentent les options de police petites et grandes dans une application. L’exemple requiert qu’il existe un <xref:System.Windows.Forms.MainMenu> objet nommé `mainMenu1` et quatre <xref:System.Windows.Forms.MenuItem> objets nommés `menuItem1`, `menuItem2`, `menuItem3`, et `menuItem4`.  
  
 [!code-cpp[Classic Menu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu Example/CS/source.cs#1)]
 [!code-vb[Classic Menu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MainMenu" />
    <altmember cref="T:System.Windows.Forms.ContextMenu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Menu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Menu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Menu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.Menu" Usage="new System.Windows.Forms.Menu items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">Tableau de type <see cref="T:System.Windows.Forms.MenuItem" /> contenant les objets à ajouter au menu.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.Menu" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que <xref:System.Windows.Forms.Menu> est une classe abstraite, seules les classes héritées peuvent appeler le constructeur de Menu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="protected internal void CloneMenu (System.Windows.Forms.Menu menuSrc);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CloneMenu(class System.Windows.Forms.Menu menuSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CloneMenu (menuSrc As Menu)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CloneMenu(System::Windows::Forms::Menu ^ menuSrc);" />
      <MemberSignature Language="F#" Value="member this.CloneMenu : System.Windows.Forms.Menu -&gt; unit" Usage="menu.CloneMenu menuSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSrc" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="menuSrc">
          <see cref="T:System.Windows.Forms.Menu" /> à copier.</param>
        <summary>Copie le <see cref="T:System.Windows.Forms.Menu" /> qui est passé comme paramètre au <see cref="T:System.Windows.Forms.Menu" /> en cours.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode copie l’intégralité de la liste de <xref:System.Windows.Forms.MenuItem> objets (stockées dans le <xref:System.Windows.Forms.Menu> passé à `menuSrc`) dans le menu actuel. Vous pouvez utiliser cette méthode dans votre classe dérivée pour cloner <xref:System.Windows.Forms.MenuItem> objets. Ils peuvent ensuite être réutilisés par d’autres classes qui dérivent de <xref:System.Windows.Forms.Menu>, tel que <xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.ContextMenu>, et <xref:System.Windows.Forms.MenuItem>.  
  
   
  
## Examples  
 Cet exemple crée un menu principal, `mainMenu1`, avec trois éléments de menu : `File`, `Edit`, et `View`. Il utilise ensuite la <xref:System.Windows.Forms.Menu.CloneMenu%2A> méthode pour copier `mainMenu1` dans `mainMenu2`. Le menu cloné est ensuite assigné au formulaire et affiché. Ce programme nécessite que vous avez déjà créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[CloneMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CloneMenu/CPP/form1.cpp#1)]
 [!code-csharp[CloneMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CloneMenu/CS/form1.cs#1)]
 [!code-vb[CloneMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CloneMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.MainMenu" />
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected virtual IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IntPtr CreateMenuHandle();" />
      <MemberSignature Language="F#" Value="abstract member CreateMenuHandle : unit -&gt; nativeint&#xA;override this.CreateMenuHandle : unit -&gt; nativeint" Usage="menu.CreateMenuHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée un nouveau handle pour <see cref="T:System.Windows.Forms.Menu" />.</summary>
        <returns>Handle vers le menu si la méthode réussit ; sinon, <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour opérer avec du code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="menu.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
        <summary>Libère les ressources (autres que la mémoire) utilisées par <see cref="T:System.Windows.Forms.Menu" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez la méthode <xref:System.Windows.Forms.Menu.Dispose%2A> une fois que vous avez terminé d'utiliser <xref:System.Windows.Forms.Menu>. La méthode <xref:System.Windows.Forms.Menu.Dispose%2A> rend le <xref:System.Windows.Forms.Menu> inutilisable. Après avoir appelé <xref:System.Windows.Forms.Menu.Dispose%2A>, vous devez libérer toutes les références à la <xref:System.Windows.Forms.Menu> afin que la mémoire occupée puisse être récupérée par le garbage collection.  
  
> [!NOTE]
>  Appelez toujours <xref:System.Windows.Forms.Menu.Dispose%2A> avant de libérer votre dernière référence à <xref:System.Windows.Forms.Menu>. Dans le cas contraire, les ressources du <xref:System.Windows.Forms.Menu> est à l’aide n’est pas libérée tant que le garbage collection du <xref:System.Windows.Forms.Menu> destructeur de l’objet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindHandle">
      <MemberSignature Language="C#" Value="public const int FindHandle = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FindHandle = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Menu.FindHandle" />
      <MemberSignature Language="VB.NET" Value="Public Const FindHandle As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int FindHandle = 0;" />
      <MemberSignature Language="F#" Value="val mutable FindHandle : int" Usage="System.Windows.Forms.Menu.FindHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Spécifie que la méthode <see cref="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" /> doit rechercher un handle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMenuItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem FindMenuItem (int type, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MenuItem FindMenuItem(int32 type, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMenuItem (type As Integer, value As IntPtr) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::MenuItem ^ FindMenuItem(int type, IntPtr value);" />
      <MemberSignature Language="F#" Value="member this.FindMenuItem : int * nativeint -&gt; System.Windows.Forms.MenuItem" Usage="menu.FindMenuItem (type, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Int32" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="type">Type d'élément à utiliser pour rechercher <see cref="T:System.Windows.Forms.MenuItem" />.</param>
        <param name="value">Élément à utiliser pour rechercher le <see cref="T:System.Windows.Forms.MenuItem" />.</param>
        <summary>Obtient le <see cref="T:System.Windows.Forms.MenuItem" /> qui contient la valeur spécifiée.</summary>
        <returns>Le <see cref="T:System.Windows.Forms.MenuItem" /> qui correspond à la valeur ; sinon, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour rechercher un <xref:System.Windows.Forms.MenuItem> à l’aide d’un handle, passez le <xref:System.Windows.Forms.Menu.FindHandle> champ en tant que le type et le handle de la <xref:System.Windows.Forms.MenuItem> vous souhaitez rechercher comme valeur.  
  
 Pour rechercher un <xref:System.Windows.Forms.MenuItem> à l’aide d’un raccourci, passez le <xref:System.Windows.Forms.Menu.FindShortcut> champ en tant que le type et la valeur de raccourci pour la <xref:System.Windows.Forms.MenuItem> vous souhaitez rechercher comme valeur.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">pour les contrôles d’appeler cette méthode. Énumération associée : <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FindMergePosition">
      <MemberSignature Language="C#" Value="protected int FindMergePosition (int mergeOrder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance int32 FindMergePosition(int32 mergeOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.FindMergePosition(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function FindMergePosition (mergeOrder As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; int FindMergePosition(int mergeOrder);" />
      <MemberSignature Language="F#" Value="member this.FindMergePosition : int -&gt; int" Usage="menu.FindMergePosition mergeOrder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="mergeOrder">Ordre de fusion pour l'élément de menu à fusionner.</param>
        <summary>Retourne la position à laquelle un élément de menu doit être inséré dans le menu.</summary>
        <returns>Position à laquelle un élément de menu doit être inséré dans le menu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’ordre de fusion d’un élément de menu spécifie la position relative que cet élément de menu occupera si la structure de menu qui le <xref:System.Windows.Forms.MenuItem> est contenue dans est fusionné avec un autre.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindShortcut">
      <MemberSignature Language="C#" Value="public const int FindShortcut = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FindShortcut = (1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Menu.FindShortcut" />
      <MemberSignature Language="VB.NET" Value="Public Const FindShortcut As Integer  = 1" />
      <MemberSignature Language="C++ CLI" Value="public: int FindShortcut = 1;" />
      <MemberSignature Language="F#" Value="val mutable FindShortcut : int" Usage="System.Windows.Forms.Menu.FindShortcut" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Spécifie que la méthode <see cref="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" /> doit rechercher un raccourci.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ContextMenu GetContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ContextMenu GetContextMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.GetContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextMenu () As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ContextMenu ^ GetContextMenu();" />
      <MemberSignature Language="F#" Value="member this.GetContextMenu : unit -&gt; System.Windows.Forms.ContextMenu" Usage="menu.GetContextMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient le <see cref="T:System.Windows.Forms.ContextMenu" /> qui contient ce menu.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.ContextMenu" /> qui contient ce menu. La valeur par défaut est <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode vous permet d’obtenir une référence à la <xref:System.Windows.Forms.ContextMenu> contenues dans ce menu. Cette propriété retourne `null` si le menu n’est pas contenu dans un <xref:System.Windows.Forms.ContextMenu>. Cela peut se produire si le menu est contenu dans un <xref:System.Windows.Forms.MenuItem> ou <xref:System.Windows.Forms.MainMenu>, ou si le menu n’est pas contenu dans un menu. Vous pouvez utiliser cette propriété pour déterminer si un menu est actuellement utilisé et également pour déterminer l’emplacement.  
  
   
  
## Examples  
 Dans cet exemple, vous utilisez la <xref:System.Windows.Forms.Menu.GetContextMenu%2A> méthode pour obtenir une référence au menu contextuel qui contient `menuItem1` ou `menuItem2`et afficher les informations du menu contextuel dans une boîte de message. Vous créez par programme un menu contextuel comportant deux éléments, `New` et `Open`. Vous puis ajouter des fonctionnalités à ces éléments en créant les gestionnaires d’événements approprié. Lorsque vous exécutez l’exemple, vous obtenez un message vous indiquant d’avec le bouton droit de l’écran pour afficher le menu contextuel. Ensuite, lorsque vous cliquez sur un élément de menu, vous obtenez un autre message qui indique quel est l’élément sélectionné et affiche les informations sur le menu contextuel contenant. Cet exemple suppose que vous avez déjà créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[GetContextMenu2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetContextMenu2/CPP/form1.cpp#1)]
 [!code-csharp[GetContextMenu2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetContextMenu2/CS/form1.cs#1)]
 [!code-vb[GetContextMenu2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetContextMenu2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.GetMainMenu" />
      </Docs>
    </Member>
    <Member MemberName="GetMainMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MainMenu GetMainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MainMenu GetMainMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.GetMainMenu" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMainMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::MainMenu ^ GetMainMenu();" />
      <MemberSignature Language="F#" Value="member this.GetMainMenu : unit -&gt; System.Windows.Forms.MainMenu" Usage="menu.GetMainMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient le <see cref="T:System.Windows.Forms.MainMenu" /> qui contient ce menu.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.MainMenu" /> qui contient ce menu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode vous permet d’obtenir une référence à la <xref:System.Windows.Forms.MainMenu> ce menu se trouve actuellement dans. Cette propriété retourne `null` si le menu n’est pas contenu dans un <xref:System.Windows.Forms.MainMenu>. Cela peut se produire si le menu est contenu dans un <xref:System.Windows.Forms.MenuItem> ou <xref:System.Windows.Forms.ContextMenu>, ou si le menu n’est pas contenu dans un menu. Vous pouvez utiliser cette propriété pour déterminer si un menu est actuellement utilisé et également pour déterminer l’emplacement.  
  
   
  
## Examples  
 Cet exemple déclare un <xref:System.Windows.Forms.MainMenu>, `mainMenu1`et quatre éléments de menu, `menuItem1`, `menuItem2`, `menuItem3`, et `menuItem4`. Uniquement les première trois éléments de menu sont ajoutés à `mainMenu1` pour l’affichage. Le programme vérifie ensuite si `menuItem3` est utilisé, qui est `true`et détermine le formulaire dans lequel il est utilisé. Un texte d’étiquette est utilisé pour afficher le nom du formulaire qui héberge le <xref:System.Windows.Forms.MainMenu>. Si vous modifiez l’élément de menu testé par `menuItem4`, la condition prend la valeur de `false` car `menuItem4` n’a jamais été utilisé. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `MyForm` qui inclut un <xref:System.Windows.Forms.Label> nommé `label1`.  
  
 [!code-cpp[GetMainMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetMainMenu/CPP/form1.cpp#1)]
 [!code-csharp[GetMainMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetMainMenu/CS/form1.cs#1)]
 [!code-vb[GetMainMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetMainMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.GetContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.Menu.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui représente le handle de fenêtre pour le menu.</summary>
        <value>Valeur HMENU du menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette propriété pour obtenir le handle du menu pour effectuer des opérations spéciales dans le menu en dehors de la fonctionnalité fournie par cette classe ou ses classes dérivées.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsParent">
      <MemberSignature Language="C#" Value="public virtual bool IsParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.IsParent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsParent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsParent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsParent : bool" Usage="System.Windows.Forms.Menu.IsParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si ce menu contient des éléments de menu. Cette propriété est en lecture seule.</summary>
        <value>
          <see langword="true" /> si le menu contient des objets <see cref="T:System.Windows.Forms.MenuItem" /> ; sinon <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette méthode pour déterminer si <xref:System.Windows.Forms.MenuItem> objets sont affectés à ce menu. Cela est équivalent à la vérification des `null` dans le <xref:System.Windows.Forms.Menu.MenuItems%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.MainMenu> avec deux <xref:System.Windows.Forms.MenuItem> objets. Il utilise ensuite la <xref:System.Windows.Forms.Menu.IsParent%2A> propriété pour déterminer si `mainMenu1` contient les éléments de menu. Si la condition a la valeur `true`, il définit le <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> propriété `true` et lie le menu principal pour le <xref:System.Windows.Forms.Form>. Cet exemple suppose que vous avez un <xref:System.Windows.Forms.Form> créé qui est nommé `Form1`.  
  
 [!code-cpp[IsParent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IsParent/CPP/form1.cpp#1)]
 [!code-csharp[IsParent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IsParent/CS/form1.cs#1)]
 [!code-vb[IsParent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IsParent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Pour opérer avec du code non managé. Énumération associée : <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName="MdiListItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem MdiListItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem MdiListItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MdiListItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MdiListItem As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MenuItem ^ MdiListItem { System::Windows::Forms::MenuItem ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MdiListItem : System.Windows.Forms.MenuItem" Usage="System.Windows.Forms.Menu.MdiListItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant le <see cref="T:System.Windows.Forms.MenuItem" /> utilisé pour afficher une liste de formulaires enfants MDI.</summary>
        <value>
          <see cref="T:System.Windows.Forms.MenuItem" /> qui représente l'élément de menu affichant une liste des formulaires enfants MDI ouverts dans l'application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette propriété pour déterminer si un <xref:System.Windows.Forms.MenuItem> a été spécifié pour afficher la liste des fenêtres enfants ouvertes dans une application MDI. Pour utiliser un <xref:System.Windows.Forms.MenuItem> comme liste MDI, définissez la <xref:System.Windows.Forms.MenuItem.MdiList%2A> propriété dans la <xref:System.Windows.Forms.MenuItem> à utiliser.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MdiList" />
      </Docs>
    </Member>
    <Member MemberName="MenuItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu.MenuItemCollection MenuItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu/MenuItemCollection MenuItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MenuItems As Menu.MenuItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Menu::MenuItemCollection ^ MenuItems { System::Windows::Forms::Menu::MenuItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MenuItems : System.Windows.Forms.Menu.MenuItemCollection" Usage="System.Windows.Forms.Menu.MenuItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu+MenuItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique la collection d'objets <see cref="T:System.Windows.Forms.MenuItem" /> associée au menu.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" /> qui représente la liste d'objets <see cref="T:System.Windows.Forms.MenuItem" /> stockés dans le menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette propriété pour obtenir une référence à la liste des éléments de menu qui sont actuellement stockés dans le menu. Pour <xref:System.Windows.Forms.MainMenu> et <xref:System.Windows.Forms.ContextMenu> objets, le <xref:System.Windows.Forms.Menu.MenuItems%2A> propriété contient la structure de menus dans le contrôle. Pour le <xref:System.Windows.Forms.MenuItem> (classe), le <xref:System.Windows.Forms.Menu.MenuItems%2A> propriété contient la liste des éléments de sous-menu associés à le <xref:System.Windows.Forms.MenuItem>. Avec la référence à la collection d’éléments de menu du menu (fourni par cette propriété), vous pouvez ajouter et supprimer des éléments de menu, déterminer le nombre total d’éléments de menu et effacer la liste des éléments de menu de la collection. Pour plus d’informations sur la gestion de la collection d’éléments de menu d’un menu, consultez le <xref:System.Windows.Forms.Menu.MenuItemCollection?displayProperty=nameWithType> documentation.  
  
   
  
## Examples  
 L’exemple de code suivant crée une instance de la classe dérivée, <xref:System.Windows.Forms.MainMenu>et ajoute un <xref:System.Windows.Forms.MenuItem> objet à sa collection de <xref:System.Windows.Forms.MenuItem> objets. Cet exemple requiert que la méthode définie dans cet exemple est située dans la classe pour un formulaire et appelée par une méthode dans cette classe de formulaire.  
  
 [!code-cpp[Classic Menu.MenuItems Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItems Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MainMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public virtual void MergeMenu (System.Windows.Forms.Menu menuSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MergeMenu(class System.Windows.Forms.Menu menuSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MergeMenu (menuSrc As Menu)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void MergeMenu(System::Windows::Forms::Menu ^ menuSrc);" />
      <MemberSignature Language="F#" Value="abstract member MergeMenu : System.Windows.Forms.Menu -&gt; unit&#xA;override this.MergeMenu : System.Windows.Forms.Menu -&gt; unit" Usage="menu.MergeMenu menuSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSrc" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="menuSrc">
          <see cref="T:System.Windows.Forms.Menu" /> dont les éléments sont fusionnés avec les éléments du menu en cours.</param>
        <summary>Fusionne les objets <see cref="T:System.Windows.Forms.MenuItem" /> d'un menu avec le menu en cours.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode fusionne <xref:System.Windows.Forms.MenuItem> objets d’un menu avec le menu actuel. <xref:System.Windows.Forms.MenuItem> les objets sont fusionnées en fonction des valeurs de la <xref:System.Windows.Forms.MenuItem.MergeType%2A?displayProperty=nameWithType> et <xref:System.Windows.Forms.MenuItem.MergeOrder%2A?displayProperty=nameWithType> propriétés.  
  
 La fusion de menus est généralement effectuée pour fusionner les menus d’un formulaire de parent d’Interface multidocument (MDI, Multiple Document Interface) avec ceux du formulaire enfant MDI active. Cette opération est effectuée automatiquement par le common language runtime du .NET Framework. Par exemple, si un formulaire MDI parent contient un ensemble de menus pour la gestion des fichiers et votre formulaire MDI enfant comporte également des éléments de menu fichier liés, les jeux de menu seront automatiquement fusionner dans un menu de fichier unique défini lorsque le formulaire enfant est affiché dans le formulaire parent MDI.  
  
 Vous pouvez utiliser la <xref:System.Windows.Forms.Menu.MergeMenu%2A> méthode si vous fusionnez deux structures de menu qui ne font pas partie d’une application MDI. Cette implémentation peut être appelée par le <xref:System.Windows.Forms.MainMenu> ou <xref:System.Windows.Forms.ContextMenu> pour fusionner deux ou plusieurs objets qui dérivent de classes <xref:System.Windows.Forms.Menu>.  
  
 Pour fusionner deux <xref:System.Windows.Forms.MenuItem> objets utilisent le <xref:System.Windows.Forms.MenuItem.MergeMenu%2A?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 Cet exemple crée deux menus, `mainMenu1` et `mainMenu2`. Le premier menu contient un <xref:System.Windows.Forms.MenuItem>, `File`, et le second contient une <xref:System.Windows.Forms.MenuItem>, `Edit`. À l’aide de la <xref:System.Windows.Forms.Menu.MergeMenu%2A> (méthode), `mainMenu2` est fusionné avec `mainMenu1`. Lorsque affiché, `mainMenu1` contient deux éléments de menu, `File` et `Edit`. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.Form> nommé `Form1`.  
  
 [!code-cpp[MergeMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MergeMenu/CPP/form1.cpp#1)]
 [!code-csharp[MergeMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MergeMenu/CS/form1.cs#1)]
 [!code-vb[MergeMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MergeMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il y a eu tentative de fusion du menu avec lui-même.</exception>
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.Menu.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nom de l'objet <see cref="T:System.Windows.Forms.Menu" />.</summary>
        <value>Chaîne représentant le nom.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Au moment du design, cette propriété est définie à l’identificateur de programmation du contrôle. Toutefois, cette propriété n’a aucune incidence sur le contrôle au moment de l’exécution.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool" Usage="menu.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">
          <see cref="T:System.Windows.Forms.Message" />, passé par référence, qui représente le message de fenêtre à traiter.</param>
        <param name="keyData">Une des valeurs <see cref="T:System.Windows.Forms.Keys" /> qui représente la touche à traiter.</param>
        <summary>Traite une touche de commande.</summary>
        <returns>
          <see langword="true" /> si le caractère a été traité par le contrôle ; sinon <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Menu.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit les données définies par l'utilisateur associées au contrôle.</summary>
        <value>Objet représentant les données.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="menu.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une <see cref="T:System.String" /> qui représente le contrôle <see cref="T:System.Windows.Forms.Menu" />.</summary>
        <returns>
          <see cref="T:System.String" /> qui représente le <see cref="T:System.Windows.Forms.Menu" /> actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.Menu.ToString%2A> méthode retourne un <xref:System.String> qui inclut le type et le nombre d’éléments dans le <xref:System.Windows.Forms.Menu.MenuItems%2A> propriété du contrôle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>