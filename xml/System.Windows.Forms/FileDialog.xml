<Type Name="FileDialog" FullName="System.Windows.Forms.FileDialog">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="47e5ab15c81c180de037d4951b40e0419c74758f" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48744579" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class FileDialog : System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileDialog extends System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.FileDialog" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FileDialog&#xA;Inherits CommonDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileDialog abstract : System::Windows::Forms::CommonDialog" />
  <TypeSignature Language="F#" Value="type FileDialog = class&#xA;    inherit CommonDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.CommonDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("FileOk")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Affiche une boîte de dialogue à partir de laquelle l'utilisateur peut sélectionner un fichier.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog> est une classe abstraite qui contient le comportement courant pour le <xref:System.Windows.Forms.OpenFileDialog> et <xref:System.Windows.Forms.SaveFileDialog> classes. Il n’est pas destinée à être utilisée directement mais contient le comportement courant pour ces deux classes. Vous ne pouvez pas créer une instance de <xref:System.Windows.Forms.FileDialog>. Bien que la classe est déclarée publique, vous ne peut pas hériter d’elle, car il contient des méthodes abstraites internes. Pour créer une boîte de dialogue pour sélectionner ou enregistrer un fichier, utilisez <xref:System.Windows.Forms.OpenFileDialog> ou <xref:System.Windows.Forms.SaveFileDialog>.  
  
 <xref:System.Windows.Forms.FileDialog> est une boîte de dialogue modale ; Par conséquent, lors de son affichage, il bloque le reste de l’application jusqu'à ce que l’utilisateur a choisi un fichier. Lorsqu’une boîte de dialogue présente un affichage modal, aucune entrée (clavier ou clic de souris) ne peut se produire à l’exception aux objets sur la boîte de dialogue. Le programme doit masquer ou fermer la boîte de dialogue (généralement en réponse à une action de l’utilisateur) avant qu’une entrée au programme appelant peut se produire.  
  
> [!CAUTION]
>  Lorsque vous utilisez des classes dérivées de <xref:System.Windows.Forms.FileDialog>, tel que <xref:System.Windows.Forms.OpenFileDialog> et <xref:System.Windows.Forms.SaveFileDialog>, évitez d’utiliser des littéraux de chaîne contenant les chemins d’accès absolus. Au lieu de cela, obtenir dynamiquement le chemin d’accès à l’aide d’un ou plusieurs des techniques décrites dans le tableau suivant.  
  
 Si vous souhaitez permettre aux utilisateurs de sélectionner un dossier au lieu d’un fichier, utilisez le <xref:System.Windows.Forms.FolderBrowserDialog>.  
  
 Selon le type d’application, comment les données associées à l’application sont stockées et la raison de l’accès au système de fichiers, il existe de nombreuses méthodes possibles dans laquelle vous pouvez créer un chemin de répertoire. Le tableau suivant présente les techniques permettant de créer dynamiquement des chemins d’accès.  
  
|Chemin d’accès ou catégorie de programme|Classe et les membres à utiliser|  
|------------------------------|------------------------------|  
|Chemins d’accès Windows standard, tels que Program Files, Mes documents, que le bureau, etc.|Le <xref:System.Environment?displayProperty=nameWithType> classe est la source la plus complète pour celles-ci, via ses méthodes statiques, telles que <xref:System.Environment.SystemDirectory%2A>, ou via le <xref:System.Environment.GetFolderPath%2A> méthode, à l’aide d’une de la <xref:System.Environment.SpecialFolder> valeurs énumérées.|  
|Chemins d’accès associés à l’application actuelle|Le <xref:System.Windows.Forms.Application> classe a des membres statiques pour obtenir certains chemins d’accès, tel que <xref:System.Windows.Forms.Application.StartupPath%2A>, <xref:System.Windows.Forms.Application.ExecutablePath%2A>, <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>, et <xref:System.Windows.Forms.Application.CommonAppDataPath%2A>.<br /><br /> Le <xref:System.IO.Path.GetTempPath%2A> méthode de la <xref:System.IO.Path?displayProperty=nameWithType> retourne le chemin d’accès du dossier temporaire.<br /><br /> Le <xref:System.IO.Directory.GetCurrentDirectory%2A> méthode de la <xref:System.IO.Directory?displayProperty=nameWithType> classe retourne le répertoire en cours d’exécution actuel de l’application.<br /><br /> Le <xref:System.IO.DriveInfo.RootDirectory%2A> propriété de la <xref:System.IO.DriveInfo> classe représente le répertoire racine du lecteur spécifié.|  
|Chemins d’accès stockées en tant que paramètres d’application|Accéder aux applications correspondantes dérivée de la propriété de paramètres de la classe wrapper <xref:System.Configuration.ApplicationSettingsBase>. Pour plus d’informations, consultez [Application Settings for Windows Forms](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md).|  
|Stockage de Registre|Certaines applications stockent des informations d’annuaire dans le Registre. Le <xref:System.Windows.Forms.Application> classe a le <xref:System.Windows.Forms.Application.CommonAppDataPath%2A> et <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A> propriétés de résoudre un <xref:Microsoft.Win32.RegistryKey> valeur.|  
|applications ClickOnce|Pour les applications ClickOnce, utilisez <xref:System.Windows.Forms.Application> tels que les membres de classe <xref:System.Windows.Forms.Application.UserAppDataPath%2A>, qui retourne un pointeur vers le répertoire de données ClickOnce. Pour plus d’informations, consultez [l’accès aux données locales et distantes dans les Applications ClickOnce](http://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).|  
|Applications internationales|Dans les applications internationales, récupèrent la partie de chemin d’accès relatif à partir d’une ressource de chaîne dans votre application à l’aide de la <xref:System.Resources.ResourceReader?displayProperty=nameWithType> classe. Pour plus d’informations sur la globalisation et localisation, consultez la rubrique [globalisation et localisation](~/docs/standard/globalization-localization/index.md).|  
  
 Notez qu’un chemin d’accès complet peut être créé à l’aide d’une ou plusieurs des techniques décrites. Par exemple, le <xref:System.Environment.GetFolderPath%2A> méthode peut être utilisée pour obtenir le chemin d’accès au dossier Mes documents, puis un paramètre d’application peut être utilisé pour ajouter une partie de sous-répertoire relative.  
  
 Le <xref:System.IO.Path?displayProperty=nameWithType> classe contient des membres statiques pour aider à la manipulation de chaînes de chemin d’accès absolus et relatifs, tandis que le <xref:System.IO.File?displayProperty=nameWithType> et <xref:System.IO.Directory?displayProperty=nameWithType> classes ont des membres statiques qui manipulent en fait des fichiers et des répertoires, respectivement.  
  
> [!IMPORTANT]
>  Si l’utilisateur de votre application modifie le dossier dans le <xref:System.Windows.Forms.FileDialog>, le répertoire de travail actuel pour votre application est défini sur l’emplacement spécifié dans le <xref:System.Windows.Forms.FileDialog>. Pour éviter ce problème, définissez le <xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A> propriété `true`.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.OpenFileDialog> implémentation de <xref:System.Windows.Forms.FileDialog> et illustre la création, définition des propriétés et affiche la boîte de dialogue. L’exemple utilise le <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> méthode pour afficher la boîte de dialogue et retourner le <xref:System.Windows.Forms.DialogResult>. L’exemple nécessite un formulaire avec un <xref:System.Windows.Forms.Button> placé dessus et le <xref:System.IO> ajouté un espace de noms.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
    <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
    <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
    <altmember cref="T:System.Windows.Forms.FolderBrowserDialog" />
    <altmember cref="T:System.IO.Path" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.Directory" />
    <altmember cref="T:System.Environment" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:Microsoft.Win32.Registry" />
    <altmember cref="T:System.Resources.ResourceReader" />
  </Docs>
  <Members>
    <Member MemberName="AddExtension">
      <MemberSignature Language="C#" Value="public bool AddExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddExtension" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AddExtension" />
      <MemberSignature Language="VB.NET" Value="Public Property AddExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AddExtension { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AddExtension : bool with get, set" Usage="System.Windows.Forms.FileDialog.AddExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la boîte de dialogue ajoute automatiquement une extension au nom de fichier lorsque l’utilisateur n’en fait pas mention.</summary>
        <value>
          <see langword="true" /> en cas d'ajout par la boîte de dialogue d'une extension au nom de fichier lorsque l'utilisateur n'en fait pas mention ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’extension ajoutée à un nom de fichier varie selon le filtre de fichier actuellement sélectionné et la valeur de la <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> propriété.  
  
 Si le <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> propriété est `true`, la boîte de dialogue ajoute la première extension du filtre de fichier en cours qui correspond à un fichier existant. Si aucun fichier ne correspondre au filtre de fichier en cours, la boîte de dialogue ajoute l’extension spécifiée dans le <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> propriété.  
  
 Si le <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> propriété est `false`, la boîte de dialogue ajoute la première extension de nom de fichier valide du filtre de fichier actif. Si le filtre de fichier actuelle ne contient aucune extension de nom de fichier valide, la boîte de dialogue ajoute l’extension spécifiée dans le <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> propriété.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour ajouter une extension si l’utilisateur provoque son omission. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="AutoUpgradeEnabled">
      <MemberSignature Language="C#" Value="public bool AutoUpgradeEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoUpgradeEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoUpgradeEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoUpgradeEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoUpgradeEnabled : bool with get, set" Usage="System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si cette instance <see cref="T:System.Windows.Forms.FileDialog" /> doit mettre automatiquement à niveau l'apparence et le comportement lorsqu'elle est exécutée sous [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)].</summary>
        <value>
          <see langword="true" /> si cette instance <see cref="T:System.Windows.Forms.FileDialog" /> doit mettre automatiquement à niveau l'apparence et le comportement lorsqu'elle est exécutée sous [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)] ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cette propriété est `false`, le <xref:System.Windows.Forms.FileDialog> classe aura un [!INCLUDE[winxp](~/includes/winxp-md.md)]-style d’apparence et le comportement sur [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)].  
  
 Sur [!INCLUDE[winxp](~/includes/winxp-md.md)], cette propriété n’a pas d’effet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckFileExists">
      <MemberSignature Language="C#" Value="public virtual bool CheckFileExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckFileExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CheckFileExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CheckFileExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckFileExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la boîte de dialogue affiche un message d'avertissement lorsque l'utilisateur spécifie un nom de fichier qui n'existe pas.</summary>
        <value>
          <see langword="true" /> en cas d'affichage d'un message d'avertissement par la boîte de dialogue lorsque l'utilisateur spécifie un nom de fichier qui n'existe pas ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur par défaut est `true` pour un héritage <xref:System.Windows.Forms.OpenFileDialog> et `false` pour un héritage <xref:System.Windows.Forms.SaveFileDialog>.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour afficher un avertissement si le fichier existe déjà. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      </Docs>
    </Member>
    <Member MemberName="CheckPathExists">
      <MemberSignature Language="C#" Value="public bool CheckPathExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckPathExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckPathExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckPathExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckPathExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la boîte de dialogue affiche un message d’avertissement lorsque l’utilisateur spécifie un chemin d’accès qui n’existe pas.</summary>
        <value>
          <see langword="true" /> en cas d'affichage d'un message d'avertissement par la boîte de dialogue lorsque l'utilisateur spécifie un chemin d'accès qui n'existe pas ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour afficher un avertissement si l’utilisateur spécifie un chemin d’accès qui existe déjà. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      </Docs>
    </Member>
    <Member MemberName="CustomPlaces">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomPlaces As FileDialogCustomPlacesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FileDialogCustomPlacesCollection ^ CustomPlaces { System::Windows::Forms::FileDialogCustomPlacesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomPlaces : System.Windows.Forms.FileDialogCustomPlacesCollection" Usage="System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FileDialogCustomPlacesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection d'emplacements personnalisés pour cette instance <see cref="T:System.Windows.Forms.FileDialog" />.</summary>
        <value>Collection d'emplacements personnalisés pour cette instance <see cref="T:System.Windows.Forms.FileDialog" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sur [!INCLUDE[winxp](~/includes/winxp-md.md)], cette propriété n’a pas d’effet.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.FileDialog.CustomPlaces%2A> collection. Pour exécuter cet exemple, collez le code suivant dans un Windows Form et appelez `InitializeDialogAndButton` à partir du constructeur du formulaire ou <xref:System.Windows.Forms.Form.Load> méthode de gestion des événements.  
  
 [!code-csharp[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExt">
      <MemberSignature Language="C#" Value="public string DefaultExt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultExt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultExt As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultExt { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultExt : string with get, set" Usage="System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l’extension de nom de fichier par défaut.</summary>
        <value>Extension de nom de fichier par défaut. La chaîne retournée ne comporte pas de point. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque l’utilisateur de votre application spécifie un nom de fichier sans extension, le <xref:System.Windows.Forms.FileDialog> ajoute une extension au nom de fichier. L’extension qui est utilisée est déterminée par le <xref:System.Windows.Forms.FileDialog.Filter%2A> et <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> propriétés. Si un filtre est sélectionné dans le <xref:System.Windows.Forms.FileDialog> le filtre spécifie une extension, puis cette extension est utilisée. Si le filtre sélectionné utilise un caractère générique à la place de l’extension, l’extension spécifiée dans le <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> propriété est utilisée.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> et <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> méthodes avec des flux. Il montre également comment utiliser le <xref:System.Windows.Forms.FileDialog.FileName%2A>, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>, et <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> membres.  
  
 Il s’agit d’un exemple complet qui est prêt à exécuter lorsque vous la copiez à votre projet.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DereferenceLinks">
      <MemberSignature Language="C#" Value="public bool DereferenceLinks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DereferenceLinks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberSignature Language="VB.NET" Value="Public Property DereferenceLinks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DereferenceLinks { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DereferenceLinks : bool with get, set" Usage="System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la boîte de dialogue retourne l'emplacement du fichier référencé par le raccourci ou bien l'emplacement de ce raccourci (.lnk).</summary>
        <value>
          <see langword="true" /> si la boîte de dialogue retourne l'emplacement du fichier référencé par le raccourci ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour définir la propriété. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="EventFileOk">
      <MemberSignature Language="C#" Value="protected static readonly object EventFileOk;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly object EventFileOk" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly EventFileOk As Object " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly System::Object ^ EventFileOk;" />
      <MemberSignature Language="F#" Value=" staticval mutable EventFileOk : obj" Usage="System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Possède l'événement <see cref="E:System.Windows.Forms.FileDialog.FileOk" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileName" />
      <MemberSignature Language="VB.NET" Value="Public Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string with get, set" Usage="System.Windows.Forms.FileDialog.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une chaîne comportant le nom de fichier sélectionné dans la boîte de dialogue Fichier.</summary>
        <value>Nom de fichier sélectionné dans la boîte de dialogue Fichier. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le nom de fichier inclut le chemin d’accès de fichier et l’extension. Si aucun fichier n’est sélectionnée, cette méthode retourne une chaîne vide ( » »).  
  
 Lorsqu’il est utilisé à partir de la <xref:System.Windows.Forms.SaveFileDialog> (classe), cette propriété représente le fichier enregistré ; lorsqu’il est utilisé à partir de la <xref:System.Windows.Forms.OpenFileDialog> classe, il représente le fichier ouvert.  
  
 Cette propriété ne peut être le nom d’un fichier sélectionné. Si vous souhaitez retourner un tableau contenant les noms de tous les fichiers sélectionnés dans une boîte de dialogue de sélection multiple, utilisez <xref:System.Windows.Forms.FileDialog.FileNames%2A>.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> et <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> méthodes avec des flux. Il montre également comment utiliser le <xref:System.Windows.Forms.FileDialog.FileName%2A>, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType>, et <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType> membres.  
  
 Il s’agit d’un exemple complet qui est prêt à exécuter lorsque vous la copiez à votre projet.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour obtenir ou définir le nom de fichier. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileNames" />
        <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
        <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
      </Docs>
    </Member>
    <Member MemberName="FileNames">
      <MemberSignature Language="C#" Value="public string[] FileNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] FileNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ FileNames { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileNames : string[]" Usage="System.Windows.Forms.FileDialog.FileNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les noms de fichiers de tous les fichiers sélectionnés dans la boîte de dialogue.</summary>
        <value>Tableau de type <see cref="T:System.String" /> comportant les noms de fichiers de tous les fichiers sélectionnés dans la boîte de dialogue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque nom de fichier inclut le chemin d’accès de fichier et l’extension. Si aucun fichier n’est sélectionnée, cette méthode retourne un tableau vide.  
  
   
  
## Examples  
 L’exemple de code suivant permet à l’utilisateur de sélectionner un nombre d’images et de les afficher dans <xref:System.Windows.Forms.PictureBox> contrôles sur un formulaire. Il illustre l’initialisation d’un <xref:System.Windows.Forms.OpenFileDialog>, ce qui affecte le <xref:System.Windows.Forms.FileDialog.Title%2A> et <xref:System.Windows.Forms.FileDialog.Filter%2A> propriétés et autoriser l’utilisateur à sélectionner plusieurs fichiers en définissant le <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A> true à la propriété. Cet exemple de code suppose que votre formulaire possède déjà un <xref:System.Windows.Forms.OpenFileDialog> contrôle nommé `openFileDialog1`, un <xref:System.Windows.Forms.Button> nommé `SelectFileButton`et un <xref:System.Windows.Forms.FlowLayoutPanel> nommé `flowLayoutPanel1`.  
  
 [!code-csharp[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour obtenir les noms de fichiers. Énumération associée : <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileName" />
      </Docs>
    </Member>
    <Member MemberName="FileOk">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler FileOk;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler FileOk" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.FileDialog.FileOk" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FileOk As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ FileOk;" />
      <MemberSignature Language="F#" Value="member this.FileOk : System.ComponentModel.CancelEventHandler " Usage="member this.FileOk : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand l’utilisateur clique sur le bouton **Ouvrir** ou **Enregistrer** dans une boîte de dialogue de fichier.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.FileDialog.FileNames%2A> propriété, la gestion de la <xref:System.Windows.Forms.FileDialog.FileOk> événement et à l’aide de la <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> (méthode). Lorsque l’exemple s’exécute, un utilisateur peut sélectionner des fichiers graphiques à partir d’un <xref:System.Windows.Forms.OpenFileDialog> objet. Les fichiers sélectionnés sont affichés sous la forme. Le <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> méthode force à repeindre l’écran pour chaque fichier graphique ouvert. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.PictureBox> nommé `PictureBox1`, un <xref:System.Windows.Forms.OpenFileDialog> nommé `OpenFileDialog1`et un <xref:System.Windows.Forms.Button> nommé `fileButton`. Appelez le `InitializePictureBox` et `InitializeOpenFileDialog` méthodes à partir du constructeur du formulaire ou `Load` (méthode). Lorsque l’exemple est en cours d’exécution, afficher la boîte de dialogue en cliquant sur le bouton.  
  
 [!code-cpp[System.Windows.Forms.FileDialog#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#1)]
 [!code-csharp[System.Windows.Forms.FileDialog#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialog#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="System.Windows.Forms.FileDialog.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la chaîne de filtrage des noms de fichiers en cours, qui détermine les choix disponibles dans les zones « Enregistrer sous » ou « Types de fichiers » de la boîte de dialogue.</summary>
        <value>Options de filtrage des fichiers disponibles dans la boîte de dialogue.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour chaque option de filtrage, la chaîne de filtre contient une description du filtre, suivie de la barre verticale (&#124;) et le modèle de filtre. Les chaînes pour les différentes options de filtrage sont séparées par la barre verticale.  
  
 Voici un exemple de chaîne de filtrage :  
  
 `Text files (*.txt)|*.txt|All files (*.*)|*.*`  
  
 Vous pouvez ajouter plusieurs modèles de filtre à un filtre en séparant les types de fichiers par des points-virgules, par exemple :  
  
 `Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*`  
  
 Utilisez le <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> propriété à définir quelle option de filtrage est indiquée en premier à l’utilisateur.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.OpenFileDialog> implémentation de <xref:System.Windows.Forms.FileDialog> et illustre la création, définition des propriétés et affiche la boîte de dialogue. L’exemple utilise le <xref:System.Windows.Forms.FileDialog.Filter%2A> et <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> propriétés pour fournir une liste de filtres pour l’utilisateur. L’exemple nécessite un formulaire avec un <xref:System.Windows.Forms.Button> placé dessus et le <xref:System.IO> ajouté un espace de noms.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Le format <paramref name="Filter" /> n'est pas valide.</exception>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="FilterIndex">
      <MemberSignature Language="C#" Value="public int FilterIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FilterIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FilterIndex : int with get, set" Usage="System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'index du filtre actuellement sélectionné dans la boîte de dialogue de fichier.</summary>
        <value>Valeur comportant l'index du filtre actuellement sélectionné dans la boîte de dialogue de fichier. La valeur par défaut est 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> propriété à définir quelle option de filtrage est indiquée en premier à l’utilisateur. Vous pouvez également utiliser la valeur de <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> après l’affichage de la boîte de dialogue de fichier pour effectuer des opérations de fichier spécial en fonction du filtre choisi.  
  
> [!NOTE]
>  La valeur d’index de la première entrée de filtre est 1.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.OpenFileDialog> implémentation de <xref:System.Windows.Forms.FileDialog> et illustre la création, définition des propriétés et affiche la boîte de dialogue. L’exemple utilise le <xref:System.Windows.Forms.FileDialog.Filter%2A> et <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> propriétés pour fournir une liste de filtres pour l’utilisateur. L’exemple nécessite un formulaire avec un <xref:System.Windows.Forms.Button> placé dessus et le <xref:System.IO> ajouté un espace de noms.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="HookProc">
      <MemberSignature Language="C#" Value="protected override IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int HookProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HookProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="F#" Value="override this.HookProc : nativeint * int * nativeint * nativeint -&gt; nativeint" Usage="fileDialog.HookProc (hWnd, msg, wparam, lparam)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">Handle de la fenêtre de la boîte de dialogue.</param>
        <param name="msg">Message reçu par la boîte de dialogue.</param>
        <param name="wparam">Informations supplémentaires sur le message.</param>
        <param name="lparam">Informations supplémentaires sur le message.</param>
        <summary>Définit la procédure de raccordement d'une boîte de dialogue commune devant être substituée pour qu'une fonctionnalité spécifique soit ajoutée à la boîte de dialogue de fichier.</summary>
        <returns>Retourne zéro lorsque la procédure de la boîte de dialogue par défaut traite le message et une valeur différente de zéro lorsque la procédure de la boîte de dialogue par défaut ignore le message.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une procédure de raccordement permet à l’utilisateur pour vous connecter ou insérer d’autres routines dans une application à des fins de débogage ou de l’amélioration de fonctionnalité ou de routine.  
  
 Par défaut, la procédure de raccordement centre la boîte de dialogue sur l’écran en réponse à un message WM_INITDIALOG.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> (méthode).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="InitialDirectory">
      <MemberSignature Language="C#" Value="public string InitialDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InitialDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InitialDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InitialDirectory : string with get, set" Usage="System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le répertoire initial affiché dans la boîte de dialogue de fichier.</summary>
        <value>Répertoire initial affiché par la boîte de dialogue de fichier. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> propriété est généralement définie en utilisant l’une des sources suivantes :  
  
-   Un chemin d’accès qui était précédemment utilisé dans le programme, peut-être conservé depuis la dernière opération de répertoire ou fichier.  
  
-   Un chemin d’accès lire à partir d’une source persistante, comme un paramètre d’application, un <xref:Microsoft.Win32.Registry> ou une ressource de chaîne dans l’application.  
  
-   Windows système et utilisateur chemins d’accès standard, tels que Program Files, Mes documents, Ma musique, etc. (que vous pouvez obtenir à l’aide de la <xref:System.Environment.GetFolderPath%2A> méthode)  
  
-   Un chemin d’accès relatif à l’application actuelle, tels que son répertoire de démarrage (que vous pouvez obtenir à l’aide des propriétés sur le <xref:System.Windows.Forms.Application> objet).  
  
 Pour plus d’informations sur la création de chemins d’accès dynamiques, consultez le <xref:System.Windows.Forms.FileDialog> vue d’ensemble de la classe.  
  
 Sur [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]si <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> est défini à un nom de fichier complet au lieu de simplement un chemin de répertoire, le répertoire initial par défaut pour le chemin d’accès de l’application, soit dans le répertoire à partir duquel l’utilisateur sélectionné le dernier un fichier.  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.OpenFileDialog> implémentation de <xref:System.Windows.Forms.FileDialog> et illustre la création, définition des propriétés et affiche la boîte de dialogue. L’exemple utilise le <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> propriété à définir le répertoire initial lorsque la boîte de dialogue s’affiche à l’utilisateur. L’exemple nécessite un formulaire avec un <xref:System.Windows.Forms.Button> placé dessus et le <xref:System.IO> ajouté un espace de noms.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Doit pour définir le répertoire initial. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
        <altmember cref="T:Microsoft.Win32.Registry" />
        <altmember cref="T:System.Windows.Forms.Application" />
        <altmember cref="T:System.Environment" />
        <altmember cref="T:System.IO.Path" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="protected virtual IntPtr Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Instance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Instance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Instance As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr Instance { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Instance : nativeint" Usage="System.Windows.Forms.FileDialog.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le handle d'instance Win32 pour l'application.</summary>
        <value>Handle d'instance Win32 pour l'application.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFileOk">
      <MemberSignature Language="C#" Value="protected void OnFileOk (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnFileOk(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnFileOk (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnFileOk(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnFileOk : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="fileDialog.OnFileOk e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.ComponentModel.CancelEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.FileDialog.FileOk" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.FileDialog.FileOk" />
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected int Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Options" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Options" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Options As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int Options { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : int" Usage="System.Windows.Forms.FileDialog.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient des valeurs pour initialiser <see cref="T:System.Windows.Forms.FileDialog" />.</summary>
        <value>Combinaison d'opérations de bits de valeurs internes qui initialisent <see cref="T:System.Windows.Forms.FileDialog" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.FileDialog.Options%2A> propriété correspond aux indicateurs utilisés pour initialiser une boîte de dialogue de fichier à l’aide de Win32. Utilisez les propriétés de la <xref:System.Windows.Forms.FileDialog> classe pour obtenir et définir les options.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="fileDialog.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rétablit les valeurs par défaut de toutes les propriétés.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution <see cref="M:System.Windows.Forms.FileDialog.Reset" /> dans une classe dérivée, veillez à appeler la classe de base <see cref="M:System.Windows.Forms.CommonDialog.Reset" /> (méthode).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RestoreDirectory">
      <MemberSignature Language="C#" Value="public bool RestoreDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RestoreDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property RestoreDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RestoreDirectory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RestoreDirectory : bool with get, set" Usage="System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la boîte de dialogue restaure le répertoire actif avant la fermeture.</summary>
        <value>
          <see langword="true" /> Si la boîte de dialogue restaure le répertoire actif dans le répertoire précédemment sélectionné si l’utilisateur a modifié la pendant la recherche des fichiers ; Sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Windows.Forms.OpenFileDialog> implémentation de <xref:System.Windows.Forms.FileDialog> et illustre la création, définition des propriétés et affiche la boîte de dialogue. L’exemple utilise le <xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A> propriété pour vous assurer que le répertoire précédemment sélectionné est restauré lorsque la boîte de dialogue est fermée. L’exemple nécessite un formulaire avec un <xref:System.Windows.Forms.Button> placé dessus et le <xref:System.IO> ajouté un espace de noms.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour définir la propriété. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected override bool RunDialog (IntPtr hWndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool RunDialog(native int hWndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RunDialog (hWndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool RunDialog(IntPtr hWndOwner);" />
      <MemberSignature Language="F#" Value="override this.RunDialog : nativeint -&gt; bool" Usage="fileDialog.RunDialog hWndOwner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWndOwner">Valeur qui représente le handle de la fenêtre propriétaire de la boîte de dialogue commune.</param>
        <summary>Spécifie une boîte de dialogue commune.</summary>
        <returns>
          <see langword="true" /> si le fichier peut être ouvert ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode fournit une implémentation de <xref:System.Windows.Forms.CommonDialog.RunDialog%2A>et est appelé lorsque l’utilisateur d’une boîte de dialogue fichier appelle <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>.  
  
 Dans les classes dérivées <xref:System.Windows.Forms.OpenFileDialog> et <xref:System.Windows.Forms.SaveFileDialog> un nom de fichier non valide <xref:System.Exception> puisse être déclenché.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHelp">
      <MemberSignature Language="C#" Value="public bool ShowHelp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHelp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowHelp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowHelp { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowHelp : bool with get, set" Usage="System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le bouton **Aide** est affiché dans la boîte de dialogue Fichier.</summary>
        <value>
          <see langword="true" /> lorsque la boîte de dialogue comporte un bouton Aide ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Forms.Control.HelpRequested> événement est déclenché lorsque l’utilisateur clique sur le **aide** bouton.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportMultiDottedExtensions">
      <MemberSignature Language="C#" Value="public bool SupportMultiDottedExtensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportMultiDottedExtensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportMultiDottedExtensions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportMultiDottedExtensions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportMultiDottedExtensions : bool with get, set" Usage="System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le fait que la boîte de dialogue prend ou non en charge l’affichage et l’enregistrement de fichiers qui présentent plusieurs extensions de nom de fichier.</summary>
        <value>
          <see langword="true" /> si la boîte de dialogue prend en charge plusieurs extensions de nom de fichier ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parfois, les utilisateurs doivent ouvrir et enregistrer des fichiers qui utilisent plusieurs extensions de nom de fichier. Par exemple, les fichiers manifeste d’application utilisés par le [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] fin de la technologie de déploiement dans l’extension de nom de fichier complexe «. exe.manifest ». Si cette propriété `true` vous permet de définir le <xref:System.Windows.Forms.FileDialog.Filter%2A> propriété à une extension de plusieurs points.  
  
 Si <xref:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions%2A> est `false`, et que vous assignez une extension de plusieurs points à <xref:System.Windows.Forms.FileDialog.Filter%2A>, tels que les contrôles dérivés <xref:System.Windows.Forms.SaveFileDialog> utilisera uniquement la dernière extension dans la chaîne. Par exemple, « .manifest » sera être utilisé au lieu de «. exe.manifest ».  
  
   
  
## Examples  
 L’exemple de code suivant enregistre les fichiers avec l’extension «. data.txt ». Cet exemple de code requiert que votre application hôte un <xref:System.Windows.Forms.SaveFileDialog> nommé `saveFileDialog1` et un <xref:System.Windows.Forms.Button> nommé `button1`.  
  
 [!code-csharp[SupportMultiDottedExtensions#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SupportMultiDottedExtensions/CS/Form1.cs#1)]
 [!code-vb[SupportMultiDottedExtensions#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SupportMultiDottedExtensions/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Forms.FileDialog.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le titre de la boîte de dialogue de fichier.</summary>
        <value>Titre de la boîte de dialogue de fichier. La valeur par défaut est une chaîne vide ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chaîne est placée dans la barre de titre de la boîte de dialogue. Si le titre est une chaîne vide, le système utilise un titre par défaut, qui est « Enregistrer sous » ou « Ouvert ».  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’initialisation d’un <xref:System.Windows.Forms.OpenFileDialog>, ce qui affecte le <xref:System.Windows.Forms.FileDialog.Title%2A> et <xref:System.Windows.Forms.FileDialog.Filter%2A> propriétés et autoriser l’utilisateur à sélectionner plusieurs fichiers en définissant le <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A?displayProperty=nameWithType> true à la propriété. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant une <xref:System.Windows.Forms.OpenFileDialog> nommé `OpenFileDialog1` et un <xref:System.Windows.Forms.Button> nommé `fileButton`. Appelez le `InitializeOpenFileDialog` méthode dans le constructeur du formulaire ou `Load` (méthode). L’exemple exige également que le `Click` événements de la `Button` contrôle est connecté au gestionnaire d’événements défini dans l’exemple.  
  
 [!code-cpp[System.Windows.Forms.FileDialog#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#6)]
 [!code-csharp[System.Windows.Forms.FileDialog#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#6)]
 [!code-vb[System.Windows.Forms.FileDialog#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour définir le titre de la boîte de dialogue fichier. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="fileDialog.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fournit une version de chaîne de cet objet.</summary>
        <returns>Version de chaîne de cet objet.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateNames">
      <MemberSignature Language="C#" Value="public bool ValidateNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateNames As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateNames { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateNames : bool with get, set" Usage="System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si la boîte de dialogue n'accepte que des noms de fichiers Win32 valides.</summary>
        <value>
          <see langword="true" /> en cas d'acceptation exclusive par la boîte de dialogue de noms de fichiers Win32 valides ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le contrôle d’édition contient quoi que ce soit, mais des espaces quand l’utilisateur clique sur **OK**, la boîte de dialogue retourne le nom de fichier, qu’il soit valide ou non. Aucune extension par défaut n’est ajoutée au texte.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Pour définir la propriété. Énumération associée : <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>