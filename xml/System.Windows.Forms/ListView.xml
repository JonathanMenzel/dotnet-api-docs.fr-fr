<Type Name="ListView" FullName="System.Windows.Forms.ListView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="48abdad84545b1f08adb5ce8c31cae031c876452" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659193" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListView : System.Windows.Forms.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListView extends System.Windows.Forms.Control" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListView" />
  <TypeSignature Language="VB.NET" Value="Public Class ListView&#xA;Inherits Control" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListView : System::Windows::Forms::Control" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un contrôle list view Windows, qui peut afficher une collection d'éléments de quatre manières différentes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.ListView> contrôle vous permet d’afficher une liste d’éléments avec le texte de l’élément et, éventuellement, une icône identifiant le type d’élément. Par exemple, la liste de l’Explorateur Windows des fichiers est semblable à un <xref:System.Windows.Forms.ListView> contrôle. Il affiche la liste des fichiers et dossiers actuellement sélectionnés dans l’arborescence. Chaque fichier et dossier affichent une icône associée à aider à identifier le type de fichier ou dossier. Le <xref:System.Windows.Forms.ListViewItem> classe représente un élément dans un <xref:System.Windows.Forms.ListView> contrôle. Les éléments qui sont affichés dans la liste peuvent être affichés dans un des cinq vues différentes. Éléments peuvent être affichés sous forme de grandes icônes, petites icônes ou de petites icônes dans une liste verticale. Éléments peuvent aussi contenir des sous-éléments qui contiennent des informations relatives à l’élément parent. L’affichage des détails vous permet d’afficher l’élément et ses sous-éléments dans une grille avec des en-têtes de colonnes qui identifient les informations affichées dans un sous-élément. L’affichage en mosaïque, qui offre une disponibilité limitée comme décrit ci-dessous, vous permet d’afficher l’élément et ses sous-éléments sous forme de vignette qui contient une grande icône en regard des informations textuelles. <xref:System.Windows.Forms.ListView> prend en charge sélections uniques ou multiples. La fonctionnalité de sélection multiple permet à l’utilisateur sélectionner dans une liste d’éléments d’une manière similaire à un <xref:System.Windows.Forms.ListBox> contrôle. En outre, l’utilisateur peut activer des éléments sélectionnés pour effectuer une tâche. Par exemple, vous pouvez utiliser un <xref:System.Windows.Forms.ListView> contrôle pour afficher une liste de fichiers que l’application permettre être ouverts et utilisés. L’utilisateur peut sélectionner les fichiers à ouvrir, puis double-cliquez dessus pour activer les éléments et ouvrir les fichiers dans l’application. Le <xref:System.Windows.Forms.ListView> peut également afficher des cases à cocher, à l’aide de la <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propriété, pour autoriser l’utilisateur à vérifier les éléments qu’ils souhaitent effectuer une action sur. Vous pouvez utiliser la <xref:System.Windows.Forms.ListView> contrôle de plusieurs façons. Le contrôle peut être utilisé pour afficher des informations à partir d’une application, une base de données ou un fichier texte. Le <xref:System.Windows.Forms.ListView> peut également être utilisé pour obtenir des informations à partir de l’utilisateur, telles que la sélection d’un ensemble de fichiers à traiter.  
  
 <xref:System.Windows.Forms.ListView> fournit un grand nombre de propriétés qui fournissent une grande souplesse dans l’apparence et le comportement. Le <xref:System.Windows.Forms.ListView.View%2A> propriété vous permet de modifier le mode dans lequel les éléments sont affichés. Le <xref:System.Windows.Forms.ListView.LargeImageList%2A>, <xref:System.Windows.Forms.ListView.SmallImageList%2A>, et <xref:System.Windows.Forms.ListView.StateImageList%2A> propriétés permettent de spécifier le <xref:System.Windows.Forms.ImageList> objets qui contiennent des images affichées pour les éléments et, dans le cas de la <xref:System.Windows.Forms.ListView.StateImageList%2A>, les cases à cocher qui sont affichées lorsque le <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propriété est définie sur `true`. Pour déterminer quels éléments sont activés, vous pouvez utiliser la <xref:System.Windows.Forms.ListView.CheckedItems%2A> propriété pour accéder à la <xref:System.Windows.Forms.ListView.CheckedListViewItemCollection> collection. Le <xref:System.Windows.Forms.ListView.Columns%2A> propriété permet d’accéder à la <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>, qui stocke les en-têtes de colonnes qui sont affichées lorsque le <xref:System.Windows.Forms.ListView.View%2A> du contrôle est définie sur <xref:System.Windows.Forms.View.Details>. Les éléments sont ajoutés et supprimés à partir de la <xref:System.Windows.Forms.ListView> via la <xref:System.Windows.Forms.ListView.Items%2A> propriété. Le <xref:System.Windows.Forms.ListView.Items%2A> propriété permet d’accéder à la <xref:System.Windows.Forms.ListView.ListViewItemCollection> du contrôle, qui fournit des méthodes pour manipuler les éléments dans le contrôle. Si vous souhaitez autoriser l’utilisateur à modifier le texte d’un élément, vous pouvez utiliser le <xref:System.Windows.Forms.ListView.LabelEdit%2A> propriété. Lorsque votre contrôle contient un grand nombre d’éléments, il est souvent plus facile de l’utilisateur pour les afficher dans une liste triée. Vous pouvez utiliser le <xref:System.Windows.Forms.ListView.Sorting%2A> propriété selon laquelle trier les éléments par ordre alphabétique. Vous pouvez personnaliser totalement l’apparence d’un <xref:System.Windows.Forms.ListView> contrôle. Pour ce faire, définissez la <xref:System.Windows.Forms.ListView.OwnerDraw%2A> propriété `true` et gérez un ou plusieurs des événements suivants : <xref:System.Windows.Forms.ListView.DrawItem>, <xref:System.Windows.Forms.ListView.DrawSubItem>, <xref:System.Windows.Forms.ListView.DrawColumnHeader>.  
  
 Un grand nombre des propriétés de la <xref:System.Windows.Forms.ListView> contrôle sont utilisés lorsque le <xref:System.Windows.Forms.ListView.View%2A> du contrôle est définie sur <xref:System.Windows.Forms.View.Details>. Le <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> propriété permet à l’utilisateur de votre <xref:System.Windows.Forms.ListView> contrôle pour reconfigurer l’ordre des colonnes au moment de l’exécution. Le <xref:System.Windows.Forms.ListView.FullRowSelect%2A> propriété permet à un élément et ses sous-éléments plutôt que l’élément. Pour afficher le quadrillage dans l’affichage des détails pour identifier les limites des éléments et des sous-éléments dans le <xref:System.Windows.Forms.ListView>, vous pouvez utiliser le <xref:System.Windows.Forms.ListView.GridLines%2A> propriété. Le <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propriété vous permet de spécifier le type des en-têtes de colonnes à afficher.  
  
 A <xref:System.Windows.Forms.ListView> contrôle peut fonctionner en mode virtuel, où <xref:System.Windows.Forms.ListViewItem> objets sont générées dynamiquement au lieu d’être stockées dans le <xref:System.Windows.Forms.ListView.Items%2A> collection. Cela peut être utile pour gérer les listes de très grande taille ou dont le contenu change fréquemment. Pour activer le mode virtuel, vous devez définir le <xref:System.Windows.Forms.ListView.VirtualMode%2A> propriété `true` et gérer le <xref:System.Windows.Forms.ListView.RetrieveVirtualItem>, <xref:System.Windows.Forms.ListView.CacheVirtualItems>, et <xref:System.Windows.Forms.ListView.SearchForVirtualItem> événements.  
  
 Outre les nombreuses propriétés qui sont disponibles pour un <xref:System.Windows.Forms.ListView> contrôler, méthodes et événements de votre application peut utiliser pour fournir des fonctionnalités supplémentaires pour le <xref:System.Windows.Forms.ListView>. Le <xref:System.Windows.Forms.ListView.BeginUpdate%2A> et <xref:System.Windows.Forms.ListView.EndUpdate%2A> méthodes permettent d’améliorer les performances lorsque vous ajoutez plusieurs éléments à un <xref:System.Windows.Forms.ListView> en empêchant le contrôle de mise à jour chaque fois qu’un élément est ajouté. Si votre <xref:System.Windows.Forms.ListView> contrôle affiche des éléments et sous-éléments, vous souhaiterez peut-être fournir une fonctionnalité lorsque l’utilisateur clique sur un sous-élément. Pour déterminer l’élément à un clic sur auquel appartient le sous-élément, vous pouvez utiliser la <xref:System.Windows.Forms.ListView.GetItemAt%2A> (méthode). Lors de la validation des éléments une fois que l’utilisateur a modifié les, vous souhaiterez afficher un élément spécifique à l’utilisateur à modifier. Le <xref:System.Windows.Forms.ListView.EnsureVisible%2A> méthode peut être appelée pour vous assurer que l’élément spécifique est dans la zone visible du contrôle.  
  
 Si le <xref:System.Windows.Forms.ListView.LabelEdit%2A> propriété `true`, vous pouvez effectuer des tâches telles que la validation du texte modifié, avant et après le texte modifié en créant un gestionnaire d’événements pour le <xref:System.Windows.Forms.ListView.BeforeLabelEdit> et <xref:System.Windows.Forms.ListView.AfterLabelEdit> les événements. Pour effectuer des tâches telles que l’ouverture d’un fichier ou d’afficher une boîte de dialogue pour modifier un élément affiché dans un <xref:System.Windows.Forms.ListView>, vous pouvez créer un gestionnaire d’événements pour le <xref:System.Windows.Forms.ListView.ItemActivate> événement. Si vous autorisez l’utilisateur de trier les éléments dans un <xref:System.Windows.Forms.ListView> lorsqu’ils cliquent sur un en-tête de colonne, vous pouvez créer un gestionnaire d’événements pour le <xref:System.Windows.Forms.ListView.ColumnClick> événement pour effectuer le tri. Lorsque le <xref:System.Windows.Forms.ListView.CheckBoxes%2A> est définie sur `true`, vous pouvez déterminer quand une modification dans l’état d’activation d’un élément a été par la gestion de la <xref:System.Windows.Forms.ListView.ItemCheck> événement.  
  
 Vous pouvez également définir une image d’arrière-plan pour le <xref:System.Windows.Forms.ListView> avec la <xref:System.Windows.Forms.Control.BackgroundImage%2A> propriété. Votre application doit avoir le <xref:System.STAThreadAttribute> sur son `Main` méthode pour afficher correctement l’image d’arrière-plan pour le <xref:System.Windows.Forms.ListView> contrôle. En outre, si un <xref:System.Windows.Forms.ListView> contrôle avec une image d’arrière-plan est hébergé dans Internet Explorer, spécifiez comctl32.dll version 6.0 comme assembly dépendant dans le fichier de manifeste d’application pour garantir l’image d’arrière-plan affichée.  
  
> [!NOTE]
>  Définition de la <xref:System.Windows.Forms.Control.Cursor%2A> propriété pour un <xref:System.Windows.Forms.ListView> contrôle n’a aucun effet sur l’apparence du curseur dans [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] versions 1.1 et antérieures.  
  
 Windows XP et Windows Server 2003 fournissent trois fonctionnalités qui améliorent la <xref:System.Windows.Forms.ListView> contrôle lorsque votre application appelle la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> méthode : affichage en mosaïque, regroupement et la marque d’insertion.  
  
 L’affichage en mosaïque vous permet d’équilibrer les informations graphiques et textuelles en affichant le texte d’élément et des sous-éléments en regard de grandes icônes. Définir le <xref:System.Windows.Forms.ListView.View%2A> propriété <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType> pour activer ce comportement.  
  
 La fonctionnalité de regroupement vous permet de regrouper visuellement des éléments dans les catégories associées. Utilisez le <xref:System.Windows.Forms.ListView.Groups%2A> propriété à ajouter <xref:System.Windows.Forms.ListViewGroup> des objets sur le <xref:System.Windows.Forms.ListView> lorsque vous souhaitez activer cette fonctionnalité de contrôle. Pour désactiver temporairement la fonctionnalité, affectez la <xref:System.Windows.Forms.ListView.ShowGroups%2A> propriété `false`.  
  
 La fonctionnalité de marque d’insertion vous permet de fournir le repositionnement d’élément par glisser-déplacer avec rétroaction visuelle pour indiquer les emplacements de dépôt. Utilisez le <xref:System.Windows.Forms.ListViewInsertionMark> objet récupéré par le biais du <xref:System.Windows.Forms.ListView.InsertionMark%2A> propriété pour afficher la marque d’insertion.  
  
 Ces fonctionnalités sont disponibles uniquement sous Windows XP et Windows Server 2003. Sur les systèmes d’exploitation antérieurs, le code qui se rapportent à ces fonctionnalités n’a aucun effet, l’affichage en mosaïque s’affiche en tant que mode grandes icônes, et la marque d’insertion et les groupes n’affichent pas. Dans certains cas, vous souhaitez inclure du code qui détermine si ces fonctionnalités sont disponibles et fournir d’autres fonctionnalités lorsqu’ils ne sont pas disponibles. Ces fonctionnalités sont fournies par la même bibliothèque qui fournit la fonctionnalité des thèmes du système d’exploitation. Pour vérifier la disponibilité de cette bibliothèque, appelez le <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> surcharge de méthode et passez le <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> valeur.  
  
 Le tableau suivant répertorie certaines du <xref:System.Windows.Forms.ListView> membres et les vues qu’ils sont valides dans.  
  
|Membre de ListView|Vue|  
|---------------------|----------|  
|Propriété <xref:System.Windows.Forms.ListView.Alignment%2A>|<xref:System.Windows.Forms.View.SmallIcon> ou <xref:System.Windows.Forms.View.LargeIcon>|  
|Propriété <xref:System.Windows.Forms.ListView.AutoArrange%2A>|<xref:System.Windows.Forms.View.SmallIcon> ou <xref:System.Windows.Forms.View.LargeIcon>|  
|Méthode <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>|<xref:System.Windows.Forms.View.Details>|  
|Propriété <xref:System.Windows.Forms.ListView.Columns%2A>|<xref:System.Windows.Forms.View.Details> ou <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem> Événement|<xref:System.Windows.Forms.View.Details>|  
|Méthode <xref:System.Windows.Forms.ListView.FindItemWithText%2A>|<xref:System.Windows.Forms.View.Details>, <xref:System.Windows.Forms.View.List>ou <xref:System.Windows.Forms.View.Tile>|  
|Méthode <xref:System.Windows.Forms.ListView.FindNearestItem%2A>|<xref:System.Windows.Forms.View.SmallIcon> ou <xref:System.Windows.Forms.View.LargeIcon>|  
|Méthode <xref:System.Windows.Forms.ListView.GetItemAt%2A>|<xref:System.Windows.Forms.View.Details> ou <xref:System.Windows.Forms.View.Tile>|  
|Propriété <xref:System.Windows.Forms.ListView.Groups%2A>|Toutes les vues à l’exception <xref:System.Windows.Forms.View.List>|  
|Propriété <xref:System.Windows.Forms.ListView.HeaderStyle%2A>|<xref:System.Windows.Forms.View.Details>|  
|Propriété <xref:System.Windows.Forms.ListView.InsertionMark%2A>|<xref:System.Windows.Forms.View.LargeIcon>, <xref:System.Windows.Forms.View.SmallIcon>ou <xref:System.Windows.Forms.View.Tile>|  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle :  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="T:System.Windows.Forms.ImageList" />
    <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle :  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ItemActivation Activation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ItemActivation Activation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Activation" />
      <MemberSignature Language="VB.NET" Value="Public Property Activation As ItemActivation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ItemActivation Activation { System::Windows::Forms::ItemActivation get(); void set(System::Windows::Forms::ItemActivation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemActivation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le type d'action que l'utilisateur doit effectuer pour activer un élément.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.ItemActivation" />. La valeur par défaut est <see cref="F:System.Windows.Forms.ItemActivation.Standard" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.Activation%2A> propriété permet de spécifier la manière dont l’utilisateur doit activer un élément dans le <xref:System.Windows.Forms.ListView> contrôle. L’activation d’un élément dans un <xref:System.Windows.Forms.ListView> diffère de la sélection d’un élément. Lorsqu’un élément est activé, une action est généralement effectuée dans un gestionnaire d’événements pour le <xref:System.Windows.Forms.ListView.ItemActivate> événement. Par exemple, lorsqu’un élément est activé vous pourrez ouvrir un fichier ou afficher une boîte de dialogue qui permet à l’élément à modifier. En règle générale, un utilisateur double-clique sur par l’utilisateur pour l’activer. Si le <xref:System.Windows.Forms.ListView.Activation%2A> est définie sur <xref:System.Windows.Forms.ItemActivation.OneClick>, en cliquant sur l’élément une fois qu’il active. Définition de la <xref:System.Windows.Forms.ListView.Activation%2A> propriété <xref:System.Windows.Forms.ItemActivation.TwoClick> diffère le double-clic standard comme deux clics peuvent avoir une durée entre eux.  
  
> [!NOTE]
>  Si le <xref:System.Windows.Forms.ListView.Activation%2A> est définie sur <xref:System.Windows.Forms.ItemActivation.OneClick> ou <xref:System.Windows.Forms.ItemActivation.TwoClick>, une modification d’étiquette n’est pas autorisée, quelle que soit la valeur de la <xref:System.Windows.Forms.ListView.LabelEdit%2A> propriété.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La valeur spécifiée n'est pas l'un des membres de <see cref="T:System.Windows.Forms.ItemActivation" />.</exception>
        <altmember cref="T:System.Windows.Forms.ItemActivation" />
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
      </Docs>
    </Member>
    <Member MemberName="AfterLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler AfterLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler AfterLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ AfterLabelEdit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'utilisateur modifie l'étiquette d'un élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.AfterLabelEdit> événement se produit lorsque l’utilisateur a fini de modifier le texte d’un élément. La nouvelle chaîne que l’utilisateur tape pour l’élément est passée à l’événement et le Gestionnaire d’événements peut rejeter la modification. Si le Gestionnaire d’événements rejette la modification, le texte retrouve le texte tel qu’il était avant la dernière modification de l’élément.  
  
> [!NOTE]
>  Étant donné que la <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> événement intervient avant la modification de l’étiquette est validée, l’appel du <xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType> méthode dans un gestionnaire pour cet événement sera tri de l’élément à l’aide de la valeur d’origine.  
  
 Dans l’ordre pour la <xref:System.Windows.Forms.ListView.AfterLabelEdit> événement soit déclenché, la <xref:System.Windows.Forms.ListView.LabelEdit%2A> propriété de la <xref:System.Windows.Forms.ListView> contrôle doit être définie sur `true`.  
  
 Vous pouvez créer un gestionnaire d’événements pour le <xref:System.Windows.Forms.ListView.BeforeLabelEdit> événement pour effectuer des tâches avant que l’utilisateur modifie le texte d’un élément.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.ListView.AfterLabelEdit> événement pour limiter aux caractères de l’alphabet une étiquette qui vient d’être modifiée. L’exemple utilise la <xref:System.Text.ASCIIEncoding> classe pour obtenir le code ASCII de chaque caractère de la nouvelle étiquette. Si le caractère est compris entre les codes ASCII représentant des nombres, la nouvelle étiquette ne peut pas être appliquée à l’élément. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.ListView> contrôle dans un formulaire et des éléments ajoutés à ce dernier. L’exemple suppose également que vous avez connecté la <xref:System.Windows.Forms.ListView.AfterLabelEdit> événement au gestionnaire d’événements défini dans l’exemple de code. Pour pouvoir utiliser le <xref:System.Text.ASCIIEncoding> (classe), votre fichier doit inclure le <xref:System.Text> espace de noms.  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ListViewAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As ListViewAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewAlignment Alignment { System::Windows::Forms::ListViewAlignment get(); void set(System::Windows::Forms::ListViewAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'alignement des éléments dans le contrôle.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.ListViewAlignment" />. La valeur par défaut est <see cref="F:System.Windows.Forms.ListViewAlignment.Top" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.Alignment%2A> propriété affecte uniquement l’alignement lors de la <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.LargeIcon> ou <xref:System.Windows.Forms.View.SmallIcon>.  
  
> [!NOTE]
>  Cette propriété n’a aucun effet avec le <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.List>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La valeur spécifiée n'est pas l'une des valeurs <see cref="T:System.Windows.Forms.ListViewAlignment" />.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
      </Docs>
    </Member>
    <Member MemberName="AllowColumnReorder">
      <MemberSignature Language="C#" Value="public bool AllowColumnReorder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowColumnReorder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AllowColumnReorder" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowColumnReorder As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowColumnReorder { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si l'utilisateur a la possibilité de réorganiser les colonnes du contrôle en faisant glisser leur en-tête.</summary>
        <value>
          <see langword="true" /> si la réorganisation des colonnes par glisser-déplacer est autorisée ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définition de la valeur de la <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> propriété n’a aucun effet à moins que le <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.Details>. Vous pouvez utiliser cette propriété pour permettre aux utilisateurs de réorganiser les colonnes dans le contrôle au moment de l’exécution. Lorsque le <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A> est définie sur `true`, les utilisateurs peuvent placer les colonnes dans le contrôle pour afficher l’élément et ses sous-éléments d’une façon qui répond aux besoins de votre application.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle :  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrangeIcons">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Organise les éléments dans le contrôle lorsqu'ils sont affichés sous forme d'icônes.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Organise les éléments dans le contrôle, lorsqu'ils sont affichés sous forme d'icônes, selon la valeur de la propriété <see cref="P:System.Windows.Forms.ListView.Alignment" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> méthode est utile uniquement quand le <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.LargeIcon> ou <xref:System.Windows.Forms.View.SmallIcon>. Appel à cette version de la <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> méthode réorganise les éléments en fonction de la valeur de la <xref:System.Windows.Forms.ListView.Alignment%2A> propriété. Pour aligner les éléments selon une valeur qui diffère de celui de la <xref:System.Windows.Forms.ListView.Alignment%2A> propriété, utilisez l’autre version de la <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons (System.Windows.Forms.ListViewAlignment value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons(valuetype System.Windows.Forms.ListViewAlignment value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons (value As ListViewAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons(System::Windows::Forms::ListViewAlignment value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListViewAlignment" />
      </Parameters>
      <Docs>
        <param name="value">Une des valeurs de <see cref="T:System.Windows.Forms.ListViewAlignment" />.</param>
        <summary>Organise les éléments dans le contrôle, lorsqu'ils sont affichés sous forme d'icônes, selon le paramètre d'alignement spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> méthode est utile uniquement quand le <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.LargeIcon> ou <xref:System.Windows.Forms.View.SmallIcon>. Cette version de la <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> méthode réorganise les icônes dans le <xref:System.Windows.Forms.ListView> selon la <xref:System.Windows.Forms.ListViewAlignment> valeur spécifiée dans le `value` paramètre. Appel de cette méthode ne modifie pas la valeur de la <xref:System.Windows.Forms.ListView.Alignment%2A> propriété du contrôle. Cette méthode est utilisée pour agencer des icônes sur le contrôle à l’aide d’une valeur différente de celle de la <xref:System.Windows.Forms.ListView.Alignment%2A> propriété. Aligner les éléments en fonction de la valeur de la <xref:System.Windows.Forms.ListView.Alignment%2A> propriété, utilisez l’autre version de la <xref:System.Windows.Forms.ListView.ArrangeIcons%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La valeur spécifiée dans le paramètre <paramref name="value" /> n'est pas un membre de l'énumération <see cref="T:System.Windows.Forms.ListViewAlignment" />.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoArrange">
      <MemberSignature Language="C#" Value="public bool AutoArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AutoArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoArrange { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit si l'organisation des icônes est conservée automatiquement.</summary>
        <value>
          <see langword="true" /> si les icônes restent automatiquement organisées et alignées sur la grille ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.AutoArrange%2A> propriété dispose uniquement des éléments dans le <xref:System.Windows.Forms.ListView> contrôle lorsque le <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.LargeIcon> ou <xref:System.Windows.Forms.View.SmallIcon>. Pour modifier l’alignement des éléments dans le <xref:System.Windows.Forms.ListView> contrôler, utilisez le <xref:System.Windows.Forms.ListView.Alignment%2A> propriété. Vous pouvez utiliser <xref:System.Windows.Forms.ListView.AutoArrange%2A> pour vous assurer que tous les éléments de votre <xref:System.Windows.Forms.ListView> contrôle sont automatiquement organisées à éviter le chevauchement au moment de l’exécution.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumn (columnIndex As Integer, headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumn(int columnIndex, System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="columnIndex">Index de base zéro de la colonne à redimensionner.</param>
        <param name="headerAutoResize">Une des valeurs de <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" />.</param>
        <summary>Redimensionne la largeur de la colonne donnée comme indiqué par le style de redimensionnement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appel de cette méthode ne fonctionne que lorsque la <xref:System.Windows.Forms.ListView> et contenant <xref:System.Windows.Forms.Form> ont été construits et le <xref:System.Windows.Forms.ListView> les en-têtes de colonne et les colonnes sont remplis avec des éléments. Si de nouveaux éléments sont ajoutés à la <xref:System.Windows.Forms.ListView>, les colonnes ne sont pas redimensionnées à moins que <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> est appelée à nouveau.  
  
   
  
## Examples  
 L’exemple suivant initialise un <xref:System.Windows.Forms.ListView> dans l’affichage des détails et automatiquement redimensionne les colonnes à l’aide de la <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> (méthode). Pour exécuter cet exemple, collez ce code dans un Windows Form et appelez le `InitializeResizingListView` méthode à partir du constructeur du formulaire ou <xref:System.Windows.Forms.Form.Load> Gestionnaire d’événements.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="columnIndex" /> est supérieur à 0 lorsque <see cref="P:System.Windows.Forms.ListView.Columns" /> est <see langword="null" />  
  
 - ou -  
  
 <paramref name="columnIndex" /> est inférieur à 0 ou supérieur au nombre de colonnes définies.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="headerAutoResize" /> n’est pas membre de l’énumération <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumns(System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumns (headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumns(System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="headerAutoResize">Une des valeurs de <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" />.</param>
        <summary>Redimensionne la largeur des colonnes comme indiqué par le style de redimensionnement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appel de cette méthode ne fonctionne que lorsque la <xref:System.Windows.Forms.ListView> et contenant <xref:System.Windows.Forms.Form> ont été construits et le <xref:System.Windows.Forms.ListView> les en-têtes de colonne et les colonnes sont remplis avec des éléments. Si de nouveaux éléments sont ajoutés à la <xref:System.Windows.Forms.ListView>, les colonnes ne sont pas redimensionnées à moins que <xref:System.Windows.Forms.ListView.AutoResizeColumns%2A> est appelée à nouveau.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’initialisation d’un <xref:System.Windows.Forms.ListView> dans l’affichage des détails et le redimensionnement automatique des colonnes à l’aide de la <xref:System.Windows.Forms.ListView.AutoResizeColumns%2A> (méthode). Pour exécuter cet exemple, collez ce code dans un Windows Form et appelez le `InitializeResizingListView2` méthode à partir du constructeur du formulaire ou <xref:System.Windows.Forms.Form.Load> Gestionnaire d’événements.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> est appelé avec une valeur autre que <see cref="F:System.Windows.Forms.ColumnHeaderAutoResizeStyle.None" /> lorsque <see cref="P:System.Windows.Forms.ListView.View" /> n'a pas la valeur <see cref="F:System.Windows.Forms.View.Details" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la couleur d'arrière-plan.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> d'arrière-plan.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur <see cref="T:System.Windows.Forms.ImageLayout" />.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.ImageLayout" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété n’a aucun effet sur la disposition de l’image d’arrière-plan de la <xref:System.Windows.Forms.ListView> (contrôle), elle n’est pas affichée dans le concepteur ou par IntelliSense.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La valeur spécifiée n'est pas l'une des valeurs <see cref="T:System.Windows.Forms.ImageLayout" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand la propriété <see cref="P:System.Windows.Forms.ListView.BackgroundImageLayout" /> change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageTiled">
      <MemberSignature Language="C#" Value="public bool BackgroundImageTiled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BackgroundImageTiled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageTiled" />
      <MemberSignature Language="VB.NET" Value="Public Property BackgroundImageTiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BackgroundImageTiled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si l'image d'arrière-plan de <see cref="T:System.Windows.Forms.ListView" /> doit être affichée en mosaïque.</summary>
        <value>
          <see langword="true" /> si l'image d'arrière-plan de <see cref="T:System.Windows.Forms.ListView" /> doit être affichée en mosaïque ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.BackgroundImageTiled%2A> propriété renvoie `false` si une image n’est pas définie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ BeforeLabelEdit;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'utilisateur commence à modifier l'étiquette d'un élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.BeforeLabelEdit> événement se produit lorsque l’utilisateur commence à modifier le texte d’un élément. Si le Gestionnaire d’événements annule cet événement, l’utilisateur ne peut pas modifier le texte. Vous pouvez utiliser cet événement pour empêcher l’utilisateur de modifier des éléments spécifiques dans le <xref:System.Windows.Forms.ListView> contrôle. Si le <xref:System.Windows.Forms.ListView.LabelEdit%2A> propriété de la <xref:System.Windows.Forms.ListView> contrôle est défini sur `false`, le <xref:System.Windows.Forms.ListView.BeforeLabelEdit> événement n’est pas déclenché ; toutes les tentatives d’utilisateur pour modifier les étiquettes d’élément sont automatiquement rejetés.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la gestion du <xref:System.Windows.Forms.ListView.BeforeLabelEdit> événement et à l’aide de la <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A?displayProperty=nameWithType> et <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A?displayProperty=nameWithType> propriétés. Pour exécuter l’exemple, collez le code suivant dans un formulaire qui contient un <xref:System.Windows.Forms.ListView> contrôle nommé `ListView1` et rempli avec au moins trois éléments. Assurez-vous que le Gestionnaire d’événements dans l’exemple est associé à l’événement.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Empêche le contrôle de redessiner tant que la méthode <see cref="M:System.Windows.Forms.ListView.EndUpdate" /> n'est pas appelée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La meilleure façon d’ajouter plusieurs éléments à un <xref:System.Windows.Forms.ListView> consiste à utiliser le <xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A> méthode de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> (accessibles via le <xref:System.Windows.Forms.ListView.Items%2A> propriété de la <xref:System.Windows.Forms.ListView>). Cela vous permet de vous permet d’ajouter un tableau d’éléments à la liste en une seule opération. Cependant, si vous souhaitez ajouter des éléments un à la fois avec la <xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A> méthode de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> (classe), vous pouvez utiliser la <xref:System.Windows.Forms.ListView.BeginUpdate%2A> méthode pour empêcher le contrôle à partir de la mise à jour le <xref:System.Windows.Forms.ListView> chaque fois qu’un élément est ajouté. Lorsque vous avez terminé la tâche d’ajout d’éléments au contrôle, appelez le <xref:System.Windows.Forms.ListView.EndUpdate%2A> méthode pour activer la <xref:System.Windows.Forms.ListView> à repeindre. Cette méthode d’ajout d’éléments peut éviter le scintillement pendant le dessin de le <xref:System.Windows.Forms.ListView> quand un grand nombre d’éléments est ajouté au contrôle.  
  
 Si <xref:System.Windows.Forms.ListView.BeginUpdate%2A> est appelée plusieurs fois, <xref:System.Windows.Forms.ListView.EndUpdate%2A> doit être appelé un nombre équivalent de fois. Jusqu'à ce que le dernier appel à <xref:System.Windows.Forms.ListView.EndUpdate%2A> le <xref:System.Windows.Forms.ListView> ne se repeint. Sinon, les appels multiples à <xref:System.Windows.Forms.ListView.BeginUpdate%2A> n’ont aucun effet.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’initialisation d’un <xref:System.Windows.Forms.ListView> contrôle devant contenir les cases à cocher. Il montre également comment utiliser le <xref:System.Windows.Forms.ListView.BeginUpdate%2A> et <xref:System.Windows.Forms.ListView.EndUpdate%2A> méthodes. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.ListView> nommé `ListView1`. Appelez le `InititalizeListView` méthode à partir du constructeur du formulaire ou `Load` (méthode).  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.EndUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le style de bordure du contrôle.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.BorderStyle" />. La valeur par défaut est <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.Windows.Forms.ListView.BorderStyle%2A> propriété à modifier le style de bordure de la <xref:System.Windows.Forms.ListView> contrôle pour faire correspondre les paramètres de style de bordure d’autres contrôles sur le formulaire. Par exemple, si aucun des autres contrôles sur votre formulaire affiche une bordure, vous pouvez définir le <xref:System.Windows.Forms.ListView.BorderStyle%2A> propriété de la <xref:System.Windows.Forms.ListView> le contrôle à <xref:System.Windows.Forms.BorderStyle.None> pour faire correspondre les autres contrôles.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La valeur spécifiée n'est pas l'une des valeurs <see cref="T:System.Windows.Forms.BorderStyle" />.</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="CacheVirtualItems">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.CacheVirtualItems" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CacheVirtualItems As CacheVirtualItemsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::CacheVirtualItemsEventHandler ^ CacheVirtualItems;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CacheVirtualItemsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le contenu de la zone d'affichage de <see cref="T:System.Windows.Forms.ListView" /> en mode virtuel a été modifié, et que <see cref="T:System.Windows.Forms.ListView" /> détermine qu'une nouvelle plage d'éléments est nécessaire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement se produit uniquement lorsque <xref:System.Windows.Forms.ListView.VirtualMode%2A> est `true`. La gestion de cet événement permet le <xref:System.Windows.Forms.ListView> pour mettre à jour les informations d’élément contenues dans le cache afin qu’elle soit prête. Cela peut améliorer les performances sur grandes listes ou des listes dont les éléments sont coûteuses à calculer.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, le Gestionnaire d’événements vérifie pour vous assurer une actualisation du cache est réellement nécessaire, puis reconstruit le cache. Cet exemple de code fait partie d’un exemple plus complet fourni pour le <xref:System.Windows.Forms.ListView.VirtualMode%2A> propriété.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public bool CheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckBoxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckBoxes" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckBoxes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckBoxes { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si une case à cocher doit apparaître à côté de chaque élément du contrôle.</summary>
        <value>
          <see langword="true" /> si une case à cocher apparaît à côté de chaque élément du contrôle <see cref="T:System.Windows.Forms.ListView" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propriété vous permet d’afficher une case à cocher en regard de chaque élément dans la liste. Cela permet à votre application afficher une liste d’éléments (et des sous-éléments si le <xref:System.Windows.Forms.ListView.View%2A> est définie sur `View.Details`) que l’utilisateur peut sélectionner en cliquant sur la case à cocher. Le <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propriété vous permet de sélectionner plusieurs éléments dans le <xref:System.Windows.Forms.ListView> contrôle sans utiliser la touche CTRL ENFONCÉE. Selon votre application, utilisez les cases à cocher pour sélectionner des éléments plutôt que la norme de méthode de sélection de plusieurs peut être plus facile pour l’utilisateur. Même si le <xref:System.Windows.Forms.ListView.MultiSelect%2A> propriété de la <xref:System.Windows.Forms.ListView> contrôle est défini sur `false`, vous pouvez toujours afficher des cases à cocher et fournir la fonctionnalité de sélection multiple à l’utilisateur. Cette fonctionnalité peut être utile si vous ne pas plusieurs éléments à sélectionner encore que vous souhaitez toujours autoriser l’utilisateur à choisir plusieurs éléments dans la liste pour effectuer une opération au sein de votre application.  
  
 Pour déterminer si un élément a été activé, créez un gestionnaire d’événements pour le <xref:System.Windows.Forms.ListView.ItemCheck> événement. Pour obtenir tous les éléments qui sont activés dans le <xref:System.Windows.Forms.ListView>, utilisez le <xref:System.Windows.Forms.ListView.CheckedItems%2A> propriété pour accéder à la <xref:System.Windows.Forms.ListView.CheckedIndexCollection> pour le contrôle. Pour obtenir les index de tous les éléments qui sont activés dans le <xref:System.Windows.Forms.ListView>, utilisez le <xref:System.Windows.Forms.ListView.CheckedIndices%2A> propriété.  
  
 Si un <xref:System.Windows.Forms.ImageList> est spécifié dans le <xref:System.Windows.Forms.ListView.StateImageList%2A> propriété, les images aux positions d’index 0 et 1 dans le <xref:System.Windows.Forms.ImageList> sont affichées au lieu de la case à cocher. L’image à la position d’index 0 est affichée au lieu de la case à cocher est désactivée, et l’image à la position d’index 1 s’affiche au lieu de la case à cocher activée.  
  
> [!NOTE]
>  Lorsque vous définissez cette propriété sur `true`, le <xref:System.Windows.Forms.ListView.ItemCheck> événement se produit.  
>   
>  Cases à cocher ne sont pas affichées lorsque la <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.Tile>.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="P:System.Windows.Forms.ListView.MultiSelect" />
      </Docs>
    </Member>
    <Member MemberName="CheckedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedIndexCollection CheckedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedIndexCollection CheckedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedIndices As ListView.CheckedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedIndexCollection ^ CheckedIndices { System::Windows::Forms::ListView::CheckedIndexCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les index des éléments activés dans le contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" /> qui contient les index des éléments activés. Si aucun élément n'est activé, un <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" /> vide est retourné.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est utile uniquement quand le <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propriété de la <xref:System.Windows.Forms.ListView> contrôle est défini sur `true`. Le <xref:System.Windows.Forms.ListView.CheckedIndices%2A> propriété retourne une collection qui contient les positions d’index dans la <xref:System.Windows.Forms.ListView.ListViewItemCollection> de tous les éléments qui sont activés dans le contrôle. Pour plus d’informations sur comment manipuler les éléments de la collection, consultez <xref:System.Windows.Forms.ListView.CheckedIndexCollection>.  
  
 Si vous souhaitez obtenir une collection d’éléments activés dans le <xref:System.Windows.Forms.ListView> contrôle, au lieu des positions d’index des éléments qui sont vérifiées, utilisez le <xref:System.Windows.Forms.ListView.CheckedItems%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedItems" />
      </Docs>
    </Member>
    <Member MemberName="CheckedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedListViewItemCollection CheckedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedListViewItemCollection CheckedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedItems As ListView.CheckedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedListViewItemCollection ^ CheckedItems { System::Windows::Forms::ListView::CheckedListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les éléments qui sont activés dans le contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> qui contient les éléments activés. Si aucun élément n'est activé, un <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> vide est retourné.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est utile uniquement quand le <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propriété de la <xref:System.Windows.Forms.ListView> contrôle est défini sur `true`. Le <xref:System.Windows.Forms.ListView.CheckedItems%2A> propriété retourne une collection qui contient tous les éléments qui sont activés dans le contrôle. Pour plus d’informations sur comment manipuler les éléments de la collection, consultez <xref:System.Windows.Forms.ListView.CheckedListViewItemCollection>.  
  
 Si vous souhaitez obtenir une collection de la position d’index au sein de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> des éléments activés dans le <xref:System.Windows.Forms.ListView> contrôle, au lieu des éléments qui sont vérifiées, utilisez le <xref:System.Windows.Forms.ListView.CheckedIndices%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant montre un <xref:System.Windows.Forms.ListView> qui gère la <xref:System.Windows.Forms.ListView.ItemChecked> événement. L’exemple utilise le <xref:System.Windows.Forms.ListView.CheckedItems%2A> propriété à calculer un nouveau prix chaque fois qu’un élément est activé ou désactivé. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.ListView> nommé `ListView1` et un <xref:System.Windows.Forms.TextBox> nommé `Textbox1`. Appelez le `InititalizeListView` méthode à partir du constructeur du formulaire ou `Load` (méthode).  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedIndices" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime tous les éléments et les colonnes du contrôle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette méthode pour supprimer tous les éléments et les colonnes à partir de la <xref:System.Windows.Forms.ListView> contrôle sans avoir à contacter la personne `Clear` méthodes à partir de la <xref:System.Windows.Forms.ListView.ColumnHeaderCollection> et <xref:System.Windows.Forms.ListView.ListViewItemCollection> classes.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.ListView.Clear%2A> méthode n’efface pas <xref:System.Windows.Forms.ListView.Groups%2A> spécifié pour le <xref:System.Windows.Forms.ListView> contrôle. Pour effacer <xref:System.Windows.Forms.ListView.Groups%2A> appeler <xref:System.Windows.Forms.ListViewGroupCollection.Clear%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de <xref:System.Windows.Forms.ListView.Clear%2A> et <xref:System.Windows.Forms.ListViewItem.Selected%2A?displayProperty=nameWithType> membres. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.ListView> nommé `ListView1` et un bouton situé au bas du formulaire, nommé `Button1`. Appelez le `InitializeListView` méthode à partir du constructeur du formulaire ou `Load` (méthode).  
  
 [!code-cpp[System.Windows.Forms.ListView4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.ColumnHeaderCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="ColumnClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnClickEventHandler ColumnClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnClickEventHandler ColumnClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnClick As ColumnClickEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnClickEventHandler ^ ColumnClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'utilisateur clique sur un en-tête de colonne dans le contrôle list view.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.ColumnClick> événement se produit lorsque l’utilisateur clique sur l’un des en-têtes de colonnes dans la vue Détails des éléments dans un <xref:System.Windows.Forms.ListView> contrôle (lorsque le <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.Details>). Le <xref:System.Windows.Forms.ListView.ColumnClick> événement est généralement géré pour trier les éléments dans le <xref:System.Windows.Forms.ListView> à l’aide de la colonne sélectionnée en tant que la colonne à trier.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant crée un formulaire qui contient un <xref:System.Windows.Forms.ListView> contrôle qui trie manuellement les éléments lors d’une colonne dans la <xref:System.Windows.Forms.ListView> un clic sur le contrôle. L’exemple définit une classe appelée `ListViewItemComparer` qui implémente le <xref:System.Collections.IComparer?displayProperty=nameWithType> interface qui effectue la <xref:System.Windows.Forms.ListViewItem> comparaison. L’exemple crée une instance de `ListViewItemComparer` et l’utilise pour définir le <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propriété de la <xref:System.Windows.Forms.ListView> contrôle. Le <xref:System.Windows.Forms.ListView.Sort%2A> l’appel de méthode le <xref:System.Windows.Forms.ListView.ColumnClick> Gestionnaire d’événements utilise les méthodes définies dans `ListViewItemComparer` pour effectuer le tri des éléments, en fonction de la colonne qui est activée.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ColumnReordered">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnReordered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnReordered As ColumnReorderedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnReorderedEventHandler ^ ColumnReordered;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnReorderedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'ordre des en-têtes de colonne est modifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.ColumnReordered> événement est un événement annulable et peut être annulé en gérant l’événement et en réglant la <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propriété `true`. Toutefois, si l’événement est annulé, la <xref:System.Windows.Forms.ColumnReorderedEventArgs.NewDisplayIndex%2A> de la <xref:System.Windows.Forms.ColumnReorderedEventArgs> ne change pas à la <xref:System.Windows.Forms.ColumnReorderedEventArgs.OldDisplayIndex%2A> valeur.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements indique l’occurrence de le <xref:System.Windows.Forms.ListView.ColumnReordered> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un élément <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.ListView> nommé `ListView1`. Vérifiez que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.ListView.ColumnReordered> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#467](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#467)]
 [!code-vb[System.Windows.Forms.EventExamples#467](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#467)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ColumnHeaderCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ColumnHeaderCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As ListView.ColumnHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ColumnHeaderCollection ^ Columns { System::Windows::Forms::ListView::ColumnHeaderCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ColumnHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection contenant tous les en-têtes de colonnes qui apparaissent dans le contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" /> qui représente les en-têtes de colonnes affichés lorsque la propriété <see cref="P:System.Windows.Forms.ListView.View" /> a la valeur <see cref="F:System.Windows.Forms.View.Details" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.Columns%2A> propriété retourne une collection qui contient le <xref:System.Windows.Forms.ColumnHeader> objets qui sont affichés dans le <xref:System.Windows.Forms.ListView> contrôle. <xref:System.Windows.Forms.ColumnHeader> objets définissent les colonnes qui sont affichent dans le <xref:System.Windows.Forms.ListView> contrôle lorsque le <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.Details>. Chaque colonne est utilisée pour afficher les informations de sous-élément de chaque élément dans le <xref:System.Windows.Forms.ListView>. Pour plus d’informations sur comment manipuler les éléments de la collection, consultez <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>.  
  
> [!NOTE]
>  Si votre <xref:System.Windows.Forms.ListView> contrôle n’a pas de tous les en-têtes de colonne spécifiés et que vous définissez la <xref:System.Windows.Forms.ListView.View%2A> propriété <xref:System.Windows.Forms.View.Details>, le <xref:System.Windows.Forms.ListView> contrôle n’affiche pas tous les éléments.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanged As ColumnWidthChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangedEventHandler ^ ColumnWidthChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit une fois que la largeur d'une colonne a été correctement modifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement ne se produit pas si le changement de largeur de colonne est annulé dans le <xref:System.Windows.Forms.ListView.ColumnWidthChanging> événement  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements indique l’occurrence de le <xref:System.Windows.Forms.ListView.ColumnWidthChanged> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un élément <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.ListView> nommé `ListView1`. Vérifiez que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.ListView.ColumnWidthChanged> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#468](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#468)]
 [!code-vb[System.Windows.Forms.EventExamples#468](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#468)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanging">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanging As ColumnWidthChangingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangingEventHandler ^ ColumnWidthChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la largeur d'une colonne est en cours de modification.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement permet de vérifier la nouvelle largeur de colonne avec le <xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType> propriété et l’annulation de l’événement si vous choisissez en définissant le <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> propriété `true`.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre la gestion du <xref:System.Windows.Forms.ListView.ColumnWidthChanging> événement. Il montre également la <xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType> et <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> membres. Pour exécuter cet exemple, collez le code dans un Windows Form. Appelez `InitializeListView1` à partir du constructeur du formulaire ou <xref:System.Windows.Forms.Form.Load> Gestionnaire d’événements.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crée un handle pour le contrôle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cette propriété ne s'applique pas à cette classe.</summary>
        <value>
          <see langword="null" /> dans tous les cas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété ne s'applique pas à cette classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la taille par défaut du contrôle.</summary>
        <value>
          <see cref="T:System.Drawing.Size" /> par défaut du contrôle.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
        <summary>Libère les ressources non managées utilisées par <see cref="T:System.Windows.Forms.ListView" /> et libère éventuellement les ressources managées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez le <xref:System.Windows.Forms.ListView.Dispose%2A> méthode lorsque le composant n’est plus nécessaire. Cette méthode supprime le composant de son conteneur (si le composant a un site) et déclenche l’événement de suppression.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected override bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si ce contrôle doit redessiner sa surface à l'aide d'une mémoire tampon secondaire afin de réduire ou éviter le scintillement.</summary>
        <value>
          <see langword="true" /> si la surface du contrôle doit être dessinée à l'aide d'un mécanisme de double tampon ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColumnHeader">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawColumnHeader" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawColumnHeader As DrawListViewColumnHeaderEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewColumnHeaderEventHandler ^ DrawColumnHeader;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewColumnHeaderEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le mode Détails de <see cref="T:System.Windows.Forms.ListView" /> est dessiné et que la propriété <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> a la valeur <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement vous permet de personnaliser l’apparence d’un <xref:System.Windows.Forms.ListView> contrôle owner-drawn. Il est déclenché uniquement lorsque le <xref:System.Windows.Forms.ListView.OwnerDraw%2A> est définie sur `true` et <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>. Cet événement peut se produire pour chaque en-tête de colonne dans le contrôle. Pour plus d’informations sur owner-drawn, consultez la <xref:System.Windows.Forms.ListView.OwnerDraw%2A> rubrique de référence de propriété.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant fournit une implémentation d’un <xref:System.Windows.Forms.ListView.DrawColumnHeader> Gestionnaire d’événements. Pour obtenir un exemple complet, y compris l’implémentation de la <xref:System.Windows.Forms.ListView.DrawSubItem> Gestionnaire d’événements, consultez le <xref:System.Windows.Forms.ListView.OwnerDraw%2A> rubrique de référence.  
  
 [!code-csharp[ListViewOwnerDraw#5](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#5)]
 [!code-vb[ListViewOwnerDraw#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawListViewItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewItemEventHandler ^ DrawItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque <see cref="T:System.Windows.Forms.ListView" /> est dessiné et que la propriété <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> a la valeur <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement vous permet de personnaliser l’apparence d’un <xref:System.Windows.Forms.ListView> contrôle owner-drawn. Il est déclenché uniquement lorsque le <xref:System.Windows.Forms.ListView.OwnerDraw%2A> est définie sur `true`. Pour plus d’informations sur owner-drawn, consultez la <xref:System.Windows.Forms.ListView.OwnerDraw%2A> rubrique de référence de propriété.  
  
 Le <xref:System.Windows.Forms.ListView.DrawItem> événement peut se produire pour chaque <xref:System.Windows.Forms.ListView> élément. Lorsque le <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, le <xref:System.Windows.Forms.ListView.DrawSubItem> et <xref:System.Windows.Forms.ListView.DrawColumnHeader> les événements se produisent également. Dans ce cas, vous pouvez gérer le <xref:System.Windows.Forms.ListView.DrawItem> événement pour dessiner des éléments communs à tous les éléments, tels que l’arrière-plan et gérer le <xref:System.Windows.Forms.ListView.DrawSubItem> événement pour dessiner des éléments pour les sous-éléments, telles que les valeurs de texte. Vous pouvez également dessiner tous les éléments le <xref:System.Windows.Forms.ListView> contrôler à l’aide d’un seul des deux événements, même si cela est moins pratique. Pour dessiner des en-têtes de colonne dans la vue Détails, vous devez gérer le <xref:System.Windows.Forms.ListView.DrawColumnHeader> événement.  
  
> [!NOTE]
>  En raison d’un bogue dans le contrôle Win32 sous-jacent, les <xref:System.Windows.Forms.ListView.DrawItem> événement se produit sans accompagnant <xref:System.Windows.Forms.ListView.DrawSubItem> événements une fois par ligne dans la vue Détails lorsque le pointeur de la souris se déplace sur la ligne, et tout élément peint dans une <xref:System.Windows.Forms.ListView.DrawSubItem> Gestionnaire d’événements à être peint par un arrière-plan personnalisé dessiné dans un <xref:System.Windows.Forms.ListView.DrawItem> Gestionnaire d’événements. Consultez l’exemple dans le <xref:System.Windows.Forms.ListView.OwnerDraw%2A> rubrique de référence pour une solution de contournement qui invalide chaque ligne lorsque l’événement supplémentaire se produit. Une autre solution consiste à placer tout votre code de dessin personnalisé dans un <xref:System.Windows.Forms.ListView.DrawSubItem> Gestionnaire d’événements et peindre l’arrière-plan de l’élément entier (y compris ses sous-éléments) uniquement lorsque le <xref:System.Windows.Forms.DrawListViewSubItemEventArgs.ColumnIndex%2A?displayProperty=nameWithType> valeur est 0.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant fournit une implémentation d’un <xref:System.Windows.Forms.ListView.DrawItem> Gestionnaire d’événements. Pour obtenir un exemple complet, consultez la <xref:System.Windows.Forms.ListView.OwnerDraw%2A> rubrique de référence.  
  
 [!code-csharp[ListViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#3)]
 [!code-vb[ListViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawSubItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawSubItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawSubItem As DrawListViewSubItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewSubItemEventHandler ^ DrawSubItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewSubItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le mode Détails de <see cref="T:System.Windows.Forms.ListView" /> est dessiné et que la propriété <see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> a la valeur <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement vous permet de personnaliser l’apparence d’un <xref:System.Windows.Forms.ListView> contrôle owner-drawn. Il est déclenché uniquement lorsque le <xref:System.Windows.Forms.ListView.OwnerDraw%2A> est définie sur `true` et <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>. Pour plus d’informations sur owner-drawn, consultez la <xref:System.Windows.Forms.ListView.OwnerDraw%2A> rubrique de référence de propriété.  
  
> [!NOTE]
>  Informations de sous-élément apparaissent généralement dans l’affichage en mosaïque ainsi que les détails de l’afficher, mais dans l’affichage en mosaïque, il doit être dessiné dans un gestionnaire pour le <xref:System.Windows.Forms.ListView.DrawItem> événement.  
  
 Le <xref:System.Windows.Forms.ListView.DrawSubItem> événement peut se produire pour chaque <xref:System.Windows.Forms.ListView> sous-élément. Vous pouvez gérer le <xref:System.Windows.Forms.ListView.DrawItem> événement pour dessiner des éléments communs à tous les sous-éléments, telles que l’arrière-plan et gérer le <xref:System.Windows.Forms.ListView.DrawSubItem> événement pour dessiner des éléments pour les sous-éléments, telles que les valeurs de texte. Vous pouvez également dessiner tous les éléments le <xref:System.Windows.Forms.ListView> contrôler à l’aide d’un seul des deux événements, même si cela est moins pratique. Pour dessiner des en-têtes de colonne dans la vue Détails, vous devez gérer le <xref:System.Windows.Forms.ListView.DrawColumnHeader> événement.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.ListView.DrawSubItem> événement ne survient pas pour les sous-éléments pour lesquels aucun <xref:System.Windows.Forms.ColumnHeader> objet a été ajouté à la <xref:System.Windows.Forms.ListView.Columns%2A> collection. Notez également que le premier sous-élément de chaque <xref:System.Windows.Forms.ListViewItem> objet représente l’élément parent lui-même et est affiché dans la première colonne.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant fournit une implémentation d’un <xref:System.Windows.Forms.ListView.DrawSubItem> Gestionnaire d’événements. Pour obtenir un exemple complet, consultez la <xref:System.Windows.Forms.ListView.OwnerDraw%2A> rubrique de référence.  
  
 [!code-csharp[ListViewOwnerDraw#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#4)]
 [!code-vb[ListViewOwnerDraw#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reprend le dessin du contrôle list view après qu'il a été suspendu par la méthode <see cref="M:System.Windows.Forms.ListView.BeginUpdate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La meilleure façon d’ajouter plusieurs éléments à un <xref:System.Windows.Forms.ListView> consiste à utiliser le <xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A> méthode de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> (accessibles via le <xref:System.Windows.Forms.ListView.Items%2A> propriété de la <xref:System.Windows.Forms.ListView>). Cela vous permet de vous permet d’ajouter un tableau d’éléments à la liste en une seule opération. Cependant, si vous souhaitez ajouter des éléments un à la fois avec la <xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A> méthode de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> (classe), vous pouvez utiliser la <xref:System.Windows.Forms.ListView.BeginUpdate%2A> méthode pour empêcher le contrôle à partir de la mise à jour le <xref:System.Windows.Forms.ListView> chaque fois qu’un élément est ajouté. Une fois que vous avez terminé la tâche d’ajout d’éléments au contrôle, appelez le <xref:System.Windows.Forms.ListView.EndUpdate%2A> méthode pour activer la <xref:System.Windows.Forms.ListView> à repeindre. Cette méthode d’ajout d’éléments peut éviter le scintillement pendant le dessin de le <xref:System.Windows.Forms.ListView> lorsqu’un grand nombre d’éléments est en cours ajouté au contrôle.  
  
 Si <xref:System.Windows.Forms.ListView.BeginUpdate%2A> est appelée plusieurs fois, <xref:System.Windows.Forms.ListView.EndUpdate%2A> doit être appelé un nombre équivalent de fois. Jusqu'à ce que le dernier appel à <xref:System.Windows.Forms.ListView.EndUpdate%2A> le <xref:System.Windows.Forms.ListView> ne se repeint. Sinon, les appels multiples à <xref:System.Windows.Forms.ListView.BeginUpdate%2A> n’ont aucun effet.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’initialisation d’un <xref:System.Windows.Forms.ListView> contrôle devant contenir les cases à cocher. Il illustre également l’utilisation de la <xref:System.Windows.Forms.ListView.BeginUpdate%2A> et <xref:System.Windows.Forms.ListView.EndUpdate%2A> méthodes. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.ListView> nommé `ListView1`. Appelez le `InititalizeListView` méthode à partir du constructeur du formulaire ou `Load` (méthode).  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.BeginUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureVisible(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureVisible (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnsureVisible(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index de base zéro de l'élément à faire défiler dans la zone d'affichage.</param>
        <summary>Garantit que l'élément spécifié reste toujours visible dans le contrôle, en faisant défiler le contenu du contrôle si nécessaire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette méthode pour vous assurer qu’un élément spécifique est visible dans le <xref:System.Windows.Forms.ListView> contrôle. Lors de l’exécution de la validation sur les éléments dans un <xref:System.Windows.Forms.ListView>, vous pouvez appeler la <xref:System.Windows.Forms.ListView.EnsureVisible%2A> pour s’assurer qu’un élément non valide est affiché dans le <xref:System.Windows.Forms.ListView> contrôle pour permettre à l’utilisateur d’effectuer des modifications sur l’élément. Si l’élément que vous souhaitez garantir est visible se trouve au-dessus de la zone visible de la <xref:System.Windows.Forms.ListView> contrôler, en appelant le <xref:System.Windows.Forms.ListView.EnsureVisible%2A> méthode fait défiler le contenu du contrôle jusqu'à ce qu’il soit le premier élément dans la zone visible du contrôle. Si l’élément est inférieur à la zone visible de la <xref:System.Windows.Forms.ListView> contrôler, en appelant le <xref:System.Windows.Forms.ListView.EnsureVisible%2A> méthode fait défiler le contenu de la <xref:System.Windows.Forms.ListView> contrôle jusqu'à ce que l’élément est le dernier élément dans la zone visible du contrôle.  
  
 Pour déterminer si un élément se trouve en haut de la zone d’affichage d’un <xref:System.Windows.Forms.ListView> contrôler, utilisez le <xref:System.Windows.Forms.ListView.TopItem%2A> propriété.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.TopItem" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindItemWithText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Recherche le premier <see cref="T:System.Windows.Forms.ListViewItem" /> qui commence par la valeur texte donnée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texte à rechercher.</param>
        <summary>Recherche le premier <see cref="T:System.Windows.Forms.ListViewItem" /> qui commence par la valeur texte spécifiée.</summary>
        <returns>Premier <see cref="T:System.Windows.Forms.ListViewItem" /> qui commence par la valeur texte spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La recherche respecte la casse.  
  
 Le `text` paramètre peut spécifier une sous-chaîne du texte correspondant souhaité. En outre, cette méthode retourne le premier élément qui commence par le texte spécifié. Par exemple, si un <xref:System.Windows.Forms.ListView> contient deux éléments de liste : texte du premier élément est définie à « chevron » et le texte du deuxième élément la valeur « bracket », un appel à <xref:System.Windows.Forms.ListView.FindItemWithText%2A> passage `brack` comme paramètre retourne l’élément dont le texte est « bracket ».  
  
 Le <xref:System.Windows.Forms.ListView.FindItemWithText%2A> retourne de la méthode `null` si la liste est vide ou il n’existe aucun élément correspondant.  
  
   
  
## Examples  
 L’exemple de code suivant montre la <xref:System.Windows.Forms.ListView.FindItemWithText%2A> (méthode). Pour exécuter cet exemple, collez le code suivant dans un Windows Form et appelez le `InitializeFindListView` méthode à partir du constructeur du formulaire ou <xref:System.Windows.Forms.Form.Load> Gestionnaire d’événements. Cliquez sur le bouton pour afficher les résultats de l’appel de méthode.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">Texte à rechercher.</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> pour inclure des sous-éléments dans la recherche ; sinon, <see langword="false" />.</param>
        <param name="startIndex">Index de l'élément à partir duquel commencer la recherche.</param>
        <summary>Recherche le premier <see cref="T:System.Windows.Forms.ListViewItem" /> ou <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, s'il est indiqué, qui commence par la valeur texte spécifiée. La recherche commence à l'index spécifié.</summary>
        <returns>Premier <see cref="T:System.Windows.Forms.ListViewItem" /> qui commence par la valeur texte spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La recherche respecte la casse.  
  
 Le `text` paramètre peut spécifier une sous-chaîne du texte correspondant souhaité. En outre, cette méthode retourne le premier élément qui commence par le texte spécifié. Par exemple, si un <xref:System.Windows.Forms.ListView> contient deux éléments de liste : texte du premier élément est définie à « chevron » et le texte du deuxième élément la valeur « bracket », un appel à <xref:System.Windows.Forms.ListView.FindItemWithText%2A> qui passe « CROC » comme paramètre retourne l’élément dont le texte est « bracket ».  
  
 Le <xref:System.Windows.Forms.ListView.FindItemWithText%2A> retourne de la méthode `null` si la liste est vide ou il n’existe aucun élément correspondant.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> est inférieur à 0 ou supérieur au nombre d'éléments dans <see cref="T:System.Windows.Forms.ListView" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex, bool isPrefixSearch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer, isPrefixSearch As Boolean) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="isPrefixSearch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">Texte à rechercher.</param>
        <param name="includeSubItemsInSearch">
          <see langword="true" /> pour inclure des sous-éléments dans la recherche ; sinon, <see langword="false" />.</param>
        <param name="startIndex">Index de l'élément à partir duquel commencer la recherche.</param>
        <param name="isPrefixSearch">
          <see langword="true" /> pour autoriser les correspondances partielles ; sinon, <see langword="false" />.</param>
        <summary>Recherche le premier <see cref="T:System.Windows.Forms.ListViewItem" /> ou <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />, s'il est indiqué, qui commence par la valeur texte spécifiée. La recherche commence à l'index spécifié.</summary>
        <returns>Premier <see cref="T:System.Windows.Forms.ListViewItem" /> qui commence par la valeur texte spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.FindItemWithText%2A> retourne de la méthode `null` si la liste est vide ou il n’existe aucun élément correspondant.  
  
 La recherche respecte la casse.  
  
 Le `text` paramètre peut spécifier une sous-chaîne du texte correspondant souhaité. Cette méthode retourne le premier élément qui commence par le texte spécifié, à moins que `false` est passée pour `isPrefixSearch`. Par exemple, si un <xref:System.Windows.Forms.ListView> contient deux éléments de liste : texte du premier élément est définie à « chevron » et le texte du deuxième élément la valeur « bracket », un appel à <xref:System.Windows.Forms.ListView.FindItemWithText%2A> qui passe « CROC » comme le texte de recherche retourne l’élément dont le texte est « bracket ». Si `isPrefixSearch` a la valeur `false`, cet appel retourne `null`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> est inférieur à 0 ou supérieur au nombre d'éléments dans <see cref="T:System.Windows.Forms.ListView" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindNearestItem">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Recherche l'élément suivant à partir d'un point donné, en recherchant dans la direction spécifiée.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint dir, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint dir, System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="dir">Une des valeurs de <see cref="T:System.Windows.Forms.SearchDirectionHint" />.</param>
        <param name="point">Point où commencer la recherche.</param>
        <summary>Recherche l'élément suivant à partir du point donné, en recherchant dans la direction spécifiée.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.ListViewItem" /> qui est le plus proche du point donné, en recherchant dans la direction spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.FindNearestItem%2A> retourne de la méthode `null` si aucun élément n’est trouvé dans la direction spécifiée. Identification de l’élément le plus proche peut varier selon le système d’exploitation que l’application est en cours d’exécution et affecte les résultats de <xref:System.Windows.Forms.ListView.FindNearestItem%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> a une valeur autre que <see cref="F:System.Windows.Forms.View.SmallIcon" /> ou <see cref="F:System.Windows.Forms.View.LargeIcon" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint searchDirection, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint searchDirection, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindNearestItem (searchDirection As SearchDirectionHint, x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint searchDirection, int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchDirection" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="searchDirection">Une des valeurs de <see cref="T:System.Windows.Forms.SearchDirectionHint" />.</param>
        <param name="x">Coordonnée x du point à partir duquel commencer la recherche.</param>
        <param name="y">Coordonnée y du point à partir duquel commencer la recherche.</param>
        <summary>Recherche l'élément suivant à partir des coordonnées x et y données, en recherchant dans la direction spécifiée.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.ListViewItem" /> qui est le plus proche des coordonnées données, en recherchant dans la direction spécifiée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.FindNearestItem%2A> retourne de la méthode `null` si aucun élément n’est trouvé dans la direction spécifiée. Identification de l’élément le plus proche peut varier selon le système d’exploitation que l’application est en cours d’exécution et affecte les résultats de <xref:System.Windows.Forms.ListView.FindNearestItem%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.View" /> a une valeur autre que <see cref="F:System.Windows.Forms.View.SmallIcon" /> ou <see cref="F:System.Windows.Forms.View.LargeIcon" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FocusedItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FocusedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem FocusedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FocusedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusedItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ FocusedItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'élément du contrôle qui a actuellement le focus.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewItem" /> qui représente l'élément ayant le focus, ou <see langword="null" /> si aucun élément n'a le focus dans <see cref="T:System.Windows.Forms.ListView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.FocusedItem%2A> propriété retourne le <xref:System.Windows.Forms.ListViewItem> qui représente l’élément actuellement affichée du rectangle de focus du <xref:System.Windows.Forms.ListView> contrôle. Car un <xref:System.Windows.Forms.ListView> contrôle ne comporte pas directement modifiable autres que les éléments qu’il affiche, lorsque le <xref:System.Windows.Forms.ListView> contrôle a le focus, un élément dans le <xref:System.Windows.Forms.ListView> le réticule de focus autour du texte de son élément. En règle générale, le dernier sélectionné élément dans le <xref:System.Windows.Forms.ListView> contrôle est l’élément qui a le focus. Même si un élément affiche la réticule du focus, il ne peut pas être un élément sélectionné dans le <xref:System.Windows.Forms.ListView>. Utilisez le <xref:System.Windows.Forms.ListView.SelectedItems%2A> ou <xref:System.Windows.Forms.ListView.SelectedIndices%2A> propriétés pour obtenir les éléments sélectionnés dans le <xref:System.Windows.Forms.ListView> (contrôle), le <xref:System.Windows.Forms.ListView.FocusedItem%2A> propriété n’est pas nécessairement sélectionnée. Vous pouvez utiliser la <xref:System.Windows.Forms.ListView.FocusedItem%2A> propriété pour déterminer quel élément a été cliqué dans le <xref:System.Windows.Forms.ListView> contrôle, indépendamment de l’état de sélection.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la couleur de premier plan.</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> correspondant à la couleur de premier plan.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullRowSelect">
      <MemberSignature Language="C#" Value="public bool FullRowSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullRowSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FullRowSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property FullRowSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FullRowSelect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le fait de cliquer sur un élément sélectionne aussi tous ses sous-éléments.</summary>
        <value>
          <see langword="true" /> si cliquer sur un élément le sélectionne avec tous ses sous-éléments ; <see langword="false" /> si cliquer sur un élément ne sélectionne que celui-ci. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.FullRowSelect%2A> propriété n’a aucun effet à moins que le <xref:System.Windows.Forms.ListView.View%2A> propriété de la <xref:System.Windows.Forms.ListView> contrôle est défini sur <xref:System.Windows.Forms.View.Details>. Le <xref:System.Windows.Forms.ListView.FullRowSelect%2A> propriété est généralement utilisé lorsque un <xref:System.Windows.Forms.ListView> affiche les éléments avec de nombreux sous-éléments et il est important d’être en mesure de voir les éléments sélectionnés lorsque le texte de l’élément n’est pas visible en raison d’un défilement horizontal du contenu du contrôle.  
  
> [!NOTE]
>  Lorsque <xref:System.Windows.Forms.ListView.FullRowSelect%2A> a la valeur `true`, info-bulles pour un <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> n’apparaît pas ; uniquement l’info-bulle pour le parent <xref:System.Windows.Forms.ListViewItem> s’affiche.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="F:System.Windows.Forms.View.Details" />
      </Docs>
    </Member>
    <Member MemberName="GetItemAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem GetItemAt (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem GetItemAt(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemAt (x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ GetItemAt(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordonnée x de l'emplacement auquel rechercher un élément (exprimée en coordonnées clientes).</param>
        <param name="y">Coordonnée y de l'emplacement auquel rechercher un élément (exprimée en coordonnées clientes).</param>
        <summary>Récupère l'élément situé à l'emplacement spécifié.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.ListViewItem" /> qui représente l'élément situé à la position spécifiée. En l'absence d'un élément à l'emplacement spécifié, la méthode retourne <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.GetItemAt%2A> méthode vous permet de déterminer quel élément se trouve à un emplacement spécifique dans la zone cliente de la <xref:System.Windows.Forms.ListView> contrôle. Vous pouvez utiliser cette méthode lorsque l’utilisateur clique ou clique un sous-élément (lorsque le <xref:System.Windows.Forms.ListView.View%2A> est définie sur `View.Details`) et que vous souhaitez déterminer quel élément appartient le sous-élément sur lequel l’utilisateur a cliqué selon les coordonnées de la souris au moment où l’utilisateur a cliqué sur la souris .  
  
> [!NOTE]
>  Lorsque le <xref:System.Windows.Forms.ListView.FullRowSelect%2A> valeur de propriété est `false`, cette méthode retourne un élément uniquement lorsque l’emplacement spécifié est dans les limites de l’élément parent (qui s’affiche dans la première colonne lorsque le contrôle est en mode Détails). Vous devez définir le <xref:System.Windows.Forms.ListView.FullRowSelect%2A> propriété `true` pour récupérer un élément avec cette méthode à un emplacement donnée dans les limites d’un sous-élément. Vous pouvez également utiliser le <xref:System.Windows.Forms.ListView.HitTest%2A> pour récupérer des informations détaillées sur l’élément à un emplacement particulier.  
  
 Faire glisser-déposer repositionnement d’éléments dans un <xref:System.Windows.Forms.ListView>, vous souhaiterez peut-être utiliser le <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType> méthode plutôt que la <xref:System.Windows.Forms.ListView.GetItemAt%2A> (méthode). Le <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType> méthode recherche l’élément le plus proche, quelle que soit l’où se trouve le pointeur de la souris. Le <xref:System.Windows.Forms.ListView.GetItemAt%2A> (méthode), en revanche, retourne `null` s’il n’existe aucun élément à l’emplacement spécifié.  
  
> [!NOTE]
>  Le <xref:System.Windows.Forms.ListViewInsertionMark> classe est pris en charge uniquement sur Windows XP et Windows Server 2003 lorsque votre application appelle la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Windows.Forms.PictureBox> et <xref:System.Windows.Forms.ListView> contrôles. Le <xref:System.Windows.Forms.PictureBox> est initialisé en définissant le <xref:System.Windows.Forms.PictureBox.BorderStyle%2A?displayProperty=nameWithType> et <xref:System.Windows.Forms.PictureBox.SizeMode%2A?displayProperty=nameWithType> propriétés à l’aide de la <xref:System.Windows.Forms.BorderStyle> et <xref:System.Windows.Forms.PictureBoxSizeMode> énumérations, respectivement. Le <xref:System.Windows.Forms.ListView> est rempli avec les images à partir du répertoire Samples. Le <xref:System.Windows.Forms.ListView.GetItemAt%2A> méthode est utilisée lors de la gestion de la <xref:System.Windows.Forms.ListView> du contrôle <xref:System.Windows.Forms.Control.MouseDown> événement pour déterminer si un élément est sélectionné. Si un élément est sélectionné, le Gestionnaire d’événements affiche le fichier sélectionné en définissant le <xref:System.Windows.Forms.PictureBox.Image%2A?displayProperty=nameWithType> propriété. L’exemple requiert l’existence de fichiers JPG dans le répertoire C:\documents and Settings\All Users\Documents\My images\Échantillons d’images. Pour exécuter cet exemple, collez le code dans un formulaire et appelez le `InitializePictureBox` et `PopulateListView` méthodes dans le constructeur du formulaire ou `Load` (méthode). Assurez-vous que tous les événements sont associés à leurs gestionnaires d’événements.  
  
 [!code-cpp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetItemRect">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Récupère le rectangle englobant d'un élément dans le contrôle.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">L'index de base zéro de l'élément, dans <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />, dont vous souhaitez retourner le rectangle englobant.</param>
        <summary>Récupère le rectangle englobant d'un élément spécifique dans le contrôle list view.</summary>
        <returns>
          <see cref="T:System.Drawing.Rectangle" /> qui représente le rectangle englobant pour le <see cref="T:System.Windows.Forms.ListViewItem" /> spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le rectangle englobant retourné par cette version de la <xref:System.Windows.Forms.ListView.GetItemRect%2A> méthode représente l’élément entier, y compris l’icône, le texte de l’élément et le texte du sous-élément. Pour spécifier une partie spécifique de l’élément du rectangle englobant, utilisez l’autre version de la <xref:System.Windows.Forms.ListView.GetItemRect%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index, System.Windows.Forms.ItemBoundsPortion portion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index, valuetype System.Windows.Forms.ItemBoundsPortion portion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32,System.Windows.Forms.ItemBoundsPortion)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer, portion As ItemBoundsPortion) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index, System::Windows::Forms::ItemBoundsPortion portion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="portion" Type="System.Windows.Forms.ItemBoundsPortion" />
      </Parameters>
      <Docs>
        <param name="index">L'index de base zéro de l'élément, dans <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />, dont vous souhaitez retourner le rectangle englobant.</param>
        <param name="portion">Une des valeurs <see cref="T:System.Windows.Forms.ItemBoundsPortion" /> qui représente la partie de <see cref="T:System.Windows.Forms.ListViewItem" /> dont le rectangle englobant doit être récupéré.</param>
        <summary>Récupère la partie spécifiée du rectangle englobant d'un élément spécifique dans le contrôle list view.</summary>
        <returns>
          <see cref="T:System.Drawing.Rectangle" /> qui représente le rectangle englobant pour la partie spécifiée du <see cref="T:System.Windows.Forms.ListViewItem" /> spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le rectangle englobant retourné par cette version de la <xref:System.Windows.Forms.ListView.GetItemRect%2A> méthode représente uniquement la section de l’élément spécifié dans le `portion` paramètre. Pour retourner le rectangle englobant de l’élément entier, utilisez l’autre version de la <xref:System.Windows.Forms.ListView.GetItemRect%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ItemBoundsPortion" />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public bool GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.GridLines" />
      <MemberSignature Language="VB.NET" Value="Public Property GridLines As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GridLines { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si un quadrillage s'affiche entre les lignes et les colonnes contenant des éléments et des sous-éléments à l'intérieur du contrôle.</summary>
        <value>
          <see langword="true" /> si un quadrillage est dessiné autour des éléments et des sous-éléments ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.GridLines%2A> propriété n’a aucun effet à moins que le <xref:System.Windows.Forms.ListView.View%2A> propriété de la <xref:System.Windows.Forms.ListView> contrôle est défini sur <xref:System.Windows.Forms.View.Details>. Le <xref:System.Windows.Forms.ListView.GridLines%2A> propriété vous permet d’afficher les lignes pour identifier les lignes et les colonnes qui sont affichées dans le <xref:System.Windows.Forms.ListView> contrôle lorsqu’il affiche les éléments et leurs sous-éléments. Les lignes de grille qui sont affichent ne fournissent pas la possibilité de redimensionner les lignes et colonnes en tant qu’application telle que Microsoft Excel. Uniquement les colonnes peuvent être redimensionnées, si les en-têtes de colonne sont affichés, en déplaçant le pointeur de la souris sur le côté droit de la colonne à redimensionner et puis en cliquant sur en faisant glisser jusqu'à ce que la colonne est la taille voulue. La fonctionnalité de quadrillage est utilisée pour fournir l’utilisateur du contrôle avec des limites visibles autour des éléments et des sous-éléments.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewGroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewGroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Groups" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Groups As ListViewGroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewGroupCollection ^ Groups { System::Windows::Forms::ListViewGroupCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewGroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection d'objets <see cref="T:System.Windows.Forms.ListViewGroup" /> assignés au contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewGroupCollection" /> qui contient tous les groupes du contrôle <see cref="T:System.Windows.Forms.ListView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView> fonctionnalité de regroupement vous permet de créer des groupes visuels liés de manière logique <xref:System.Windows.Forms.ListView> éléments. Chaque groupe se compose d’un en-tête textuel suivi par une ligne horizontale et des éléments assignés à ce groupe. Vous pouvez aligner le texte d’en-tête à gauche, droite ou au centre du contrôle. Tous les groupes assignés à un <xref:System.Windows.Forms.ListView> contrôle s’affiche chaque fois que le <xref:System.Windows.Forms.ListView.View%2A> propriété est définie sur une valeur autre que <xref:System.Windows.Forms.View.List?displayProperty=nameWithType>.  
  
 <xref:System.Windows.Forms.ListView> groupes d’aideront vos utilisateurs à trouver les éléments qu’ils recherchent en séparant les éléments en catégories utiles. Vous pouvez créer les catégories que vous avez besoin. Une approche classique consiste à regrouper les éléments selon la façon dont la liste est triée. Par exemple, vous pouvez regrouper les éléments par la lettre initiale du nom de l’élément lorsque la liste est triée par ordre alphabétique ou par les sous-éléments tels que le type ou la date lorsque la liste est triée en cliquant sur un en-tête de colonne en mode Détails. L’Explorateur Windows utilise ce type de regroupement.  
  
 Pour utiliser la fonctionnalité de regroupement, ajoutez un ou plusieurs <xref:System.Windows.Forms.ListViewGroup> des objets sur le <xref:System.Windows.Forms.ListView.Groups%2A> collection d’un <xref:System.Windows.Forms.ListView> contrôle. Définir l’alignement de texte et d’en-tête de l’en-tête groupe dans le <xref:System.Windows.Forms.ListViewGroup.%23ctor%2A> constructeur, ou les définir à l’aide de la <xref:System.Windows.Forms.ListViewGroup.Header%2A?displayProperty=nameWithType> et <xref:System.Windows.Forms.ListViewGroup.HeaderAlignment%2A?displayProperty=nameWithType> propriétés.  
  
 Pour désactiver temporairement la fonctionnalité de regroupement, définissez la <xref:System.Windows.Forms.ListView.ShowGroups%2A> propriété `false`.  
  
 Vous pouvez attribuer un élément à un groupe en spécifiant le groupe dans le <xref:System.Windows.Forms.ListViewItem.%23ctor%2A> constructeur, en définissant le <xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType> propriété, ou en ajoutant directement l’élément à la <xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType> collection d’un groupe. Tous les éléments doivent être assignées aux groupes avant qu’elles sont affichées. Tous les éléments qui ne sont pas affectés à un groupe seront affiche dans le groupe par défaut, ce qui a l’étiquette d’en-tête « DefaultGroup{0}». Le groupe par défaut n’est pas contenu dans le <xref:System.Windows.Forms.ListView.Groups%2A> collection et ne peut pas être modifié. Il est principalement utile pendant le débogage pour vous assurer que tous les éléments ont été correctement ajoutés aux groupes.  
  
 Un élément peut uniquement être dans un groupe à la fois. Vous pouvez modifier le groupe auquel un élément appartient en définissant le <xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType> propriété au moment de l’exécution ou en l’ajoutant à la <xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType> collection d’un autre groupe, ce qui le supprime automatiquement du groupe précédent.  
  
 La fonctionnalité de marque d’insertion est désactivée lors de l’utilisation de groupes. C’est parce que la fonctionnalité de regroupement trie les éléments par l’appartenance au groupe, tandis que la fonctionnalité de marque d’insertion est utilisée avec le repositionnement par glisser-déplacer dans un <xref:System.Windows.Forms.ListView> contrôle qui ne pas en ordre ses éléments.  
  
 <xref:System.Windows.Forms.ListView> les groupes sont disponibles uniquement sur Windows XP et Windows Server 2003 lorsque votre application appelle la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> (méthode). Sur les systèmes d’exploitation antérieurs, tout code concernant les groupes n’a aucun effet et les groupes n’apparaîtront pas. Par conséquent, tout code qui dépend de la fonctionnalité de regroupement peuvent ne pas fonctionne correctement.  
  
 Vous souhaitez inclure du code qui détermine si la fonctionnalité de regroupement est disponible et fournir d’autres fonctionnalités lorsqu’il n’est pas disponible. Par exemple, vous souhaiterez fournir un tri de remplacement lors de l’exécution sur les systèmes d’exploitation qui ne prennent pas en charge le tri par groupe.  
  
 La fonctionnalité de regroupement est fournie par la même bibliothèque qui fournit la fonctionnalité des thèmes du système d’exploitation. Pour vérifier la disponibilité de cette bibliothèque, appelez le <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> surcharge de méthode et passez le <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> valeur.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser la <xref:System.Windows.Forms.ListView> fonctionnalité de regroupement pour organiser des éléments par valeur de sous-élément en mode Détails. Cette forme de regroupement est semblable au regroupement utilisé dans l’Explorateur Windows. Dans l’exemple, les groupes sont créés dynamiquement. Pour chaque colonne de sous-élément, un groupe est créé pour chaque valeur de sous-élément unique. Pour la colonne d’élément parent, un groupe est créé pour chaque initiale unique. En cliquant sur l’en-tête d’une colonne de trie les éléments dans les groupes créés pour cette colonne. Cliquez de nouveau sur le même en-tête de colonne inverse l’ordre des groupes.  
  
 [!code-cpp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CPP/listviewgroupsexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CS/listviewgroupsexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/VB/listviewgroupsexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.ShowGroups" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ColumnHeaderStyle HeaderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ColumnHeaderStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HeaderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderStyle As ColumnHeaderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ColumnHeaderStyle HeaderStyle { System::Windows::Forms::ColumnHeaderStyle get(); void set(System::Windows::Forms::ColumnHeaderStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnHeaderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le style des en-têtes de colonnes.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.ColumnHeaderStyle" />. La valeur par défaut est <see cref="F:System.Windows.Forms.ColumnHeaderStyle.Clickable" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propriété vous permet de spécifier le type des en-têtes de colonnes à afficher lorsque le <xref:System.Windows.Forms.ListView.View%2A> propriété de la <xref:System.Windows.Forms.ListView> contrôle est défini sur <xref:System.Windows.Forms.View.Details> et <xref:System.Windows.Forms.ListView> contrôle a <xref:System.Windows.Forms.ColumnHeader> objets spécifiés dans le <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>. <xref:System.Windows.Forms.ColumnHeader> objets définissent les colonnes qui sont affichent dans le <xref:System.Windows.Forms.ListView> contrôle. Chaque colonne est utilisée pour afficher les informations de sous-élément de chaque élément dans le <xref:System.Windows.Forms.ListView>.  
  
 Le <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propriété vous permet de spécifier si les en-têtes de colonne sont visibles, et s’ils sont visibles, s’ils fonctionnent comme des boutons interactifs. Si le <xref:System.Windows.Forms.ListView.HeaderStyle%2A> est définie sur <xref:System.Windows.Forms.ColumnHeaderStyle.None?displayProperty=nameWithType>, les en-têtes de colonne ne sont pas affichés, bien que les éléments et les sous-éléments de le <xref:System.Windows.Forms.ListView> contrôle sont toujours disposés en colonnes. Si le <xref:System.Windows.Forms.ListView.HeaderStyle%2A> est définie sur <xref:System.Windows.Forms.ColumnHeaderStyle.Clickable?displayProperty=nameWithType>, les en-têtes de colonne fonctionnent comme des boutons qui permettent aux utilisateurs pour effectuer une action, telles que le tri des éléments dans le <xref:System.Windows.Forms.ListView> contrôler à l’aide des éléments dans la colonne sélectionnée en tant que clé. Vous pouvez implémenter ce comportement dans un gestionnaire pour le <xref:System.Windows.Forms.ListView.ColumnClick> événement. Si le <xref:System.Windows.Forms.ListView.HeaderStyle%2A> est définie sur <xref:System.Windows.Forms.ColumnHeaderStyle.Nonclickable?displayProperty=nameWithType>, les en-têtes de colonne apparaissent, mais ne peut pas être sélectionnés.  
  
   
  
## Examples  
 L’exemple de code suivant montre un <xref:System.Windows.Forms.ListView> qui permet de sélectionner plusieurs éléments. Montre comment définir la <xref:System.Windows.Forms.ListView.HideSelection%2A> et <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propriétés. Il montre également la <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType> et <xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType> propriétés. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.ListView> objet nommé `ListView1` et un <xref:System.Windows.Forms.TextBox> nommé `TextBox1`. Appelez le `InitializeListView` méthode à partir du constructeur du formulaire ou <xref:System.Windows.Forms.Form.Load> Gestionnaire d’événements.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La valeur spécifiée n'est pas l'une des valeurs <see cref="T:System.Windows.Forms.ColumnHeaderStyle" />.</exception>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnHeaderStyle" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="HideSelection">
      <MemberSignature Language="C#" Value="public bool HideSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HideSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HideSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HideSelection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si l'élément sélectionné dans le contrôle reste en surbrillance quand le focus passe à un autre contrôle.</summary>
        <value>
          <see langword="true" /> si l'élément sélectionné n'apparaît pas en surbrillance lorsque le contrôle perd le focus ; <see langword="false" /> si l'élément sélectionné reste en surbrillance lorsque le contrôle perd le focus. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque cette propriété a la valeur `false`, les éléments sélectionnés dans le <xref:System.Windows.Forms.ListView> contrôle reste affiché en surbrillance dans une couleur différente de la couleur de sélection spécifiée par le système d’exploitation lorsque le <xref:System.Windows.Forms.ListView> contrôle perd le focus. Vous pouvez utiliser cette propriété pour conserver les éléments qui sont sélectionnés par l’utilisateur visible lorsque l’utilisateur clique sur un autre contrôle sur le formulaire ou se déplace vers une autre fenêtre.  
  
> [!NOTE]
>  Si vous êtes concerné par l’accessibilité de vos applications, il est recommandé de définir la <xref:System.Windows.Forms.ListView.HideSelection%2A> propriété `false`.  
  
   
  
## Examples  
 L’exemple de code suivant montre un <xref:System.Windows.Forms.ListView> qui permet de sélectionner plusieurs éléments. Montre comment définir la <xref:System.Windows.Forms.ListView.HideSelection%2A> et <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propriétés. Il montre également la <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType>, et <xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType> propriétés. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.ListView> objet nommé `ListView1` et un <xref:System.Windows.Forms.TextBox> nommé `TextBox1`. Appelez le `InitializeListView` méthode à partir du constructeur du formulaire ou <xref:System.Windows.Forms.Form.Load> Gestionnaire d’événements.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTest">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fournit des informations d'élément, à des coordonnées x et y données.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(System::Drawing::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">
          <see cref="T:System.Drawing.Point" /> auquel récupérer des informations d'élément. Les coordonnées sont relatives au coin supérieur gauche du contrôle.</param>
        <summary>Fournit des informations d'élément, à un point donné.</summary>
        <returns>Les informations d'élément, à un point donné.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour déterminer si un point est dans un élément ou un sous-élément et l’emplacement dans l’élément le point, comme sur l’étiquette ou zone d’image. Si les coordonnées sont situées en dehors du contrôle, retourné <xref:System.Windows.Forms.ListViewHitTestInfo> objet a un <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> propriété « None » ; et le <xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A> et <xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A> propriétés sont définies sur `null`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Le point contient des coordonnées inférieures à 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function HitTest (x As Integer, y As Integer) As ListViewHitTestInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordonnée x où récupérer les informations d'élément. La coordonnée est relative au coin supérieur gauche du contrôle.</param>
        <param name="y">Coordonnée y où récupérer des informations d'élément. La coordonnée est relative au coin supérieur gauche du contrôle.</param>
        <summary>Fournit des informations d'élément, en fonction des coordonnées x et y données.</summary>
        <returns>Informations d'élément, en fonction des coordonnées x et y données.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour déterminer si un point est dans un élément ou un sous-élément, et l’emplacement dans l’élément de point, telles que sur l’étiquette ou zone d’image. Si les coordonnées sont situées en dehors du contrôle, retourné <xref:System.Windows.Forms.ListViewHitTestInfo> objet a un <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> propriété « None » ; et le <xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A> et <xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A> propriétés sont définies sur `null`.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.ListView.HitTest%2A> méthode pour déterminer l’emplacement d’un événement de souris dans une <xref:System.Windows.Forms.ListView>. Pour exécuter cet exemple, collez-le dans un Windows Form qui contient un <xref:System.Windows.Forms.ListView> nommé `listView1` qui est rempli avec des éléments. Associer le <xref:System.Windows.Forms.Control.MouseDown> événement `listView1` avec la `listView1_MouseDown` méthode dans cet exemple.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La coordonnée x ou y est inférieure à 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="HotTracking">
      <MemberSignature Language="C#" Value="public bool HotTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HotTracking" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HotTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property HotTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HotTracking { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le texte d'un élément ou d'un sous-élément a l'apparence d'un lien hypertexte lorsque le pointeur de la souris est positionné dessus.</summary>
        <value>
          <see langword="true" /> si le texte d'élément a l'apparence d'un lien hypertexte lorsque le pointeur de la souris est positionné dessus ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’activation de la sélection réactive willcause le <xref:System.Windows.Forms.ListView.Activation%2A> propriété à définir <xref:System.Windows.Forms.ItemActivation.OneClick> et <xref:System.Windows.Forms.ListView.HoverSelection%2A> propriété à définir `true`. En outre, la modification des étiquettes de l’exécution n’est pas autorisée lors de la sélection réactive est activée.  
  
   
  
## Examples  
 L’exemple de code suivant montre un <xref:System.Windows.Forms.ListView> avec réactive activée. Pour exécuter cet exemple, collez le code suivant dans un Windows Form et appelez le `InitializeHotTrackingListView` méthode à partir du constructeur du formulaire ou <xref:System.Windows.Forms.Form.Load> Gestionnaire d’événements.  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HoverSelection">
      <MemberSignature Language="C#" Value="public bool HoverSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HoverSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HoverSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HoverSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HoverSelection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si un élément est automatiquement sélectionné lorsque le pointeur de la souris reste positionné au-dessus pendant quelques secondes.</summary>
        <value>
          <see langword="true" /> si un élément est sélectionné automatiquement lorsque le pointeur de la souris reste positionné au-dessus ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque cette propriété a la valeur `true`, l’utilisateur peut pointer vers un élément dans le <xref:System.Windows.Forms.ListView> contrôle pour sélectionner l’élément. Plusieurs éléments peuvent être sélectionnés (lorsque le <xref:System.Windows.Forms.ListView.MultiSelect%2A> est définie sur true) en maintenant enfoncée la touche CTRL ENFONCÉE et en pointant sur chaque élément. Vous pouvez utiliser cette fonctionnalité pour fournir une méthode plus simple pour l’utilisateur de votre application pour sélectionner des éléments dans le <xref:System.Windows.Forms.ListView> contrôle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertionMark">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewInsertionMark InsertionMark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewInsertionMark InsertionMark" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.InsertionMark" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertionMark As ListViewInsertionMark" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewInsertionMark ^ InsertionMark { System::Windows::Forms::ListViewInsertionMark ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewInsertionMark</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet utilisé pour indiquer l'emplacement cible attendu lorsqu'un élément est déplacé dans un contrôle <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <value>Objet <see cref="T:System.Windows.Forms.ListViewInsertionMark" /> qui représente la marque d'insertion.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView> fonctionnalité de marque d’insertion vous permet d’indiquer visuellement l’emplacement cible attendu dans une opération de glisser-déplacer lorsqu’un élément est déplacé vers une nouvelle position. Cette fonctionnalité fonctionne uniquement lorsque le <xref:System.Windows.Forms.ListView.AutoArrange%2A> est définie sur `true` et à quel moment le <xref:System.Windows.Forms.ListView> contrôle ne trie pas automatiquement les éléments. Pour empêcher le tri automatique, le <xref:System.Windows.Forms.ListView.Sorting%2A> propriété doit être définie sur <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> et <xref:System.Windows.Forms.ListView.View%2A> propriété doit être définie sur <xref:System.Windows.Forms.View.LargeIcon?displayProperty=nameWithType>, <xref:System.Windows.Forms.View.SmallIcon?displayProperty=nameWithType>, ou <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>. En outre, la fonctionnalité de marque d’insertion n’est pas forcément visible avec la <xref:System.Windows.Forms.ListView> fonctionnalité de regroupement, car la fonctionnalité de regroupement trie les éléments par l’appartenance au groupe.  
  
 Le <xref:System.Windows.Forms.ListViewInsertionMark> classe est généralement utilisée dans un gestionnaire pour le <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> ou <xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType> événement pour mettre à jour la position de la marque d’insertion, comme un élément est déplacé. Il est également utilisé dans un gestionnaire pour le <xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType> ou <xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType> événement pour insérer un élément glissé à l’emplacement correct. Pour plus d’informations, consultez <xref:System.Windows.Forms.ListViewInsertionMark> et [Comment : afficher une marque d’Insertion dans un contrôle Windows Forms ListView](~/docs/framework/winforms/controls/how-to-display-an-insertion-mark-in-a-windows-forms-listview-control.md).  
  
> [!NOTE]
>  La fonctionnalité de marque d’insertion est disponible uniquement sur Windows XP et Windows Server 2003 lorsque votre application appelle la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> (méthode). Sur les systèmes d'exploitation antérieurs, tout code relatif à la marque d'insertion n'a aucun effet et la marque d'insertion n'apparaît pas. Par conséquent, tout code qui dépend de la fonctionnalité de marque d’insertion peuvent ne pas fonctionne correctement. Vous souhaitez inclure du code qui détermine si cette fonctionnalité est disponible et fournir d’autres fonctionnalités lorsqu’il n’est pas disponible. Par exemple, vous souhaiterez peut-être ignorer tout le code qui implémente le repositionnement lors de l’exécution sur les systèmes d’exploitation qui ne prennent pas en charge les marques d’insertion d’éléments par glisser-déplacer.  
>   
>  La fonctionnalité de marque d’insertion est fournie par la même bibliothèque qui fournit la fonctionnalité des thèmes du système d’exploitation. Pour vérifier la disponibilité de cette bibliothèque, appelez le <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> surcharge de méthode et passez le <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> valeur.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser la <xref:System.Windows.Forms.ListView> fonctionnalité de marque d’insertion. Cet exemple implémente le glisser-déposer réorganisation à l’aide d’événements glisser standard. La position de la marque d’insertion est mise à jour dans un gestionnaire pour le <xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType> événement. Dans ce gestionnaire, la position du pointeur de la souris est comparée au milieu de l’élément le plus proche, et le résultat est utilisé pour déterminer si la marque d’insertion apparaît à gauche ou à droite de l’élément.  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Une des valeurs de <see cref="T:System.Windows.Forms.Keys" />.</param>
        <summary>Détermine si la touche spécifiée est une touche de saisie normale ou une touche spéciale nécessitant un prétraitement.</summary>
        <returns>
          <see langword="true" /> si la touche spécifiée est une touche de saisie standard ; sinon, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemActivate">
      <MemberSignature Language="C#" Value="public event EventHandler ItemActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ItemActivate" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemActivate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemActivate As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ItemActivate;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsqu'un élément est activé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.ItemActivate> événement se produit lorsque l’utilisateur Active un ou plusieurs éléments dans le <xref:System.Windows.Forms.ListView> contrôle. L’utilisateur peut activer un élément avec un simple clic ou un double-clic, selon la valeur de la <xref:System.Windows.Forms.ListView.Activation%2A> propriété, ou à l’aide du clavier. À partir du Gestionnaire d’événements pour le <xref:System.Windows.Forms.ListView.ItemActivate> événement, vous pouvez référencer le <xref:System.Windows.Forms.ListView.SelectedItems%2A> ou <xref:System.Windows.Forms.ListView.SelectedIndices%2A> propriétés pour accéder à la collection d’éléments sélectionnés dans le <xref:System.Windows.Forms.ListView> pour déterminer les éléments qui sont activés.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements indique l’occurrence de le <xref:System.Windows.Forms.ListView.ItemActivate> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un élément <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.ListView> nommé `ListView1`. Vérifiez que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.ListView.ItemActivate> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#473](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#473)]
 [!code-vb[System.Windows.Forms.EventExamples#473](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#473)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ItemCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckEventHandler ItemCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckEventHandler ItemCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemCheck" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCheck As ItemCheckEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckEventHandler ^ ItemCheck;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'état d'activation d'un élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propriété doit être définie sur true afin que les cases à cocher s’affiche en regard de chaque élément dans le <xref:System.Windows.Forms.ListView> contrôle. Le <xref:System.Windows.Forms.ListView.ItemCheck> événement se produit lorsque l’état d’activation d’un élément change ou lorsque la <xref:System.Windows.Forms.ListView.CheckBoxes%2A> est définie sur `true`. Vous pouvez créer un gestionnaire d’événements pour le <xref:System.Windows.Forms.ListView.ItemCheck> événement pour effectuer des tâches telles que la modification de l’état de l’icône d’un élément ou une autre tâche spécifique à l’application chaque fois qu’un élément est activé dans le <xref:System.Windows.Forms.ListView> contrôle.  
  
> [!NOTE]
>  Si le handle de fenêtre n'a pas été créé lorsque le <xref:System.Windows.Forms.ListView.ItemCheck> événement est déclenché, l’événement sera retardé. Une fois que le handle de fenêtre créé (lorsque le formulaire est affiché), les retardée <xref:System.Windows.Forms.ListView.ItemCheck> les événements sont déclenchés. Pour plus d'informations, consultez <xref:System.Windows.Forms.Control.HandleCreated>.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre un <xref:System.Windows.Forms.ListView> contrôle qui gère la <xref:System.Windows.Forms.ListView.ItemCheck> événement. La méthode utilise le <xref:System.Windows.Forms.ItemCheckEventArgs.CurrentValue%2A?displayProperty=nameWithType> et <xref:System.Windows.Forms.ItemCheckEventArgs.Index%2A?displayProperty=nameWithType> propriétés pour récupérer et calculer le prix des éléments de menu sélectionné. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un `ListView` nommé `ListView1` et un `TextBox` nommé `Textbox1`. Appelez le `InititalizeListView` méthode à partir du constructeur du formulaire ou `Load` (méthode). Vérifiez que le <xref:System.Windows.Forms.ListView.ItemCheck> événement est associé au gestionnaire d’événements dans cet exemple.  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemChecked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckedEventHandler ItemChecked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckedEventHandler ItemChecked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemChecked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemChecked As ItemCheckedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckedEventHandler ^ ItemChecked;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'état d'activation d'un élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement est similaire à la <xref:System.Windows.Forms.ListView.ItemCheck> événement, mais est déclenché après que l’élément a été activé.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements indique l’occurrence de le <xref:System.Windows.Forms.ListView.ItemChecked> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un élément <xref:System.Windows.Forms.TextBox>.  
  
 Pour un autre exemple, consultez la <xref:System.Windows.Forms.ListView.ItemCheck> événement. Le code fonctionne également si le Gestionnaire d’événements est attaché à la <xref:System.Windows.Forms.ListView.ItemChecked> événement.  
  
 Pour exécuter cet exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.ListView> nommé `ListView1`. Vérifiez que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.ListView.ItemChecked> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#475](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#475)]
 [!code-vb[System.Windows.Forms.EventExamples#475](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#475)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemDragEventHandler ItemDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemDragEventHandler ItemDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDrag As ItemDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemDragEventHandler ^ ItemDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'utilisateur fait glisser un élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.ItemDrag> événement se produit lorsque l’utilisateur commence à faire glisser un élément. En général, le Gestionnaire d’événements pour le <xref:System.Windows.Forms.ListView.ItemDrag> événement effectue la tâche de déplacement en appelant le <xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType> (méthode). Vous pouvez utiliser cet événement pour effectuer les tâches nécessaires pour faire glisser des éléments dans et hors de votre application <xref:System.Windows.Forms.ListView> contrôle.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements indique l’occurrence de le <xref:System.Windows.Forms.ListView.ItemDrag> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un élément <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.ListView> nommé `ListView1`. Vérifiez que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.ListView.ItemDrag> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#476](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#476)]
 [!code-vb[System.Windows.Forms.EventExamples#476](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#476)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemMouseHover">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemMouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemMouseHover As ListViewItemMouseHoverEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemMouseHoverEventHandler ^ ItemMouseHover;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemMouseHoverEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la souris pointe sur un élément.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements indique l’occurrence de le <xref:System.Windows.Forms.ListView.ItemMouseHover> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un élément <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.ListView> nommé `ListView1`. Vérifiez que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.ListView.ItemMouseHover> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#477](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#477)]
 [!code-vb[System.Windows.Forms.EventExamples#477](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#477)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ListViewItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ListViewItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListView.ListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ListViewItemCollection ^ Items { System::Windows::Forms::ListView::ListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection qui contient tous les éléments du contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> qui contient tous les éléments du contrôle <see cref="T:System.Windows.Forms.ListView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À l’aide de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> retournée par cette propriété, vous pouvez ajouter des éléments, supprimer des éléments et obtenir le nombre d’éléments. Pour plus d’informations sur les tâches qui peuvent être effectuées avec les éléments de la collection, consultez la <xref:System.Windows.Forms.ListView.ListViewItemCollection> des rubriques de référence de classe.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="ItemSelectionChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemSelectionChanged As ListViewItemSelectionChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemSelectionChangedEventHandler ^ ItemSelectionChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemSelectionChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'état de sélection d'un élément change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En mode virtuel, le <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> événement se produit lorsque l’état de sélection de plusieurs éléments change.  
  
 Le <xref:System.Windows.Forms.ListView.ItemSelectionChanged> événement se produit si l’état de l’élément passe de sélectionné à désélectionné, ou inversement.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements indique l’occurrence de le <xref:System.Windows.Forms.ListView.ItemSelectionChanged> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un élément <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.ListView> nommé `ListView1`. Vérifiez que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.ListView.ItemSelectionChanged> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#478](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#478)]
 [!code-vb[System.Windows.Forms.EventExamples#478](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#478)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      </Docs>
    </Member>
    <Member MemberName="LabelEdit">
      <MemberSignature Language="C#" Value="public bool LabelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelEdit { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si l'utilisateur a la possibilité de modifier les étiquettes des éléments du contrôle.</summary>
        <value>
          <see langword="true" /> si l'utilisateur peut modifier les étiquettes des éléments au moment de l'exécution ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Windows.Forms.ListView.LabelEdit%2A> est définie sur `true`, l’utilisateur est en mesure de modifier le texte d’un élément en cliquant sur le texte de l’élément pour le sélectionner et puis en cliquant sur le texte de l’élément à nouveau pour placer le texte d’étiquette en mode édition. L’utilisateur peut ensuite modifier ou remplacer l’étiquette de texte de l’élément. Vous pouvez utiliser la <xref:System.Windows.Forms.ListView.BeforeLabelEdit> et <xref:System.Windows.Forms.ListView.AfterLabelEdit> événements pour effectuer des tâches avant et après l’utilisateur modifie le texte de l’élément. Le texte des sous-éléments ne peut pas être modifié si cette propriété est définie sur `true`. Pour modifier le texte des sous-éléments, vous pouvez afficher une boîte de dialogue aux utilisateurs lorsqu’ils double-cliquez sur un sous-élément dans le contrôle.  
  
> [!NOTE]
>  Si le <xref:System.Windows.Forms.ListView.Activation%2A> est définie sur <xref:System.Windows.Forms.ItemActivation.OneClick> ou <xref:System.Windows.Forms.ItemActivation.TwoClick>, une modification d’étiquette n’est pas autorisée, quelle que soit la valeur de la <xref:System.Windows.Forms.ListView.LabelEdit%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="LabelWrap">
      <MemberSignature Language="C#" Value="public bool LabelWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelWrap { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les étiquettes des éléments sont renvoyées à la ligne lorsque les éléments du contrôle sont affichés sous forme d'icônes.</summary>
        <value>
          <see langword="true" /> si les étiquettes des éléments sont renvoyées à la ligne lorsque les éléments sont affichés sous forme d'icônes ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Windows.Forms.ListView.LabelWrap%2A> est définie sur `true`, le texte de l’élément est automatiquement renvoyé à la ligne de texte suivante si nécessaire. Si le texte est plu de deux lignes de texte, le texte est réduit. Si l’utilisateur sélectionne l’élément, le texte de l’élément s’affiche. Si le <xref:System.Windows.Forms.ListView.LabelWrap%2A> est définie sur `false`, tout le texte est affiché sur une seule ligne. Le texte de la totalité de l’élément est affiché lorsque le <xref:System.Windows.Forms.ListView.LabelWrap%2A> a la valeur `false`. Cette propriété est utilisée uniquement lorsque la <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.LargeIcon> ou <xref:System.Windows.Forms.View.SmallIcon>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="LargeImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList LargeImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList LargeImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LargeImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property LargeImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ LargeImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Windows.Forms.ImageList" /> à utiliser lors de l'affichage des éléments sous forme de grandes icônes dans le contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> qui contient les icônes à utiliser lorsque la propriété <see cref="P:System.Windows.Forms.ListView.View" /> a la valeur <see cref="F:System.Windows.Forms.View.LargeIcon" />. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.LargeImageList%2A> propriété vous permet de spécifier un <xref:System.Windows.Forms.ImageList> objet qui contient les icônes à utiliser pour afficher les éléments avec grandes icônes (lorsque la <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.LargeIcon>). Le <xref:System.Windows.Forms.ListView> contrôle peut accepter tout graphique Format utilisé par le <xref:System.Windows.Forms.ImageList> contrôle prend en charge lors de l’affichage des icônes. Le <xref:System.Windows.Forms.ListView> contrôle n’est pas limité aux fichiers .ico. Une fois un <xref:System.Windows.Forms.ImageList> est affectée à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> propriété, vous pouvez définir le <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> propriété de chaque <xref:System.Windows.Forms.ListViewItem> dans le <xref:System.Windows.Forms.ListView> contrôle à la position d’index de l’image appropriée dans la <xref:System.Windows.Forms.ImageList>. La taille des icônes pour le <xref:System.Windows.Forms.ListView.LargeImageList%2A> est spécifiée par le <xref:System.Windows.Forms.ImageList.ImageSize%2A>.  
  
 Car un seul index peut être spécifié pour le <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType> propriété, le <xref:System.Windows.Forms.ImageList> objets spécifiés dans le <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés doivent avoir les mêmes positions d’index pour les images à afficher. Par exemple, si le <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> propriété d’un <xref:System.Windows.Forms.ListViewItem> a la valeur 0, les images à utiliser pour les petites et grandes icônes doivent concerner la même position d’index dans le <xref:System.Windows.Forms.ImageList> objets spécifiés dans le <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés.  
  
> [!NOTE]
>  Lorsque les images sont spécifiées avec des clés, vous devez placer les petites et grandes versions de l’image à la même position d’index dans leurs listes d’images respectives. Lorsque vous basculez entre les vues, l’emplacement d’index de l’image dans une liste est utilisé pour localiser l’image dans la liste, quelle que soit la valeur de clé spécifiée.  
  
 Pour définir le <xref:System.Windows.Forms.ImageList> à utiliser lors de l’affichage des éléments avec petites icônes (tous les modes d’affichage autre que <xref:System.Windows.Forms.View.LargeIcon>), utilisez le <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriété. Si vous souhaitez utiliser des images pour afficher l’état de l’élément, utilisez le <xref:System.Windows.Forms.ListView.StateImageList%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="ListViewItemSorter">
      <MemberSignature Language="C#" Value="public System.Collections.IComparer ListViewItemSorter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer ListViewItemSorter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      <MemberSignature Language="VB.NET" Value="Public Property ListViewItemSorter As IComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IComparer ^ ListViewItemSorter { System::Collections::IComparer ^ get(); void set(System::Collections::IComparer ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le comparateur de tri du contrôle.</summary>
        <value>
          <see cref="T:System.Collections.IComparer" /> qui représente le comparateur de tri du contrôle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propriété vous permet de spécifier l’objet qui effectue le tri des éléments dans un <xref:System.Windows.Forms.ListView> contrôle lorsque le <xref:System.Windows.Forms.ListView.Sort%2A> méthode est appelée ou lorsque des éléments sont ajoutés à la liste. Notez que les éléments ne sont pas triés automatiquement lorsque leur texte d’étiquette change.  
  
 L’objet spécifié doit être une instance d’une classe qui implémente le <xref:System.Collections.IComparer> interface, ce qui a une méthode unique nommée <xref:System.Collections.Comparer.Compare%2A?displayProperty=nameWithType>.  
  
 Vous pouvez utiliser cette propriété pour fournir un tri personnalisé, par exemple, lorsque l’utilisateur clique sur un en-tête de colonne dans la vue Détails. Pour ce faire, créez une classe qui implémente le <xref:System.Collections.IComparer> de l’interface et fournit un constructeur qui accepte l’index d’une colonne à trier. Vous pouvez ensuite implémenter un gestionnaire pour le <xref:System.Windows.Forms.ListView.ColumnClick> événement qui crée une instance de cette classe à l’aide de l’index de la colonne sélectionnée. Lorsque vous définissez la <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propriété vers la nouvelle instance de la <xref:System.Windows.Forms.ListView> contrôle est trié automatiquement à l’aide de l’objet spécifié. Les appels suivants à la <xref:System.Windows.Forms.ListView.Sort%2A> méthode utilise le même objet.  
  
> [!NOTE]
>  Lorsque vous définissez la valeur de la <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propriété, le <xref:System.Windows.Forms.ListView.Sort%2A> méthode est appelée automatiquement.  
  
   
  
## Examples  
 L’exemple de code suivant crée un formulaire qui contient un <xref:System.Windows.Forms.ListView> contrôle qui trie manuellement les éléments lors d’une colonne dans la <xref:System.Windows.Forms.ListView> un clic sur le contrôle. L’exemple définit une classe appelée `ListViewItemComparer` qui implémente le <xref:System.Collections.IComparer?displayProperty=nameWithType> interface qui effectue la <xref:System.Windows.Forms.ListViewItem> comparaison. L’exemple crée une instance de `ListViewItemComparer` et l’utilise pour définir le <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propriété de la <xref:System.Windows.Forms.ListView> contrôle. Le <xref:System.Windows.Forms.ListView.Sort%2A> l’appel de méthode le <xref:System.Windows.Forms.ListView.ColumnClick> Gestionnaire d’événements utilise les méthodes définies dans `ListViewItemComparer` pour effectuer le tri des éléments, en fonction de la colonne qui est activée.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
      </Docs>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.MultiSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiSelect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si plusieurs éléments peuvent être sélectionnés.</summary>
        <value>
          <see langword="true" /> si plusieurs éléments peuvent être sélectionnés simultanément dans le contrôle ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque le <xref:System.Windows.Forms.ListView.MultiSelect%2A> est définie sur `true`, plusieurs éléments peuvent être sélectionnés dans le <xref:System.Windows.Forms.ListView> contrôle. Pour sélectionner plusieurs éléments, l’utilisateur doit maintenir la touche CTRL enfoncée tout en cliquant sur les éléments à sélectionner. Éléments consécutifs peuvent être sélectionnés en cliquant sur le premier élément à sélectionner, puis, tout en maintenant enfoncée la touche MAJ et en cliquant sur le dernier élément à sélectionner. Vous pouvez utiliser la fonctionnalité de sélection multiple pour sélectionner plusieurs éléments dans le <xref:System.Windows.Forms.ListView> contrôler et effectuer une opération sur tous les éléments sélectionnés. Par exemple, l’utilisateur peut sélectionner plusieurs éléments et, cliquez sur un élément sélectionné pour afficher un menu contextuel qui affiche un ensemble de tâches qui peuvent être effectuées sur les éléments sélectionnés.  
  
 Pour déterminer quels éléments sont sélectionnés dans le <xref:System.Windows.Forms.ListView> contrôler, utilisez le <xref:System.Windows.Forms.ListView.SelectedItems%2A> propriété. Le <xref:System.Windows.Forms.ListView.SelectedItems%2A> propriété permet d’accéder à la <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> qui contient une liste des éléments sélectionnés. Si vous souhaitez que les positions d’index le <xref:System.Windows.Forms.ListView.ListViewItemCollection> au lieu des éléments, vous pouvez utiliser la <xref:System.Windows.Forms.ListView.SelectedIndices%2A> propriété pour accéder à la <xref:System.Windows.Forms.ListView.SelectedIndexCollection>.  
  
 Si vous ne souhaitez pas autoriser plusieurs sélections dans la <xref:System.Windows.Forms.ListView>, mais que vous désirez propose à l’utilisateur un moyen pour plusieurs éléments devant être choisie, vous pouvez afficher des cases à cocher en définissant le <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propriété `true`.  
  
   
  
## Examples  
 L’exemple de code suivant montre un <xref:System.Windows.Forms.ListView> qui permet de sélectionner plusieurs éléments. Montre comment définir la <xref:System.Windows.Forms.ListView.HideSelection%2A> et <xref:System.Windows.Forms.ListView.HeaderStyle%2A> propriétés. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.ListView> objet nommé `ListView1` et un <xref:System.Windows.Forms.TextBox> nommé `TextBox1`. Appelez le `InitializeListView` méthode à partir du constructeur du formulaire ou `Load` (méthode).  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnAfterLabelEdit%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.ListView.AfterLabelEdit> événement pour limiter aux caractères de l’alphabet une étiquette qui vient d’être modifiée. L’exemple utilise la <xref:System.Text.ASCIIEncoding> classe pour obtenir le code ASCII de chaque caractère de la nouvelle étiquette. Si le caractère est compris entre les codes ASCII représentant des nombres, la nouvelle étiquette ne peut pas être appliquée à l’élément. Cet exemple suppose que vous avez créé un <xref:System.Windows.Forms.ListView> contrôle dans un formulaire et des éléments ajoutés à ce dernier. L’exemple suppose également que vous avez connecté la <xref:System.Windows.Forms.ListView.AfterLabelEdit> événement au gestionnaire d’événements défini dans l’exemple de code. Pour pouvoir utiliser le <xref:System.Text.ASCIIEncoding> (classe), votre fichier doit inclure le <xref:System.Text> espace de noms.  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackgroundImageChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnBackgroundImageChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnBeforeLabelEdit%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCacheVirtualItems">
      <MemberSignature Language="C#" Value="protected virtual void OnCacheVirtualItems (System.Windows.Forms.CacheVirtualItemsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCacheVirtualItems(class System.Windows.Forms.CacheVirtualItemsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCacheVirtualItems (e As CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCacheVirtualItems(System::Windows::Forms::CacheVirtualItemsEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.CacheVirtualItemsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.CacheVirtualItemsEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.CacheVirtualItems" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnCacheVirtualItems%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnClick (System.Windows.Forms.ColumnClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnClick(class System.Windows.Forms.ColumnClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnClick (e As ColumnClickEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnClick(System::Windows::Forms::ColumnClickEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ColumnClickEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.ColumnClick" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnColumnClick%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
   
  
## Examples  
 L’exemple de code suivant crée un formulaire qui contient un <xref:System.Windows.Forms.ListView> contrôle qui trie manuellement les éléments lors d’une colonne dans la <xref:System.Windows.Forms.ListView> un clic sur le contrôle. L’exemple définit une classe appelée `ListViewItemComparer` qui implémente le <xref:System.Collections.IComparer?displayProperty=nameWithType> interface qui effectue la <xref:System.Windows.Forms.ListViewItem> comparaison. L’exemple crée une instance de `ListViewItemComparer` et l’utilise pour définir le <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propriété de la <xref:System.Windows.Forms.ListView> contrôle. Le <xref:System.Windows.Forms.ListView.Sort%2A> l’appel de méthode le <xref:System.Windows.Forms.ListView.ColumnClick> Gestionnaire d’événements utilise les méthodes définies dans `ListViewItemComparer` pour effectuer le tri des éléments, en fonction de la colonne qui est activée.  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnReordered">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnReordered (System.Windows.Forms.ColumnReorderedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnReordered(class System.Windows.Forms.ColumnReorderedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnReordered (e As ColumnReorderedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnReordered(System::Windows::Forms::ColumnReorderedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnReorderedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ColumnReorderedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.ColumnReordered" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnColumnReordered%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.ColumnWidthChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanged(class System.Windows.Forms.ColumnWidthChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanged (e As ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanged(System::Windows::Forms::ColumnWidthChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ColumnWidthChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnColumnWidthChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanging (System.Windows.Forms.ColumnWidthChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanging(class System.Windows.Forms.ColumnWidthChangingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanging (e As ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanging(System::Windows::Forms::ColumnWidthChangingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ColumnWidthChangingEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.ColumnWidthChanging" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.ColumnWidthChanging> événement n’a pas lieu si la fenêtre complet de le glisser fonctionnalité, l’option « Afficher fenêtre contenu lors de son déplacement », est désactivée.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnColumnWidthChanging%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawColumnHeader">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawColumnHeader (System.Windows.Forms.DrawListViewColumnHeaderEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawColumnHeader(class System.Windows.Forms.DrawListViewColumnHeaderEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawColumnHeader (e As DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawColumnHeader(System::Windows::Forms::DrawListViewColumnHeaderEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnDrawColumnHeader%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawListViewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawListViewItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawListViewItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawListViewItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.DrawListViewItemEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.DrawItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnDrawItem%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnDrawSubItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawSubItem (System.Windows.Forms.DrawListViewSubItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawSubItem(class System.Windows.Forms.DrawListViewSubItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawSubItem (e As DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawSubItem(System::Windows::Forms::DrawListViewSubItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewSubItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.DrawSubItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnDrawSubItem%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see langword="FontChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.HandleCreated" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.HandleDestroyed" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnItemActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnItemActivate (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemActivate(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemActivate (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemActivate(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.ItemActivate" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnItemActivate%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCheck (System.Windows.Forms.ItemCheckEventArgs ice);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCheck(class System.Windows.Forms.ItemCheckEventArgs ice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCheck (ice As ItemCheckEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCheck(System::Windows::Forms::ItemCheckEventArgs ^ ice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ice" Type="System.Windows.Forms.ItemCheckEventArgs" />
      </Parameters>
      <Docs>
        <param name="ice">
          <see cref="T:System.Windows.Forms.ItemCheckEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.ItemCheck" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnItemCheck%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemCheck" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemChecked">
      <MemberSignature Language="C#" Value="protected virtual void OnItemChecked (System.Windows.Forms.ItemCheckedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemChecked(class System.Windows.Forms.ItemCheckedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemChecked (e As ItemCheckedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemChecked(System::Windows::Forms::ItemCheckedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemCheckedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ItemCheckedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.ItemChecked" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnItemChecked%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDrag(class System.Windows.Forms.ItemDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDrag (e As ItemDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDrag(System::Windows::Forms::ItemDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ItemDragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.ItemDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnItemDrag%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemDrag" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnItemMouseHover (System.Windows.Forms.ListViewItemMouseHoverEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemMouseHover(class System.Windows.Forms.ListViewItemMouseHoverEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemMouseHover (e As ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemMouseHover(System::Windows::Forms::ListViewItemMouseHoverEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemMouseHoverEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ListViewItemMouseHoverEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.ItemMouseHover" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnItemMouseHover%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnItemSelectionChanged (System.Windows.Forms.ListViewItemSelectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemSelectionChanged(class System.Windows.Forms.ListViewItemSelectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemSelectionChanged (e As ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemSelectionChanged(System::Windows::Forms::ListViewItemSelectionChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ListViewItemSelectionChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnItemSelectionChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseHover(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.MouseHover" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Forms.ListView.OnMouseHover%2A> méthode est appelée lorsque la souris pointe sur un <xref:System.Windows.Forms.ListViewItem>, la méthode déclenche le <xref:System.Windows.Forms.ListView.ItemMouseHover> événement.  
  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnMouseHover%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.MouseLeave" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.ParentChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.Resize" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRetrieveVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnRetrieveVirtualItem (System.Windows.Forms.RetrieveVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRetrieveVirtualItem(class System.Windows.Forms.RetrieveVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRetrieveVirtualItem (e As RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRetrieveVirtualItem(System::Windows::Forms::RetrieveVirtualItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.RetrieveVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.RetrieveVirtualItemEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnRetrieveVirtualItem%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftLayoutChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSearchForVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnSearchForVirtualItem (System.Windows.Forms.SearchForVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSearchForVirtualItem(class System.Windows.Forms.SearchForVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSearchForVirtualItem (e As SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSearchForVirtualItem(System::Windows::Forms::SearchForVirtualItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.SearchForVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.SearchForVirtualItemEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.SearchForVirtualItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnSearchForVirtualItem%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnSelectedIndexChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected override void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVirtualItemsSelectionRangeChanged (System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVirtualItemsSelectionRangeChanged(class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVirtualItemsSelectionRangeChanged (e As ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVirtualItemsSelectionRangeChanged(System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Déclenche l'événement <see cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le déclenchement d'un événement appelle le gestionnaire des événements par l'intermédiaire d'un délégué. Pour plus d’informations, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 La méthode <xref:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged%2A> permet également aux classes dérivées de gérer l'événement sans y attacher de délégué. Il s'agit de la méthode recommandée pour gérer l'événement dans une classe dérivée.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Lors de la substitution de <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> dans une classe dérivée, veillez à appeler la méthode <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> de la classe de base de manière à ce que les délégués inscrits reçoivent l'événement.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le contrôle <see cref="T:System.Windows.Forms.ListView" /> est dessiné par le système d'exploitation ou par le code que vous fournissez.</summary>
        <value>
          <see langword="true" /> si le contrôle <see cref="T:System.Windows.Forms.ListView" /> est dessiné par le code fourni ; <see langword="false" /> si le contrôle <see cref="T:System.Windows.Forms.ListView" /> est dessiné par le système d'exploitation. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.ListView> est généralement dessiné par le système d’exploitation. Pour personnaliser l’apparence de <xref:System.Windows.Forms.ListView> ensemble d’éléments, des sous-éléments et des en-têtes de colonne, le <xref:System.Windows.Forms.ListView.OwnerDraw%2A> propriété `true` et fournir un gestionnaire pour un ou plusieurs des événements suivants : <xref:System.Windows.Forms.ListView.DrawItem>, <xref:System.Windows.Forms.ListView.DrawSubItem>, <xref:System.Windows.Forms.ListView.DrawColumnHeader>. Il s’agit owner-drawn. Lorsque le <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, tous les trois événements se produisent ; sinon, uniquement le <xref:System.Windows.Forms.ListView.DrawItem> événement se produit.  
  
> [!NOTE]
>  Informations de sous-élément apparaissent généralement dans l’affichage en mosaïque ainsi que les détails de l’afficher, mais dans l’affichage en mosaïque, il doit être dessiné dans un gestionnaire pour le <xref:System.Windows.Forms.ListView.DrawItem> événement. Le <xref:System.Windows.Forms.ListView.DrawSubItem> événement ne survient pas pour les sous-éléments pour lesquels aucun <xref:System.Windows.Forms.ColumnHeader> objet a été ajouté à la <xref:System.Windows.Forms.ListView.Columns%2A> collection. Notez également que le premier sous-élément de chaque <xref:System.Windows.Forms.ListViewItem> objet représente l’élément parent lui-même et est affiché dans la première colonne.  
  
 Dans la vue Détails, vous pouvez gérer le <xref:System.Windows.Forms.ListView.DrawItem> événement pour dessiner des éléments communs à tous les sous-éléments, telles que l’arrière-plan et gérer le <xref:System.Windows.Forms.ListView.DrawSubItem> événement pour dessiner des éléments pour les sous-éléments, telles que les valeurs de texte. Vous pouvez également dessiner tous les éléments le <xref:System.Windows.Forms.ListView> contrôler à l’aide d’un seul des deux événements, même si cela est moins pratique. Pour dessiner des en-têtes de colonne dans la vue Détails, vous devez gérer le <xref:System.Windows.Forms.ListView.DrawColumnHeader> événement.  
  
> [!NOTE]
>  Pour éviter les problèmes de scintillement des graphiques lorsque owner-drawn, substituez le <xref:System.Windows.Forms.ListView> contrôler et de définir la <xref:System.Windows.Forms.ListView.DoubleBuffered%2A> propriété `true`.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment fournir un dessin personnalisé pour un <xref:System.Windows.Forms.ListView> contrôle. Le <xref:System.Windows.Forms.ListView> contrôle dans l’exemple a un arrière-plan dégradé. Sous-éléments avec des valeurs négatives ont un avant-plan rouge et un arrière-plan noir.  
  
 Un gestionnaire pour le <xref:System.Windows.Forms.ListView.DrawItem> événements Dessine l’arrière-plan des éléments entiers. Un gestionnaire pour le <xref:System.Windows.Forms.ListView.DrawSubItem> événement dessine les valeurs de texte et le texte et l’arrière-plan des sous-éléments qui ont des valeurs négatives. Un gestionnaire pour le <xref:System.Windows.Forms.ListView.DrawColumnHeader> événement dessine chaque en-tête de colonne.  
  
 A <xref:System.Windows.Forms.ContextMenu> composant offre un moyen pour basculer entre l’affichage des détails et l’affichage de liste. Dans la liste, seuls les <xref:System.Windows.Forms.ListView.DrawItem> événement est déclenché. Dans ce cas, le texte et l’arrière-plan sont tous deux dessinés le <xref:System.Windows.Forms.ListView.DrawItem> Gestionnaire d’événements.  
  
 [!code-csharp[ListViewOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#1)]
 [!code-vb[ListViewOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'espacement entre le contrôle <see cref="T:System.Windows.Forms.ListView" /> et son contenu.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" /> qui spécifie l'espacement entre le contrôle <see cref="T:System.Windows.Forms.ListView" /> et son contenu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété ne s'applique pas à cette classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand la valeur de la propriété <see cref="P:System.Windows.Forms.ListView.Padding" /> change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque le contrôle <see cref="T:System.Windows.Forms.ListView" /> est peint.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView> contrôle est dessiné par le système d’exploitation ou est owner-drawn, donc la <xref:System.Windows.Forms.ListView.Paint> événement n’est jamais déclenché. Pour plus d’informations sur les dessins owner-drawn, consultez la <xref:System.Windows.Forms.ListView.OwnerDraw%2A> propriété.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RealizeProperties">
      <MemberSignature Language="C#" Value="protected void RealizeProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RealizeProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RealizeProperties" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RealizeProperties ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RealizeProperties();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialise les propriétés du contrôle <see cref="T:System.Windows.Forms.ListView" /> qui gèrent son apparence.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedrawItems">
      <MemberSignature Language="C#" Value="public void RedrawItems (int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedrawItems(int32 startIndex, int32 endIndex, bool invalidateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RedrawItems(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedrawItems (startIndex As Integer, endIndex As Integer, invalidateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RedrawItems(int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
        <Parameter Name="invalidateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startIndex">Index du premier élément de la plage à redessiner.</param>
        <param name="endIndex">Index du dernier élément de la plage à redessiner.</param>
        <param name="invalidateOnly">
          <see langword="true" /> pour invalider la plage d'éléments ; <see langword="false" /> pour invalider et repeindre les éléments.</param>
        <summary>Force une plage d'objets <see cref="T:System.Windows.Forms.ListViewItem" /> à être redessinée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.RedrawItems%2A> méthode peut être utilisée si le <xref:System.Windows.Forms.ListView> est en mode virtuel ou normal.  
  
 Si le <xref:System.Windows.Forms.ListView.BeginUpdate%2A> méthode a été appelée avant l’appel à <xref:System.Windows.Forms.ListView.RedrawItems%2A>, n’est redessiné.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> ou <paramref name="endIndex" /> est inférieur à 0, supérieur ou égal au nombre d'éléments contenus dans <see cref="T:System.Windows.Forms.ListView" /> ou, s'il est en mode virtuel, supérieur à la valeur de <see cref="P:System.Windows.Forms.ListView.VirtualListSize" />.  
  
 - ou -  
  
 <paramref name="startIndex" /> donné est supérieur au <paramref name="endIndex." />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RetrieveVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RetrieveVirtualItem As RetrieveVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::RetrieveVirtualItemEventHandler ^ RetrieveVirtualItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RetrieveVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque <see cref="T:System.Windows.Forms.ListView" /> est en mode virtuel et requiert <see cref="T:System.Windows.Forms.ListViewItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’un <xref:System.Windows.Forms.ListView> objet est en mode virtuel, il crée <xref:System.Windows.Forms.ListViewItem> objets dynamiquement au lieu d’utiliser le <xref:System.Windows.Forms.ListView.Items%2A> collection. Cet événement est déclenché lorsque l’objet doit créer un <xref:System.Windows.Forms.ListViewItem> objet. Un gestionnaire pour cet événement doit créer approprié <xref:System.Windows.Forms.ListViewItem> ou récupérer à partir du cache et le passer à l’arrière par le biais de la <xref:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item%2A> propriété.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre un gestionnaire pour cet événement. Dans cet exemple, listView1 a besoin de chaque <xref:System.Windows.Forms.ListViewItem> pour afficher le carré de l’index. Cet exemple de code fait partie d’un exemple plus complet fourni pour le <xref:System.Windows.Forms.ListView.VirtualMode%2A> propriété.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#2)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item" /> n'a pas pour valeur un élément lorsque l'événement <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> est géré.</exception>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public virtual bool RightToLeftLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeftLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.RightToLeftLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeftLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RightToLeftLayout { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si le contrôle doit être disposé de droite à gauche.</summary>
        <value>
          <see langword="true" /> pour indiquer que le contrôle <see cref="T:System.Windows.Forms.ListView" /> est disposé de droite à gauche ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView> propriété est utilisée pour les applications internationales où le langage est écrit de droite à gauche. Si vous définissez <xref:System.Windows.Forms.ListView> et <xref:System.Windows.Forms.RightToLeft> sur « true » de contenu et le texte du contrôle est disposés de droite à gauche.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand la valeur de la propriété <see cref="P:System.Windows.Forms.ListView.RightToLeftLayout" /> change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements indique l’occurrence de le <xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un élément <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.ListView> nommé `ListView1`. Vérifiez que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#462](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#462)]
 [!code-vb[System.Windows.Forms.EventExamples#462](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#462)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrollable">
      <MemberSignature Language="C#" Value="public bool Scrollable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Scrollable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Scrollable" />
      <MemberSignature Language="VB.NET" Value="Public Property Scrollable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Scrollable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si une barre de défilement est ajoutée au contrôle lorsqu'il n'y a pas assez de place pour afficher tous les éléments.</summary>
        <value>
          <see langword="true" /> si des barres de défilement sont ajoutées au contrôle pour permettre la visualisation de tous les éléments ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque cette propriété a la valeur `true`, la <xref:System.Windows.Forms.ListView> affiche une barre de défilement verticale à utiliser lorsque le nombre d’éléments dépasse la taille de la zone cliente du contrôle. Vous pouvez utiliser cette propriété pour vous assurer que l’utilisateur peut accéder à tous les éléments qui sont disponibles dans le <xref:System.Windows.Forms.ListView> contrôle.  
  
> [!NOTE]
>  Dans les versions de la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] avant la version 2.0, les en-têtes de colonne ont été peint pas correctement lorsque vous définissez cette propriété pour `false` et le redimensionnement du contrôle pour l’agrandir. Pour contourner ce problème, définissez cette propriété sur `true` dans un <xref:System.Windows.Forms.Form.ResizeBegin> Gestionnaire d’événements et affectez-lui la valeur `false` dans un <xref:System.Windows.Forms.Form.ResizeEnd> Gestionnaire d’événements.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchForVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SearchForVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SearchForVirtualItem As SearchForVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::SearchForVirtualItemEventHandler ^ SearchForVirtualItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SearchForVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque <see cref="T:System.Windows.Forms.ListView" /> est en mode virtuel et qu'une recherche est en cours.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement se produit lorsqu’un <xref:System.Windows.Forms.ListView> est en mode virtuel et le <xref:System.Windows.Forms.ListView.FindNearestItem%2A> ou <xref:System.Windows.Forms.ListView.FindItemWithText%2A> méthode est appelée. Lors du traitement de cet événement, vous devez déterminer à quel élément dans la liste d’éléments fournie par le <xref:System.Windows.Forms.ListView.Items%2A> propriété correspond aux critères de recherche et affecter le <xref:System.Windows.Forms.SearchForVirtualItemEventArgs.Index%2A?displayProperty=nameWithType> index à la propriété de la <xref:System.Windows.Forms.ListViewItem>. Si aucun élément n’est pas fourni, <xref:System.Windows.Forms.ListView.FindNearestItem%2A> et <xref:System.Windows.Forms.ListView.FindItemWithText%2A> retournera `null`.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, une recherche retourne le plus proche à un entier dans une liste de 10 000 premiers carrés. Cet exemple de code fait partie d’un exemple plus complet fourni pour le <xref:System.Windows.Forms.ListView.VirtualMode%2A> propriété.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#4)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque la collection <see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> est modifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.SelectedIndices%2A> collection change chaque fois que le <xref:System.Windows.Forms.ListViewItem.Selected%2A> propriété d’un <xref:System.Windows.Forms.ListViewItem> modifications. La modification de propriété peut se produire par programme ou lorsque l’utilisateur sélectionne un élément ou efface la sélection d’un élément. Lorsque l’utilisateur sélectionne un élément sans utiliser la touche CTRL pour effectuer une sélection multiple, le contrôle supprime tout d’abord la sélection précédente. Dans ce cas, cet événement produit une fois pour chaque élément précédemment sélectionné et une fois pour l’élément qui vient d’être sélectionné.  
  
 Pour déterminer quels éléments sont sélectionnés dans le <xref:System.Windows.Forms.ListView> contrôler, utilisez le <xref:System.Windows.Forms.ListView.SelectedItems%2A> propriété pour accéder à la <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>. Vous pouvez créer un gestionnaire d’événements pour cet événement effectuer des tâches chaque fois qu’il y a une modification aux éléments sélectionnés dans le <xref:System.Windows.Forms.ListView> contrôle.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.ListView.SelectedItems%2A> propriété, <xref:System.Windows.Forms.ListView.SelectedIndexChanged> événement, <xref:System.Windows.Forms.ListView.HeaderStyle%2A> membres et la <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> classe. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.ListView> objet nommé `ListView1` et un <xref:System.Windows.Forms.TextBox> nommé `TextBox1`. Appelez le `InitializeListView` méthode à partir du constructeur du formulaire ou `Load` (méthode). Cet exemple requiert que le Gestionnaire d’événements est correctement associé à le <xref:System.Windows.Forms.ListView.SelectedIndexChanged> événement  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
        <altmember cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListView.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListView::SelectedIndexCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les index des éléments sélectionnés dans le contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" /> qui contient les index des éléments sélectionnés. Si aucun élément n'est sélectionné, un <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" /> vide est retourné.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.SelectedIndices%2A> propriété ne contient pas d’index si la propriété est accessible avant la <xref:System.Windows.Forms.ListView> handle est créé, qui se produit généralement lorsque le <xref:System.Windows.Forms.ListView> est initialement chargé pour l’affichage dans le formulaire. Vous pouvez vérifier si le handle est créé avec le <xref:System.Windows.Forms.Control.IsHandleCreated%2A> propriété. Lorsque le <xref:System.Windows.Forms.ListView.MultiSelect%2A> est définie sur `true`, cette propriété retourne une collection contenant les index de tous les éléments sélectionnés dans le <xref:System.Windows.Forms.ListView>. Pour une sélection unique <xref:System.Windows.Forms.ListView>, cette propriété retourne une collection qui contient un seul élément contenant l’index de l’élément sélectionné uniquement dans le <xref:System.Windows.Forms.ListView>. Pour plus d’informations sur les tâches qui peuvent être effectuées avec les éléments de la collection, consultez <xref:System.Windows.Forms.ListView.SelectedIndexCollection>.  
  
 Si vous souhaitez obtenir une collection d’éléments qui sont sélectionnés dans le <xref:System.Windows.Forms.ListView> contrôle, au lieu des positions d’index des éléments qui sont sélectionnés, utilisez le <xref:System.Windows.Forms.ListView.SelectedItems%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.ListView.SelectedIndices%2A>, <xref:System.Windows.Forms.ListView.SelectedIndexChanged>, et <xref:System.Windows.Forms.ListView.HeaderStyle%2A> membres et la <xref:System.Windows.Forms.ListView.SelectedIndexCollection> classe. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.ListView> objet nommé `ListView1` et un <xref:System.Windows.Forms.TextBox> nommé `TextBox1`. Appelez le `InitializeListView` méthode à partir du constructeur du formulaire ou `Load` (méthode). Cet exemple requiert que le Gestionnaire d’événements est correctement associé à le <xref:System.Windows.Forms.ListView.SelectedIndexChanged> événement.  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView1#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView1#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedListViewItemCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedListViewItemCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListView.SelectedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedListViewItemCollection ^ SelectedItems { System::Windows::Forms::ListView::SelectedListViewItemCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les éléments qui sont sélectionnés dans le contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" /> qui contient les éléments sélectionnés dans le contrôle. Si aucun élément n'est sélectionné, un <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" /> vide est retourné.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.SelectedItems%2A> propriété ne contient pas d’éléments si la propriété est accessible avant la <xref:System.Windows.Forms.ListView> handle est créé, qui se produit généralement lorsque <xref:System.Windows.Forms.ListView> est initialement chargé pour l’affichage dans le formulaire. Vous pouvez vérifier si le handle est créé avec le <xref:System.Windows.Forms.Control.IsHandleCreated%2A> propriété. Lorsque le <xref:System.Windows.Forms.ListView.MultiSelect%2A> est définie sur `true`, cette propriété retourne une collection qui contient les éléments sélectionnés dans le <xref:System.Windows.Forms.ListView>. Pour une sélection unique <xref:System.Windows.Forms.ListView>, cette propriété retourne une collection qui contient l’élément sélectionné uniquement dans le <xref:System.Windows.Forms.ListView>. Pour plus d’informations sur les tâches qui peuvent être effectuées avec les éléments de la collection, consultez <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>.  
  
 Si vous souhaitez obtenir une collection de la position d’index au sein de la <xref:System.Windows.Forms.ListView.ListViewItemCollection> des éléments sélectionnés dans le <xref:System.Windows.Forms.ListView> contrôle, au lieu des éléments qui sont sélectionnés, utilisez le <xref:System.Windows.Forms.ListView.SelectedIndices%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.ListView.SelectedItems%2A>, <xref:System.Windows.Forms.ListView.SelectedIndexChanged> événement, et <xref:System.Windows.Forms.ListView.HeaderStyle%2A> membres et la <xref:System.Windows.Forms.ListView.SelectedListViewItemCollection> classe. Pour exécuter cet exemple, collez le code suivant dans un formulaire contenant un <xref:System.Windows.Forms.ListView> objet nommé `ListView1` et un <xref:System.Windows.Forms.TextBox> nommé `TextBox1`. Appelez le `InitializeListView` méthode à partir du constructeur du formulaire ou `Load` (méthode). Cet exemple requiert que le Gestionnaire d’événements est correctement associé à le <xref:System.Windows.Forms.ListView.SelectedIndexChanged> événement  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ShowGroups">
      <MemberSignature Language="C#" Value="public bool ShowGroups { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowGroups" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowGroups As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowGroups { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si les éléments sont affichés en groupes.</summary>
        <value>
          <see langword="true" /> pour afficher les éléments en groupes ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tous les groupes assignés à un <xref:System.Windows.Forms.ListView> contrôle s’affiche chaque fois que le <xref:System.Windows.Forms.ListView.View%2A> propriété est définie sur une valeur autre que <xref:System.Windows.Forms.View.List>. Le <xref:System.Windows.Forms.ListView> fonctionnalité de regroupement vous permet de créer des groupes visuels liés de manière logique <xref:System.Windows.Forms.ListView> éléments sur Windows XP et Windows Server 2003. Pour activer cette fonctionnalité, votre application doit appeler la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> (méthode). Pour plus d'informations, consultez la propriété <xref:System.Windows.Forms.ListView.Groups%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Groups" />
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="ShowItemToolTips">
      <MemberSignature Language="C#" Value="public bool ShowItemToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowItemToolTips" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowItemToolTips" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowItemToolTips As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowItemToolTips { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si les info-bulles sont affichées pour les objets <see cref="T:System.Windows.Forms.ListViewItem" /> contenus dans <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <value>
          <see langword="true" /> si les info-bulles <see cref="T:System.Windows.Forms.ListViewItem" /> doivent être affichées ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Forms.ListView.ShowItemToolTips%2A> est définie sur `true`, tout <xref:System.Windows.Forms.ListViewItem> qui a une info-bulle s’afficher ; sinon, rien ne s’affiche.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Windows.Forms.ListView.ShowItemToolTips%2A> et <xref:System.Windows.Forms.ListViewItem.ToolTipText%2A?displayProperty=nameWithType> propriétés. Pour exécuter cet exemple, collez le code dans un Windows Form et appelez `InitializeItemsWithToolTips` à partir du constructeur du formulaire ou <xref:System.Windows.Forms.Form.Load> Gestionnaire d’événements.  
  
 [!code-csharp[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmallImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList SmallImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList SmallImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SmallImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property SmallImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ SmallImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'objet <see cref="T:System.Windows.Forms.ImageList" /> à utiliser lors de l'affichage des éléments sous forme de petites icônes dans le contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> qui contient les icônes à utiliser lorsque la propriété <see cref="P:System.Windows.Forms.ListView.View" /> a la valeur <see cref="F:System.Windows.Forms.View.SmallIcon" />. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriété vous permet de spécifier un <xref:System.Windows.Forms.ImageList> objet qui contient les icônes à utiliser pour afficher les éléments avec petites icônes (lorsque la <xref:System.Windows.Forms.ListView.View%2A> propriété est définie à toute valeur autre que <xref:System.Windows.Forms.View.LargeIcon>). Le <xref:System.Windows.Forms.ListView> contrôle peut accepter tout graphique Format utilisé par le <xref:System.Windows.Forms.ImageList> contrôle prend en charge lors de l’affichage des icônes. Le <xref:System.Windows.Forms.ListView> contrôle n’est pas limité aux fichiers .ico. Une fois un <xref:System.Windows.Forms.ImageList> est affectée à la <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriété, vous pouvez définir le <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> propriété de chaque <xref:System.Windows.Forms.ListViewItem> dans le <xref:System.Windows.Forms.ListView> contrôle à la position d’index de l’image appropriée dans la <xref:System.Windows.Forms.ImageList>. La taille des icônes pour le <xref:System.Windows.Forms.ListView.SmallImageList%2A> est spécifiée par le <xref:System.Windows.Forms.ImageList.ImageSize%2A> propriété.  
  
 Car un seul index peut être spécifié pour le <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType> propriété, le <xref:System.Windows.Forms.ImageList> objets spécifiés dans le <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés doivent avoir les mêmes positions d’index pour les images à afficher. Par exemple, si le <xref:System.Windows.Forms.ListViewItem.ImageIndex%2A> propriété d’un <xref:System.Windows.Forms.ListViewItem> a la valeur 0, les images à utiliser pour les petites et grandes icônes doivent concerner la même position d’index dans le <xref:System.Windows.Forms.ImageList> objets spécifiés dans le <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés.  
  
> [!NOTE]
>  Lorsque les images sont spécifiées avec des clés, vous devez placer les petites et grandes versions de l’image à la même position d’index dans leurs listes d’images respectives. Lorsque vous basculez entre les vues, l’emplacement d’index de l’image dans une liste est utilisé pour localiser l’image dans la liste, quelle que soit la valeur de clé spécifiée.  
  
 Pour définir le <xref:System.Windows.Forms.ImageList> à utiliser lors de l’affichage des éléments avec grandes icônes (lorsque la <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.LargeIcon>), utilisez le <xref:System.Windows.Forms.ListView.LargeImageList%2A> propriété. Si vous souhaitez utiliser des images pour afficher l’état de l’élément, utilisez le <xref:System.Windows.Forms.ListView.StateImageList%2A> propriété.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Trie les éléments de la vue liste.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En général, les éléments sont triés à l’aide de la <xref:System.Windows.Forms.ListView.Sorting%2A> propriété, qui trie les éléments en fonction de texte de l’élément. Pour personnaliser l’ordre de tri, vous devez écrire une classe qui implémente le <xref:System.Collections.IComparer> d’interface et définissez le <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propriété à un objet de cette classe. Cela est utile, par exemple, lorsque vous souhaitez trier les éléments selon le texte des sous-éléments. Pour plus d’informations sur l’exécution d’un tri manuel des éléments, consultez l’exemple de la <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propriété.  
  
 Si le <xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType> propriété est définie sur une valeur autre que <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> ou si la <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> est définie, la liste est triée automatiquement lorsque des éléments sont ajoutés. Les éléments ne sont pas triées automatiquement lorsque le texte d’étiquette change.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      </Docs>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder Sorting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SortOrder Sorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Sorting" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorting As SortOrder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::SortOrder Sorting { System::Windows::Forms::SortOrder get(); void set(System::Windows::Forms::SortOrder value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'ordre de tri des éléments du contrôle.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.SortOrder" />. La valeur par défaut est <see cref="F:System.Windows.Forms.SortOrder.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.Sorting%2A> propriété vous permet de spécifier si les éléments sont triés dans la <xref:System.Windows.Forms.ListView> contrôle. Par défaut, aucun tri n’est effectuée. Lorsque le <xref:System.Windows.Forms.ListView.Sorting%2A> est définie sur <xref:System.Windows.Forms.SortOrder.Ascending> ou <xref:System.Windows.Forms.SortOrder.Descending>, les éléments de la <xref:System.Windows.Forms.ListView> sont automatiquement triées dans l’ordre alphabétique croissant (lorsque la propriété a la valeur <xref:System.Windows.Forms.SortOrder.Ascending>) ou par ordre alphabétique décroissant (lors de la propriété est définie sur <xref:System.Windows.Forms.SortOrder.Descending>). Vous pouvez utiliser cette propriété pour trier automatiquement les éléments qui sont affichés dans votre <xref:System.Windows.Forms.ListView> contrôle pour le rendre plus facile à rechercher des éléments quand un grand nombre d’éléments est disponible.  
  
 Si vous souhaitez effectuer votre propre élément de tri au lieu d’utiliser le <xref:System.Windows.Forms.ListView.Sorting%2A> propriété, utilisez la <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> propriété en combinaison avec la <xref:System.Windows.Forms.ListView.Sort%2A> (méthode).  
  
 Si le <xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType> propriété est définie sur une valeur autre que <xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType> ou si la <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A> est définie, la liste est triée automatiquement lorsque des éléments sont ajoutés. Les éléments ne sont pas triées automatiquement lorsque le texte d’étiquette change.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La valeur spécifiée n'est pas l'une des valeurs <see cref="T:System.Windows.Forms.SortOrder" />.</exception>
        <altmember cref="T:System.Windows.Forms.SortOrder" />
      </Docs>
    </Member>
    <Member MemberName="StateImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList StateImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList StateImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.StateImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property StateImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ StateImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Windows.Forms.ImageList" /> associé à des états définis par l'application dans le contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageList" /> qui contient un ensemble d'images d'état disponibles pour indiquer un état défini par l'application relatif à un élément. La valeur par défaut est <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.StateImageList%2A> propriété vous permet de spécifier un <xref:System.Windows.Forms.ImageList> qui contient des images à utiliser pour représenter un état spécifique à l’application d’un élément dans un <xref:System.Windows.Forms.ListView> contrôle. Les images d’état sont affichés à gauche d’une icône pour l’élément. Vous pouvez utiliser des images d’état, tels que les cases à cocher checked et unchecked, pour indiquer des états définis par l’application. Les images d’état sont visibles dans toutes les vues de la <xref:System.Windows.Forms.ListView> contrôle.  
  
 Si un <xref:System.Windows.Forms.ImageList> est spécifié dans le <xref:System.Windows.Forms.ListView.StateImageList%2A> propriété et la <xref:System.Windows.Forms.ListView.CheckBoxes%2A> est définie sur `true`, les images aux positions d’index 0 et 1 dans le <xref:System.Windows.Forms.ImageList> sont affichées au lieu de la case à cocher. L’image à la position d’index 0 est affichée au lieu de la case à cocher est désactivée, et l’image à la position d’index 1 s’affiche au lieu de la case à cocher activée.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cette propriété ne s'applique pas à cette classe.</summary>
        <value>Texte à afficher dans le contrôle <see cref="T:System.Windows.Forms.ListView" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété ne s'applique pas à cette classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit quand la propriété <see cref="P:System.Windows.Forms.ListView.Text" /> change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size TileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size TileSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property TileSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size TileSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la taille des mosaïques affichées en mode Mosaïque.</summary>
        <value>
          <see cref="T:System.Drawing.Size" /> qui contient la nouvelle taille de mosaïque.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété détermine la taille des mosaïques lorsque la <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>. Définition de cette propriété est utile pour empêcher le retour à la ligne lorsque le texte de sous-élément est trop longs pour être affichée sur une seule ligne.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser la <xref:System.Windows.Forms.ListView> fonctionnalité de mosaïque. Dans l’exemple, l’affichage en mosaïque affiche les éléments qui représentent la documentation. Chaque élément est affiché sous forme de vignette contenant l’icône d’un livre, le titre, l’auteur et l’année de la publication. Pour l’exemple de code fonctionne, vous devez inclure un fichier d’icône nommé Book.ico dans le même répertoire que l’exemple. Pour afficher la vignette afficher sans icônes, commentez les lignes relatives à la <xref:System.Windows.Forms.ImageList> objet.  
  
 [!code-cpp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CPP/listviewtilingexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CS/listviewtilingexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/VB/listviewtilingexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="TopItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem TopItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem TopItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TopItem" />
      <MemberSignature Language="VB.NET" Value="Public Property TopItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ TopItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le premier élément visible dans le contrôle.</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListViewItem" /> qui représente le premier élément visible dans le contrôle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Initialement, l’élément avec la position d’index zéro (0) est en haut de la <xref:System.Windows.Forms.ListView> contrôle. Si le <xref:System.Windows.Forms.ListView> défile vers le contenu du contrôle, un autre élément peut être en haut du contrôle. Vous pouvez utiliser cette propriété pour indiquer ou déterminer quel élément est visible en haut de la <xref:System.Windows.Forms.ListView> contrôle. La valeur de la <xref:System.Windows.Forms.ListView.TopItem%2A> propriété n’est pas toujours persistante, selon l’emplacement l’élément supérieur souhaité dans la liste.  
  
 Le nombre d’éléments visibles dans un <xref:System.Windows.Forms.ListView> le contrôle à tout moment dépend de la hauteur de la vue liste et la taille des éléments qu’il contient. Si les éléments dépassent la hauteur de la vue liste, les éléments seront affichent sur plusieurs pages, dont l’utilisateur peut faire défiler. Si vous définissez la <xref:System.Windows.Forms.ListView.TopItem%2A> propriété à un élément dans la dernière page de la <xref:System.Windows.Forms.ListView>, l’élément sera automatiquement défiler dans l’affichage ; Toutefois, <xref:System.Windows.Forms.ListView.TopItem%2A> sera défini sur l’élément supérieur réel de la dernière page.  
  
 Pour vous assurer qu’un élément spécifique est dans la région visible du contrôle (mais pas nécessairement dans la position supérieure), utilisez le <xref:System.Windows.Forms.ListView.EnsureVisible%2A> (méthode).  
  
> [!NOTE]
>  Définition de cette propriété n’a aucun effet lorsque les <xref:System.Windows.Forms.ListView.Scrollable%2A> valeur de propriété est `false`.  
>   
>  Définition de cette propriété n’est pas pris en charge dans les versions de la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] antérieures à la version 2.0.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la redéfinition du style d’un <xref:System.Windows.Forms.ListViewItem> sous-éléments de l’objet à l’aide de la <xref:System.Windows.Forms.ListView.TopItem%2A> propriété et la <xref:System.Windows.Forms.ListViewItem.ListViewSubItem.ResetStyle%2A?displayProperty=nameWithType> (méthode). Pour exécuter l’exemple, collez le code suivant dans un formulaire contenant un bouton nommé `Button1` et appelez le `InitializeListView` méthode dans le constructeur du formulaire ou <xref:System.Windows.Forms.Form.Load> Gestionnaire d’événements.  
  
 [!code-cpp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.Windows.Forms.ListView.View" /> a la valeur <see cref="F:System.Windows.Forms.View.LargeIcon" />, <see cref="F:System.Windows.Forms.View.SmallIcon" /> ou <see cref="F:System.Windows.Forms.View.Tile" />.</exception>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne une représentation sous forme de chaîne du contrôle <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <returns>Chaîne qui déclare le type de contrôle, le nombre d'éléments contenus dans le contrôle <see cref="T:System.Windows.Forms.ListView" /> et le type du premier élément dans <see cref="T:System.Windows.Forms.ListView" />, si le nombre n'a pas la valeur 0.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateExtendedStyles">
      <MemberSignature Language="C#" Value="protected void UpdateExtendedStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateExtendedStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.UpdateExtendedStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateExtendedStyles ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateExtendedStyles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Met à jour les styles étendus appliqués au contrôle list view.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.Windows.Forms.ListView.UpdateExtendedStyles%2A> méthode dans votre classe dérivée pour substituer les styles étendus utilisés par le <xref:System.Windows.Forms.ListView> contrôle. Si vous appelez cette méthode, vous devez vous assurer que les styles étendus définies par des propriétés sur le <xref:System.Windows.Forms.ListView> contrôle sont utilisés dans votre version dérivée du contrôle.  
  
 Voici les propriétés qui s’appliquent à un style étendu à la <xref:System.Windows.Forms.ListView> contrôle.  
  
-   <xref:System.Windows.Forms.ListView.Activation%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.HoverSelection%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.AllowColumnReorder" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
        <altmember cref="P:System.Windows.Forms.ListView.FullRowSelect" />
        <altmember cref="P:System.Windows.Forms.ListView.GridLines" />
        <altmember cref="P:System.Windows.Forms.ListView.HoverSelection" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleStateImageBehavior">
      <MemberSignature Language="C#" Value="public bool UseCompatibleStateImageBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleStateImageBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCompatibleStateImageBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCompatibleStateImageBehavior { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si <see cref="T:System.Windows.Forms.ListView" /> utilise un comportement des images d'état compatible avec le [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 ou le [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0.</summary>
        <value>
          <see langword="true" /> si le comportement des images d'état est compatible avec le [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 ; <see langword="false" /> si le comportement est compatible avec le [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0. La valeur par défaut est <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modifications apportées à la <xref:System.Windows.Forms.ListView> en contrôler le [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 permettent aux images d’état personnalisées à définir pour indiquer si un élément est activé ou désactivé, ou dans un état indéterminé. Avec l’ajout de cette fonctionnalité, la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 a un comportement différent que le .NET Framework 1.1. Si vous avez créé des applications qui dépendent du comportement dans les [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1, assurez-vous que le <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> est définie sur `true`, qui est la valeur par défaut. Afin de tirer pleinement parti des images d’état personnalisées, définir <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> à `false`.  
  
> [!NOTE]
>  Si vous utilisez la [!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)] concepteur, le <xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A> propriété sera définie `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.View View { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.View View" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.View" />
      <MemberSignature Language="VB.NET" Value="Public Property View As View" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::View View { System::Windows::Forms::View get(); void set(System::Windows::Forms::View value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la façon d'afficher les éléments dans le contrôle.</summary>
        <value>Une des valeurs de <see cref="T:System.Windows.Forms.View" />. La valeur par défaut est <see cref="F:System.Windows.Forms.View.LargeIcon" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Forms.ListView.View%2A> propriété vous permet de spécifier le type d’affichage de la <xref:System.Windows.Forms.ListView> contrôle utilise pour afficher les éléments. Vous pouvez définir le <xref:System.Windows.Forms.ListView.View%2A> propriété à afficher chaque élément avec petites ou grandes icônes ou afficher des éléments dans une liste verticale. L’option la plus complète est la vue de détails, qui vous permet d’afficher non seulement les éléments mais les sous-éléments spécifiés pour chaque élément. Chaque élément est affiché dans une grille, avec chaque élément répertorié verticalement et les sous-éléments pour chaque élément affiché dans une colonne, avec des en-têtes de colonne. L’affichage des détails est une façon idéale pour afficher des informations de base de données à un utilisateur. Avec Windows XP et Windows Server 2003, vous pouvez également afficher des éléments sous forme de vignettes présentant un équilibre entre les informations graphiques et textuelles en affichant une grande icône, ainsi que les informations de sous-élément de votre choix. Pour activer l’affichage en mosaïque, votre application doit appeler la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> (méthode). L’affichage de petites images affiche chaque élément avec une icône et les informations textuelles à droite de l’icône. La grande image affiche chaque élément avec une icône et des informations textuelles sous l’icône. La taille des icônes pour la liste d’images est spécifiée par le <xref:System.Windows.Forms.ImageList.ImageSize%2A> propriété de la <xref:System.Windows.Forms.ImageList> pour le <xref:System.Windows.Forms.ListView.SmallImageList%2A> ou <xref:System.Windows.Forms.ListView.LargeImageList%2A> propriétés.  
  
> [!NOTE]
>  Si vous utilisez plusieurs listes d’images pour l’affichage de petites et grandes icônes, avec un <xref:System.Windows.Forms.ListView> (contrôle), vous devez placer les petites et grandes versions de l’image à la même position d’index dans leurs listes d’images respectives. Lorsque vous basculez entre les vues, l’emplacement d’index de l’image dans une liste est utilisé pour localiser l’image dans la liste, quelle que soit la valeur de clé spécifiée.  
  
 La plupart des propriétés de la <xref:System.Windows.Forms.ListView> contrôle affectent les différentes vues le comportement et sont affichés. Certaines propriétés qui affectent les vues des éléments sont utiles quand la <xref:System.Windows.Forms.ListView.View%2A> est définie sur une valeur spécifique, tandis que d’autres sont utiles dans toutes les vues. Par exemple, les propriétés, telles que <xref:System.Windows.Forms.ListView.GridLines%2A> et <xref:System.Windows.Forms.ListView.FullRowSelect%2A> sont utiles uniquement quand le <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, tandis que la <xref:System.Windows.Forms.ListView.MultiSelect%2A> et <xref:System.Windows.Forms.ListView.CheckBoxes%2A> propriétés sont utiles dans toutes les vues.  
  
 Le tableau suivant répertorie certaines du <xref:System.Windows.Forms.ListView> membres et les vues qu’ils sont valides dans.  
  
|Membre de ListView|Vue|  
|---------------------|----------|  
|Propriété <xref:System.Windows.Forms.ListView.Alignment%2A>|<xref:System.Windows.Forms.View.SmallIcon> ou <xref:System.Windows.Forms.View.LargeIcon>|  
|Propriété <xref:System.Windows.Forms.ListView.AutoArrange%2A>|<xref:System.Windows.Forms.View.SmallIcon> ou <xref:System.Windows.Forms.View.LargeIcon>|  
|Méthode <xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.CheckBoxes%2A>|Toutes les vues à l’exception <xref:System.Windows.Forms.View.Tile>|  
|Propriété <xref:System.Windows.Forms.ListView.Columns%2A>|<xref:System.Windows.Forms.View.Details> ou <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem> Événement|<xref:System.Windows.Forms.View.Details>|  
|Méthode <xref:System.Windows.Forms.ListView.FindItemWithText%2A>|<xref:System.Windows.Forms.View.Details>, <xref:System.Windows.Forms.View.List>ou <xref:System.Windows.Forms.View.Tile>|  
|Méthode <xref:System.Windows.Forms.ListView.FindNearestItem%2A>|<xref:System.Windows.Forms.View.SmallIcon> ou <xref:System.Windows.Forms.View.LargeIcon>|  
|Méthode <xref:System.Windows.Forms.ListView.GetItemAt%2A>|<xref:System.Windows.Forms.View.Details> ou <xref:System.Windows.Forms.View.Tile>|  
|Propriété <xref:System.Windows.Forms.ListView.Groups%2A>|Toutes les vues à l’exception <xref:System.Windows.Forms.View.List>|  
|Propriété <xref:System.Windows.Forms.ListView.HeaderStyle%2A>|<xref:System.Windows.Forms.View.Details>|  
|Propriété <xref:System.Windows.Forms.ListView.InsertionMark%2A>|<xref:System.Windows.Forms.View.LargeIcon>, <xref:System.Windows.Forms.View.SmallIcon>ou <xref:System.Windows.Forms.View.Tile>|  
  
 Vous pouvez utiliser le <xref:System.Windows.Forms.ListView.View%2A> propriété pour fournir des vues différentes des données dans votre application, ou de verrouiller une vue spécifique pour utiliser ses avantages. Par exemple, le <xref:System.Windows.Forms.ListView.View%2A> est souvent définie sur <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType> , car la vue Détails offre un nombre d’options non disponibles dans les autres modes d’affichage.  
  
> [!NOTE]
>  Si votre <xref:System.Windows.Forms.ListView> contrôle n’a pas de tous les en-têtes de colonne spécifiés et que vous définissez la <xref:System.Windows.Forms.ListView.View%2A> propriété <xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>, le <xref:System.Windows.Forms.ListView> contrôle n’affiche pas tous les éléments. Si votre <xref:System.Windows.Forms.ListView> contrôle n’a pas de tous les en-têtes de colonne spécifiés et que vous définissez la <xref:System.Windows.Forms.ListView.View%2A> propriété <xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>, le <xref:System.Windows.Forms.ListView> contrôle n’affiche pas les sous-éléments.  
  
 L’affichage en mosaïque affiche chaque élément avec une grande icône sur les informations textuelles et de gauche à droite. Les informations textuelles se composent de l’étiquette d’élément suivie des sous-éléments. Par défaut, seul le premier sous-élément s’affiche, ce qui correspond à l’étiquette d’élément. Pour afficher des sous-éléments supplémentaires, vous devez ajouter <xref:System.Windows.Forms.ColumnHeader> des objets sur le <xref:System.Windows.Forms.ListView.Columns%2A> collection. Chaque sous-élément dans la mosaïque correspond à un en-tête de colonne. Pour contrôler les sous-éléments affichés et l’ordre dans lequel ils sont affichés, vous devez définir le <xref:System.Windows.Forms.ListViewItem.ListViewSubItem.Name%2A?displayProperty=nameWithType> propriété pour chaque élément et le <xref:System.Windows.Forms.ColumnHeader.Name%2A?displayProperty=nameWithType> propriété pour chaque en-tête. Vous pouvez ensuite ajouter, supprimer et réorganiser les en-têtes de la <xref:System.Windows.Forms.ListView.Columns%2A> collection pour obtenir le résultat souhaité.  
  
 Pour contrôler la taille des mosaïques en mode mosaïque, définissez la <xref:System.Windows.Forms.ListView.TileSize%2A> propriété. Cela est utile pour empêcher le retour à la ligne lorsque le texte de sous-élément est trop long pour une seule ligne.  
  
 Pour obtenir un exemple de l’affichage en mosaïque, consultez le <xref:System.Windows.Forms.ListView.TileSize%2A> propriété.  
  
> [!NOTE]
>  Bien que les colonnes sont affichées uniquement en mode Détails, les sous-éléments sans en-têtes de colonne s’affichent pas dans la vue des détails ou de l’affichage en mosaïque.  
  
 L’affichage en mosaïque est disponible uniquement sur Windows XP et Windows Server 2003 lorsque votre application appelle la <xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType> (méthode). Sur les systèmes d'exploitation antérieurs, tout code lié à l'affichage en mosaïque n'a aucun effet et le contrôle <xref:System.Windows.Forms.ListView> s'affiche en mode Grandes icônes. Par conséquent, tout code qui dépend de l’affichage en mosaïque peuvent ne pas fonctionne correctement.  
  
 Vous souhaitez inclure du code qui détermine si l’affichage en mosaïque est disponible et fournir d’autres fonctionnalités lorsqu’il n’est pas disponible. Par exemple, lorsque vous utilisez owner-drawn pour personnaliser l’apparence de <xref:System.Windows.Forms.ListView> des éléments dans l’affichage en mosaïque, vous souhaiterez utiliser le code de dessin correspondant au mode grandes icônes lors de l’exécution sur les systèmes d’exploitation qui ne prennent pas en charge l’affichage en mosaïque.  
  
 La fonctionnalité d’affichage en mosaïque est fournie par la même bibliothèque qui fournit la fonctionnalité des thèmes du système d’exploitation. Pour vérifier la disponibilité de cette bibliothèque, appelez le <xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType> surcharge de méthode et passez le <xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType> valeur.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Windows.Forms.ListView> contrôle avec trois <xref:System.Windows.Forms.ListViewItem> objets spécifiés et trois <xref:System.Windows.Forms.ListViewItem.ListViewSubItem> objets spécifiés pour chaque élément. L’exemple crée également <xref:System.Windows.Forms.ColumnHeader> objets pour afficher les sous-éléments en mode Détails. Deux <xref:System.Windows.Forms.ImageList> objets sont également créés dans l’exemple de code pour fournir des images pour les <xref:System.Windows.Forms.ListViewItem> objets. Ces <xref:System.Windows.Forms.ImageList> objets sont ajoutés à la <xref:System.Windows.Forms.ListView.LargeImageList%2A> et <xref:System.Windows.Forms.ListView.SmallImageList%2A> propriétés. L’exemple utilise les propriétés suivantes pour créer le <xref:System.Windows.Forms.ListView> contrôle.  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 Cet exemple suppose que vous avez ajouté le code à un <xref:System.Windows.Forms.Form> et appelez la méthode créée dans l’exemple à partir du constructeur ou une autre méthode sur le formulaire. L’exemple requiert également que les images nommées `MySmallImage1`, `MySmallImage2`, `MyLargeImage1`, et `MyLargeImage2` se trouvent dans le répertoire racine du lecteur C.  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La valeur spécifiée n'est pas l'une des valeurs <see cref="T:System.Windows.Forms.View" />.</exception>
        <altmember cref="T:System.Windows.Forms.View" />
        <altmember cref="P:System.Windows.Forms.ListView.TileSize" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="VirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VirtualItemsSelectionRangeChanged As ListViewVirtualItemsSelectionRangeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventHandler ^ VirtualItemsSelectionRangeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque <see cref="T:System.Windows.Forms.ListView" /> est dans mode virtuel et que l'état de sélection d'une plage d'éléments a été modifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Forms.ListView> n’est pas en mode virtuel, le <xref:System.Windows.Forms.ListView.ItemSelectionChanged> événement se produit.  
  
 Pour plus d’informations sur la gestion des événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce membre. Dans l’exemple, un gestionnaire d’événements indique l’occurrence de le <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> événement. Ce rapport vous aide à savoir quand l’événement se produit et peut vous aider à déboguer. Pour générer un rapport sur plusieurs événements ou sur les événements qui se produisent fréquemment, envisagez de remplacer <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> avec <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> ou ajouter le message à un élément <xref:System.Windows.Forms.TextBox>.  
  
 Pour exécuter l’exemple de code, collez-le dans un projet qui contient une instance du type <xref:System.Windows.Forms.ListView> nommé `ListView1`. Vérifiez que le Gestionnaire d’événements est associé à la <xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged> événement.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#482](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#482)]
 [!code-vb[System.Windows.Forms.EventExamples#482](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#482)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      </Docs>
    </Member>
    <Member MemberName="VirtualListSize">
      <MemberSignature Language="C#" Value="public int VirtualListSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualListSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualListSize" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualListSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VirtualListSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nombre d'objets <see cref="T:System.Windows.Forms.ListViewItem" /> contenus dans la liste en mode virtuel.</summary>
        <value>Nombre d'objets <see cref="T:System.Windows.Forms.ListViewItem" /> contenus dans <see cref="T:System.Windows.Forms.ListView" /> en mode virtuel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obtenir ou définir le <xref:System.Windows.Forms.ListView.VirtualListSize%2A> propriété lorsque <xref:System.Windows.Forms.ListView.VirtualMode%2A> la valeur `false` n’a aucun effet le <xref:System.Windows.Forms.ListView>.  
  
 Si <xref:System.Windows.Forms.ListView.VirtualMode%2A> a la valeur `true`et le <xref:System.Windows.Forms.ListView.VirtualListSize%2A> est supérieure à 0, vous devez gérer le <xref:System.Windows.Forms.ListView.RetrieveVirtualItem> événement, en fournissant une valide <xref:System.Windows.Forms.ListViewItem>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> a une valeur inférieure à 0.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> a la valeur <see langword="true" />, <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> est supérieur à 0 et <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> n'est pas géré.</exception>
        <altmember cref="P:System.Windows.Forms.ListView.VirtualMode" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VirtualMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool VirtualMode { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur indiquant si vous avez fourni vos propres opérations de gestion de données pour le contrôle <see cref="T:System.Windows.Forms.ListView" />.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Windows.Forms.ListView" /> utilise des opérations de gestion de données que vous fournissez ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Définition de la <xref:System.Windows.Forms.ListView.VirtualMode%2A> propriété `true` place le <xref:System.Windows.Forms.ListView> en mode virtuel. En mode virtuel, la normale <xref:System.Windows.Forms.ListView.Items%2A> collection n’est pas utilisée. Au lieu de cela, <xref:System.Windows.Forms.ListViewItem> objets sont créés dynamiquement en tant que la <xref:System.Windows.Forms.ListView> a besoin.  
  
 Mode virtuel peut être utile dans de nombreuses circonstances. Si un <xref:System.Windows.Forms.ListView> objet doit être rempli à partir d’une très grande collection déjà en mémoire, création d’un <xref:System.Windows.Forms.ListViewItem> de l’objet pour chaque entrée peut être inutile. En mode virtuel, seuls les éléments requis sont créés. Dans d’autres cas, les valeurs de la <xref:System.Windows.Forms.ListViewItem> objets peuvent doivent être recalculées fréquemment, et cette opération pour la collection entière produirait performances inacceptables. En mode virtuel, seuls les éléments requis sont calculés.  
  
 Pour pouvoir utiliser le mode virtuel, vous devez gérer le <xref:System.Windows.Forms.ListView.RetrieveVirtualItem> événement, qui est déclenché chaque fois que le <xref:System.Windows.Forms.ListView> requiert un élément. Ce gestionnaire d’événements doit créer le <xref:System.Windows.Forms.ListViewItem> objet appartient à l’index spécifié. En outre, le <xref:System.Windows.Forms.ListView.VirtualListSize%2A> propriété doit être définie à la taille de la liste virtuelle.  
  
 Gère la <xref:System.Windows.Forms.ListView.SearchForVirtualItem> événements permet les recherches en mode virtuel. Si cet événement n’est pas géré, le <xref:System.Windows.Forms.ListView.FindItemWithText%2A> et <xref:System.Windows.Forms.ListView.FindNearestItem%2A> méthodes retournent `null`.  
  
 Vous pouvez gérer le <xref:System.Windows.Forms.ListView.CacheVirtualItems> événement afin de maintenir un cache de <xref:System.Windows.Forms.ListViewItem> objets. Si le calcul ou la recherche pour créer un <xref:System.Windows.Forms.ListViewItem> objet est coûteux, le maintien d’un cache peut améliorer les performances.  
  
 Si le <xref:System.Windows.Forms.ListView.View%2A> est définie sur <xref:System.Windows.Forms.View.Tile>, la valeur est automatiquement remplacée par <xref:System.Windows.Forms.View.LargeIcon> lorsque <xref:System.Windows.Forms.ListView.VirtualMode%2A> a la valeur `true`.  
  
 En mode virtuel, le <xref:System.Windows.Forms.ListView.Items%2A> collecte est désactivée. Tente d’y accéder entraîne une <xref:System.InvalidOperationException>. Est de même de la <xref:System.Windows.Forms.ListView.CheckedItems%2A> collection et la <xref:System.Windows.Forms.ListView.SelectedItems%2A> collection. Si vous souhaitez récupérer les éléments sélectionnés ou activés, utilisez le <xref:System.Windows.Forms.ListView.SelectedIndices%2A> et <xref:System.Windows.Forms.ListView.CheckedIndices%2A> collections à la place.  
  
   
  
## Examples  
 Cet exemple illustre une simple <xref:System.Windows.Forms.ListView> dont le contenu est 10 000 premiers carrés. Il gère la recherche et utilise un cache pour améliorer les performances.  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListView.VirtualMode" /> a la valeur <see langword="true" /> et l'une des conditions suivantes existe :  
  
-   <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> est supérieur à 0 et <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> n'est pas géré.  
  
     - ou -  
  
-   <see cref="P:System.Windows.Forms.ListView.Items" />, <see cref="P:System.Windows.Forms.ListView.CheckedItems" /> ou <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> contient des éléments.  
  
     - ou -  
  
-   Des modifications sont apportées à <see cref="P:System.Windows.Forms.ListView.Items" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <see cref="T:System.Windows.Forms.Message" /> Windows à traiter.</param>
        <summary>Substitue <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>