<Type Name="IDesignerLoaderService" FullName="System.ComponentModel.Design.Serialization.IDesignerLoaderService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="91be6fb648bf803bf38fa96e6ee194581f86547f" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37698557" /></Metadata><TypeSignature Language="C#" Value="public interface IDesignerLoaderService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDesignerLoaderService" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDesignerLoaderService" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDesignerLoaderService" />
  <TypeSignature Language="F#" Value="type IDesignerLoaderService = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b1016-101">Fournit une interface qui peut étendre un chargeur de concepteur de sorte qu'il prenne en charge le chargement asynchrone de composants externes.</span><span class="sxs-lookup"><span data-stu-id="b1016-101">Provides an interface that can extend a designer loader to support asynchronous loading of external components.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1016-102">Un <xref:System.ComponentModel.Design.Serialization.DesignerLoader> peut implémenter cette interface pour gérer le chargement du concepteur qui implique des composants externes.</span><span class="sxs-lookup"><span data-stu-id="b1016-102">A <xref:System.ComponentModel.Design.Serialization.DesignerLoader> can implement this interface to manage designer loading that involves external components.</span></span> <span data-ttu-id="b1016-103">Cette interface permet également des composants externes de lancer un rechargement de l’aire de conception en appelant <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>.</span><span class="sxs-lookup"><span data-stu-id="b1016-103">This interface also allows external components to initiate a reload of the design surface by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload%2A>.</span></span> <span data-ttu-id="b1016-104">Un chargeur de concepteur n’a pas d’implémenter cette interface si elle ne nécessite pas de prise en charge pour le chargement asynchrone.</span><span class="sxs-lookup"><span data-stu-id="b1016-104">A designer loader does not have to implement this interface if it does not require support for asynchronous loading.</span></span>  
  
 <span data-ttu-id="b1016-105">Concepteur de chargement à l’aide d’une implémentation personnalisée de la <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> peut se produire dans plusieurs façons.</span><span class="sxs-lookup"><span data-stu-id="b1016-105">Designer loading using a custom implementation of the <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> can occur in a variety of ways.</span></span> <span data-ttu-id="b1016-106">Composants externes parfois sont impliqués dans le processus de chargement.</span><span class="sxs-lookup"><span data-stu-id="b1016-106">Sometimes external components are involved in the loading process.</span></span> <span data-ttu-id="b1016-107">Pour faciliter le chargement avec des dépendances externes, l’interface de service du chargeur de concepteur fournit un mécanisme qui détermine quand le chargement est terminé et permet à chaque partie du chargement de signaler qu’il a terminé.</span><span class="sxs-lookup"><span data-stu-id="b1016-107">To facilitate loading with external dependencies, the designer loader service interface provides a mechanism that determines when loading is complete and allows each portion of loading to signal that it has completed.</span></span> <span data-ttu-id="b1016-108">Le <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> détermine généralement lorsque le chargement est terminé en testant un compteur qui comptabilise le nombre de dépendances de chargement restantes.</span><span class="sxs-lookup"><span data-stu-id="b1016-108">The <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService> typically determines when loading is complete by testing a counter that tracks the number of load dependencies remaining.</span></span> <span data-ttu-id="b1016-109">Lorsque chaque partie de la charge est terminée, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> est appelée et le service décrémente le compteur.</span><span class="sxs-lookup"><span data-stu-id="b1016-109">When each portion of the load completes, <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called, and the service decrements the counter.</span></span> <span data-ttu-id="b1016-110">Pour définir le nombre de processus de chargement dépendants, appelez <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> une fois pour chaque processus de chargement qui appelle <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> lorsque son chargement est terminé.</span><span class="sxs-lookup"><span data-stu-id="b1016-110">To set the number of dependent load processes, call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each load process that calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> when its loading is complete.</span></span> <span data-ttu-id="b1016-111">Lorsque le chargement final est terminé, les appels de service <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> sur l’hôte du chargeur.</span><span class="sxs-lookup"><span data-stu-id="b1016-111">When the final loading is complete, the service calls <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad%2A> on the loader host.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddLoadDependency">
      <MemberSignature Language="C#" Value="public void AddLoadDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLoadDependency() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddLoadDependency ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddLoadDependency();" />
      <MemberSignature Language="F#" Value="abstract member AddLoadDependency : unit -&gt; unit" Usage="iDesignerLoaderService.AddLoadDependency " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1016-112">Inscrit un composant externe comme appartenant au processus de chargement managé par cette interface.</span><span class="sxs-lookup"><span data-stu-id="b1016-112">Registers an external component as part of the load process managed by this interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1016-113">Appelez <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> une fois pour chaque objet externe participant dans le processus de chargement.</span><span class="sxs-lookup"><span data-stu-id="b1016-113">Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A> once for each external object participating in the load process.</span></span> <span data-ttu-id="b1016-114"><xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> est appelée lorsque le travail au processus de chargement est effectué.</span><span class="sxs-lookup"><span data-stu-id="b1016-114"><xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> is called when the work of the load process is done.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DependentLoadComplete">
      <MemberSignature Language="C#" Value="public void DependentLoadComplete (bool successful, System.Collections.ICollection errorCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DependentLoadComplete(bool successful, class System.Collections.ICollection errorCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DependentLoadComplete (successful As Boolean, errorCollection As ICollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DependentLoadComplete(bool successful, System::Collections::ICollection ^ errorCollection);" />
      <MemberSignature Language="F#" Value="abstract member DependentLoadComplete : bool * System.Collections.ICollection -&gt; unit" Usage="iDesignerLoaderService.DependentLoadComplete (successful, errorCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="successful" Type="System.Boolean" />
        <Parameter Name="errorCollection" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="successful"><span data-ttu-id="b1016-115"><see langword="true" /> si le chargement du concepteur réussit ; <see langword="false" /> si des erreurs ont empêché la fin du chargement.</span><span class="sxs-lookup"><span data-stu-id="b1016-115"><see langword="true" /> if the load of the designer is successful; <see langword="false" /> if errors prevented the load from finishing.</span></span></param>
        <param name="errorCollection"><span data-ttu-id="b1016-116">Collection d'erreurs s'étant éventuellement produites pendant le chargement.</span><span class="sxs-lookup"><span data-stu-id="b1016-116">A collection of errors that occurred during the load, if any.</span></span> <span data-ttu-id="b1016-117">Si aucune erreur ne s'est produite, on passe une collection vide ou <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="b1016-117">If no errors occurred, pass either an empty collection or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="b1016-118">Signale qu'un chargement dépendant est terminé.</span><span class="sxs-lookup"><span data-stu-id="b1016-118">Signals that a dependent load has finished.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1016-119">Cette méthode est appelée pour signaler qu’une opération de chargement dépendante est terminée.</span><span class="sxs-lookup"><span data-stu-id="b1016-119">This method is called to signal that a dependent loading operation has completed.</span></span> <span data-ttu-id="b1016-120">Appelez <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> une fois pour chaque processus a été inscrit en appelant <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, qui est déjà terminée.</span><span class="sxs-lookup"><span data-stu-id="b1016-120">Call <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete%2A> once for every process that was registered by calling <xref:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency%2A>, which has already completed.</span></span>  
  
 <span data-ttu-id="b1016-121">Réussit si le chargement dépendant, l’appelant affecte la `successful` paramètre `true` et passe une collection vide ou `null` à la `errorCollection` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b1016-121">If the dependent load succeeds, the caller sets the `successful` parameter to `true` and passes either an empty collection or `null` to the `errorCollection` parameter.</span></span> <span data-ttu-id="b1016-122">Si le chargement dépendant rencontre des erreurs, l’appelant affecte la `successful` paramètre `false` et passe une collection d’exceptions qui indiquent l’ou les raisons d’échec de la `errorCollection` paramètre.</span><span class="sxs-lookup"><span data-stu-id="b1016-122">If the dependent load encounters errors, the caller sets the `successful` parameter to `false` and passes a collection of exceptions that indicate the reason or reasons for failure to the `errorCollection` parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="public bool Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload" />
      <MemberSignature Language="VB.NET" Value="Public Function Reload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reload();" />
      <MemberSignature Language="F#" Value="abstract member Reload : unit -&gt; bool" Usage="iDesignerLoaderService.Reload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b1016-123">Recharge le document de design.</span><span class="sxs-lookup"><span data-stu-id="b1016-123">Reloads the design document.</span></span></summary>
        <returns><span data-ttu-id="b1016-124"><see langword="true" /> si la demande de rechargement est acceptée, ou <see langword="false" /> si le chargeur ne permet pas le rechargement.</span><span class="sxs-lookup"><span data-stu-id="b1016-124"><see langword="true" /> if the reload request is accepted, or <see langword="false" /> if the loader does not allow the reload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b1016-125">N’importe quel objet peut appeler cette méthode pour demander que le chargeur recharge le document de design.</span><span class="sxs-lookup"><span data-stu-id="b1016-125">Any object can call this method to request that the loader reload the design document.</span></span> <span data-ttu-id="b1016-126">Si le chargeur prend en charge le rechargement et est conforme avec le rechargement, le chargeur de concepteur peut retourner `true`.</span><span class="sxs-lookup"><span data-stu-id="b1016-126">If the loader supports reloading and complies with the reload, the designer loader can return `true`.</span></span> <span data-ttu-id="b1016-127">Sinon, elle retourne `false`, ce qui indique que le rechargement ne se produira pas.</span><span class="sxs-lookup"><span data-stu-id="b1016-127">Otherwise, it returns `false`, indicating that the reload will not occur.</span></span> <span data-ttu-id="b1016-128">Les appelants ne peuvent pas reposer sur le rechargement effectue immédiatement. le chargeur de concepteur peut planifier cette opération à un autre moment, ou il peut tenter de recharger à la fois.</span><span class="sxs-lookup"><span data-stu-id="b1016-128">Callers cannot rely on the reload happening immediately; the designer loader can schedule this for some other time, or it can try to reload at once.</span></span>  
  
 <span data-ttu-id="b1016-129">L’appelant peut afficher un message à l’utilisateur si le concepteur ne peut pas être rechargé.</span><span class="sxs-lookup"><span data-stu-id="b1016-129">The caller can display a message to the user if the designer cannot be reloaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>