<Type Name="ExpressionContext" FullName="System.ComponentModel.Design.Serialization.ExpressionContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b43ece75e54589dff9cf246ce425cfe2775514ac" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30367593" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ExpressionContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExpressionContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.ExpressionContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExpressionContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionContext sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit un moyen de passer l'état de contexte à des sérialiseurs. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.ComponentModel.Design.Serialization.ExpressionContext> est placé sur la pile de contexte et contient l’expression la plus pertinente pendant la sérialisation. Le code c# suivant illustre une assignation.  
  
```csharp  
button1.Text = "Hello";  
```  
  
 Pendant la sérialisation, plusieurs sérialiseurs sont responsables de la création de cette instruction unique. Un de ces sérialiseurs est chargé de créer « Hello ». Il existe certains cas, que le sérialiseur peut connaître le contexte dans lequel il crée son expression. Dans l’exemple précédent, ce contexte n’est pas nécessaire. Le code c# suivant illustre une situation dans laquelle la connaissance du contexte est nécessaire.  
  
```csharp  
button1.Text = rm.GetString("button1_Text");  
```  
  
 Dans ce cas, le sérialiseur responsable de la création de l’expression de ressource doit être informé des noms des objets cibles. La <xref:System.ComponentModel.Design.Serialization.ExpressionContext> classe peut être utilisée pour cela. Comme chaque sérialiseur crée une expression et appelle un sérialiseur pour gérer une plus petite partie de l’instruction dans son ensemble, le sérialiseur exécute un push de contexte d’une expression sur la pile de contexte. Chaque contexte de l’expression a une propriété parent qui localise le contexte de l’expression suivant dans la pile. Cela fournit une fonction de parcours pratique.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.CodeDom.CodeExpression" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As CodeExpression, expressionType As Type, owner As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionContext(System::CodeDom::CodeExpression ^ expression, Type ^ expressionType, System::Object ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression">Expression de code donnée.</param>
        <param name="expressionType">Type de l’expression de code donnée.</param>
        <param name="owner">Propriétaire de l’expression de code donnée.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> avec l’expression et le propriétaire donnés.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" />, <paramref name="expressionType" /> ou <paramref name="owner" /> est <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner, object presetValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner, object presetValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (expression As CodeExpression, expressionType As Type, owner As Object, presetValue As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpressionContext(System::CodeDom::CodeExpression ^ expression, Type ^ expressionType, System::Object ^ owner, System::Object ^ presetValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
        <Parameter Name="presetValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression">Expression de code donnée.</param>
        <param name="expressionType">Type de l’expression de code donnée.</param>
        <param name="owner">Propriétaire de l’expression de code donnée.</param>
        <param name="presetValue">Valeur prédéfinie de l’expression de code donnée.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> avec une valeur actuelle.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" />, <paramref name="expressionType" /> ou <paramref name="owner" /> est <see langword="null" />.</exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Expression" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Expression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Expression As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeExpression ^ Expression { System::CodeDom::CodeExpression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'expression que ce contexte représente.</summary>
        <value>Expression que ce contexte représente.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionType">
      <MemberSignature Language="C#" Value="public Type ExpressionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ExpressionType" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ExpressionType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Type" /> de l'expression.</summary>
        <value>
          <see cref="T:System.Type" /> de l'expression.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser <xref:System.ComponentModel.Design.Serialization.ExpressionContext> pour déterminer si une conversion est nécessaire lors de l’assignation à l’expression.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public object Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Owner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Owner As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Owner { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'objet propriétaire de cette expression.</summary>
        <value>Objet propriétaire de cette expression.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si l’expression est une référence de propriété à la <xref:System.Windows.Forms.Control.Text%2A> propriété d’une instance de <xref:System.Windows.Forms.Button> appelé `button1`, <xref:System.ComponentModel.Design.Serialization.ExpressionContext.Owner%2A> retourne `button1`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="PresetValue">
      <MemberSignature Language="C#" Value="public object PresetValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PresetValue" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PresetValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ PresetValue { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur prédéfinie d'une expression.</summary>
        <value>Valeur prédéfinie de cette expression ou <see langword="null" /> si elle n'est pas assignée.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contient la valeur prédéfinie d’une expression, s’il existe. Par exemple, si l’expression est une expression de référence de propriété faisant référence à la <xref:System.Windows.Forms.Control.Controls%2A> propriété d’un <xref:System.Windows.Forms.Button>, le <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> propriété contient l’instance de la <xref:System.Windows.Forms.Control.Controls%2A> propriété. Il s’agit, car la propriété est en lecture seule et prédéfinie par l’objet doit contenir une valeur. En revanche, une propriété telle que <xref:System.Windows.Forms.Control.Text%2A> ou <xref:System.Windows.Forms.Control.Visible%2A> n’a pas de valeur prédéfinie et, par conséquent la <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> propriété renvoie `null`.  
  
 Le code c# suivant montre comment les sérialiseurs peuvent utiliser ces informations pour guider la sérialisation.  
  
```csharp  
Padding p = new Padding();  
p.Left = 5;  
button1.Padding = p;  
  
button1.Padding.Left = 5;  
```  
  
 Le sérialiseur de la <xref:System.Windows.Forms.Padding> structure doit être informé s’il doit générer le premier ou le deuxième formulaire. La première forme est générée par défaut. La deuxième forme est générée uniquement s’il existe un <xref:System.ComponentModel.Design.Serialization.ExpressionContext> sur la pile de contexte qui contient un <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> égale à la valeur de le <xref:System.Windows.Forms.Padding> en cours de sérialisation.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
  </Members>
</Type>