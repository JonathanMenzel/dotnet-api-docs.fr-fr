<Type Name="ImmutableArray&lt;T&gt;" FullName="System.Collections.Immutable.ImmutableArray&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb3eb9316a486d687a6b61ea3c7c354d772aeb14" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39793086" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ImmutableArray&lt;T&gt; : IEquatable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;, System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList, System.Collections.Immutable.IImmutableList&lt;T&gt;, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ImmutableArray`1&lt;T&gt; extends System.ValueType implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.Collections.Immutable.IImmutableList`1&lt;!T&gt;, class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IEquatable`1&lt;valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt;&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableArray`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure ImmutableArray(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IEquatable(Of ImmutableArray(Of T)), IImmutableList(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T), IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class ImmutableArray : IEquatable&lt;System::Collections::Immutable::ImmutableArray&lt;T&gt;&gt;, System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList, System::Collections::Immutable::IImmutableList&lt;T&gt;, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type ImmutableArray&lt;'T&gt; = struct&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IList&lt;'T&gt;&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface IImmutableList&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Immutable.IImmutableList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplay,nq}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="f97c8-101">Type d’élément stocké par le tableau.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f97c8-101">The type of element stored by the array.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="f97c8-102">Représente un tableau qui est immuable ; ce qui signifie qu’il ne peut pas être modifié une fois créé.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f97c8-102">Represents an array that is immutable; meaning it cannot be changed once it is created.</span>
      </span>
      <span data-ttu-id="f97c8-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">à propos des collections immuables et de leur installation</see>)</span>
      <span class="sxs-lookup">
        <span data-stu-id="f97c8-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">about immutable collections and how to install</see>)</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-104">Il existe différents scénarios mieux à <xref:System.Collections.Immutable.ImmutableArray%601> et d’autres bonnes pour <xref:System.Collections.Immutable.ImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-104">There are different scenarios best for <xref:System.Collections.Immutable.ImmutableArray%601> and others best for <xref:System.Collections.Immutable.ImmutableList%601>.</span></span>  
  
 <span data-ttu-id="f97c8-105">Raisons d’utiliser le tableau immuable :</span><span class="sxs-lookup"><span data-stu-id="f97c8-105">Reasons to use immutable array:</span></span>  
  
-   <span data-ttu-id="f97c8-106">Il est rare de la mise à jour les données ou le nombre d’éléments est resté relativement faible (inférieure à 16 éléments)</span><span class="sxs-lookup"><span data-stu-id="f97c8-106">Updating the data is rare or the number of elements is quite small (less than 16 items)</span></span>  
  
-   <span data-ttu-id="f97c8-107">Vous devez être en mesure d’effectuer une itération sur les données dans les sections critiques de performances</span><span class="sxs-lookup"><span data-stu-id="f97c8-107">You need to be able to iterate over the data in performance critical sections</span></span>  
  
-   <span data-ttu-id="f97c8-108">Vous disposez de nombreuses instances de collections immuables et vous ne pouvez pas vous permettre d’en conservant les données dans des arborescences</span><span class="sxs-lookup"><span data-stu-id="f97c8-108">You have many instances of immutable collections and you can’t afford keeping the data in trees</span></span>  
  
 <span data-ttu-id="f97c8-109">Raisons d’utiliser la liste immuable :</span><span class="sxs-lookup"><span data-stu-id="f97c8-109">Reasons to use immutable list:</span></span>  
  
-   <span data-ttu-id="f97c8-110">Il est courant de la mise à jour les données ou le nombre d’éléments n’est pas supposé être petit</span><span class="sxs-lookup"><span data-stu-id="f97c8-110">Updating the data is common or the number of elements isn’t expected to be small</span></span>  
  
-   <span data-ttu-id="f97c8-111">La mise à jour de la collection est plus critique pour les performances que l’itération du contenu</span><span class="sxs-lookup"><span data-stu-id="f97c8-111">Updating the collection is more performance critical than iterating the contents</span></span>  
  
 <span data-ttu-id="f97c8-112">Le tableau suivant récapitule les caractéristiques de performance <xref:System.Collections.Immutable.ImmutableArray%601></span><span class="sxs-lookup"><span data-stu-id="f97c8-112">The following table summarizes the performance characteristics of <xref:System.Collections.Immutable.ImmutableArray%601></span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="f97c8-113">**Opération**</span><span class="sxs-lookup"><span data-stu-id="f97c8-113">**Operation**</span></span>|<span data-ttu-id="f97c8-114"><xref:System.Collections.Immutable.ImmutableArray%601> Complexité</span><span class="sxs-lookup"><span data-stu-id="f97c8-114"><xref:System.Collections.Immutable.ImmutableArray%601> Complexity</span></span>|<span data-ttu-id="f97c8-115"><xref:System.Collections.Immutable.ImmutableList%601> Complexité</span><span class="sxs-lookup"><span data-stu-id="f97c8-115"><xref:System.Collections.Immutable.ImmutableList%601> Complexity</span></span>|<span data-ttu-id="f97c8-116">**Commentaires**</span><span class="sxs-lookup"><span data-stu-id="f97c8-116">**Comments**</span></span>|  
|<span data-ttu-id="f97c8-117">**Item**</span><span class="sxs-lookup"><span data-stu-id="f97c8-117">**Item**</span></span>|<span data-ttu-id="f97c8-118">O (1)</span><span class="sxs-lookup"><span data-stu-id="f97c8-118">O(1)</span></span>|<span data-ttu-id="f97c8-119">O (log n)</span><span class="sxs-lookup"><span data-stu-id="f97c8-119">O(log n)</span></span>|<span data-ttu-id="f97c8-120">Directement les index dans le tableau sous-jacent</span><span class="sxs-lookup"><span data-stu-id="f97c8-120">Directly index into the underlying array</span></span>|  
|<span data-ttu-id="f97c8-121">**Add()**</span><span class="sxs-lookup"><span data-stu-id="f97c8-121">**Add()**</span></span>|<span data-ttu-id="f97c8-122">O (n)</span><span class="sxs-lookup"><span data-stu-id="f97c8-122">O(n)</span></span>|<span data-ttu-id="f97c8-123">O (log n)</span><span class="sxs-lookup"><span data-stu-id="f97c8-123">O(log n)</span></span>|<span data-ttu-id="f97c8-124">Nécessite la création d’un tableau</span><span class="sxs-lookup"><span data-stu-id="f97c8-124">Requires creating a new array</span></span>|  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="f97c8-125">Ce type est thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f97c8-125">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (item As T) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Add(T item);" />
      <MemberSignature Language="F#" Value="member this.Add : 'T -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Add item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-126">Élément à ajouter à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-126">The item to be added to the end of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-127">Retourne une copie du tableau d’origine avec l’élément spécifié ajouté à la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-127">Returns a copy of the original array with the specified item added to the end.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-128">Nouveau tableau avec l’élément spécifié ajouté à la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-128">A new array with the specified item added to the end.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As IEnumerable(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="f97c8-129">Éléments à ajouter au tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-129">The elements to add to the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-130">Retourne une copie du tableau d’origine avec les éléments spécifiés ajoutés à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-130">Returns a copy of the original array with the specified elements added to the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-131">Nouveau tableau avec les éléments ajoutés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-131">A new array with the elements added.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; AddRange (System.Collections.Immutable.ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; AddRange(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; AddRange(System::Collections::Immutable::ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="f97c8-132">Éléments à ajouter au tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-132">The elements to add to the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-133">Retourne une copie du tableau d’origine avec les éléments spécifiés ajoutés à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-133">Returns a copy of the original array with the specified elements added to the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-134">Nouveau tableau avec les éléments ajoutés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-134">A new array with the elements added.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;TOther&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;TOther&gt; As&lt;TOther&gt; () where TOther : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TOther&gt; As&lt;class TOther&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.As``1" />
      <MemberSignature Language="VB.NET" Value="Public Function As(Of TOther As Class) () As ImmutableArray(Of TOther)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOther&gt;&#xA; where TOther : class System::Collections::Immutable::ImmutableArray&lt;TOther&gt; As();" />
      <MemberSignature Language="F#" Value="member this.As : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'Other (requires 'Other : null)&gt; (requires 'Other : null)" Usage="immutableArray.As " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;TOther&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOther">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TOther">
          <span data-ttu-id="f97c8-135">Type d’élément de tableau à retourner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-135">The type of array element to return.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="f97c8-136">Retourne un nouveau tableau immuable qui contient les éléments de ce cast de tableau d’un type différent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-136">Returns a new immutable array that contains the elements of this array cast to a different type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-137">Tableau immuable qui contient les éléments de ce cast de tableau d’un type différent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-137">An immutable array that contains the elements of this array, cast to a different type.</span>
          </span>
          <span data-ttu-id="f97c8-138">Si le cast échoue, retourne un tableau dont la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> renvoie <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-138">If the cast fails, returns an array whose <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-139">Tableaux de types d’éléments dérivés pouvant être castés en tableaux de types d’élément de base sans réaffecter le tableau.</span><span class="sxs-lookup"><span data-stu-id="f97c8-139">Arrays of derived elements types can be cast to arrays of base element types without reallocating the array.</span></span>  
  
 <span data-ttu-id="f97c8-140">Effectue un upcast d’élément créé avec le <xref:System.Collections.Immutable.ImmutableArray.Create%2A> méthode peut être inversée à l’aide de la <xref:System.Collections.Immutable.ImmutableArray%601.As%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="f97c8-140">Upcasts of element created with the <xref:System.Collections.Immutable.ImmutableArray.Create%2A> method can be reversed using the <xref:System.Collections.Immutable.ImmutableArray%601.As%2A> method.</span></span> <span data-ttu-id="f97c8-141">Toutefois, un cast aval réussit uniquement lorsqu’il inverse un upcast préalable.</span><span class="sxs-lookup"><span data-stu-id="f97c8-141">However, a downcast is only successful when it reverses a prior upcast.</span></span> <span data-ttu-id="f97c8-142">Opération.</span><span class="sxs-lookup"><span data-stu-id="f97c8-142">operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CastArray&lt;TOther&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;TOther&gt; CastArray&lt;TOther&gt; () where TOther : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TOther&gt; CastArray&lt;class TOther&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1" />
      <MemberSignature Language="VB.NET" Value="Public Function CastArray(Of TOther As Class) () As ImmutableArray(Of TOther)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOther&gt;&#xA; where TOther : class System::Collections::Immutable::ImmutableArray&lt;TOther&gt; CastArray();" />
      <MemberSignature Language="F#" Value="member this.CastArray : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'Other (requires 'Other : null)&gt; (requires 'Other : null)" Usage="immutableArray.CastArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;TOther&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOther">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TOther">To be added.</typeparam>
        <summary>
          <span data-ttu-id="f97c8-143">Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> en effectuant un cast du tableau sous-jacent vers un tableau de type <typeparameter name="TOther"><paramref name="TOther" /></typeparameter>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-143">Initializes a new instance of the <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> struct by casting the underlying             array to an array of type <typeparameter name="TOther"><paramref name="TOther" /></typeparameter> .</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="f97c8-144">Levé si le cast est non conforme.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-144">Thrown if the cast is illegal.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CastUp&lt;TDerived&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; CastUp&lt;TDerived&gt; (System.Collections.Immutable.ImmutableArray&lt;TDerived&gt; items) where TDerived : class, T;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; CastUp&lt;class (!T) TDerived&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!TDerived&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CastUp(Of TDerived As {Class, T}) (items As ImmutableArray(Of TDerived)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDerived&gt;&#xA; where TDerived : class, T static System::Collections::Immutable::ImmutableArray&lt;T&gt; CastUp(System::Collections::Immutable::ImmutableArray&lt;TDerived&gt; items);" />
      <MemberSignature Language="F#" Value="static member CastUp : System.Collections.Immutable.ImmutableArray&lt;#'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.CastUp items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDerived">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <BaseTypeName>T</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;TDerived&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDerived">To be added.</typeparam>
        <param name="items">
          <span data-ttu-id="f97c8-145">Tableau avec lequel initialiser le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-145">The array to initialize the array with.</span>
          </span>
          <span data-ttu-id="f97c8-146">Aucune copie n'est effectuée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-146">No copy is made.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-147">Initialise une nouvelle instance du struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> en fonction du contenu d’une instance existante, ce qui permet à un cast statique covariant de réutiliser efficacement le tableau existant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-147">Initializes a new instance of the <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> struct based on the contents             of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.</span>
          </span>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-148">Effectue un upcast covariant à partir de cette méthode peut être inversé en appelant le <xref:System.Collections.Immutable.ImmutableArray%601.As%2A> ou <xref:System.Collections.Immutable.ImmutableArray%601.CastArray%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="f97c8-148">Covariant upcasts from this method may be reversed by calling the <xref:System.Collections.Immutable.ImmutableArray%601.As%2A> or <xref:System.Collections.Immutable.ImmutableArray%601.CastArray%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-149">Retourne un tableau avec tous les éléments supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-149">Returns an array with all the elements removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-150">Tableau avec tous les éléments supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-150">An array with all of the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="immutableArray.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-151">Élément à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-151">The item to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-152">Détermine si l’élément spécifié existe dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-152">Determines whether the specified item exists in the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-153">
            <see langword="true" /> si l’élément spécifié a été trouvé dans le tableau ; dans le cas contraire <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-153">
              <see langword="true" /> if the specified item was found in the array; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] -&gt; unit" Usage="immutableArray.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="f97c8-154">Tableau dans lequel effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-154">The array to copy to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-155">Copie le contenu de ce tableau dans le tableau spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-155">Copies the contents of this array to the specified array.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] destination, int destinationIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] destination, int32 destinationIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As T(), destinationIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ destination, int destinationIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="immutableArray.CopyTo (destination, destinationIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="T[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="f97c8-156">Tableau dans lequel effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-156">The array to copy to.</span>
          </span>
        </param>
        <param name="destinationIndex">
          <span data-ttu-id="f97c8-157">Index dans le <c>tableau</c> à partir duquel la copie commence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-157">The index in <c>array</c> where copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-158">Copie le contenu de ce tableau dans le tableau spécifié en commençant à l’index de destination spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-158">Copies the contents of this array to the specified array starting at the specified destination index.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int sourceIndex, T[] destination, int destinationIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 sourceIndex, !T[] destination, int32 destinationIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (sourceIndex As Integer, destination As T(), destinationIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int sourceIndex, cli::array &lt;T&gt; ^ destination, int destinationIndex, int length);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * 'T[] * int * int -&gt; unit" Usage="immutableArray.CopyTo (sourceIndex, destination, destinationIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="T[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceIndex">
          <span data-ttu-id="f97c8-159">Index de ce tableau où la copie commence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-159">The index of this array where copying begins.</span>
          </span>
        </param>
        <param name="destination">
          <span data-ttu-id="f97c8-160">Tableau dans lequel effectuer la copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-160">The array to copy to.</span>
          </span>
        </param>
        <param name="destinationIndex">
          <span data-ttu-id="f97c8-161">Index dans le <c>tableau</c> à partir duquel la copie commence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-161">The index in <c>array</c> where copying begins.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="f97c8-162">Nombre d’éléments à copier à partir de ce tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-162">The number of elements to copy from this array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-163">Copie les éléments spécifiés de ce tableau dans le tableau spécifié à l’index de début.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-163">Copies the specified items in this array to the specified array at the specified starting index.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly System.Collections.Immutable.ImmutableArray&lt;T&gt; Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="F:System.Collections.Immutable.ImmutableArray`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As ImmutableArray(Of T) " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Collections::Immutable::ImmutableArray&lt;T&gt; Empty;" />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-164">Obtient un tableau immuable vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-164">Gets an empty immutable array.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Collections.Immutable.ImmutableArray&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Collections::Immutable::ImmutableArray&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="immutableArray.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="f97c8-165">Objet à comparer à cet objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-165">An object to compare with this object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-166">Indique si le tableau spécifié est égal à ce tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-166">Indicates whether specified array is equal to this array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-167">
            <see langword="true" /> si <paramref name="other" /> est égal à ce tableau ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-167">
              <see langword="true" /> if <paramref name="other" /> is equal to this array; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="immutableArray.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f97c8-168">Le <see cref="T:System.Object" /> à comparer à ce tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-168">The <see cref="T:System.Object" /> to compare with this array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-169">Détermine si ce tableau est égal à l’objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-169">Determines if this array is equal to the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-170">
            <see langword="true" /> si ce tableau est égal à <paramref name="obj" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-170">
              <see langword="true" /> if this array is equal to <paramref name="obj" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ImmutableArray(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Enumerator" Usage="immutableArray.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-171">Retourne un énumérateur qui itère au sein du contenu du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-171">Returns an enumerator that iterates through the contents of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-172">Énumérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-172">An enumerator.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="immutableArray.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-173">Retourne un code de hachage pour cette instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-173">Returns a hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-174">Code de hachage pour cette instance, convient à une utilisation dans des algorithmes de hachage et des structures de données telles qu'une table de hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-174">A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="immutableArray.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-175">Élément à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-175">The item to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-176">Recherche l’élément spécifié dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-176">Searches the array for the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-177">Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-177">The zero-based index position of the item if it is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int -&gt; int" Usage="immutableArray.IndexOf (item, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-178">Élément à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-178">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="f97c8-179">Index à partir duquel commence la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-179">The index at which to begin the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-180">Recherche l’élément spécifié dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-180">Searches the array for the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-181">Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-181">The zero-based index position of the item if it is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int startIndex, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 startIndex, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, startIndex As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int startIndex, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="immutableArray.IndexOf (item, startIndex, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-182">Élément à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-182">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="f97c8-183">Index à partir duquel commence la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-183">The index at which to begin the search.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="f97c8-184">Comparateur d’égalité à utiliser dans la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-184">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-185">Recherche l’élément spécifié dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-185">Searches the array for the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-186">Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-186">The zero-based index position of the item if it is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int * int -&gt; int" Usage="immutableArray.IndexOf (item, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-187">Élément à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-187">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="f97c8-188">Index à partir duquel commence la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-188">The index at which to begin the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="f97c8-189">Nombre d'éléments à explorer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-189">The number of elements to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-190">Recherche l’élément spécifié dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-190">Searches the array for the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-191">Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-191">The zero-based index position of the item if it is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int startIndex, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item, int32 startIndex, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, startIndex As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item, int startIndex, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int&#xA;override this.IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="immutableArray.IndexOf (item, startIndex, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-192">Élément à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-192">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="f97c8-193">Index à partir duquel commence la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-193">The index at which to begin the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="f97c8-194">Nombre d'éléments à explorer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-194">The number of elements to search.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="f97c8-195">Comparateur d’égalité à utiliser dans la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-195">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-196">Recherche l’élément spécifié dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-196">Searches the array for the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-197">Position d’index de base zéro de l’élément s’il est trouvé, ou -1 s’il est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-197">The zero-based index position of the item if it is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, item As T) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Insert(int index, T item);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * 'T -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-198">Index 0 dans le tableau auquel le nouvel élément doit être ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-198">The 0-based index into the array at which the new item should be added.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="f97c8-199">Élément à insérer au début du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-199">The item to insert at the start of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-200">Retourne un nouveau tableau avec la valeur spécifiée à la position spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-200">Returns a new array with the specified value inserted at the specified position.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-201">Nouveau tableau avec l’élément inséré à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-201">A new array with the item inserted at the specified index.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As IEnumerable(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.InsertRange (index, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-202">Index auquel insérer la valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-202">The index at which to insert the value.</span>
          </span>
        </param>
        <param name="items">
          <span data-ttu-id="f97c8-203">Éléments à insérer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-203">The elements to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-204">Insère les valeurs spécifiées à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-204">Inserts the specified values at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-205">Nouveau tableau immuable avec les éléments insérés à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-205">A new immutable array with the items inserted at the specified index.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; InsertRange (int index, System.Collections.Immutable.ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; InsertRange(int32 index, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; InsertRange(int index, System::Collections::Immutable::ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.InsertRange (index, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-206">Index auquel insérer la valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-206">The index at which to insert the value.</span>
          </span>
        </param>
        <param name="items">
          <span data-ttu-id="f97c8-207">Éléments à insérer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-207">The elements to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-208">Insère les valeurs spécifiées à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-208">Inserts the specified values at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-209">Nouveau tableau immuable avec les éléments insérés à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-209">A new immutable array with the items inserted at the specified index.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-210">Obtient une valeur qui indique si ce tableau a été déclaré mais non initialisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-210">Gets a value indicating whether this array was declared but not initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f97c8-211">
            <see langword="true" /> pour indiquer que le <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est <see langword="null" /> ; sinon, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-211">
              <see langword="true" /> to indicate the <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> is <see langword="null" />; otherwise, false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultOrEmpty">
      <MemberSignature Language="C#" Value="public bool IsDefaultOrEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefaultOrEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDefaultOrEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefaultOrEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefaultOrEmpty : bool" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.IsDefaultOrEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-212">Obtient une valeur indiquant si ce <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est vide ou n’est pas initialisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-212">Gets a value indicating whether this <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> is empty or is not initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f97c8-213">
            <see langword="true" /> pour indiquer que le <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est <see langword="null" /> ou <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" /> ; sinon, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-213">
              <see langword="true" /> to indicate the <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> is <see langword="null" /> or <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />; otherwise, false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-214">Obtient une valeur indiquant si ce <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est vide.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-214">Gets a value indicating whether this <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f97c8-215">
            <see langword="true" /> pour indiquer que le <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> est vide ; sinon, false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-215">
              <see langword="true" /> to indicate the <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> is empty; otherwise, false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-216">Index de base zéro de l'élément à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-216">The zero-based index of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-217">Obtient l’élément à l’index spécifié dans le tableau immuable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-217">Gets the element at the specified index in the immutable array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f97c8-218">Élément à l’index spécifié dans le tableau immuable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-218">The element at the specified index in the immutable array.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemRef">
      <MemberSignature Language="C#" Value="public T&amp; ItemRef (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) ItemRef(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ItemRef (index As Integer) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T&amp; ^ ItemRef(int index);" />
      <MemberSignature Language="F#" Value="member this.ItemRef : int -&gt; T&amp;" Usage="immutableArray.ItemRef index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-2.1">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T -&gt; int" Usage="immutableArray.LastIndexOf item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-219">Élément à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-219">The item to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-220">Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-220">Searches the array for the specified item; starting at the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-221">Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-221">The 0-based index into the array where the item was found; or -1 if it could not be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int -&gt; int" Usage="immutableArray.LastIndexOf (item, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-222">Élément à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-222">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="f97c8-223">Index à partir duquel commence la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-223">The index at which to begin the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-224">Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-224">Searches the array for the specified item; starting at the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-225">Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-225">The 0-based index into the array where the item was found; or -1 if it could not be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int * int -&gt; int" Usage="immutableArray.LastIndexOf (item, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-226">Élément à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-226">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="f97c8-227">Index à partir duquel commence la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-227">The index at which to begin the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="f97c8-228">Nombre d'éléments à explorer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-228">The number of elements to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-229">Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-229">Searches the array for the specified item; starting at the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-230">Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-230">The 0-based index into the array where the item was found; or -1 if it could not be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int startIndex, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(!T item, int32 startIndex, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, startIndex As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(T item, int startIndex, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int&#xA;override this.LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="immutableArray.LastIndexOf (item, startIndex, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-231">Élément à rechercher.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-231">The item to search for.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="f97c8-232">Index à partir duquel commence la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-232">The index at which to begin the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="f97c8-233">Nombre d'éléments à explorer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-233">The number of elements to search.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="f97c8-234">Comparateur d’égalité à utiliser dans la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-234">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-235">Recherche l’élément spécifié dans le tableau ; en commençant à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-235">Searches the array for the specified item; starting at the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-236">Index de base 0 dans le tableau dans lequel l’élément a été trouvé ; ou -1 s’il est introuvable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-236">The 0-based index into the array where the item was found; or -1 if it could not be found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-237">Obtient le nombre d’éléments contenus dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-237">Gets the number of elements in the array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f97c8-238">Nombre d’éléments dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-238">The number of elements in the array</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.OfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function OfType(Of TResult) () As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ OfType();" />
      <MemberSignature Language="F#" Value="member this.OfType : unit -&gt; seq&lt;'Result&gt;" Usage="immutableArray.OfType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="f97c8-239">Type en fonction duquel filtrer les éléments de la séquence.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-239">The type to filter the elements of the sequence on.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="f97c8-240">Filtre les éléments de ce tableau pour les éléments qui sont attribuables au type spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-240">Filters the elements of this array to those assignable to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-241">Un <see cref="T:System.Collections.IEnumerable" /> qui contient des éléments de la séquence d’entrée de type <paramref name="TResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-241">An <see cref="T:System.Collections.IEnumerable" /> that contains elements from the input sequence of type of <paramref name="TResult" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Collections.Immutable.ImmutableArray&lt;T&gt; left, System.Collections.Immutable.ImmutableArray&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; left, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ImmutableArray(Of T), right As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Collections::Immutable::ImmutableArray&lt;T&gt; left, System::Collections::Immutable::ImmutableArray&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="right" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="f97c8-242">Tableau à gauche de l’opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-242">The array to the left of the operator.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="f97c8-243">Tableau à droite de l’opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-243">The array to the right of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-244">Retourne une valeur qui indique si les deux tableaux sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-244">Returns a value that indicates if two arrays are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-245">
            <see langword="true" /> si les tableaux sont égaux ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-245">
              <see langword="true" /> if the arrays are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt; left, Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Nullable`1&lt;valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt;&gt; left, valuetype System.Nullable`1&lt;valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt;&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Nullable(Of ImmutableArray(Of T)), right As Nullable(Of ImmutableArray(Of T))) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Nullable&lt;System::Collections::Immutable::ImmutableArray&lt;T&gt;&gt; left, Nullable&lt;System::Collections::Immutable::ImmutableArray&lt;T&gt;&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;'T&gt;&gt; * Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;'T&gt;&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;" />
        <Parameter Name="right" Type="System.Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="f97c8-246">Tableau à gauche de l’opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-246">The array to the left of the operator.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="f97c8-247">Tableau à droite de l’opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-247">The array to the right of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-248">Retourne une valeur qui indique si les deux tableaux sont égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-248">Returns a value that indicates if two arrays are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-249">
            <see langword="true" /> si les tableaux sont égaux ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-249">
              <see langword="true" /> if the arrays are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Collections.Immutable.ImmutableArray&lt;T&gt; left, System.Collections.Immutable.ImmutableArray&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; left, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ImmutableArray(Of T), right As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Collections::Immutable::ImmutableArray&lt;T&gt; left, System::Collections::Immutable::ImmutableArray&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="right" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="f97c8-250">Tableau à gauche de l’opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-250">The array to the left of the operator.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="f97c8-251">Tableau à droite de l’opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-251">The array to the right of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-252">Retourne une valeur qui indique si les deux tableaux ne sont pas égaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-252">Returns a value that indicates whether two arrays are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-253">
            <see langword="true" /> si ces tableaux ne sont pas égaux ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-253">
              <see langword="true" /> if the arrays are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt; left, Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Nullable`1&lt;valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt;&gt; left, valuetype System.Nullable`1&lt;valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt;&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Nullable(Of ImmutableArray(Of T)), right As Nullable(Of ImmutableArray(Of T))) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Nullable&lt;System::Collections::Immutable::ImmutableArray&lt;T&gt;&gt; left, Nullable&lt;System::Collections::Immutable::ImmutableArray&lt;T&gt;&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;'T&gt;&gt; * Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;'T&gt;&gt; -&gt; bool" Usage="System.Collections.Immutable.ImmutableArray&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;" />
        <Parameter Name="right" Type="System.Nullable&lt;System.Collections.Immutable.ImmutableArray&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="f97c8-254">Objet à gauche de l’opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-254">The object to the left of the operator.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="f97c8-255">Objet à droite de l’opérateur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-255">The object to the right of the operator.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-256">Vérifie l’inégalité entre deux tableaux.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-256">Checks for inequality between two array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-257">
            <see langword="true" /> si les deux tableaux ne sont pas égaux ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-257">
              <see langword="true" /> if the two arrays are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Remove(T item);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Remove item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-258">Élément à supprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-258">The item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-259">Retourne un tableau avec la première occurrence de l’élément spécifié supprimée du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-259">Returns an array with the first occurrence of the specified element removed from the array.</span>
          </span>
          <span data-ttu-id="f97c8-260">Si aucune correspondance n’est trouvée, le tableau actuel est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-260">If no match is found, the current array is returned.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-261">Nouveau tableau avec l’élément supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-261">A new array with the item removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Remove (T item, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Remove(!T item, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T, equalityComparer As IEqualityComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Remove(T item, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.Remove : 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Remove (item, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-262">Élément à supprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-262">The item to remove.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="f97c8-263">Comparateur d’égalité à utiliser dans la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-263">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-264">Retourne un tableau avec la première occurrence de l’élément spécifié supprimée du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-264">Returns an array with the first occurrence of the specified element removed from the array.</span>
          </span>
          <span data-ttu-id="f97c8-265">Si aucune correspondance n’est trouvée, le tableau actuel est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-265">If no match is found, the current array is returned.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-266">Nouveau tableau avec l’élément spécifié supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-266">A new array with the specified item removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : Predicate&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="f97c8-267">Délégué qui définit les conditions des éléments à supprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-267">The delegate that defines the conditions of the elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-268">Supprime tous les éléments du tableau qui remplissent les conditions spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-268">Removes all the items from the array that meet the specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-269">Nouveau tableau avec des éléments qui répondent au critère spécifié supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-269">A new array with items that meet the specified condition removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-270">Index de base 0 de l’élément à supprimer du tableau retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-270">The 0-based index of the element to remove from the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-271">Retourne un tableau avec l’élément à la position spécifiée supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-271">Returns an array with the element at the specified position removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-272">Nouveau tableau avec l’élément à l’index spécifié supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-272">A new array with the item at the specified index removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="f97c8-273">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-273">The items to remove if matches are found in this list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-274">Supprime les éléments spécifiés du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-274">Removes the specified items from this array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-275">Nouveau tableau avec les éléments supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-275">A new array with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveRange (System.Collections.Immutable.ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveRange(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveRange(System::Collections::Immutable::ImmutableArray&lt;T&gt; items);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="f97c8-276">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-276">The items to remove if matches are found in this list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-277">Supprime les valeurs spécifiées de cette liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-277">Removes the specified values from this list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-278">Nouvelle liste avec les éléments supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-278">A new list with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : seq&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveRange (items, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="f97c8-279">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-279">The items to remove if matches are found in this list.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="f97c8-280">Comparateur d’égalité à utiliser dans la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-280">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-281">Supprime les éléments spécifiés du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-281">Removes the specified items from this array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-282">Nouveau tableau avec les éléments supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-282">A new array with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveRange (System.Collections.Immutable.ImmutableArray&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveRange(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As ImmutableArray(Of T), equalityComparer As IEqualityComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveRange(System::Collections::Immutable::ImmutableArray&lt;T&gt; items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveRange (items, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="f97c8-283">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-283">The items to remove if matches are found in this list.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="f97c8-284">Comparateur d’égalité à utiliser dans la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-284">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-285">Supprime les éléments spécifiés de cette liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-285">Removes the specified items from this list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-286">Nouveau tableau avec les éléments supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-286">A new array with the elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; RemoveRange (int index, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; RemoveRange(int32 index, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (index As Integer, length As Integer) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; RemoveRange(int index, int length);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.RemoveRange (index, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-287">Index de base 0 de l’élément de départ à supprimer du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-287">The 0-based index of the starting element to remove from the array.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="f97c8-288">Nombre d’éléments à supprimer du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-288">The number of elements to remove from the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-289">Retourne un tableau avec les éléments à la position spécifiée supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-289">Returns an array with the elements at the specified position removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-290">Nouveau tableau avec les éléments spécifiés supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-290">The new array with the specified elements removed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Replace (T oldValue, T newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Replace(!T oldValue, !T newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Replace(T oldValue, T newValue);" />
      <MemberSignature Language="F#" Value="member this.Replace : 'T * 'T -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Replace (oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
      </Parameters>
      <Docs>
        <param name="oldValue">
          <span data-ttu-id="f97c8-291">Valeur à rechercher et remplacer dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-291">The value to find and replace in the array.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="f97c8-292">Valeur par laquelle remplacer <c>oldvalue</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-292">The value to replace the <c>oldvalue</c> with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-293">Recherche le premier élément dans le tableau égal à la valeur spécifiée et remplace la valeur par la nouvelle valeur spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-293">Finds the first element in the array equal to the specified value and replaces the value with the specified new value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-294">Tableau qui contient <paramref name="newValue" /> même si les valeurs nouvelles et anciennes sont identiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-294">A new array that contains <paramref name="newValue" /> even if the new and old values are the same.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f97c8-295">
            <paramref name="oldValue" /> est introuvable dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-295">
              <paramref name="oldValue" /> is not found in the array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="member this.Replace : 'T * 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Replace (oldValue, newValue, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue">
          <span data-ttu-id="f97c8-296">Valeur à rechercher et remplacer dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-296">The value to find and replace in the array.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="f97c8-297">Valeur par laquelle remplacer <c>oldvalue</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-297">The value to replace the <c>oldvalue</c> with.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="f97c8-298">Comparateur d’égalité à utiliser pour comparer des valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-298">The equality comparer to use to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-299">Recherche le premier élément dans le tableau égal à la valeur spécifiée et remplace la valeur par la nouvelle valeur spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-299">Finds the first element in the array equal to the specified value and replaces the value with the specified new value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-300">Tableau qui contient <paramref name="newValue" /> même si les valeurs nouvelles et anciennes sont identiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-300">A new array that contains <paramref name="newValue" /> even if the new and old values are the same.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f97c8-301">
            <paramref name="oldValue" /> est introuvable dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-301">
              <paramref name="oldValue" /> is not found in the array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; SetItem (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; SetItem(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetItem (index As Integer, item As T) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; SetItem(int index, T item);" />
      <MemberSignature Language="F#" Value="member this.SetItem : int * 'T -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-302">Index de l’élément à remplacer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-302">The index of the item to replace.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="f97c8-303">Élément à ajouter à la liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-303">The item to add to the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-304">Remplace l'élément à l'index spécifié par l'élément spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-304">Replaces the item at the specified index with the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-305">Tableau qui contient <paramref name="item" /> à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-305">The new array that contains <paramref name="item" /> at the specified index.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort () As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-306">Trie les éléments dans le tableau immuable à l’aide du comparateur par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-306">Sorts the elements in the immutable array using the default comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-307">Nouveau tableau immuable qui contient les éléments de ce tableau, dans l’ordre de tri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-307">A new immutable array that contains the items in this array, in sorted order.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (comparer As IComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="f97c8-308">Implémentation à utiliser pendant la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-308">The implementation to use when comparing elements, or <see langword="null" /> to use the default comparer</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-309">Trie les éléments dans le tableau immuable à l’aide du comparateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-309">Sorts the elements in the immutable array using the specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-310">Nouveau tableau immuable qui contient les éléments de ce tableau, dans l’ordre de tri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-310">A new immutable array that contains the items in this array, in sorted order.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (comparison As Comparison(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="member this.Sort : Comparison&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Sort comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">
          <span data-ttu-id="f97c8-311">
            <see cref="T:System.Comparison`1" /> à utiliser pendant la comparaison d'éléments.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-311">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-312">Trie les éléments dans l’ensemble de <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> à l’aide du <see cref="T:System.Comparison`1" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-312">Sorts the elements in the entire <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> using             the specified <see cref="T:System.Comparison`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-313">Liste triée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-313">The sorted list.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f97c8-314">
            <paramref name="comparison" /> a la valeur null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-314">
              <paramref name="comparison" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt; Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableArray`1&lt;!T&gt; Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (index As Integer, count As Integer, comparer As IComparer(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt; Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : int * int * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="immutableArray.Sort (index, count, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-315">Index du premier élément à trier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-315">The index of the first element to sort.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="f97c8-316">Nombre d’éléments à inclure dans l’ordre de tri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-316">The number of elements to include in the sort.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="f97c8-317">Implémentation à utiliser pendant la comparaison d’éléments, ou <see langword="null" /> pour utiliser le comparateur par défaut.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-317">The implementation to use when comparing elements, or <see langword="null" /> to use the default comparer</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-318">Trie les éléments spécifiés dans le tableau immuable à l’aide du comparateur spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-318">Sorts the specified elements in the immutable array using the specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-319">Nouveau tableau immuable qui contient les éléments de ce tableau, dans l’ordre de tri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-319">A new immutable array that contains the items in this array, in sorted order.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (item As T) Implements ICollection(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Add(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-320">Élément à ajouter à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-320">The item to add to the end of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-321">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-321">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-322">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-322">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-323">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Generic.ICollection%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-323">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="void ICollection&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;T&gt;.Clear() = System::Collections::Generic::ICollection&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-324">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-324">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-325">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-325">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-326">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Generic.ICollection%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-326">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Count">
      <MemberSignature Language="C#" Value="int System.Collections.Generic.ICollection&lt;T&gt;.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.Generic.ICollection&lt;T&gt;.Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection&lt;T&gt;#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection(Of T).Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::Generic::ICollection&lt;T&gt;::Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-327">Obtient le nombre de tableaux dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-327">Gets the number of array in the collection.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f97c8-328">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-328">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;T&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-329">Obtient une valeur indiquant si cette instance est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-329">Gets a value indicating whether this instance is read only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f97c8-330">
            <c>true</c> si cette instance est en lecture seule ; sinon, <c>false</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-330">
              <c>true</c> if this instance is read only; otherwise, <c>false</c>.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;T&gt;.Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection&lt;T&gt;#Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Remove (item As T) As Boolean Implements ICollection(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;T&gt;.Remove(T item) = System::Collections::Generic::ICollection&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="f97c8-331">Objet à supprimer du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-331">The object to remove from the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-332">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-332">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-333">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-333">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-334">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-334">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-335">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Generic.ICollection%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-335">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-336">Retourne un énumérateur qui itère au sein du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-336">Returns an enumerator that iterates through the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-337">Énumérateur permettant d’effectuer une itération au sein du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-337">An enumerator that can be used to iterate through the array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-338">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-338">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-339">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-339">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Insert">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList&lt;T&gt;#Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As T) Implements IList(Of T).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.Insert(int index, T item) = System::Collections::Generic::IList&lt;T&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-340">Index de l’emplacement où insérer l’élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-340">The index of the location to insert the item.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="f97c8-341">Élément à insérer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-341">The item to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-342">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-342">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-343">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-343">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-344">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Generic.IList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-344">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.Item">
      <MemberSignature Language="C#" Value="T System.Collections.Generic.IList&lt;T&gt;.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T System.Collections.Generic.IList&lt;T&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList&lt;T&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As T Implements IList(Of T).Item" />
      <MemberSignature Language="C++ CLI" Value="property T System::Collections::Generic::IList&lt;T&gt;::Item[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IList&lt;T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-345">Index de base zéro de l'élément à obtenir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-345">The zero-based index of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-346">Obtient ou définit l’élément à l’index spécifié dans la liste en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-346">Gets or sets the element at the specified index in the read-only list.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f97c8-347">Élément à l'index spécifié dans la liste en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-347">The element at the specified index in the read-only list.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="f97c8-348">Toujours levé à partir du setter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-348">Always thrown from the setter.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f97c8-349">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-349">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IList&lt;T&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="void IList&lt;T&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList&lt;T&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList(Of T).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int index) = System::Collections::Generic::IList&lt;T&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-350">Index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-350">The index.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-351">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-351">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;.Count">
      <MemberSignature Language="C#" Value="int System.Collections.Generic.IReadOnlyCollection&lt;T&gt;.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.Generic.IReadOnlyCollection&lt;T&gt;.Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection&lt;T&gt;#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements IReadOnlyCollection(Of T).Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::Generic::IReadOnlyCollection&lt;T&gt;::Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IReadOnlyCollection&lt;T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-352">Obtient le nombre de tableaux dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-352">Gets the number of array in the collection.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f97c8-353">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-353">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyList&lt;T&gt;.Item">
      <MemberSignature Language="C#" Value="T System.Collections.Generic.IReadOnlyList&lt;T&gt;.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T System.Collections.Generic.IReadOnlyList&lt;T&gt;.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList&lt;T&gt;#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As T Implements IReadOnlyList(Of T).Item" />
      <MemberSignature Language="C++ CLI" Value="property T System::Collections::Generic::IReadOnlyList&lt;T&gt;::Item[int] { T get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IReadOnlyList&lt;T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-354">Index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-354">The index.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-355">Obtient l'élément au niveau de l'index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-355">Gets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f97c8-356">Élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-356">The element.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f97c8-357">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-357">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="f97c8-358">Tableau dans lequel copier ce tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-358">The array to copy this array to.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="f97c8-359">Index dans le tableau de destination auquel commencer l’opération de copie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-359">The index in the destination array to start the copy operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-360">Copie ce tableau dans un autre tableau en commençant à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-360">Copies this array to another array starting at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-361">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-361">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-362">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.ICollection>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-362">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.ICollection> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.ICollection.Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::ICollection::Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-363">Obtient la taille du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-363">Gets the size of the array.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f97c8-364">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-364">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-365">Consultez l’interface <see cref="T:System.Collections.ICollection" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-365">See the <see cref="T:System.Collections.ICollection" /> interface.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-366">Obtient la racine de synchronisation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-366">Gets the sync root.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-367">Retourne un énumérateur qui effectue une itération au sein du tableau immuable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-367">Returns an enumerator that iterates through the immutable array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-368">Énumérateur qui itère au sein du tableau immuable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-368">An enumerator that iterates through the immutable array.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="f97c8-369">Valeur à ajouter au tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-369">The value to add to the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-370">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-370">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-371">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-371">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear" />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Clear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-372">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-372">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="f97c8-373">Valeur à vérifier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-373">The value to check for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-374">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-374">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-375">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-375">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="f97c8-376">Valeur à laquelle l’index doit être retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-376">The value to return the index of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-377">Obtient la valeur de l'index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-377">Gets the value at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-378">Valeur de l’élément à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-378">The value of the element at the specified index.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-379">Index qui indique où insérer l’élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-379">Index that indicates where to insert the item.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="f97c8-380">Valeur à insérer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-380">The value to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-381">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-381">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-382">Obtient une valeur qui indique si cette instance est de taille fixe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-382">Gets a value indicating whether this instance is fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f97c8-383">
            <c>true</c> si cette instance est fixe de taille ; sinon, <c>false</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-383">
              <c>true</c> if this instance is fixed size; otherwise, <c>false</c>.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-384">Obtient une valeur indiquant si cette instance est en lecture seule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-384">Gets a value indicating whether this instance is read only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f97c8-385">
            <c>true</c> si cette instance est en lecture seule ; sinon, <c>false</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-385">
              <c>true</c> if this instance is read only; otherwise, <c>false</c>.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-386">Index.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-386">The index.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-387">Obtient ou définit le <see cref="T:System.Object" /> à l'index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-387">Gets or sets the <see cref="T:System.Object" /> at the specified index.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="f97c8-388">Toujours levé à partir du setter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-388">Always thrown from the setter.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="f97c8-389">Levé si la propriété <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retourne la valeur true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-389">Thrown if the <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> property returns true.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="f97c8-390">Valeur à supprimer du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-390">The value to remove from the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-391">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-391">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub RemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.RemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-392">Index de l'élément à supprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-392">The index of the item to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-393">Lève une exception <see cref="T:System.NotSupportedException" /> dans tous les cas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-393">Throws <see cref="T:System.NotSupportedException" /> in all cases.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Add">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As T) As IImmutableList(Of T) Implements IImmutableList(Of T).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Add(T value) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="f97c8-394">Valeur à ajouter à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-394">The value to add to the end of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-395">Retourne une copie du tableau d’origine avec l’élément spécifié ajouté à la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-395">Returns a copy of the original array with the specified item added to the end.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-396">Nouveau tableau avec l’élément spécifié ajouté à la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-396">A new array with the specified item added to the end.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-397">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-397">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-398">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-398">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function AddRange (items As IEnumerable(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).AddRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items) = System::Collections::Immutable::IImmutableList&lt;T&gt;::AddRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="f97c8-399">Éléments à ajouter à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-399">The elements to add to the end of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-400">Retourne une copie du tableau d’origine avec les éléments spécifiés ajoutés à la fin du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-400">Returns a copy of the original array with the specified elements added to the end of the array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-401">Nouveau tableau avec les éléments ajoutés à la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-401">A new array with the elements added to the end.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-402">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-402">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-403">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-403">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Function Clear () As IImmutableList(Of T) Implements IImmutableList(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Clear() = System::Collections::Immutable::IImmutableList&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-404">Retourne un tableau avec tous les éléments supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-404">Returns an array with all the elements removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-405">Retourne un tableau avec tous les éléments supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-405">Returns an array with all the elements removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-406">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-406">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-407">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-407">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Insert (int index, T element);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert(int32 index, !T element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Function Insert (index As Integer, element As T) As IImmutableList(Of T) Implements IImmutableList(Of T).Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Insert(int index, T element) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="element" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-408">Index 0 dans le tableau auquel le nouvel élément doit être ajouté.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-408">The 0-based index into the array at which the new item should be added.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="f97c8-409">Élément à insérer au début du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-409">The item to insert at the start of the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-410">Retourne un nouveau tableau avec la valeur spécifiée à la position spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-410">Returns a new array with the specified value inserted at the specified position.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-411">Nouveau tableau avec la valeur spécifiée insérée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-411">A new array with the specified value inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-412">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-412">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-413">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-413">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Function InsertRange (index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).InsertRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items) = System::Collections::Immutable::IImmutableList&lt;T&gt;::InsertRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-414">Index auquel insérer la valeur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-414">The index at which to insert the value.</span>
          </span>
        </param>
        <param name="items">
          <span data-ttu-id="f97c8-415">Éléments à insérer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-415">The elements to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-416">Insère les valeurs spécifiées à l’index spécifié</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-416">Inserts the specified values at the specified index</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-417">Nouveau tableau avec les valeurs spécifiées insérées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-417">A new array with the specified values inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-418">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-418">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-419">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-419">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="f97c8-420">Valeur à supprimer du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-420">The value to remove from the array.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="f97c8-421">Comparateur d’égalité à utiliser dans la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-421">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-422">Retourne un tableau avec la première occurrence de l’élément spécifié supprimé du tableau ; si aucune correspondance n’est trouvée, le tableau actuel est retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-422">Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-423">Nouveau tableau avec la valeur supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-423">A new array with the value removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-424">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-424">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-425">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-425">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Function RemoveAll (match As Predicate(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAll(Predicate&lt;T&gt; ^ match) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="f97c8-426">Délégué qui définit les conditions des éléments à supprimer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-426">The delegate that defines the conditions of the elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-427">Supprime tous les éléments du tableau qui remplissent les conditions spécifiées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-427">Removes all the items from the array that meet the specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-428">Nouveau tableau avec des éléments qui répondent au critère spécifié supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-428">A new array with items that meet the specified condition removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-429">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-429">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-430">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-430">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function RemoveAt (index As Integer) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveAt(int index) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveAt;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-431">Index de base 0 de l’élément à supprimer du tableau retourné.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-431">The 0-based index of the element to remove from the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-432">Retourne un tableau avec l’élément à la position spécifiée supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-432">Returns an array with the element at the specified position removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-433">Nouveau tableau avec l’élément spécifié supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-433">A new array with the specified item removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-434">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-434">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-435">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-435">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items">
          <span data-ttu-id="f97c8-436">Éléments à supprimer si des correspondances sont trouvées dans cette liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-436">The items to remove if matches are found in this list.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="f97c8-437">Comparateur d’égalité à utiliser dans la recherche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-437">The equality comparer to use in the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-438">Supprime les éléments spécifiés du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-438">Removes the specified items from this array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-439">Nouveau tableau avec les éléments supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-439">A new array with the elements removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-440">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-440">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-441">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-441">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Function RemoveRange (index As Integer, count As Integer) As IImmutableList(Of T) Implements IImmutableList(Of T).RemoveRange" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.RemoveRange(int index, int count) = System::Collections::Immutable::IImmutableList&lt;T&gt;::RemoveRange;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-442">Index de base 0 de l’élément de départ à supprimer du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-442">The 0-based index of the starting element to remove from the array.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="f97c8-443">Nombre d’éléments à supprimer du tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-443">The number of elements to remove from the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-444">Retourne un tableau avec les éléments à la position spécifiée supprimée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-444">Returns an array with the elements at the specified position removed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-445">Nouveau tableau avec les éléments spécifiés supprimés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-445">The new array with the specified elements removed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-446">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-446">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-447">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-447">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T) Implements IImmutableList(Of T).Replace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer) = System::Collections::Immutable::IImmutableList&lt;T&gt;::Replace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue">
          <span data-ttu-id="f97c8-448">Valeur à rechercher et remplacer dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-448">The value to find and replace in the array.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="f97c8-449">Valeur par laquelle remplacer <c>oldvalue</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-449">The value to replace the <c>oldvalue</c> with.</span>
          </span>
        </param>
        <param name="equalityComparer">
          <span data-ttu-id="f97c8-450">Comparateur d’égalité à utiliser pour comparer des valeurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-450">The equality comparer to use to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-451">Recherche le premier élément dans le tableau égal à la valeur spécifiée et remplace la valeur par la nouvelle valeur spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-451">Finds the first element in the array equal to the specified value and replaces the value with the specified new value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-452">Tableau qui contient <paramref name="newValue" /> même si les valeurs nouvelles et anciennes sont identiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-452">A new array that contains <paramref name="newValue" /> even if the new and old values are the same.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-453">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-453">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-454">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-454">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f97c8-455">
            <paramref name="oldValue" /> est introuvable dans le tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-455">
              <paramref name="oldValue" /> is not found in the array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableList&lt;T&gt; IImmutableList&lt;T&gt;.SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList&lt;T&gt;#SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Function SetItem (index As Integer, value As T) As IImmutableList(Of T) Implements IImmutableList(Of T).SetItem" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableList&lt;T&gt; ^ System.Collections.Immutable.IImmutableList&lt;T&gt;.SetItem(int index, T value) = System::Collections::Immutable::IImmutableList&lt;T&gt;::SetItem;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="f97c8-456">Index de l’élément à remplacer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-456">The index of the item to replace.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="f97c8-457">Valeur à ajouter à la liste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-457">The value to add to the list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-458">Remplace l'élément à l'index spécifié par l'élément spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-458">Replaces the item at the specified index with the specified item.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-459">Tableau qui contient <paramref name="item" /> à l’index spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-459">The new array that contains <paramref name="item" /> at the specified index.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-460">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-460">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-461">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.Immutable.IImmutableList%601>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-461">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableList%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="f97c8-462">Élément à comparer avec l’instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-462">The element to compare with the current instance.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="f97c8-463">Objet utilisé pour comparer les membres du tableau actuel aux membres correspondants de l’autre tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-463">The object used to compare members of the current array with the corresponding members of other array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-464">Détermine si l’élément de collection actuel précède, se situe à la même position que, ou suit un autre élément dans l’ordre de tri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-464">Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-465">Entier qui indique si l’élément actuel précède, se situe à la même position ou suit l’autre élément.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-465">An integer that indicates whether the current element precedes, is in the same position or follows the other element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-466">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-466">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-467">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.IStructuralComparable>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-467">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.IStructuralComparable> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f97c8-468">Les tableaux ne sont pas de la même longueur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-468">The arrays are not the same length.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="f97c8-469">Tableau à comparer à l’instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-469">The array to compare with the current instance.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="f97c8-470">Objet qui détermine si l’instance actuelle et les autres sont structurellement identiques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-470">An object that determines whether the current instance and other are structurally equal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-471">Détermine si ce tableau est structurellement identique au tableau spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-471">Determines whether this array is structurally equal to the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-472">
            <see langword="true" /> si les deux tableaux sont structurellement égaux ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-472">
              <see langword="true" /> if the two arrays are structurally equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-473">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="f97c8-473">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f97c8-474">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableArray%601> est castée en interface <xref:System.Collections.IStructuralEquatable>.</span><span class="sxs-lookup"><span data-stu-id="f97c8-474">It can be used only when the <xref:System.Collections.Immutable.ImmutableArray%601> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="f97c8-475">Objet qui calcule le code de hachage de l'objet actif.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-475">An object that computes the hash code of the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f97c8-476">Retourne un code de hachage pour l'instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-476">Returns a hash code for the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-477">Code de hachage de l'instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-477">The hash code for the current instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBuilder">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableArray&lt;T&gt;.Builder ToBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableArray`1/Builder&lt;!T&gt; ToBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBuilder () As ImmutableArray(Of T).Builder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableArray&lt;T&gt;::Builder ^ ToBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToBuilder : unit -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;.Builder" Usage="immutableArray.ToBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;+Builder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f97c8-478">Crée un tableau mutable qui a le même contenu que ce tableau et peut être muté efficacement entre plusieurs opérations à l’aide des interfaces standard mutables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-478">Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f97c8-479">Nouveau générateur avec le même contenu que ce tableau.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f97c8-479">The new builder with the same contents as this array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f97c8-480">Ceci est une opération o (1) et entraîne qu’une allocation de mémoire (petite) unique.</span><span class="sxs-lookup"><span data-stu-id="f97c8-480">This is an O(1) operation and results in only a single (small) memory allocation.</span></span> <span data-ttu-id="f97c8-481">La liste mutable qui est retournée n’est pas thread-safe.</span><span class="sxs-lookup"><span data-stu-id="f97c8-481">The mutable list that is returned is not thread-safe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>