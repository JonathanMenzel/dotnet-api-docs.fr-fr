<Type Name="ImmutableStack&lt;T&gt;" FullName="System.Collections.Immutable.ImmutableStack&lt;T&gt;">
  <TypeSignature Language="C#" Value="public sealed class ImmutableStack&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Immutable.IImmutableStack&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ImmutableStack`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Collections.Immutable.IImmutableStack`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableStack`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ImmutableStack(Of T)&#xA;Implements IEnumerable(Of T), IImmutableStack(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ImmutableStack sealed : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Immutable::IImmutableStack&lt;T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Immutable.IImmutableStack&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="49eed-101">Type d’élément sur la pile.</span><span class="sxs-lookup"><span data-stu-id="49eed-101">The type of element on the stack.</span></span></typeparam>
    <summary><span data-ttu-id="49eed-102">Représente une pile immuable.</span><span class="sxs-lookup"><span data-stu-id="49eed-102">Represents an immutable stack.</span></span>  
  
 <span data-ttu-id="49eed-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">à propos des collections immuables et de leur installation</see>)</span><span class="sxs-lookup"><span data-stu-id="49eed-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#Remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>To be added.</remarks>
    <threadsafe><span data-ttu-id="49eed-104">Ce type est thread-safe.</span><span class="sxs-lookup"><span data-stu-id="49eed-104">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableStack&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableStack`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As ImmutableStack(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableStack&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49eed-105">Supprime tous les objets de la pile immuable.</span><span class="sxs-lookup"><span data-stu-id="49eed-105">Removes all objects from the immutable stack.</span></span></summary>
        <returns><span data-ttu-id="49eed-106">Pile immuable vide.</span><span class="sxs-lookup"><span data-stu-id="49eed-106">An empty immutable stack.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableStack&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Immutable.ImmutableStack`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableStack`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As ImmutableStack(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ Empty { System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableStack&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49eed-107">Obtient une pile immuable vide.</span><span class="sxs-lookup"><span data-stu-id="49eed-107">Gets an empty immutable stack.</span></span></summary>
        <value><span data-ttu-id="49eed-108">Pile immuable vide.</span><span class="sxs-lookup"><span data-stu-id="49eed-108">An empty immutable stack.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableStack&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Immutable.ImmutableStack`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ImmutableStack(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableStack&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableStack&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49eed-109">Retourne un énumérateur qui itère sur la pile immuable.</span><span class="sxs-lookup"><span data-stu-id="49eed-109">Returns an enumerator that iterates through the immutable stack.</span></span></summary>
        <returns><span data-ttu-id="49eed-110">Énumérateur qui peut être utilisé pour itérer via la pile.</span><span class="sxs-lookup"><span data-stu-id="49eed-110">An enumerator that can be used to iterate through the stack.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Immutable.IImmutableStack`1.IsEmpty</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49eed-111">Obtient une valeur qui indique si cette instance de la pile immuable est vide.</span><span class="sxs-lookup"><span data-stu-id="49eed-111">Gets a value that indicates whether this instance of the immutable stack is empty.</span></span></summary>
        <value>
          <span data-ttu-id="49eed-112"><see langword="true" /> si cette instance est valide ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="49eed-112"><see langword="true" /> if this instance is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Peek">
      <MemberSignature Language="C#" Value="public T Peek ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T Peek() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.Peek" />
      <MemberSignature Language="VB.NET" Value="Public Function Peek () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual T Peek();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableStack`1.Peek</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49eed-113">Retourne l’objet en haut de la pile sans le supprimer.</span><span class="sxs-lookup"><span data-stu-id="49eed-113">Returns the object at the top of the stack without removing it.</span></span></summary>
        <returns><span data-ttu-id="49eed-114">Objet en haut de la pile.</span><span class="sxs-lookup"><span data-stu-id="49eed-114">The object at the top of the stack.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PeekRef">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.T&amp; PeekRef ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.T&amp; modreq(System.Runtime.InteropServices.InAttribute) PeekRef() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.PeekRef" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekRef () As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::T&amp; ^ PeekRef();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.T&amp;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableStack&lt;T&gt; Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableStack`1&lt;!T&gt; Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop () As ImmutableStack(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ Pop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableStack&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49eed-115">Supprime l’élément en haut de la pile immuable et retourne la pile après la suppression.</span><span class="sxs-lookup"><span data-stu-id="49eed-115">Removes the element at the top of the immutable stack and returns the stack after the removal.</span></span></summary>
        <returns><span data-ttu-id="49eed-116">Une pile ; jamais <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="49eed-116">A stack; never <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableStack&lt;T&gt; Pop (out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableStack`1&lt;!T&gt; Pop([out] !T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pop (ByRef value As T) As ImmutableStack(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ Pop([Runtime::InteropServices::Out] T % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableStack&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="49eed-117">Valeur à supprimer de la pile.</span><span class="sxs-lookup"><span data-stu-id="49eed-117">The value to remove from the stack.</span></span></param>
        <summary><span data-ttu-id="49eed-118">Supprime l’élément spécifié de la pile immuable et retourne la pile après la suppression.</span><span class="sxs-lookup"><span data-stu-id="49eed-118">Removes the specified element from the immutable stack and returns the stack after the removal.</span></span></summary>
        <returns><span data-ttu-id="49eed-119">Une pile ; jamais <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="49eed-119">A stack; never <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.ImmutableStack&lt;T&gt; Push (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Immutable.ImmutableStack`1&lt;!T&gt; Push(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Push (value As T) As ImmutableStack(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ Push(T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableStack&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="49eed-120">Objet à pousser vers la pile.</span><span class="sxs-lookup"><span data-stu-id="49eed-120">The object to push onto the stack.</span></span></param>
        <summary><span data-ttu-id="49eed-121">Insère un objet en haut de la pile immuable et retourne la nouvelle pile.</span><span class="sxs-lookup"><span data-stu-id="49eed-121">Inserts an object at the top of the immutable stack and returns the new stack.</span></span></summary>
        <returns><span data-ttu-id="49eed-122">Nouvelle pile.</span><span class="sxs-lookup"><span data-stu-id="49eed-122">The new stack.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49eed-123">Retourne un énumérateur qui itère au sein de la collection.</span><span class="sxs-lookup"><span data-stu-id="49eed-123">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="49eed-124">Énumérateur permettant d’effectuer une itération au sein de la collection.</span><span class="sxs-lookup"><span data-stu-id="49eed-124">An enumerator  that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49eed-125">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="49eed-125">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="49eed-126">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableStack%601> est castée en interface <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="49eed-126">It can be used only when the <xref:System.Collections.Immutable.ImmutableStack%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49eed-127">Retourne un énumérateur qui itère au sein d’une collection.</span><span class="sxs-lookup"><span data-stu-id="49eed-127">Returns an enumerator that iterates through a collection.</span></span></summary>
        <returns><span data-ttu-id="49eed-128">Objet <see cref="T:System.Collections.IEnumerator" /> pouvant être utilisé pour itérer au sein de la collection.</span><span class="sxs-lookup"><span data-stu-id="49eed-128">An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49eed-129">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="49eed-129">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="49eed-130">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableStack%601> est castée en interface <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="49eed-130">It can be used only when the <xref:System.Collections.Immutable.ImmutableStack%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableStack&lt;T&gt;.Clear">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableStack&lt;T&gt; IImmutableStack&lt;T&gt;.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableStack`1&lt;!T&gt; System.Collections.Immutable.IImmutableStack&lt;T&gt;.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack&lt;T&gt;#Clear" />
      <MemberSignature Language="VB.NET" Value="Function Clear () As IImmutableStack(Of T) Implements IImmutableStack(Of T).Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableStack&lt;T&gt; ^ System.Collections.Immutable.IImmutableStack&lt;T&gt;.Clear() = System::Collections::Immutable::IImmutableStack&lt;T&gt;::Clear;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableStack`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableStack&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49eed-131">Supprime tous les éléments de la pile immuable.</span><span class="sxs-lookup"><span data-stu-id="49eed-131">Removes all elements from the immutable stack.</span></span></summary>
        <returns><span data-ttu-id="49eed-132">Pile immuable vide.</span><span class="sxs-lookup"><span data-stu-id="49eed-132">The empty immutable stack.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49eed-133">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="49eed-133">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="49eed-134">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableStack%601> est castée en interface <xref:System.Collections.Immutable.IImmutableStack%601>.</span><span class="sxs-lookup"><span data-stu-id="49eed-134">It can be used only when the <xref:System.Collections.Immutable.ImmutableStack%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableStack%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableStack&lt;T&gt;.Pop">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableStack&lt;T&gt; IImmutableStack&lt;T&gt;.Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableStack`1&lt;!T&gt; System.Collections.Immutable.IImmutableStack&lt;T&gt;.Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack&lt;T&gt;#Pop" />
      <MemberSignature Language="VB.NET" Value="Function Pop () As IImmutableStack(Of T) Implements IImmutableStack(Of T).Pop" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableStack&lt;T&gt; ^ System.Collections.Immutable.IImmutableStack&lt;T&gt;.Pop() = System::Collections::Immutable::IImmutableStack&lt;T&gt;::Pop;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableStack`1.Pop</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableStack&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49eed-135">Supprime l’élément en haut de la pile immuable et retourne la nouvelle pile.</span><span class="sxs-lookup"><span data-stu-id="49eed-135">Removes the element at the top of the immutable stack and returns the new stack.</span></span></summary>
        <returns><span data-ttu-id="49eed-136">Nouvelle pile ; jamais <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="49eed-136">The new stack; never <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49eed-137">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="49eed-137">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="49eed-138">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableStack%601> est castée en interface <xref:System.Collections.Immutable.IImmutableStack%601>.</span><span class="sxs-lookup"><span data-stu-id="49eed-138">It can be used only when the <xref:System.Collections.Immutable.ImmutableStack%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableStack%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Immutable.IImmutableStack&lt;T&gt;.Push">
      <MemberSignature Language="C#" Value="System.Collections.Immutable.IImmutableStack&lt;T&gt; IImmutableStack&lt;T&gt;.Push (T value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableStack`1&lt;!T&gt; System.Collections.Immutable.IImmutableStack&lt;T&gt;.Push(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack&lt;T&gt;#Push(`0)" />
      <MemberSignature Language="VB.NET" Value="Function Push (value As T) As IImmutableStack(Of T) Implements IImmutableStack(Of T).Push" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Immutable::IImmutableStack&lt;T&gt; ^ System.Collections.Immutable.IImmutableStack&lt;T&gt;.Push(T value) = System::Collections::Immutable::IImmutableStack&lt;T&gt;::Push;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Immutable.IImmutableStack`1.Push(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableStack&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="49eed-139">Élément à pousser vers la pile.</span><span class="sxs-lookup"><span data-stu-id="49eed-139">The element to push onto the stack.</span></span></param>
        <summary><span data-ttu-id="49eed-140">Insère un élément en haut de la pile immuable et retourne la nouvelle pile.</span><span class="sxs-lookup"><span data-stu-id="49eed-140">Inserts an element at the top of the immutable stack and returns the new stack.</span></span></summary>
        <returns><span data-ttu-id="49eed-141">Nouvelle pile.</span><span class="sxs-lookup"><span data-stu-id="49eed-141">The new stack.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49eed-142">Ce membre est une implémentation d'un membre d'interface explicite.</span><span class="sxs-lookup"><span data-stu-id="49eed-142">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="49eed-143">Il peut uniquement être utilisé lorsque l'instance de <xref:System.Collections.Immutable.ImmutableStack%601> est castée en interface <xref:System.Collections.Immutable.IImmutableStack%601>.</span><span class="sxs-lookup"><span data-stu-id="49eed-143">It can be used only when the <xref:System.Collections.Immutable.ImmutableStack%601> instance is cast to an <xref:System.Collections.Immutable.IImmutableStack%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>