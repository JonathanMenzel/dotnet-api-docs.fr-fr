<Type Name="CacheDependency" FullName="System.Web.Caching.CacheDependency">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c3c21e19ddfb310514df1ac128001df7f4a70b0" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53390207" /></Metadata><TypeSignature Language="C#" Value="public class CacheDependency : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CacheDependency extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.CacheDependency" />
  <TypeSignature Language="VB.NET" Value="Public Class CacheDependency&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheDependency : IDisposable" />
  <TypeSignature Language="F#" Value="type CacheDependency = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Établit une relation de dépendance entre un élément stocké dans l’objet <see cref="T:System.Web.Caching.Cache" /> d’une application ASP.NET et un fichier, une clé de cache, un tableau d’un de ces deux éléments ou un autre objet <see cref="T:System.Web.Caching.CacheDependency" />. La classe <see cref="T:System.Web.Caching.CacheDependency" /> surveille les relations de dépendance afin que, lorsqu’une d’elles change, l’élément mis en cache soit automatiquement supprimé.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous ajoutez un élément au cache qui est dépendant d’un autre objet, tel qu’un fichier ou un tableau de fichiers, l’élément dépendant est automatiquement supprimé du cache lorsque l’objet change. Par exemple, supposons que vous créez un <xref:System.Data.DataSet> objet basé sur les données dans un fichier XML. Vous pouvez ajouter la <xref:System.Data.DataSet> au cache avec un <xref:System.Web.Caching.CacheDependency> objet qui rend le <xref:System.Data.DataSet> dépendantes sur le fichier XML. Si le fichier XML est modifié, le <xref:System.Data.DataSet> est supprimé du cache.  
  
 Vous pouvez ajouter des éléments avec des dépendances au cache de votre application avec le <xref:System.Web.Caching.Cache.Add%2A> et <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> méthodes. Vous ne pouvez pas utiliser le <xref:System.Web.Caching.Cache.Item%2A> propriété à ajouter des éléments au cache avec des dépendances.  
  
 Pour définir une dépendance, vous créez une instance de la <xref:System.Web.Caching.CacheDependency> spécifiant les fichiers, les clés ou les répertoires dont dépend l’élément, de la classe, puis passez la dépendance à la <xref:System.Web.Caching.Cache.Add%2A> ou <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> (méthode). Le <xref:System.Web.Caching.CacheDependency> instance peut représenter un seul fichier ou répertoire, un tableau de fichiers ou répertoires ou un tableau de fichiers ou répertoires, ainsi que d’un tableau de clés de cache (celles-ci représentent d’autres éléments stockés dans le <xref:System.Web.Caching.Cache> objet).  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.Caching.CacheDependency.HasChanged%2A> propriété afin de déterminer si un <xref:System.Web.Caching.CacheDependency> changé depuis la demande précédente pour un élément dans le <xref:System.Web.Caching.Cache>. Le `dt` valeur passée dans le `start` paramètre est défini sur <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Caching.Cache" />
    <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
    <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CacheDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CacheDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si vous souhaitez dériver votre propre classe de <xref:System.Web.Caching.CacheDependency>, implémenter cette version de la <xref:System.Web.Caching.CacheDependency.%23ctor%2A> constructeur.  
  
   
  
## Examples  
 L’exemple de code suivant est une classe qui implémente cette version de la <xref:System.Web.Caching.CacheDependency> constructeur en tant que toutes les classes qui dérivent de <xref:System.Web.Caching.CacheDependency> sont requises pour.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Chemin d'accès vers un fichier ou un répertoire dont l'objet mis en cache dépend. Lorsque cette ressource change, l'objet mis en cache devient obsolète et est supprimé du cache.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> qui surveille un fichier ou un répertoire pour déceler les modifications.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le répertoire ou le fichier spécifié dans le `filename` paramètre est introuvable dans le système de fichiers, il est considéré comme étant absents. Si le répertoire ou le fichier est manquant lorsque l’objet avec une dépendance est ajouté à la <xref:System.Web.Caching.Cache>, l’objet mis en cache sera retiré le <xref:System.Web.Caching.Cache> quand le répertoire ou le fichier est créé.  
  
 Par exemple, supposons que vous ajoutez un objet à le <xref:System.Web.Caching.Cache> avec une dépendance sur le chemin d’accès de fichier suivant : c:\stocks\xyz.dat. Si ce fichier est introuvable lorsque le <xref:System.Web.Caching.CacheDependency> objet est créé, mais il est créé ultérieurement, l’objet mis en cache est supprimé dès la création du fichier xyz.dat.  
  
   
  
## Examples  
 L’exemple de code suivant crée une instance de la <xref:System.Web.Caching.CacheDependency> classe avec une dépendance sur un fichier XML. Le <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> méthode ajoute ensuite un élément à la <xref:System.Web.Caching.Cache> qui dépend de ce fichier.  
  
 [!code-csharp[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/CS/source.cs#1)]
 [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/VB/source.vb#1)]  
  
 Vous pouvez également utiliser la technique suivante pour ajouter un élément à la <xref:System.Web.Caching.Cache> avec une dépendance sur un fichier.  
  
 [!code-csharp[Single File Dependency Cache entry#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Single File Dependency Cache entry/CS/DependencySingleFilecs.aspx#1)]
 [!code-vb[Single File Dependency Cache entry#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Single File Dependency Cache entry/VB/DependencySingleFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filenames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Tableau de chemins d'accès (vers des fichiers ou des répertoires) dont dépend l'objet mis en cache. Lorsque l'une de ces ressources change, l'objet mis en cache devient obsolète et est supprimé du cache.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> qui surveille un tableau de chemins d'accès (vers des fichiers ou des répertoires) pour déceler les modifications.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si un des fichiers ou répertoires dans le tableau est modifié ou supprimé à partir du tableau, l’élément mis en cache devient obsolète et est supprimé de l’application <xref:System.Web.Caching.Cache> objet.  
  
 En outre, si un des répertoires ou des fichiers spécifiés dans le `filenames` paramètre est introuvable dans le système de fichiers, il est considéré comme manquant. Si un répertoire ou un fichier est manquant lorsque l’objet avec une dépendance est ajouté à la <xref:System.Web.Caching.Cache>, l’objet mis en cache sera retiré le <xref:System.Web.Caching.Cache> lorsque ce répertoire ou fichier est créé.  
  
 Par exemple, supposons que vous ajoutez un objet à le <xref:System.Web.Caching.Cache> avec une dépendance sur le chemin d’accès de fichier suivant : c:\stocks\xyz.dat. Si ce fichier est introuvable lorsque le <xref:System.Web.Caching.CacheDependency> objet est créé, mais il est créé ultérieurement, l’objet mis en cache est supprimé dès la création du fichier xyz.dat.  
  
> [!NOTE]
>  Lorsque vous créez le tableau qui contient les dépendances de fichier, vous devez définir le nombre de fichiers que l’élément que vous ajoutez à la <xref:System.Web.Caching.Cache> dépend.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> méthode pour ajouter un élément à la <xref:System.Web.Caching.Cache> avec des dépendances sur un tableau de fichiers. Vous pouvez également rendre l’élément dépendant sur un tableau de répertoires.  
  
 [!code-csharp[Multiple file based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Multiple file based dependency/CS/DependencyMultiFilecs.aspx#1)]
 [!code-vb[Multiple file based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Multiple file based dependency/VB/DependencyMultiFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filename, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filename">Chemin d'accès vers un fichier ou un répertoire dont l'objet mis en cache dépend. Lorsque cette ressource change, l'objet mis en cache devient obsolète et est supprimé du cache.</param>
        <param name="start">Heure par rapport à laquelle vérifier la date de dernière modification du répertoire ou du fichier.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> qui surveille un fichier ou un répertoire pour déceler les modifications.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le répertoire ou le fichier spécifié dans le `filename` paramètre est introuvable dans le système de fichiers, il est considéré comme étant absents. Si le répertoire ou le fichier est manquant lorsque l’objet avec une dépendance est ajouté à la <xref:System.Web.Caching.Cache>, l’objet mis en cache sera retiré le <xref:System.Web.Caching.Cache> quand le répertoire ou le fichier est créé.  
  
 Par exemple, supposons que vous ajoutez un objet à le <xref:System.Web.Caching.Cache> avec une dépendance sur le chemin d’accès de fichier suivant : c:\stocks\xyz.dat. Si ce fichier est introuvable lorsque le <xref:System.Web.Caching.CacheDependency> objet est créé, mais il est créé ultérieurement, l’objet mis en cache est supprimé dès la création du fichier xyz.dat.  
  
> [!NOTE]
>  Suivi des modifications commence immédiatement et n’est pas directement basé sur le `start` paramètre. Utilisez le `start` paramètre à passer une date et une heure dans le passé, par rapport à laquelle vous souhaitez vérifier la dernière date de modification de répertoire ou fichier passé dans le `filename` paramètre. Si la dernière modification date est postérieure à la date et heure définies passées dans le `start` paramètre, l’élément mis en cache est supprimé à partir de la <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 L’exemple de code suivant utilise ce constructeur pour instancier un <xref:System.Web.Caching.CacheDependency> de l’objet, puis insère un élément dans le <xref:System.Web.Caching.Cache> avec cette dépendance. Le `dt` valeur passée dans le `start` paramètre est défini sur <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tableau de chemins d'accès (vers des fichiers ou des répertoires) dont dépend l'objet mis en cache. Lorsque l'une de ces ressources change, l'objet mis en cache devient obsolète et est supprimé du cache.</param>
        <param name="start">Heure par rapport à laquelle vérifier la date de dernière modification des objets du tableau.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> qui surveille un tableau de chemins d'accès (vers des fichiers ou des répertoires) pour déceler les modifications et spécifier l'heure à laquelle la surveillance des modifications commence.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si un des répertoires ou des fichiers spécifiés dans le `filenames` paramètre est introuvable dans le système de fichiers, il est considéré comme manquant. Si un répertoire ou un fichier est manquant lorsque l’objet avec une dépendance est ajouté à la <xref:System.Web.Caching.Cache>, l’objet mis en cache sera retiré le <xref:System.Web.Caching.Cache> lorsque ce répertoire ou fichier est créé.  
  
 Par exemple, supposons que vous ajoutez un objet à le <xref:System.Web.Caching.Cache> avec une dépendance sur le chemin d’accès de fichier suivant : c:\stocks\xyz.dat. Si ce fichier est introuvable lorsque le <xref:System.Web.Caching.CacheDependency> objet est créé, mais il est créé ultérieurement, l’objet mis en cache est supprimé dès la création du fichier xyz.dat.  
  
> [!NOTE]
>  Suivi des modifications commence immédiatement et n’est pas directement basé sur le `start` paramètre. Utilisez le `start` paramètre à passer une date et une heure dans le passé, par rapport à laquelle vous souhaitez vérifier la date de dernière modification du tableau passé dans le `filenames` paramètre. Si la dernière modification date de n’importe quel objet dans le tableau est postérieure à la date et heure définies passées dans le `start` paramètre, l’élément mis en cache est supprimé à partir de la <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Web.Caching.CacheDependency> objet qui passe deux fichiers XML et un <xref:System.DateTime.Now%2A?displayProperty=nameWithType> valeur lorsque l’objet est inclus en tant qu’argument de paramètre dans un <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> appel de méthode.  
  
 [!code-csharp[CacheDependency Constructor4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor4/CS/depmultifilestimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor4/VB/depmultifilestimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Tableau de chemins d'accès (vers des fichiers ou des répertoires) dont dépend l'objet mis en cache. Lorsque l'une de ces ressources change, l'objet mis en cache devient obsolète et est supprimé du cache.</param>
        <param name="cachekeys">Tableau de clés de cache que le nouvel objet surveille pour déceler les modifications. Lorsque l'une de ces clés de cache change, l'objet mis en cache associé à cet objet de dépendance devient obsolète et est supprimé du cache.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> qui surveille un tableau de chemins d'accès (vers des fichiers ou des répertoires), un tableau de clés de cache, ou les deux, pour déceler les modifications.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En outre, si un des répertoires ou des fichiers spécifiés dans le `filenames` paramètre est introuvable dans le système de fichiers, il est considéré comme manquant. Si un répertoire ou un fichier est manquant lorsque l’objet avec une dépendance est ajouté à la <xref:System.Web.Caching.Cache>, l’objet mis en cache sera retiré le <xref:System.Web.Caching.Cache> lorsque ce répertoire ou fichier est créé.  
  
 Par exemple, supposons que vous ajoutez un objet à le <xref:System.Web.Caching.Cache> avec une dépendance sur le chemin d’accès de fichier suivant : c:\stocks\xyz.dat. Si ce fichier est introuvable lorsque le <xref:System.Web.Caching.CacheDependency> objet est créé, mais il est créé ultérieurement, l’objet mis en cache est supprimé dès la création du fichier xyz.dat.  
  
 Toutefois, le `cachekeys` dépendance ne fonctionne pas de la même façon. Si au moins une valeur dans la `cachekeys` paramètre n’existe pas au moment d’une instruction insert, l’insertion échoue. Notez qu’il n’existe aucune exception levée pour ce scénario.  
  
## Examples  
 Le fragment de code suivant montre comment insérer un élément de votre application <xref:System.Web.Caching.Cache> avec une dépendance sur une clé à un autre élément placé dans le cache. Étant donné que cette méthode utilise la syntaxe de tableau, vous devez définir le nombre de clés sur lequel l’élément que vous ajoutez à la <xref:System.Web.Caching.Cache> est dépendante.  
  
 [!code-csharp[Key based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Key based dependency/CS/DependencyKeycs.aspx#1)]
 [!code-vb[Key based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Key based dependency/VB/DependencyKeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tableau de chemins d'accès (vers des fichiers ou des répertoires) dont dépend l'objet mis en cache. Lorsque l'une de ces ressources change, l'objet mis en cache devient obsolète et est supprimé du cache.</param>
        <param name="cachekeys">Tableau de clés de cache que le nouvel objet surveille pour déceler les modifications. Lorsque l'une de ces clés de cache change, l'objet mis en cache associé à cet objet de dépendance devient obsolète et est supprimé du cache.</param>
        <param name="start">Date et heure par rapport auxquelles vérifier la date de dernière modification des objets passés dans les tableaux <paramref name="filenames" /> et <paramref name="cachekeys" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> qui surveille un tableau de chemins d'accès (vers des fichiers ou des répertoires), un tableau de clés de cache, ou les deux, pour déceler les modifications.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En outre, si un des répertoires ou des fichiers spécifiés dans le `filenames` paramètre est introuvable dans le système de fichiers, il est considéré comme manquant. Si un répertoire ou un fichier est manquant lorsque l’objet avec une dépendance est ajouté à la <xref:System.Web.Caching.Cache>, l’objet mis en cache sera retiré le <xref:System.Web.Caching.Cache> lorsque ce répertoire ou fichier est créé.  
  
 Par exemple, supposons que vous ajoutez un objet à le <xref:System.Web.Caching.Cache> avec une dépendance sur le chemin d’accès de fichier suivant : c:\stocks\xyz.dat. Si ce fichier est introuvable lorsque le <xref:System.Web.Caching.CacheDependency> objet est créé, mais il est créé ultérieurement, l’objet mis en cache est supprimé dès la création du fichier xyz.dat.  
  
 Toutefois, le `cachekeys` dépendance ne fonctionne pas de la même façon. Si au moins une valeur dans la `cachekeys` paramètre n’existe pas au moment d’une instruction insert, l’insertion échoue. Notez qu’il n’existe aucune exception levée pour ce scénario.

> [!NOTE]
>  Suivi des modifications commence immédiatement et n’est pas directement basé sur le `start` paramètre. Utilisez le `start` paramètre à passer une date et heure dans le passé, par rapport à laquelle vous souhaitez vérifier la date de dernière modification de tout objet passé dans le `filenames` ou `cachekeys` paramètres. Si la dernière modification date d’un de ces objets est postérieure à la date et heure définies passées dans le `start` paramètre, l’élément mis en cache est supprimé à partir de la <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 L’exemple de code suivant crée un `CreateDependency` (méthode). Lorsque cette méthode est appelée, elle crée un <xref:System.DateTime> objet et le <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> propriété est utilisée pour ajouter un élément au cache avec un `key` paramètre de `key1` et la valeur `Value 1`. Un tableau de chaînes, `dependencyKey`, est créée avec la valeur de `key1` également. Cela <xref:System.Web.Caching.CacheDependency> constructeur instancie ensuite un <xref:System.Web.Caching.CacheDependency> objet passe `dependencyKey` et <xref:System.DateTime> objet en tant qu’arguments de paramètre. Le <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> méthode est ensuite appelée, à l’aide de la <xref:System.Web.Caching.CacheDependency> objet en tant que paramètre. Cela rend l’objet ajouté au cache en utilisant le <xref:System.Web.Caching.Cache.Insert%2A> dépend de la méthode le `key1` clé.  
  
 [!code-csharp[CacheDependency Constructor6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor6/CS/depkeytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor6/VB/depkeytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="filenames">Tableau de chemins d'accès (vers des fichiers ou des répertoires) dont dépend l'objet mis en cache. Lorsque l'une de ces ressources change, l'objet mis en cache devient obsolète et est supprimé du cache.</param>
        <param name="cachekeys">Tableau de clés de cache que le nouvel objet surveille pour déceler les modifications. Lorsque l'une de ces clés de cache change, l'objet mis en cache associé à cet objet de dépendance devient obsolète et est supprimé du cache.</param>
        <param name="dependency">Une autre instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> dont cette instance dépend.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> qui surveille un tableau de chemins d'accès (vers des fichiers ou des répertoires), un tableau de clés de cache, ou les deux, pour déceler les modifications. Il devient également dépendant d'une instance distincte de la classe <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En outre, si un des répertoires ou des fichiers spécifiés dans le `filenames` paramètre est introuvable dans le système de fichiers, il est considéré comme manquant. Si un répertoire ou un fichier est manquant lorsque l’objet avec une dépendance est ajouté à la <xref:System.Web.Caching.Cache>, l’objet mis en cache sera retiré le <xref:System.Web.Caching.Cache> lorsque ce répertoire ou fichier est créé.  
  
 Par exemple, supposons que vous ajoutez un objet à le <xref:System.Web.Caching.Cache> avec une dépendance sur le chemin d’accès de fichier suivant : c:\stocks\xyz.dat. Si ce fichier est introuvable lorsque le <xref:System.Web.Caching.CacheDependency> objet est créé, mais il est créé ultérieurement, l’objet mis en cache est supprimé dès la création du fichier xyz.dat.  
  
 Toutefois, le `cachekeys` dépendance ne fonctionne pas de la même façon. Si au moins une valeur dans la `cachekeys` paramètre n’existe pas au moment d’une instruction insert, l’insertion échoue. Notez qu’il n’existe aucune exception levée pour ce scénario.
  
## Examples  
 L’exemple de code suivant crée un `CreateDependency` (méthode). Lorsque cette méthode est appelée, elle utilise le <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> propriété pour ajouter un élément au cache avec un `key` paramètre de `key1` et la valeur `Value 1`. Un tableau de chaînes, `dependencyKey`, est créée avec la valeur de `key1` également. Le <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> constructeur est utilisé pour créer un <xref:System.Web.Caching.CacheDependency> objet, `dep1`, qui passe `dependencyKey` comme argument de paramètre. Une seconde <xref:System.Web.Caching.CacheDependency> objet, `dep2`, est créé à l’aide de ce constructeur, avec `dep1` passé en tant que troisième argument du paramètre. Cette deuxième dépendance dépend de la première. Le <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> méthode est ensuite appelée, à l’aide de la seconde <xref:System.Web.Caching.CacheDependency> objet en tant que paramètre. Si la première dépendance change de quelque façon, l’élément mis en cache est invalidé.  
  
 [!code-csharp[CacheDependency Constructor7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor7/CS/dependencycs.aspx#1)]
 [!code-vb[CacheDependency Constructor7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor7/VB/dependencyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Tableau de chemins d'accès (vers des fichiers ou des répertoires) dont dépend l'objet mis en cache. Lorsque l'une de ces ressources change, l'objet mis en cache devient obsolète et est supprimé du cache.</param>
        <param name="cachekeys">Tableau de clés de cache que le nouvel objet surveille pour déceler les modifications. Lorsque l'une de ces clés de cache change, l'objet mis en cache associé à cet objet de dépendance devient obsolète et est supprimé du cache.</param>
        <param name="dependency">Une autre instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> dont cette instance dépend.</param>
        <param name="start">Heure par rapport à laquelle vérifier la date de dernière modification des objets dans les tableaux et l'objet <see cref="T:System.Web.Caching.CacheDependency" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> qui surveille un tableau de chemins d'accès (vers des fichiers ou des répertoires), un tableau de clés de cache, ou les deux, pour déceler les modifications. Il devient également dépendant d'une autre instance de la classe <see cref="T:System.Web.Caching.CacheDependency" /> et de l'heure à laquelle la surveillance des modifications commence.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En outre, si un des répertoires ou des fichiers spécifiés dans le `filenames` paramètre est introuvable dans le système de fichiers, il est considéré comme manquant. Si un répertoire ou un fichier est manquant lorsque l’objet avec une dépendance est ajouté à la <xref:System.Web.Caching.Cache>, l’objet mis en cache sera retiré le <xref:System.Web.Caching.Cache> lorsque ce répertoire ou fichier est créé.  
  
 Par exemple, supposons que vous ajoutez un objet à le <xref:System.Web.Caching.Cache> avec une dépendance sur le chemin d’accès de fichier suivant : c:\stocks\xyz.dat. Si ce fichier est introuvable lorsque le <xref:System.Web.Caching.CacheDependency> objet est créé, mais il est créé ultérieurement, l’objet mis en cache est supprimé dès la création du fichier xyz.dat.  
 
 Toutefois, le `cachekeys` dépendance ne fonctionne pas de la même façon. Si au moins une valeur dans la `cachekeys` paramètre n’existe pas au moment d’une instruction insert, l’insertion échoue. Notez qu’il n’existe aucune exception levée pour ce scénario.

> [!NOTE]
>  Suivi des modifications commence immédiatement et n’est pas directement basé sur le `start` paramètre. Utilisez le `start` paramètre à passer une date et une heure dans le passé, par rapport à laquelle vous souhaitez vérifier la date de dernière modification d’un des objets passés dans les `filenames`, `cachekeys`, ou `dependency` paramètres. Si la dernière modification date pour une de ces objets est postérieure à la date et heure passées dans le `start` paramètre, l’élément mis en cache est supprimé à partir de la <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 Le code suivant montre l’exemple un `CreateDependency` (méthode). Lorsque cette méthode est appelée, elle crée un <xref:System.DateTime> objet et le <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> propriété est utilisée pour ajouter un élément au cache avec un paramètre de clé de `key1` et la valeur `Value 1`. Un tableau de chaînes, `dependencyKey`, est créée avec la valeur affectée à la valeur de son premier (et unique) index `key1` également. Le <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> constructeur est ensuite utilisé pour créer un <xref:System.Web.Caching.CacheDependency> objet, `dep1`, qui passe `dependencyKey` comme argument de paramètre. Une seconde <xref:System.Web.Caching.CacheDependency> objet, `dep2`, est ensuite créé à l’aide de ce constructeur, avec `dep1` et <xref:System.DateTime> objet passé en tant qu’arguments de paramètre. Cette deuxième dépendance dépend de la première et la surveillance des dépendances commence 10 secondes après le `CreateDependency` méthode est appelée. Le <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> méthode est ensuite appelée, à l’aide de la seconde <xref:System.Web.Caching.CacheDependency> objet en tant que paramètre. Si la première dépendance change de quelque façon, l’élément mis en cache est invalidé.  
  
 [!code-csharp[CacheDependency Constructor8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor8/CS/dependencytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor8/VB/dependencytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName="DependencyDispose">
      <MemberSignature Language="C#" Value="protected virtual void DependencyDispose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DependencyDispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.DependencyDispose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DependencyDispose ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DependencyDispose();" />
      <MemberSignature Language="F#" Value="abstract member DependencyDispose : unit -&gt; unit&#xA;override this.DependencyDispose : unit -&gt; unit" Usage="cacheDependency.DependencyDispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère les ressources utilisées par la classe <see cref="T:System.Web.Caching.CacheDependency" /> et toutes classes qui dérivent de <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Toute classe qui dérive de la <xref:System.Web.Caching.CacheDependency> classe est nécessaire pour implémenter cette méthode pour nettoyer les ressources de la classe dérivée a utilisé.  
  
   
  
## Examples  
 L’exemple de code suivant montre une classe qui hérite de la <xref:System.Web.Caching.CacheDependency> classe et substitue le <xref:System.Web.Caching.CacheDependency.DependencyDispose%2A> (méthode). Lorsque cette méthode est appelée, elle définit une propriété booléenne personnalisée nommée `Disposed` à `true`.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cacheDependency.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère les ressources utilisées par l’objet <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInit">
      <MemberSignature Language="C#" Value="protected internal void FinishInit ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void FinishInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.FinishInit" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub FinishInit ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void FinishInit();" />
      <MemberSignature Language="F#" Value="member this.FinishInit : unit -&gt; unit" Usage="cacheDependency.FinishInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Termine l'initialisation de l'objet <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Caching.CacheDependency.FinishInit%2A> méthode termine l’initialisation de la <xref:System.Web.Caching.CacheDependency> objet. Cette méthode est appelée par tous les <xref:System.Web.Caching.CacheDependency> constructeurs.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Le <see cref="M:System.Web.Caching.CacheDependency.FinishInit" /> méthode doit être appelée à la fin du constructeur pour les classes dérivées terminer l’initialisation de la <see cref="T:System.Web.Caching.CacheDependency" /> objet.</para></block>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileDependencies">
      <MemberSignature Language="C#" Value="public virtual string[] GetFileDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFileDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetFileDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileDependencies () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetFileDependencies();" />
      <MemberSignature Language="F#" Value="abstract member GetFileDependencies : unit -&gt; string[]&#xA;override this.GetFileDependencies : unit -&gt; string[]" Usage="cacheDependency.GetFileDependencies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtient les dépendances de fichier.</summary>
        <returns>Les dépendances de fichier.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUniqueID">
      <MemberSignature Language="C#" Value="public virtual string GetUniqueID ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUniqueID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetUniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUniqueID () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetUniqueID();" />
      <MemberSignature Language="F#" Value="abstract member GetUniqueID : unit -&gt; string&#xA;override this.GetUniqueID : unit -&gt; string" Usage="cacheDependency.GetUniqueID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Récupère un identificateur unique pour un objet <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <returns>Identificateur unique de l’objet <see cref="T:System.Web.Caching.CacheDependency" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode peut être particulièrement utile pour le suivi de plusieurs instances de la <xref:System.Web.Caching.CacheDependency> classe associée à un élément ou d’une application.  
  
 L’identificateur est une combinaison de nom de fichier (pour une dépendance de fichier) ou le nom de clé (pour une dépendance de clé de cache) et une chaîne de cette méthode attribue à la dépendance. Dans les classes qui dérivent de la <xref:System.Web.Caching.CacheDependency> (classe), vous pouvez substituer cette méthode pour personnaliser la façon dont elle génère l’identificateur unique.  
  
   
  
## Examples  
 L’exemple de code suivant crée un <xref:System.Web.Caching.AggregateCacheDependency> objet, nommé `aggDep`, avec deux <xref:System.Web.Caching.CacheDependency> objets dans son tableau. Une fois `aggDep` est instancié, le code appelle la <xref:System.Web.Caching.CacheDependency.GetUniqueID%2A> méthode permettant de générer un identificateur unique pour les deux dépendances qui `aggDep` et affiche les identificateurs dans la page conteneur. Un élément est ensuite ajouté à la <xref:System.Web.Caching.Cache>, en utilisant le <xref:System.Web.Caching.Cache.Insert%2A> (méthode), avec `aggDep` en tant que dépendance.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Web.Caching.CacheDependency.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si l'objet <see cref="T:System.Web.Caching.CacheDependency" /> a changé.</summary>
        <value><see langword="true" /> si l'objet <see cref="T:System.Web.Caching.CacheDependency" /> a changé ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez ajouter un élément à une application ASP.NET <xref:System.Web.Caching.Cache> avec un <xref:System.Web.Caching.CacheDependency>. Lorsque le <xref:System.Web.Caching.CacheDependency> change, l’élément ajouté à la <xref:System.Web.Caching.Cache> est invalidé et supprimé du cache. Vous pouvez utiliser cette propriété pour déterminer si un <xref:System.Web.Caching.CacheDependency> a changé, puis recréer l’élément dans le <xref:System.Web.Caching.Cache> si qui s’est produite.  
  
   
  
## Examples  
 L’exemple de code suivant montre comment utiliser le <xref:System.Web.Caching.CacheDependency.HasChanged%2A> propriété afin de déterminer si un <xref:System.Web.Caching.CacheDependency> changé depuis la demande précédente pour un élément dans le <xref:System.Web.Caching.Cache>. Le `dt` valeur passée dans le `start` paramètre est défini sur <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName="ItemRemoved">
      <MemberSignature Language="C#" Value="public void ItemRemoved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ItemRemoved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.ItemRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ItemRemoved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ItemRemoved();" />
      <MemberSignature Language="F#" Value="member this.ItemRemoved : unit -&gt; unit" Usage="cacheDependency.ItemRemoved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Appelé lorsqu’une entrée de cache surveillée est supprimée.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDependenciesAlive">
      <MemberSignature Language="C#" Value="public void KeepDependenciesAlive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void KeepDependenciesAlive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.KeepDependenciesAlive" />
      <MemberSignature Language="VB.NET" Value="Public Sub KeepDependenciesAlive ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void KeepDependenciesAlive();" />
      <MemberSignature Language="F#" Value="member this.KeepDependenciesAlive : unit -&gt; unit" Usage="cacheDependency.KeepDependenciesAlive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Met à jour l’heure du dernier accès de chaque élément de cache qui dépend de cet élément.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyDependencyChanged">
      <MemberSignature Language="C#" Value="protected void NotifyDependencyChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void NotifyDependencyChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub NotifyDependencyChanged (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void NotifyDependencyChanged(System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.NotifyDependencyChanged : obj * EventArgs -&gt; unit" Usage="cacheDependency.NotifyDependencyChanged (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Source de l'événement.</param>
        <param name="e">Objet <see cref="T:System.EventArgs" /> qui contient les données d'événement.</param>
        <summary>Avertit l'objet <see cref="T:System.Web.Caching.CacheDependency" /> de base que la dépendance représentée par une classe <see cref="T:System.Web.Caching.CacheDependency" /> dérivée a changé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Toute classe qui dérive de la <xref:System.Web.Caching.CacheDependency> classe doit implémenter cette méthode.  
  
 Lorsque vous dérivez à partir de la <xref:System.Web.Caching.CacheDependency> (classe), vous utilisez la fonctionnalité de base de toute méthode ou propriété que vous n’avez pas remplacé. Lorsque vous créez une instance de la classe dérivée, elle représente les fichiers, des clés de cache, des tables de base de données ou d’autres objets arbitraires que vous souhaitez rendre un élément mis en cache dépendante. Lorsqu’un élément de dépendance change, cette méthode avertit la fonctionnalité de base de la <xref:System.Web.Caching.CacheDependency> classe l’élément a changé, afin que les valeurs de la <xref:System.Web.Caching.CacheDependency.HasChanged%2A> et <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> propriétés peuvent être mis à jour.  
  
   
  
## Examples  
 L’exemple de code suivant montre une classe qui hérite de la <xref:System.Web.Caching.CacheDependency> classe. Il crée une méthode publique, `ResetDependency`, qui utilise le <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> méthode pour modifier l’heure à laquelle la dépendance a été modifiée, puis appelle le <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> (méthode).  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName="SetCacheDependencyChanged">
      <MemberSignature Language="C#" Value="public void SetCacheDependencyChanged (Action&lt;object,EventArgs&gt; dependencyChangedAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCacheDependencyChanged(class System.Action`2&lt;object, class System.EventArgs&gt; dependencyChangedAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCacheDependencyChanged (dependencyChangedAction As Action(Of Object, EventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCacheDependencyChanged(Action&lt;System::Object ^, EventArgs ^&gt; ^ dependencyChangedAction);" />
      <MemberSignature Language="F#" Value="member this.SetCacheDependencyChanged : Action&lt;obj, EventArgs&gt; -&gt; unit" Usage="cacheDependency.SetCacheDependencyChanged dependencyChangedAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyChangedAction" Type="System.Action&lt;System.Object,System.EventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="dependencyChangedAction">L’action de modification de dépendance.</param>
        <summary>Ajoute une méthode d’action pour notifier les parties intéressées par les modifications apportées à cette dépendance.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUtcLastModified">
      <MemberSignature Language="C#" Value="protected void SetUtcLastModified (DateTime utcLastModified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetUtcLastModified(valuetype System.DateTime utcLastModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetUtcLastModified (utcLastModified As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetUtcLastModified(DateTime utcLastModified);" />
      <MemberSignature Language="F#" Value="member this.SetUtcLastModified : DateTime -&gt; unit" Usage="cacheDependency.SetUtcLastModified utcLastModified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utcLastModified" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utcLastModified">Heure de la dernière modification de la dépendance.</param>
        <summary>Marque l'heure de la dernière modification d'une dépendance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple de code suivant montre une classe qui hérite de la <xref:System.Web.Caching.CacheDependency> classe. Il crée une méthode publique, `ResetDependency`, qui utilise le <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> méthode pour modifier l’heure à laquelle la dépendance a été modifiée, puis appelle le <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> (méthode).  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
    <Member MemberName="TakeOwnership">
      <MemberSignature Language="C#" Value="public bool TakeOwnership ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TakeOwnership() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.TakeOwnership" />
      <MemberSignature Language="VB.NET" Value="Public Function TakeOwnership () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TakeOwnership();" />
      <MemberSignature Language="F#" Value="member this.TakeOwnership : unit -&gt; bool" Usage="cacheDependency.TakeOwnership " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Permet au premier utilisateur de déclarer la propriété exclusive de cette dépendance.</summary>
        <returns><see langword="true" /> si l’élément a été le premier à prendre possession ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode déclare que la dépendance est utilisée. Si un autre élément, précédemment appelé cette méthode et pris possession, `false` est retournée. Un <xref:System.Web.Caching.CacheDependency> est utilisable uniquement par l’entrée d’un cache. Lorsqu’un élément est ajouté à un cache avec les dépendances de cache spécifiés, le cache doit prendre possession de ces dépendances pour vous assurer qu’ils ne sont pas réutilisés quelque part ailleurs.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcLastModified">
      <MemberSignature Language="C#" Value="public DateTime UtcLastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcLastModified" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcLastModified As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcLastModified { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcLastModified : DateTime" Usage="System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'heure de la dernière modification de la dépendance.</summary>
        <value>Heure de la dernière modification de la dépendance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est mesurée en temps universel coordonné (UTC) (également appelé Greenwich Mean Time).  
  
   
  
## Examples  
 Le code suivant exemple utilise le <xref:System.Web.Caching.AggregateCacheDependency> classe pour ajouter un élément, avec deux <xref:System.Web.Caching.CacheDependency> dépendances, de l’objet à le <xref:System.Web.Caching.Cache>. Lorsqu’une demande pour le <xref:System.Web.Caching.Cache> élément est rendu, le code vérifie si l’élément est dans le <xref:System.Web.Caching.Cache>. Dans le cas, le <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> propriété est convertie en une chaîne et affichée sur la page. Si elle n’est pas le cas, l’élément et ses deux dépendances sont créés et ajoutés à la <xref:System.Web.Caching.Cache>.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">La mise en cache des données d’Application</related>
      </Docs>
    </Member>
  </Members>
</Type>