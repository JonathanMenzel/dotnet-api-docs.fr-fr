<Type Name="Cache" FullName="System.Web.Caching.Cache">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="351a9cdc2b6843640a434fbfe81d79fd49549b3f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39811481" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Cache : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Cache extends System.Object implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.Cache" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Cache&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Cache sealed : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type Cache = class&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Implémente le cache pour une application Web. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une instance de cette classe est créée par domaine d’application, et elle reste valide aussi longtemps que le domaine d’application est actif. Plus d’informations sur une instance de cette classe sont disponibles via le `Cache` propriété de la <xref:System.Web.HttpContext> objet ou le `Cache` propriété de la <xref:System.Web.UI.Page> objet.  
  
> [!NOTE]
>  Le <xref:System.Web.Caching.Cache> classe n’est pas conçue pour une utilisation en dehors des applications ASP.NET. Il a été conçu et testé pour être utilisé dans ASP.NET pour fournir la mise en cache pour les applications Web. Pour les autres types d’applications, telles que les applications de console ou des applications Windows Forms, utilisez la <xref:System.Runtime.Caching.ObjectCache> classe.  
  
   
  
## Examples  
 L’exemple suivant est une page qui indique aux utilisateurs la valeur assignée à un élément dans le cache et les informe lorsque l’élément est supprimé du cache. Il crée un `RemovedCallback` (méthode), qui a la signature de la `CacheItemRemovedCallback` délégué, pour avertir les utilisateurs lorsque l’élément de cache est supprimé, et il utilise le <xref:System.Web.Caching.CacheItemRemovedReason> énumération pour leur indiquer pourquoi il a été supprimé. En outre, il utilise le <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> propriété pour ajouter des objets au cache et récupérer la valeur de ces objets. Dans le `AddItemToCache` (méthode), il utilise le <xref:System.Web.Caching.Cache.Add%2A?displayProperty=nameWithType> méthode pour ajouter un élément au cache. Pour utiliser le `CacheItemRemovedCallback` déléguer, vous devez ajouter un élément au cache avec cette méthode ou la <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> (méthode), qui qu’ASP.NET peut établir automatiquement la méthode appropriée n’appelle lorsque l’élément est supprimé. Personnalisé `RemoveItemFromCache` méthode utilise le <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=nameWithType> méthode pour supprimer explicitement l’élément à partir du cache, à l’origine le `RemovedCallback` méthode à appeler.  
  
> [!NOTE]
>  L’instance de Cache est accessible par l’extrait de code ci-dessous est un membre de la <xref:System.Web.UI.Page> objet qui hérite de cet exemple.  
  
 [!code-aspx-csharp[System.Web.Caching Examples#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#1)]
 [!code-aspx-vb[System.Web.Caching Examples#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#1)]
  
 ]]></format>
    </remarks>
    <threadsafe>Ce type est thread-safe.</threadsafe>
    <altmember cref="T:System.Web.HttpContext" />
    <altmember cref="T:System.Web.Caching.CacheDependency" />
    <altmember cref="T:System.Web.Caching.CacheItemRemovedCallback" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cache();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Caching.Cache" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public object Add (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System.Web.Caching.CacheItemPriority priority, System.Web.Caching.CacheItemRemovedCallback onRemoveCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Add(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration, valuetype System.Web.Caching.CacheItemPriority priority, class System.Web.Caching.CacheItemRemovedCallback onRemoveCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan, priority As CacheItemPriority, onRemoveCallback As CacheItemRemovedCallback) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Add(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System::Web::Caching::CacheItemPriority priority, System::Web::Caching::CacheItemRemovedCallback ^ onRemoveCallback);" />
      <MemberSignature Language="F#" Value="member this.Add : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan * System.Web.Caching.CacheItemPriority * System.Web.Caching.CacheItemRemovedCallback -&gt; obj" Usage="cache.Add (key, value, dependencies, absoluteExpiration, slidingExpiration, priority, onRemoveCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Web.Caching.CacheItemPriority" />
        <Parameter Name="onRemoveCallback" Type="System.Web.Caching.CacheItemRemovedCallback" />
      </Parameters>
      <Docs>
        <param name="key">Clé de cache utilisée pour faire référence à l'élément.</param>
        <param name="value">Élément à ajouter au cache.</param>
        <param name="dependencies">Dépendances de fichier ou de clé de cache pour l'élément considéré. Lorsqu'une dépendance change, l'objet n'est plus valide et est supprimé du cache. En l'absence de dépendances, ce paramètre contient <see langword="null" />.</param>
        <param name="absoluteExpiration">Moment auquel l'objet ajouté expire et est supprimé du cache. Si vous utilisez l’expiration décalée, le paramètre <c>absoluteExpiration</c> doit avoir la valeur <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
        <param name="slidingExpiration">Intervalle entre le dernier accès à l'objet ajouté au cache et le moment où cet objet expire. Si cette valeur est équivalente à 20 minutes, l'objet expire et est supprimé du cache 20 minutes après son dernier accès. Si vous utilisez l’expiration absolue, le paramètre <c>slidingExpiration</c> doit avoir la valeur <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
        <param name="priority">Coût relatif de l'objet exprimé par l'énumération <see cref="T:System.Web.Caching.CacheItemPriority" />. Le cache utilise cette valeur lorsqu'il évince des objets ; les objets de moindre coût sont supprimés du cache avant les objets de coût supérieur.</param>
        <param name="onRemoveCallback">Délégué qui, s'il est fourni, est appelé lorsqu'un objet est supprimé du cache. Vous pouvez l'utiliser pour notifier aux applications que leurs objets sont supprimés du cache.</param>
        <summary>Ajoute l'élément spécifié à l'objet <see cref="T:System.Web.Caching.Cache" /> avec des dépendances, des stratégies d'expiration et de priorité, ainsi qu'un délégué que vous pouvez utiliser pour avertir votre application lorsque l'élément inséré est supprimé du <see langword="Cache" />.</summary>
        <returns>Objet qui représente l'élément qui a été ajouté si l'élément était stocké précédemment dans le cache ; sinon, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appels à cette méthode échoue si un élément avec le même `key` paramètre est déjà stocké dans le `Cache`. Pour remplacer une existante `Cache` élément en utilisant le même `key` paramètre, utilisez le <xref:System.Web.Caching.Cache.Insert%2A> (méthode).  
  
 Vous ne pouvez pas définir à la fois le `absoluteExpiration` et `slidingExpiration` paramètres. Si vous avez l’intention de l’élément de cache expire à une heure spécifique, vous définissez le `absoluteExpiration` paramètre à l’heure spécifique et le `slidingExpiration` paramètre <xref:System.Web.Caching.Cache.NoSlidingExpiration>.  
  
 Si vous avez l’intention de l’élément de cache expire après un certain laps de temps écoulé depuis l’élément de dernier accès, vous définissez le `slidingExpiration` paramètre à l’intervalle d’expiration et le `absoluteExpiration` paramètre <xref:System.Web.Caching.Cache.NoAbsoluteExpiration>.  
  
   
  
## Examples  
 L’exemple suivant crée un `AddItemToCache` (méthode). Lorsque cette méthode est appelée, elle définit un `itemRemoved` propriété `false` et inscrit un `onRemove` méthode avec une nouvelle instance de la <xref:System.Web.Caching.CacheItemRemovedCallback> déléguer. La signature du délégué est utilisée dans le `RemovedCallback` (méthode). Le `AddItemToCache` méthode vérifie ensuite la valeur associée à la `Key1` clé dans le cache. Si la valeur est `null`, le `Add` méthode place un élément dans le cache avec une clé de `Key1`, une valeur de `Value 1`, une expiration absolue de 60 secondes et une priorité de cache élevée. Il utilise également le `onRemove` méthode en tant qu’argument. Cela permet la `RemovedCallback` méthode à appeler lorsque cet élément est supprimé du cache.  
  
> [!NOTE]
>  Pour obtenir des exemples montrant comment utiliser le <xref:System.Web.Caching.CacheDependency> classe et le <xref:System.Web.Caching.CacheItemRemovedCallback> le délégué, consultez [Caching Application Data](http://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d).  
  
 [!code-csharp[System.Web.Caching Examples#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#3)]
 [!code-vb[System.Web.Caching Examples#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="key" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="slidingExpiration" /> a une valeur inférieure à <see langword="TimeSpan.Zero" /> ou supérieure à un an.</exception>
        <exception cref="T:System.ArgumentException">Les paramètres <paramref name="absoluteExpiration" /> et <paramref name="slidingExpiration" /> sont tous deux définis pour l'élément que vous tentez d'ajouter au <see langword="Cache" />.</exception>
        <altmember cref="T:System.Web.Caching.CacheDependency" />
        <altmember cref="T:System.Web.Caching.CacheItemPriority" />
        <altmember cref="T:System.Web.Caching.CacheItemRemovedCallback" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.Caching.Cache.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre d’éléments stockés dans le cache.</summary>
        <value>Le nombre d’éléments stockés dans le cache.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété peut être utile lors de l’analyse des performances de votre application ou lors de l’utilisation des fonctionnalités de traçage ASP.NET.  
  
   
  
## Examples  
 L’exemple suivant obtient la valeur de la `Count` propriété, le convertit en une chaîne et assigne la chaîne à la <xref:System.Web.UI.WebControls.Label.Text%2A> propriété d’un <xref:System.Web.UI.WebControls.Label> contrôle de serveur, Web `Label1`.  
  
 [!code-csharp[System.Web.Caching.Cache.Count#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.Cache.Count/CS/cachecountcs.aspx#1)]
 [!code-vb[System.Web.Caching.Cache.Count#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.Cache.Count/VB/cachecountvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectivePercentagePhysicalMemoryLimit">
      <MemberSignature Language="C#" Value="public long EffectivePercentagePhysicalMemoryLimit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 EffectivePercentagePhysicalMemoryLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EffectivePercentagePhysicalMemoryLimit As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long EffectivePercentagePhysicalMemoryLimit { long get(); };" />
      <MemberSignature Language="F#" Value="member this.EffectivePercentagePhysicalMemoryLimit : int64" Usage="System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le pourcentage de mémoire physique qui peut être consommée par une application avant que 'ASP.NET commence à supprimer des éléments du cache.</summary>
        <value>Pourcentage de mémoire physique disponible pour l'application.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A> propriété retourne le pourcentage de mémoire physique disponible pour l’application. Lorsque le pourcentage disponible est faible, l’algorithme du cache commence la suppression d’éléments à partir du cache.  
  
 Le <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A> propriété peut être définie avec la `percentagePhysicalMemoryUsedLimit` attribut de la [cache, élément de caching (schéma des paramètres ASP.NET)](http://msdn.microsoft.com/library/68fa0040-5abf-4c73-93fc-17e3c6af3299) élément dans le fichier de configuration de l’application. Si le `percentagePhysicalMemoryUsedLimit` attribut n’est pas défini, l’algorithme du cache détermine la taille maximale du cache et le <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A> propriété est calculée.  
  
 <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A> est introduit dans le .NET Framework version 3.5.  Pour plus d’informations, consultez [Versions et dépendances](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Caching.Cache.EffectivePrivateBytesLimit" />
      </Docs>
    </Member>
    <Member MemberName="EffectivePrivateBytesLimit">
      <MemberSignature Language="C#" Value="public long EffectivePrivateBytesLimit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 EffectivePrivateBytesLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.EffectivePrivateBytesLimit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EffectivePrivateBytesLimit As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long EffectivePrivateBytesLimit { long get(); };" />
      <MemberSignature Language="F#" Value="member this.EffectivePrivateBytesLimit : int64" Usage="System.Web.Caching.Cache.EffectivePrivateBytesLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre d'octets disponibles pour le cache.</summary>
        <value>Nombre d'octets disponibles pour le cache.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Caching.Cache.EffectivePrivateBytesLimit%2A> propriété retourne le nombre d’octets qui peuvent être utilisés par le processus d’application. Une fois cette limite est atteinte, l’algorithme du cache commence à nettoyer énergiquement le cache.  
  
 Le <xref:System.Web.Caching.Cache.EffectivePrivateBytesLimit%2A> propriété peut être définie avec la `privateBytesLimit` attribut de la [cache, élément de caching (schéma des paramètres ASP.NET)](http://msdn.microsoft.com/library/68fa0040-5abf-4c73-93fc-17e3c6af3299) élément dans le fichier de configuration de l’application. Lorsque le `privateBytesLimit` attribut n’est pas défini, l’algorithme du cache détermine la taille maximale du cache et le <xref:System.Web.Caching.Cache.EffectivePrivateBytesLimit%2A> propriété contient la taille choisie par l’algorithme.  
  
   
  
## Examples  
 <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public object Get (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Get(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Get(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.Get : string -&gt; obj" Usage="cache.Get key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Identificateur de l'élément à récupérer du cache.</param>
        <summary>Récupère l'élément spécifié de l'objet <see cref="T:System.Web.Caching.Cache" />.</summary>
        <returns>Élément récupéré du cache ou <see langword="null" /> si la clé est introuvable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant montre comment récupérer la valeur mise en cache pour un contrôle serveur ASP.NET la zone de texte.  
  
 [!code-csharp[Classic Cache.Get Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Get Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Get Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Get Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="cache.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrouve un énumérateur de dictionnaire utilisé pour itérer sur les paramètres de clé et leurs valeurs contenues dans le cache.</summary>
        <returns>Énumérateur pour itérer au sein de l'objet <see cref="T:System.Web.Caching.Cache" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Éléments peuvent être ajoutés à ou supprimés du cache pendant que cette méthode énumère les éléments.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Collections.IDictionaryEnumerator> objet, `CacheEnum`, en utilisant le `GetEnumerator` (méthode). L’énumérateur passe par le biais du cache, convertit la valeur de chaque élément mis en cache pour une chaîne, puis écrit les valeurs dans une page Web Forms.  
  
 [!code-csharp[Cache.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Cache.GetEnumerator/CS/getenumcs.aspx#1)]
 [!code-vb[Cache.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Cache.GetEnumerator/VB/getenumvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Insert">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Insère un élément dans l'objet <see cref="T:System.Web.Caching.Cache" />. Utilisez l'une des versions de cette méthode pour remplacer un élément <see langword="Cache" /> existant par le même paramètre <paramref name="key" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj -&gt; unit" Usage="cache.Insert (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">Clé de cache utilisée pour faire référence à l'élément.</param>
        <param name="value">Objet à insérer dans le cache.</param>
        <summary>Insère un élément dans l'objet <see cref="T:System.Web.Caching.Cache" /> avec une clé de cache pour faire référence à son emplacement, en utilisant les valeurs par défaut fournies par l'énumération <see cref="T:System.Web.Caching.CacheItemPriority" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplace un élément du cache existant dont la clé correspond à la `key` paramètre. L’objet ajouté au cache à l’aide de cette surcharge de la `Insert` méthode est insérée sans dépendances de fichier ou cache, une priorité de <xref:System.Web.Caching.CacheItemPriority.Default>, une valeur d’expiration décalée <xref:System.Web.Caching.Cache.NoSlidingExpiration>et une valeur d’expiration absolue <xref:System.Web.Caching.Cache.NoAbsoluteExpiration>.  
  
   
  
## Examples  
 L’exemple suivant montre comment insérer un élément dans le cache d’une application.  
  
 [!code-csharp[Classic Cache.Insert Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="key" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency -&gt; unit" Usage="cache.Insert (key, value, dependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="key">Clé de cache utilisée pour identifier l'élément.</param>
        <param name="value">Objet à insérer dans le cache.</param>
        <param name="dependencies">Dépendances de fichier ou de clé de cache pour l'objet inséré. Lorsqu'une dépendance change, l'objet n'est plus valide et est supprimé du cache. En l'absence de dépendances, ce paramètre contient <see langword="null" />.</param>
        <summary>Insère un objet dans le <see cref="T:System.Web.Caching.Cache" /> qui présente des dépendances de fichier ou de clé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplace un élément du cache existant dont la clé correspond à la `key` paramètre. L’objet ajouté au cache à l’aide de cette surcharge de la `Insert` méthode est insérée sans dépendances de fichier ou cache, une priorité de <xref:System.Web.Caching.CacheItemPriority.Default>, une valeur d’expiration décalée <xref:System.Web.Caching.Cache.NoSlidingExpiration>et une valeur d’expiration absolue <xref:System.Web.Caching.Cache.NoAbsoluteExpiration>.  
  
   
  
## Examples  
 L’exemple suivant montre comment insérer un élément dans le cache d’une application avec une dépendance de cache sur un fichier de configuration XML.  
  
 [!code-csharp[Classic Cache.Insert1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="key" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
        <altmember cref="T:System.Web.Caching.CacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan -&gt; unit" Usage="cache.Insert (key, value, dependencies, absoluteExpiration, slidingExpiration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="key">Clé du cache utilisée pour faire référence à l'objet.</param>
        <param name="value">Objet à insérer dans le cache.</param>
        <param name="dependencies">Dépendances de fichier ou de clé de cache pour l'objet inséré. Lorsqu'une dépendance change, l'objet n'est plus valide et est supprimé du cache. En l'absence de dépendances, ce paramètre contient <see langword="null" />.</param>
        <param name="absoluteExpiration">Moment auquel l'objet inséré expire et est supprimé du cache. Pour éviter d'éventuels problèmes avec l'heure locale, par exemple lors des passages de l'heure d'hiver à l'heure d'été, utilisez <see cref="P:System.DateTime.UtcNow" /> au lieu de <see cref="P:System.DateTime.Now" /> pour cette valeur de paramètre. Si vous utilisez l’expiration absolue, le paramètre <c>slidingExpiration</c> doit avoir la valeur <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
        <param name="slidingExpiration">L’intervalle entre l’heure du dernier accès de l’objet inséré et l’heure à laquelle cet objet expire. Si cette valeur est équivalente à 20 minutes, l’objet expire et est supprimé du cache 20 minutes après son dernier accès. Si vous utilisez l’expiration décalée, le paramètre <c>absoluteExpiration</c> doit avoir la valeur <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
        <summary>Insère un objet dans le <see cref="T:System.Web.Caching.Cache" /> avec des dépendances et des stratégies d'expiration.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplace un existant `Cache` élément avec le même `key` paramètre.  
  
 Si le `slidingExpiration` paramètre est défini sur <xref:System.Web.Caching.Cache.NoSlidingExpiration>, l’expiration décalée est désactivée. Si vous définissez la `slidingExpiration` est supérieure à <xref:System.TimeSpan.Zero>, le `absoluteExpiration` paramètre est défini sur <xref:System.DateTime.Now%2A> plus la valeur contenue dans le `slidingExpiration` paramètre. Si l’élément est demandée à partir du cache avant que la quantité de temps spécifié par le `absoluteExpiration` paramètre, l’élément sera placé dans le cache à nouveau, et `absoluteExpiration` sera à nouveau défini sur `DateTime.Now` plus la valeur contenue dans le `slidingExpiration` paramètre. Si l’élément n’est pas demandé à partir du cache avant la date dans le `absoluteExpiration` paramètre, l’élément est supprimé du cache. . L’élément ajouté au cache à l’aide de cette surcharge de la méthode d’insertion est inséré avec une priorité de <xref:System.Web.Caching.CacheItemPriority.Default>.  
  
   
  
## Examples  
 L’exemple suivant montre comment insérer un élément dans le cache d’une application avec une expiration absolue.  
  
> [!NOTE]
>  Depuis cette forme de la `Insert` méthode prend en charge les dépendances de cache, si l’élément n’a aucune dépendance, vous devez déclarer le `dependency` paramètre en tant que `null` (`Nothing` en Visual Basic) dans la liste délimitée par des virgules des paramètres.  
  
 [!code-csharp[Classic Cache.Insert2 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert2 Example/VB/source.vb#1)]  
  
 L’exemple suivant montre comment insérer un élément dans le cache avec une expiration décalée.  
  
 [!code-csharp[Classic Cache.Insert2 Example#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert2 Example/CS/source.cs#2)]
 [!code-vb[Classic Cache.Insert2 Example#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert2 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="key" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Vous avez affecté au paramètre <paramref name="slidingExpiration" /> une valeur inférieure à <see langword="TimeSpan.Zero" />, ou l'équivalent de plus d'une année.</exception>
        <exception cref="T:System.ArgumentException">Les paramètres <paramref name="absoluteExpiration" /> et <paramref name="slidingExpiration" /> sont tous deux définis pour l'élément que vous tentez d'ajouter au <see langword="Cache" />.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System.Web.Caching.CacheItemUpdateCallback onUpdateCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration, class System.Web.Caching.CacheItemUpdateCallback onUpdateCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemUpdateCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan, onUpdateCallback As CacheItemUpdateCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System::Web::Caching::CacheItemUpdateCallback ^ onUpdateCallback);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan * System.Web.Caching.CacheItemUpdateCallback -&gt; unit" Usage="cache.Insert (key, value, dependencies, absoluteExpiration, slidingExpiration, onUpdateCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
        <Parameter Name="onUpdateCallback" Type="System.Web.Caching.CacheItemUpdateCallback" />
      </Parameters>
      <Docs>
        <param name="key">Clé du cache utilisée pour faire référence à l'objet.</param>
        <param name="value">Objet à insérer dans le cache.</param>
        <param name="dependencies">Dépendances de fichier ou de clé de cache pour l'élément considéré. Lorsqu'une dépendance change, l'objet n'est plus valide et est supprimé du cache. En l'absence de dépendances, ce paramètre contient <see langword="null" />.</param>
        <param name="absoluteExpiration">Moment auquel l'objet inséré expire et est supprimé du cache. Pour éviter d'éventuels problèmes avec l'heure locale, par exemple lors des passages de l'heure d'hiver à l'heure d'été, utilisez <see cref="P:System.DateTime.UtcNow" /> au lieu de <see cref="P:System.DateTime.Now" /> pour cette valeur de paramètre. Si vous utilisez l’expiration absolue, le paramètre <c>slidingExpiration</c> doit avoir la valeur <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
        <param name="slidingExpiration">Intervalle entre l'heure du dernier accès à l'objet en cache et le moment où cet objet expire. Si cette valeur est équivalente à 20 minutes, l’objet expire et est supprimé du cache 20 minutes après son dernier accès. Si vous utilisez l’expiration décalée, le paramètre <c>absoluteExpiration</c> doit avoir la valeur <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
        <param name="onUpdateCallback">Délégué qui est appelé avant qu'un objet ne soit supprimé du cache. Vous pouvez l'utiliser pour mettre à jour l'élément en cache et vous assurer qu'il ne soit pas supprimé du cache.</param>
        <summary>Ajoute un objet à l'objet <see cref="T:System.Web.Caching.Cache" /> avec des dépendances, des stratégies d'expiration et un délégué que vous pouvez utiliser pour avertir l'application avant que l'élément ne soit supprimé du cache.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Web.Caching.Cache.Insert%2A> méthode vous permet d’insérer un nouvel élément dans le cache et de fournir un délégué qui est appelé avant que l’élément est supprimé du cache. Dans le délégué, vous pouvez mettre à jour l’élément mis en cache et empêcher ainsi sa en cours de suppression à partir du cache.  
  
 Cette méthode remplace un existant `Cache` élément avec le même `key` paramètre.  
  
 Vous ne pouvez pas définir à la fois le `absoluteExpiration` et `slidingExpiration` paramètres. Si vous avez l’intention de l’élément de cache expire à une heure spécifique, vous définissez le `absoluteExpiration` paramètre à l’heure spécifique et le `slidingExpiration` paramètre <xref:System.Web.Caching.Cache.NoSlidingExpiration>.  
  
 Si vous avez l’intention de l’élément de cache expire après un certain délai depuis l’élément de dernier accès, vous définissez le `slidingExpiration` paramètre à l’intervalle d’expiration et que vous définissez le `absoluteExpiration` paramètre <xref:System.Web.Caching.Cache.NoAbsoluteExpiration>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="key" />, <paramref name="value" /> ou <paramref name="onUpdateCallback" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Vous avez affecté au paramètre <paramref name="slidingExpiration" /> une valeur inférieure à <see langword="TimeSpan.Zero" />, ou l'équivalent de plus d'une année.</exception>
        <exception cref="T:System.ArgumentException">Les paramètres <paramref name="absoluteExpiration" /> et <paramref name="slidingExpiration" /> sont tous deux définis pour l'élément que vous tentez d'ajouter au <see langword="Cache" />.  
  
- ou - 
Le paramètre <paramref name="dependencies" /> est <see langword="null" />, le paramètre <paramref name="absoluteExpiration" /> a la valeur <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />, et le paramètre <paramref name="slidingExpiration" /> a la valeur <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</exception>
        <altmember cref="T:System.Web.Caching.CacheItemUpdateCallback" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System.Web.Caching.CacheItemPriority priority, System.Web.Caching.CacheItemRemovedCallback onRemoveCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration, valuetype System.Web.Caching.CacheItemPriority priority, class System.Web.Caching.CacheItemRemovedCallback onRemoveCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan, priority As CacheItemPriority, onRemoveCallback As CacheItemRemovedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System::Web::Caching::CacheItemPriority priority, System::Web::Caching::CacheItemRemovedCallback ^ onRemoveCallback);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan * System.Web.Caching.CacheItemPriority * System.Web.Caching.CacheItemRemovedCallback -&gt; unit" Usage="cache.Insert (key, value, dependencies, absoluteExpiration, slidingExpiration, priority, onRemoveCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Web.Caching.CacheItemPriority" />
        <Parameter Name="onRemoveCallback" Type="System.Web.Caching.CacheItemRemovedCallback" />
      </Parameters>
      <Docs>
        <param name="key">Clé du cache utilisée pour faire référence à l'objet.</param>
        <param name="value">Objet à insérer dans le cache.</param>
        <param name="dependencies">Dépendances de fichier ou de clé de cache pour l'élément considéré. Lorsqu'une dépendance change, l'objet n'est plus valide et est supprimé du cache. En l'absence de dépendances, ce paramètre contient <see langword="null" />.</param>
        <param name="absoluteExpiration">Moment auquel l'objet inséré expire et est supprimé du cache. Pour éviter d'éventuels problèmes avec l'heure locale, par exemple lors des passages de l'heure d'hiver à l'heure d'été, utilisez <see cref="P:System.DateTime.UtcNow" /> au lieu de <see cref="P:System.DateTime.Now" /> pour cette valeur de paramètre. Si vous utilisez l’expiration absolue, le paramètre <c>slidingExpiration</c> doit avoir la valeur <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
        <param name="slidingExpiration">Intervalle entre le dernier accès à l'objet inséré et le moment où cet objet expire. Si cette valeur est équivalente à 20 minutes, l’objet expire et est supprimé du cache 20 minutes après son dernier accès. Si vous utilisez l’expiration décalée, le paramètre <c>absoluteExpiration</c> doit avoir la valeur <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
        <param name="priority">Coût de l'objet par rapport aux autres éléments stockés dans le cache, exprimé par l'énumération <see cref="T:System.Web.Caching.CacheItemPriority" />. Le cache utilise cette valeur lorsqu'il évince des objets ; les objets de moindre coût sont supprimés du cache avant les objets de coût supérieur.</param>
        <param name="onRemoveCallback">Délégué qui, s'il est fourni, est appelé lorsqu'un objet est supprimé du cache. Vous pouvez l'utiliser pour notifier aux applications que leurs objets sont supprimés du cache.</param>
        <summary>Ajoute un objet au <see cref="T:System.Web.Caching.Cache" /> avec des dépendances, des stratégies d'expiration et de priorité, ainsi qu'un délégué que vous pouvez utiliser pour avertir votre application lorsque l'élément inséré est supprimé du <see langword="Cache" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode remplace un existant `Cache` élément avec le même `key` paramètre.  
  
 Vous ne pouvez pas définir à la fois le `absoluteExpiration` et `slidingExpiration` paramètres. Si vous avez l’intention de l’élément de cache expire à une heure spécifique, vous définissez le `absoluteExpiration` paramètre à l’heure spécifique et le `slidingExpiration` paramètre <xref:System.Web.Caching.Cache.NoSlidingExpiration>.  
  
 Si vous avez l’intention de l’élément de cache expire après un certain laps de temps s’est écoulé depuis le dernier accès à l’élément, vous définissez le `slidingExpiration` paramètre à l’intervalle d’expiration et le `absoluteExpiration` paramètre <xref:System.Web.Caching.Cache.NoAbsoluteExpiration>.  
  
   
  
## Examples  
 L’exemple suivant montre comment assigner une priorité élevée d’élément lorsque vous l’insérez dans votre application `Cache` objet.  
  
> [!NOTE]
>  Pour plus d’informations sur l’utilisation de cette méthode avec le <xref:System.Web.Caching.CacheItemRemovedCallback> le délégué, consultez [Comment : avertir une Application lorsqu’un élément est retiré du Cache](http://msdn.microsoft.com/library/38c33aa0-afe9-40ba-a1a4-1ebab95286ef).  
  
 [!code-csharp[Classic Cache.Insert3 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert3 Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="key" /> ou <paramref name="value" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Vous avez affecté au paramètre <paramref name="slidingExpiration" /> une valeur inférieure à <see langword="TimeSpan.Zero" />, ou l'équivalent de plus d'une année.</exception>
        <exception cref="T:System.ArgumentException">Les paramètres <paramref name="absoluteExpiration" /> et <paramref name="slidingExpiration" /> sont tous deux définis pour l'élément que vous tentez d'ajouter au <see langword="Cache" />.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.Web.Caching.CacheItemPriority" />
        <altmember cref="T:System.Web.Caching.CacheItemRemovedCallback" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ key); void set(System::String ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="System.Web.Caching.Cache.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Objet <see cref="T:System.String" /> qui représente la clé pour l'élément mis en cache.</param>
        <summary>Obtient ou définit l'élément du cache correspondant à la clé spécifiée.</summary>
        <value>Élément du cache spécifié.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser cette propriété pour récupérer la valeur d’un élément de cache spécifiée, ou pour ajouter un élément et une clé pour celui-ci dans le cache. Ajout d’un cache en utilisant le <xref:System.Web.Caching.Cache.Item%2A> propriété revient à appeler le <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> (méthode).  
  
   
  
## Examples  
 L’exemple suivant utilise le `Item` propriété pour récupérer la valeur d’un objet mis en cache associé à le `Key1` clé. Il utilise ensuite la <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType> méthode pour écrire la valeur et de texte d’introduction et de l’élément HTML de B vers une page Web Forms.  
  
 [!code-csharp[System.Web.Caching Examples#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#5)]
 [!code-vb[System.Web.Caching Examples#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#5)]  
  
 L’exemple suivant illustre l’utilisation de cette propriété pour insérer la valeur d’une zone de texte dans le cache.  
  
 [!code-csharp[Classic Cache.this Example#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.this Example/CS/source.cs#2)]
 [!code-vb[Classic Cache.this Example#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.this Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoAbsoluteExpiration">
      <MemberSignature Language="C#" Value="public static readonly DateTime NoAbsoluteExpiration;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime NoAbsoluteExpiration" />
      <MemberSignature Language="DocId" Value="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NoAbsoluteExpiration As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime NoAbsoluteExpiration;" />
      <MemberSignature Language="F#" Value=" staticval mutable NoAbsoluteExpiration : DateTime" Usage="System.Web.Caching.Cache.NoAbsoluteExpiration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Utilisé dans le paramètre <paramref name="absoluteExpiration" /> d'un appel de méthode <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> pour indiquer que l'élément ne doit jamais expirer. Ce champ est en lecture seule.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’il est utilisé, ce champ définit le `absoluteExpiration` paramètre égal à <xref:System.DateTime.MaxValue>, qui est une constante qui représente la plus grande possible `DateTime` valeur, le 31/12/9999 11:59:59 PM.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser le `NoAbsoluteExpiration` champ pour désactiver les expirations absolues lors de l’insertion d’un élément dans le `Cache`.  
  
 [!code-csharp[Classic Cache.NoAbsoluteExpiration Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.NoAbsoluteExpiration Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.NoAbsoluteExpiration Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.NoAbsoluteExpiration Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="NoSlidingExpiration">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan NoSlidingExpiration;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan NoSlidingExpiration" />
      <MemberSignature Language="DocId" Value="F:System.Web.Caching.Cache.NoSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NoSlidingExpiration As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan NoSlidingExpiration;" />
      <MemberSignature Language="F#" Value=" staticval mutable NoSlidingExpiration : TimeSpan" Usage="System.Web.Caching.Cache.NoSlidingExpiration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Utilisé comme paramètre <paramref name="slidingExpiration" /> dans un appel à la méthode <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> ou <see cref="M:System.Web.Caching.Cache.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)" /> pour désactiver les expirations décalées. Ce champ est en lecture seule.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsqu’il est utilisé, ce champ définit le `slidingExpiration` paramètre vers le <xref:System.TimeSpan.Zero?displayProperty=nameWithType> champ qui a une valeur constante égale à zéro. L’élément mis en cache expire conformément à la `absoluteExpiration` paramètre associé à la `Insert` ou `Add` appel de méthode.  
  
   
  
## Examples  
 L’exemple suivant montre comment utiliser la méthode d’insertion pour ajouter un élément à la <xref:System.Web.Caching.Cache> à l’aide de l’objet le `NoSlidingExpiration` champ.  
  
 [!code-csharp[Classic Cache.NoSlidingExpiration Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.NoSlidingExpiration Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.NoSlidingExpiration Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.NoSlidingExpiration Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.TimeSpan.Zero" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public object Remove (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Remove(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Remove(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; obj" Usage="cache.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Identificateur <see cref="T:System.String" /> de l'élément à extraire du cache.</param>
        <summary>Supprime l'élément spécifié dans l'objet <see cref="T:System.Web.Caching.Cache" /> de l'application.</summary>
        <returns>Élément supprimé du <see langword="Cache" />. Si la valeur du paramètre de clé est introuvable, retourne <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée un `RemoveItemFromCache` (méthode). Lorsque cette méthode est appelée, elle utilise le <xref:System.Web.Caching.Cache.Item%2A> propriété pour vérifier si le cache contient un objet qui est associé à un `Key1` valeur de clé. Si tel est le cas le `Remove` méthode est appelée pour supprimer l’objet.  
  
 [!code-csharp[System.Web.Caching Examples#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#4)]
 [!code-vb[System.Web.Caching Examples#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un énumérateur qui peut itérer au sein de la collection d'objets <see cref="T:System.Web.Caching.Cache" />.</summary>
        <returns>Énumérateur qui peut itérer au sein de la collection d'objets <see cref="T:System.Web.Caching.Cache" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>