<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf8bd7fdfd80ccc415cee28e69de81768b96942" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541643" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonWriter" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonWriter extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonWriter" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonWriter" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5b839-101">Fournit une API hautes performances pour l’écriture en transfert seul et non mise en cache de texte JSON encodé en UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="5b839-102">`Utf8JsonWriter` écrit le texte de façon séquentielle avec aucune mise en cache et, par défaut respecte la [JSON RFC](https://tools.ietf.org/html/rfc8259), à l’exception de l’écriture des commentaires.</span><span class="sxs-lookup"><span data-stu-id="5b839-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="5b839-103">Une méthode qui tente d’écrire le JSON non valide lorsque la validation est activée lève un <xref:System.InvalidOperationException> avec un message d’erreur spécifique au contexte.</span><span class="sxs-lookup"><span data-stu-id="5b839-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>
<span data-ttu-id="5b839-104">Dans la mesure où ce type est un struct ref, elle ne gère pas directement async.</span><span class="sxs-lookup"><span data-stu-id="5b839-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="5b839-105">Toutefois, il ne prend en charge la réentrance pour écrire des données partielles et continuer à écrire dans des segments.</span><span class="sxs-lookup"><span data-stu-id="5b839-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>
<span data-ttu-id="5b839-106">Pour pouvoir mettre en forme la sortie avec la mise en retrait et l’espace blanc ou d’ignorer la validation, créez une instance de <xref:System.Text.Json.JsonWriterState> et la passe à l’enregistreur.</span><span class="sxs-lookup"><span data-stu-id="5b839-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterState> and pass that in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterState state = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional state As JsonWriterState = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterState -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="state" Type="System.Text.Json.JsonWriterState" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="5b839-107">Instance de <see cref="T:System.Buffers.IBufferWriter`1" /> utilisée comme destination pour écrire du texte JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-107">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text.</span></span></param>
        <param name="state"><span data-ttu-id="5b839-108">Struct qui contient l’état du lecteur.</span><span class="sxs-lookup"><span data-stu-id="5b839-108">A struct that contains the reader state.</span></span> <span data-ttu-id="5b839-109">Lors du premier appel au constructeur, il doit refléter un état par défaut ; sinon, il doit capturer l’état de l’instance précédente du <see cref="T:System.Text.Json.Utf8JsonWriter" /> et le repasser.</span><span class="sxs-lookup"><span data-stu-id="5b839-109">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="5b839-110">Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> avec le <paramref name="bufferWriter" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="5b839-110">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class with the specified <paramref name="bufferWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="5b839-111">Dans la mesure où ce type est un struct ref, c’est un type de pile uniquement et lui appliquent toutes les limitations de structs par référence.</span><span class="sxs-lookup"><span data-stu-id="5b839-111">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="5b839-112">C’est la raison pourquoi le constructeur accepte un <xref:System.Text.Json.JsonWriterState>.</span><span class="sxs-lookup"><span data-stu-id="5b839-112">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonWriterState>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5b839-113"><paramref name="bufferWriter" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-113"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5b839-114">Obtient le nombre total d’octets validés dans la sortie par le <see cref="T:System.Text.Json.Utf8JsonWriter" /> jusqu’ici pour l’instance actuelle du <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-114">Gets the total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="5b839-115">Cela indique où en est le <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-115">This indicates how much the <see cref="T:System.Buffers.IBufferWriter`1" /> has advanced.</span></span></summary>
        <value><span data-ttu-id="5b839-116">Le nombre total d’octets validés dans la sortie par le <see cref="T:System.Text.Json.Utf8JsonWriter" /> jusqu'à présent.</span><span class="sxs-lookup"><span data-stu-id="5b839-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public long BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesWritten { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5b839-117">Obtient le nombre total d’octets écrits par le <see cref="T:System.Text.Json.Utf8JsonWriter" /> jusqu’ici pour l’instance actuelle du <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-117">Gets the total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="5b839-118">Cela inclut les données qui ont été écrites en plus de celles qui ont déjà été validées.</span><span class="sxs-lookup"><span data-stu-id="5b839-118">This includes data that has been written beyond what has already been committed.</span></span></summary>
        <value><span data-ttu-id="5b839-119">Le nombre total d’octets écrits par le <see cref="T:System.Text.Json.Utf8JsonWriter" /> jusqu'à présent.</span><span class="sxs-lookup"><span data-stu-id="5b839-119">The total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5b839-120">Obtient la profondeur du jeton actuel.</span><span class="sxs-lookup"><span data-stu-id="5b839-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="5b839-121">La profondeur du jeton en cours.</span><span class="sxs-lookup"><span data-stu-id="5b839-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="5b839-122">Le `CurrentDepth` propriété effectue le suivi de la profondeur récursive des objets imbriqués / tableaux dans le texte JSON écrit jusque-là.</span><span class="sxs-lookup"><span data-stu-id="5b839-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (Optional isFinalBlock As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.Flush : bool -&gt; unit" Usage="utf8JsonWriter.Flush isFinalBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isFinalBlock"><span data-ttu-id="5b839-123"><see langword="true" /> pour indiquer qu’aucune autre donnée ne sera écrite ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-123"><see langword="true" /> to indicate no more data will be written; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="5b839-124">Cela permet de valider que le texte JSON écrit jusqu’ici est structurellement valide si aucune autre donnée n’est à suivre.</span><span class="sxs-lookup"><span data-stu-id="5b839-124">This is used to validate that the JSON written so far is structurally valid if no more data is to follow.</span></span></param>
        <summary><span data-ttu-id="5b839-125">Avance le <see cref="T:System.Buffers.IBufferWriter`1" /> sous-jacent en fonction de ce qui a été écrit jusqu’ici.</span><span class="sxs-lookup"><span data-stu-id="5b839-125">Advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-126">Du texte JSON incomplet a été écrit et <paramref name="isFinalBlock" /> est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-126">Incomplete JSON has been written and <paramref name="isFinalBlock" /> is <see langword="true" />.</span></span> <span data-ttu-id="5b839-127">Par exemple, quand un tableau ou un objet ouvert doit être fermé.</span><span class="sxs-lookup"><span data-stu-id="5b839-127">For example, when an open object or array needs to be closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonWriterState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As JsonWriterState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonWriterState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Text.Json.JsonWriterState" Usage="utf8JsonWriter.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5b839-128">Retourne l’instantané actuel de l’état du <see cref="T:System.Text.Json.Utf8JsonWriter" /> qui doit être capturé par l’appelant et repassé au constructeur <see cref="T:System.Text.Json.Utf8JsonWriter" /> avec davantage de données.</span><span class="sxs-lookup"><span data-stu-id="5b839-128">Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state that must be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonWriter" /> constructor with more data.</span></span></summary>
        <returns><span data-ttu-id="5b839-129">Instantané actuel de l’état <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-129">The current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="5b839-130">Contrairement à la <xref:System.Text.Json.Utf8JsonWriter>, qui est un struct par référence, l’état peut survivre au-delà des limites d’async/await, et par conséquent, ce type est nécessaire pour prendre en charge pour la lecture dans plus de données de façon asynchrone avant de continuer avec une nouvelle instance de la <xref:System.Text.Json.Utf8JsonWriter>.</span><span class="sxs-lookup"><span data-stu-id="5b839-130">Unlike the <xref:System.Text.Json.Utf8JsonWriter>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonWriter>.</span></span>

<span data-ttu-id="5b839-131">Obtention de l’état pour la création d’un nouveau <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct sans premier valider les données qui ont été écrites entraînerait un état incohérent.</span><span class="sxs-lookup"><span data-stu-id="5b839-131">Getting the state for creating a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct without first committing the data that has been written would result in an inconsistent state.</span></span> <span data-ttu-id="5b839-132">Appelez <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> avant d’obtenir l’état actuel.</span><span class="sxs-lookup"><span data-stu-id="5b839-132">Call <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> before getting the current state.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-133">Les données JSON ont été écrites et mises en mémoire tampon, mais pas encore vidées dans le <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-133">The JSON data has been written and buffered but not yet flushed to the <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-134">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-134">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-135">Valeur à écrire sous la forme d’un littéral JSON « true » ou « false » dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-135">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-136"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-136"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-137">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-137">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-138">Écrit le nom de propriété et la valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON « true » ou « false ») dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-138">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-139"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-139"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-140">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-140">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-141">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-141">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-142">Valeur à écrire sous la forme d’un littéral JSON « true » ou « false » dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-142">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-143"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-143"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-144">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-144">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-145">Écrit le nom de propriété et la valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON « true » ou « false ») dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-145">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-146"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-146"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-147">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-147">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-148">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-148">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-149">Valeur à écrire sous la forme d’un littéral JSON « true » ou « false » dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-149">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-150"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-150"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-151">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-151">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-152">Écrit le nom de propriété et la valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON « true » ou « false ») dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-152">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-153"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-153"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-154">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-154">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-155">Valeur à écrire sous la forme d’un littéral JSON « true » ou « false » comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-155">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5b839-156">Écrit la valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON « true » ou « false ») comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-156">Writes the <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-157">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-157">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="5b839-158">Valeur encodée en UTF-8 à écrire sous la forme d’un commentaire JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-158">The UTF-8 encoded value to be written as a JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-159"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-159"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-160">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-160">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-161">Écrit la valeur texte UTF-8 sous la forme d’un commentaire JSON (dans <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="5b839-161">Writes the UTF-8 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-162"><paramref name="utf8Value" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-162"><paramref name="utf8Value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-163">Valeur encodée en UTF-16 à écrire sous la forme d’un commentaire JSON transcodé en UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-163">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-164"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-164"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-165">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-165">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-166">Écrit la valeur texte UTF-16 sous la forme d’un commentaire JSON (dans <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="5b839-166">Writes the UTF-16 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-167"><paramref name="value" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-167"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-168">Valeur encodée en UTF-16 à écrire sous la forme d’un commentaire JSON transcodé en UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-168">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-169"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-169"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-170">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-170">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-171">Écrit la valeur texte de chaîne sous la forme d’un commentaire JSON (dans <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="5b839-171">Writes the string text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-172"><paramref name="value" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-172"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5b839-173">Écrit la fin d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-173">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-174">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-174">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5b839-175">Écrit la fin d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-175">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-176">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-176">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-177">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-177">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-178"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-178"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-179">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-179">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-180">Écrit le nom de propriété et le littéral JSON « null » dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-180">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-181"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-181"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-182">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-182">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-183">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-183">The UTF-16 encoded property name of the JSON object to transcode and write as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-184"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-184"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-185">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-185">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-186">Écrit le nom de propriété et le littéral JSON « null » dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-186">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-187"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-187"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-188">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-188">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-189">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-189">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-190"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-190"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-191">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-191">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-192">Écrit le nom de propriété et le littéral JSON « null » dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-192">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-193"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-193"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-194">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-194">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5b839-195">Écrit le littéral JSON « null » comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-195">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-196">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-196">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-197">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-197">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-198">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-198">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-199"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-199"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-200">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-200">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-201">Écrit le nom de propriété et la valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-201">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-202">Écrit le <see cref="T:System.Decimal" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-202">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-203"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-203"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-204">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-204">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-205">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-205">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-206">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-206">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-207"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-207"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-208">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-208">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-209">Écrit le nom de propriété et la valeur <see cref="T:System.Double" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-209">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-210">Écrit le <see cref="T:System.Double" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-210">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-211"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-211"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-212">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-212">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-213">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-213">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-214">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-214">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-215"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-215"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-216">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-216">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-217">Écrit le nom de propriété et la valeur <see cref="T:System.Int32" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-217">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-218">Écrit le <see cref="T:System.Int32" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-218">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-219">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-219">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-220"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-220"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-221">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-221">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-222">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-222">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-223">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-223">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-224"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-224"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-225">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-225">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-226">Écrit le nom de propriété et la valeur <see cref="T:System.Int64" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-226">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-227">Écrit le <see cref="T:System.Int64" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-227">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-228">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-228">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-229"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-229"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-230">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-230">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-231">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-231">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-232">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-232">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-233"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-233"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-234">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-234">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-235">Écrit le nom de propriété et la valeur <see cref="T:System.Single" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-235">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-236">Écrit le <see cref="T:System.Single" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-236">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-237"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-237"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-238">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-238">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-239">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-239">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-240">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-240">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-241"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-241"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-242">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-242">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-243">Écrit le nom de propriété et la valeur <see cref="T:System.UInt32" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-243">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-244">Écrit le <see cref="T:System.UInt32" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-244">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-245">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-245">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-246"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-246"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-247">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-247">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-248">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-248">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-249">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-249">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-250"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-250"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-251">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-251">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-252">Écrit le nom de propriété et la valeur <see cref="T:System.UInt64" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-252">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-253">Écrit le <see cref="T:System.UInt64" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-253">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-254">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-254">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-255"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-255"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-256">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-256">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-257">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-257">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-258">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-258">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-259"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-259"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-260">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-260">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-261">Écrit le nom de propriété et la valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-261">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-262">Écrit le <see cref="T:System.Decimal" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-262">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-263"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-263"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-264">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-264">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-265">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-265">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-266">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-267"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-267"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-268">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-268">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-269">Écrit le nom de propriété et la valeur <see cref="T:System.Double" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-269">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-270">Écrit le <see cref="T:System.Double" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-270">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-271"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-271"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-272">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-272">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-273">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-273">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-274">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-274">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-275"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-275"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-276">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-276">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-277">Écrit le nom de propriété et la valeur <see cref="T:System.Int32" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-277">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-278">Écrit le <see cref="T:System.Int32" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-278">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-279">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-279">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-280"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-280"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-281">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-281">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-282">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-282">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-283">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-283">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-284"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-284"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-285">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-285">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-286">Écrit le nom de propriété et la valeur <see cref="T:System.Int64" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-286">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-287">Écrit le <see cref="T:System.Int64" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-287">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-288">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-288">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-289"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-289"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-290">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-290">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-291">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-291">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-292">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-292">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-293"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-293"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-294">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-294">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-295">Écrit le nom de propriété et la valeur <see cref="T:System.Single" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-295">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-296">Écrit le <see cref="T:System.Single" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-296">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-297"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-297"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-298">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-298">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-299">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-299">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-300">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-300">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-301"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-301"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-302">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-302">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-303">Écrit le nom de propriété et la valeur <see cref="T:System.UInt32" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-303">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-304">Écrit le <see cref="T:System.UInt32" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-304">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-305">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-305">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-306"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-306"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-307">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-307">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-308">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-308">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-309">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-309">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-310"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-310"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-311">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-311">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-312">Écrit le nom de propriété et la valeur <see cref="T:System.UInt64" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-312">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-313">Écrit le <see cref="T:System.UInt64" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-313">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-314">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-314">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-315"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-315"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-316">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-316">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-317">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-317">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-318">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-318">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-319"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-319"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-320">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-320">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-321">Écrit le nom de propriété et la valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-321">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-322">Écrit le <see cref="T:System.Decimal" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-322">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-323"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-323"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-324">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-324">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-325">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-326">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-327"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-327"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-328">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-328">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-329">Écrit le nom de propriété et la valeur <see cref="T:System.Double" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-329">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-330">Écrit le <see cref="T:System.Double" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-330">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-331"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-331"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-332">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-332">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-333">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-333">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-334">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-334">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-335"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-335"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-336">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-336">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-337">Écrit le nom de propriété et la valeur <see cref="T:System.Int32" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-337">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-338">Écrit le <see cref="T:System.Int32" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-338">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-339">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-339">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-340"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-340"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-341">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-341">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-342">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-343">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-344"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-344"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-345">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-345">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-346">Écrit le nom de propriété et la valeur <see cref="T:System.Int64" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-346">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-347">Écrit le <see cref="T:System.Int64" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-347">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-348">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-348">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-349"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-349"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-350">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-350">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-351">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-351">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-352">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-352">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-353"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-353"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-354">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-354">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-355">Écrit le nom de propriété et la valeur <see cref="T:System.Single" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-355">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-356">Écrit le <see cref="T:System.Single" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-356">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-357"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-357"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-358">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-358">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-359">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-359">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-360">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-360">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-361"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-361"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-362">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-362">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-363">Écrit le nom de propriété et la valeur <see cref="T:System.UInt32" /> (comme nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-363">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-364">Écrit le <see cref="T:System.UInt32" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-364">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-365">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-365">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-366"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-366"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-367">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-367">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-368">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-368">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-369">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-369">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-370"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-370"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-371">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-371">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-372">Écrit le nom de propriété et la valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-372">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-373">Écrit le <see cref="T:System.UInt64" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-373">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-374">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-374">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-375"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-375"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-376">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-376">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-377">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-377">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5b839-378">Écrit la valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-378">Writes the <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5b839-379">Écrit le <see cref="T:System.Decimal" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-379">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-380">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-380">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-381">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-381">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5b839-382">Écrit la valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-382">Writes the <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5b839-383">Écrit le <see cref="T:System.Double" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-383">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-384">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-384">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-385">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-385">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5b839-386">Écrit la valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-386">Writes the <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5b839-387">Écrit le <see cref="T:System.Int32" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-387">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-388">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-388">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-389">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-389">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-390">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-390">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5b839-391">Écrit la valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-391">Writes the <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5b839-392">Écrit le <see cref="T:System.Int64" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-392">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-393">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-393">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-394">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-394">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-395">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-395">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5b839-396">Écrit la valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-396">Writes the <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5b839-397">Écrit le <see cref="T:System.Single" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-397">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-398">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-398">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-399">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-399">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5b839-400">Écrit la valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-400">Writes the <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5b839-401">Écrit le <see cref="T:System.UInt32" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-401">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-402">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-402">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-403">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-403">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-404">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-404">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5b839-405">Écrit la valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-405">Writes the <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5b839-406">Écrit le <see cref="T:System.UInt64" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, « G »).</span><span class="sxs-lookup"><span data-stu-id="5b839-406">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5b839-407">Par exemple, 32767.</span><span class="sxs-lookup"><span data-stu-id="5b839-407">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-408">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-408">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5b839-409">Écrit le début d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-409">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-410">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.</span><span class="sxs-lookup"><span data-stu-id="5b839-410">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5b839-411">ou</span><span class="sxs-lookup"><span data-stu-id="5b839-411">-or-</span></span>

<span data-ttu-id="5b839-412">si cela aboutirait à l’écriture de texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-412">if this would result in an invalid JSON to be written (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-413">Nom de propriété encodé en UTF-8 du tableau JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-413">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-414"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-414"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-415">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-415">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-416">Écrit le début d’un tableau JSON avec un nom de propriété comme clé.</span><span class="sxs-lookup"><span data-stu-id="5b839-416">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-417"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-417"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-418">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.</span><span class="sxs-lookup"><span data-stu-id="5b839-418">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5b839-419">ou</span><span class="sxs-lookup"><span data-stu-id="5b839-419">-or-</span></span>

<span data-ttu-id="5b839-420">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-420">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-421">Nom de propriété encodé en UTF-16 du tableau JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-421">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-422"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-422"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-423">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-423">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-424">Écrit le début d’un tableau JSON avec un nom de propriété comme clé.</span><span class="sxs-lookup"><span data-stu-id="5b839-424">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-425"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-425"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-426">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.</span><span class="sxs-lookup"><span data-stu-id="5b839-426">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5b839-427">ou</span><span class="sxs-lookup"><span data-stu-id="5b839-427">-or-</span></span>

<span data-ttu-id="5b839-428">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-428">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-429">Nom de propriété encodé en UTF-16 du tableau JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-429">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-430"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-430"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-431">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-431">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-432">Écrit le début d’un tableau JSON avec un nom de propriété comme clé.</span><span class="sxs-lookup"><span data-stu-id="5b839-432">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-433"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-433"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-434">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.</span><span class="sxs-lookup"><span data-stu-id="5b839-434">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5b839-435">ou</span><span class="sxs-lookup"><span data-stu-id="5b839-435">-or-</span></span>

<span data-ttu-id="5b839-436">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-436">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5b839-437">Écrit le début d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-437">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-438">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.</span><span class="sxs-lookup"><span data-stu-id="5b839-438">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5b839-439">ou</span><span class="sxs-lookup"><span data-stu-id="5b839-439">-or-</span></span>

<span data-ttu-id="5b839-440">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-440">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-441">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-441">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-442"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-442"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-443">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-443">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-444">Écrit le début d’un objet JSON avec un nom de propriété comme clé.</span><span class="sxs-lookup"><span data-stu-id="5b839-444">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-445"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-445"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-446">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.</span><span class="sxs-lookup"><span data-stu-id="5b839-446">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5b839-447">ou</span><span class="sxs-lookup"><span data-stu-id="5b839-447">-or-</span></span>

<span data-ttu-id="5b839-448">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-448">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-449">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-449">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-450"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-450"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-451">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-451">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-452">Écrit le début d’un objet JSON avec un nom de propriété comme clé.</span><span class="sxs-lookup"><span data-stu-id="5b839-452">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-453"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-453"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-454">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.</span><span class="sxs-lookup"><span data-stu-id="5b839-454">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5b839-455">ou</span><span class="sxs-lookup"><span data-stu-id="5b839-455">-or-</span></span>

<span data-ttu-id="5b839-456">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-456">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-457">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-457">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-458"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-458"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-459">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-459">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-460">Écrit le début d’un objet JSON avec un nom de propriété comme clé.</span><span class="sxs-lookup"><span data-stu-id="5b839-460">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-461"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-461"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-462">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.</span><span class="sxs-lookup"><span data-stu-id="5b839-462">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5b839-463">ou</span><span class="sxs-lookup"><span data-stu-id="5b839-463">-or-</span></span>

<span data-ttu-id="5b839-464">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-464">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-465">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-465">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-466">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-466">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-467"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-467"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-468">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-468">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-469">Écrit le nom de propriété et la valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-469">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-470">Écrit le <see cref="T:System.DateTime" /> à l’aide de l’aller-retour (« o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5b839-470">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5b839-471">Par exemple, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="5b839-471">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-472"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-472"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-473">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-473">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-474">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-474">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-475">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-475">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-476"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-476"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-477">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-477">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-478">Écrit le nom de propriété et la valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-478">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-479">Écrit le <see cref="T:System.DateTimeOffset" /> à l’aide de l’aller-retour (« o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5b839-479">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5b839-480">Par exemple, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="5b839-480">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-481"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-481"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-482">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-482">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-483">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-483">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-484">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-484">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-485"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-485"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-486">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-486">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-487">Écrit le nom de propriété et la valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-487">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-488">Écrit le <see cref="T:System.Guid" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, avait »), que le formulaire : nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="5b839-488">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-489"><paramref name="utf8PropertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-489"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-490">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-490">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-491">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-491">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="5b839-492">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-492">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-493">Si false est défini, le writer suppose que le nom de propriété est correctement échappé et ignore l’étape d’échappement.</span><span class="sxs-lookup"><span data-stu-id="5b839-493">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5b839-494">La valeur est toujours échappée</span><span class="sxs-lookup"><span data-stu-id="5b839-494">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5b839-495">Écrit le nom de propriété UTF-8 et la valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-495">Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-496">Levée lorsque le nom de propriété ou la valeur spécifié(e) est trop grand(e).</span><span class="sxs-lookup"><span data-stu-id="5b839-496">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-497">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-497">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-498">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-498">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-499">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-499">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-500">Si false est défini, le writer suppose que le nom de propriété est correctement échappé et ignore l’étape d’échappement.</span><span class="sxs-lookup"><span data-stu-id="5b839-500">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5b839-501">La valeur est toujours échappée</span><span class="sxs-lookup"><span data-stu-id="5b839-501">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5b839-502">Écrit le nom de propriété UTF-8 et la valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-502">Writes the UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-503">Levée lorsque le nom de propriété ou la valeur spécifié(e) est trop grand(e).</span><span class="sxs-lookup"><span data-stu-id="5b839-503">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-504">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-504">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5b839-505">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</span><span class="sxs-lookup"><span data-stu-id="5b839-505">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-506">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-506">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-507">Si false est défini, le writer suppose que le nom de propriété est correctement échappé et ignore l’étape d’échappement.</span><span class="sxs-lookup"><span data-stu-id="5b839-507">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5b839-508">La valeur est toujours échappée</span><span class="sxs-lookup"><span data-stu-id="5b839-508">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5b839-509">Écrit le nom de propriété UTF-8 et la valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-509">Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-510">Levée lorsque le nom de propriété ou la valeur spécifié(e) est trop grand(e).</span><span class="sxs-lookup"><span data-stu-id="5b839-510">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-511">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-511">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-512">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-512">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-513">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-513">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-514"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-514"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-515">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-515">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-516">Écrit le nom de propriété et la valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-516">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-517">Écrit le <see cref="T:System.DateTime" /> à l’aide de l’aller-retour (« o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5b839-517">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5b839-518">Par exemple, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="5b839-518">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-519"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-519"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-520">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-520">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-521">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-522">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-522">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-523"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-523"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-524">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-524">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-525">Écrit le nom de propriété et la valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-525">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-526">Écrit le <see cref="T:System.DateTimeOffset" /> à l’aide de l’aller-retour (« o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5b839-526">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5b839-527">Par exemple, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="5b839-527">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-528"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-528"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-529">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-529">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-530">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-530">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-531">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-531">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-532"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-532"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-533">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-533">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-534">Écrit le nom de propriété et la valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-534">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-535">Écrit le <see cref="T:System.Guid" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, avait »), que le formulaire : nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="5b839-535">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-536"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-536"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-537">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-537">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-538">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-538">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="5b839-539">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-539">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-540">Si false est défini, le writer suppose que le nom de propriété est correctement échappé et ignore l’étape d’échappement.</span><span class="sxs-lookup"><span data-stu-id="5b839-540">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5b839-541">La valeur est toujours échappée</span><span class="sxs-lookup"><span data-stu-id="5b839-541">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5b839-542">Écrit le nom de propriété UTF-16 et la valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-542">Writes the UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-543">Levée lorsque le nom de propriété ou la valeur spécifié(e) est trop grand(e).</span><span class="sxs-lookup"><span data-stu-id="5b839-543">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-544">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-544">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-545">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-545">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-546">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-546">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-547">Si false est défini, le writer suppose que le nom de propriété est correctement échappé et ignore l’étape d’échappement.</span><span class="sxs-lookup"><span data-stu-id="5b839-547">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5b839-548">La valeur est toujours échappée</span><span class="sxs-lookup"><span data-stu-id="5b839-548">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5b839-549">Écrit le nom de propriété UTF-16 et la valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-549">Writes the UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-550">Levée lorsque le nom de propriété ou la valeur spécifié(e) est trop grand(e).</span><span class="sxs-lookup"><span data-stu-id="5b839-550">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-551">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-551">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-552">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-552">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-553">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-553">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-554">Si false est défini, le writer suppose que le nom de propriété est correctement échappé et ignore l’étape d’échappement.</span><span class="sxs-lookup"><span data-stu-id="5b839-554">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5b839-555">La valeur est toujours échappée</span><span class="sxs-lookup"><span data-stu-id="5b839-555">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5b839-556">Écrit le nom de propriété UTF-16 et la valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-556">Writes the UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-557">Levée lorsque le nom de propriété ou la valeur spécifié(e) est trop grand(e).</span><span class="sxs-lookup"><span data-stu-id="5b839-557">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-558">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-558">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-559">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-559">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-560">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-560">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-561"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-561"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-562">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-562">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-563">Écrit le nom de propriété et la valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-563">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-564">Écrit le <see cref="T:System.DateTime" /> à l’aide de l’aller-retour (« o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5b839-564">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5b839-565">Par exemple, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="5b839-565">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-566"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-566"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-567">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-567">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-568">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-568">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-569">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-569">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-570"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-570"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-571">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-571">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-572">Écrit le nom de propriété et la valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-572">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-573">Écrit le <see cref="T:System.DateTimeOffset" /> à l’aide de l’aller-retour (« o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5b839-573">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5b839-574">Par exemple, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="5b839-574">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-575"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-575"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-576">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-576">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-577">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-577">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-578">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-578">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-579"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-579"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-580">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-580">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-581">Écrit le nom de propriété et la valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-581">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5b839-582">Écrit le <see cref="T:System.Guid" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, avait »), que le formulaire : nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="5b839-582">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-583"><paramref name="propertyName" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-583"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-584">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-584">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-585">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-585">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="5b839-586">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-586">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-587">Si false est défini, le writer suppose que le nom de propriété est correctement échappé et ignore l’étape d’échappement.</span><span class="sxs-lookup"><span data-stu-id="5b839-587">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5b839-588">La valeur est toujours échappée</span><span class="sxs-lookup"><span data-stu-id="5b839-588">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5b839-589">Écrit le nom de propriété et la valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-589">Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-590">Levée lorsque le nom de propriété ou la valeur spécifié(e) est trop grand(e).</span><span class="sxs-lookup"><span data-stu-id="5b839-590">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-591">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-591">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-592">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-592">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-593">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-593">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-594">Si false est défini, le writer suppose que le nom de propriété est correctement échappé et ignore l’étape d’échappement.</span><span class="sxs-lookup"><span data-stu-id="5b839-594">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5b839-595">La valeur est toujours échappée</span><span class="sxs-lookup"><span data-stu-id="5b839-595">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5b839-596">Écrit le nom de propriété et la valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-596">Writes the property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-597">Levée lorsque le nom de propriété ou la valeur spécifié(e) est trop grand(e).</span><span class="sxs-lookup"><span data-stu-id="5b839-597">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-598">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-598">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5b839-599">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5b839-599">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5b839-600">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</span><span class="sxs-lookup"><span data-stu-id="5b839-600">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-601">Si false est défini, le writer suppose que le nom de propriété est correctement échappé et ignore l’étape d’échappement.</span><span class="sxs-lookup"><span data-stu-id="5b839-601">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5b839-602">La valeur est toujours échappée</span><span class="sxs-lookup"><span data-stu-id="5b839-602">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5b839-603">Écrit le nom de propriété et la valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-603">Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-604">Levée lorsque le nom de propriété ou la valeur spécifié(e) est trop grand(e).</span><span class="sxs-lookup"><span data-stu-id="5b839-604">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-605">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-605">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-606">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-606">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5b839-607">Écrit la valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-607">Writes the <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5b839-608">Écrit le <see cref="T:System.DateTime" /> à l’aide de l’aller-retour (« o ') <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5b839-608">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5b839-609">Par exemple, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="5b839-609">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-610">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-610">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-611">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-611">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5b839-612">Écrit la valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-612">Writes the <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5b839-613">Écrit le <see cref="T:System.DateTimeOffset" /> à l’aide de l’aller-retour (« o ') <see cref="T:System.Buffers.StandardFormat" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-613">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="5b839-614">Par exemple, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="5b839-614">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-615">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-615">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-616">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-616">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5b839-617">Écrit la valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-617">Writes the <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5b839-618">Écrit le <see cref="T:System.Guid" /> à l’aide de la valeur par défaut <see cref="T:System.Buffers.StandardFormat" /> (autrement dit, avait »), que le formulaire : nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="5b839-618">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-619">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-619">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="5b839-620">Valeur encodée en UTF-8 à écrire sous la forme d’un élément de chaîne JSON d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-620">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-621"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-621"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-622">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-622">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-623">Écrit la valeur texte UTF-8 (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-623">Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-624"><paramref name="utf8Value" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-624"><paramref name="utf8Value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-625">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-625">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-626">Valeur encodée en UTF-16 à écrire sous la forme d’un élément de chaîne JSON encodé en UTF-8 d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-626">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-627"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-627"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-628">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-628">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-629">Écrit la valeur texte UTF-16 (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-629">Writes the UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-630"><paramref name="value" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-630"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-631">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-631">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5b839-632">Valeur encodée en UTF-16 à écrire sous la forme d’un élément de chaîne JSON encodé en UTF-8 d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-632">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="5b839-633"><see langword="false" /> pour indiquer que le writer doit supposer que le nom de propriété est correctement échappé et ignore l’étape d’échappement ; sinon, <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-633"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5b839-634">Il s’agit d’un paramètre facultatif dont la valeur par défaut est <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5b839-634">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5b839-635">Écrit la valeur texte de chaîne (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</span><span class="sxs-lookup"><span data-stu-id="5b839-635">Writes the string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5b839-636"><paramref name="value" /> est trop grand.</span><span class="sxs-lookup"><span data-stu-id="5b839-636"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5b839-637">Les données JSON à écrire seraient du texte JSON non valide (alors que la validation est activée).</span><span class="sxs-lookup"><span data-stu-id="5b839-637">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
