<Type Name="XsdDataContractImporter" FullName="System.Runtime.Serialization.XsdDataContractImporter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ddbb8b30d47aa000bda3ef150d6e5f30170dbe76" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51899912" /></Metadata><TypeSignature Language="C#" Value="public class XsdDataContractImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdDataContractImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XsdDataContractImporter" />
  <TypeSignature Language="VB.NET" Value="Public Class XsdDataContractImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsdDataContractImporter" />
  <TypeSignature Language="F#" Value="type XsdDataContractImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5203c-101">Permet la transformation d'un ensemble de fichiers de schéma XML (.xsd) dans des types CLR (Common Language Runtime).</span><span class="sxs-lookup"><span data-stu-id="5203c-101">Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5203c-102">Utilisez le <xref:System.Runtime.Serialization.XsdDataContractImporter> si vous créez un service Web qui doit interagir avec un service Web existant ou pour créer des types de contrat de données à partir des schémas XML.</span><span class="sxs-lookup"><span data-stu-id="5203c-102">Use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas.</span></span> <span data-ttu-id="5203c-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> transformera un jeu de schémas XML et créera les types [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] qui représentent le contrat de données dans un langage de programmation sélectionné.</span><span class="sxs-lookup"><span data-stu-id="5203c-103"><xref:System.Runtime.Serialization.XsdDataContractImporter> will transform a set of XML schemas and create the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] types that represent the data contract in a selected programming language.</span></span> <span data-ttu-id="5203c-104">Pour créer le code, utilisez les classes dans l'espace de noms <xref:System.CodeDom>.</span><span class="sxs-lookup"><span data-stu-id="5203c-104">To create the code, use the classes in the <xref:System.CodeDom> namespace.</span></span>  
  
 <span data-ttu-id="5203c-105">Inversement, utilisez la classe <xref:System.Runtime.Serialization.XsdDataContractExporter> lorsque vous avez créé un service Web qui incorpore des données représentées par les types CLR et lorsque vous devez exporter des schémas XML pour chaque type de données à consommer par d'autres services Web.</span><span class="sxs-lookup"><span data-stu-id="5203c-105">Conversely, use the <xref:System.Runtime.Serialization.XsdDataContractExporter> class when you have created a Web service that incorporates data represented by CLR types and when you need to export XML schemas for each data type to be consumed by other Web services.</span></span> <span data-ttu-id="5203c-106">Autrement dit, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforme un ensemble de types CLR en un jeu de schémas XML.</span><span class="sxs-lookup"><span data-stu-id="5203c-106">That is, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforms a set of CLR types into a set of XML schemas.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5203c-107">Pour générer des types CLR à partir de schémas XML au moment du design, utilisez la [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).</span><span class="sxs-lookup"><span data-stu-id="5203c-107">To generate CLR types from XML schemas at design time, use the [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md).</span></span> <span data-ttu-id="5203c-108">Pour générer du code à partir de fichiers XSD, utilisez le `/dataContractOnly` switch de l’outil.</span><span class="sxs-lookup"><span data-stu-id="5203c-108">To generated code from XSD files, use the `/dataContractOnly` switch of the tool.</span></span> <span data-ttu-id="5203c-109">Vous pouvez également utiliser le <xref:System.Runtime.Serialization.XsdDataContractImporter> si vous avez besoin de plus contrôler le processus ou que vous avez besoin de le faire par programme.</span><span class="sxs-lookup"><span data-stu-id="5203c-109">You can also use the <xref:System.Runtime.Serialization.XsdDataContractImporter> if you need more control over the process or need to do it programmatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5203c-110">L'exemple suivant crée un <xref:System.Xml.Schema.XmlSchemaSet> et appelle la méthode <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> pour créer un <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="5203c-110">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="5203c-111">Le <xref:System.CodeDom.CodeCompileUnit> est alors utilisé pour créer des fichiers de code Visual C# et Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5203c-111">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#0](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#0)]
 [!code-vb[XsdDataContractImporter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <related type="Article" href="~/docs/framework/wcf/feature-details/using-data-contracts.md"><span data-ttu-id="5203c-112">Utilisation de contrats de données</span><span class="sxs-lookup"><span data-stu-id="5203c-112">Using Data Contracts</span></span></related>
    <related type="Article" href="~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md"><span data-ttu-id="5203c-113">Types pris en charge par le sérialiseur de contrat de données</span><span class="sxs-lookup"><span data-stu-id="5203c-113">Types Supported by the Data Contract Serializer</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5203c-114">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-114">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5203c-115">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-115">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Serialization.XsdDataContractImporter : System.CodeDom.CodeCompileUnit -&gt; System.Runtime.Serialization.XsdDataContractImporter" Usage="new System.Runtime.Serialization.XsdDataContractImporter codeCompileUnit" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit"><span data-ttu-id="5203c-116"><see cref="T:System.CodeDom.CodeCompileUnit" /> qui sera utilisé pour stocker le code.</span><span class="sxs-lookup"><span data-stu-id="5203c-116">The <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to store the code.</span></span></param>
        <summary><span data-ttu-id="5203c-117">Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> avec le <see cref="T:System.CodeDom.CodeCompileUnit" /> qui sera utilisé pour générer le code CLR.</span><span class="sxs-lookup"><span data-stu-id="5203c-117">Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> class with the <see cref="T:System.CodeDom.CodeCompileUnit" /> that will be used to generate CLR code.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5203c-118">Utilisez ce constructeur pour ajouter davantage de code dans un <xref:System.CodeDom.CodeCompileUnit> qui a déjà été généré.</span><span class="sxs-lookup"><span data-stu-id="5203c-118">Use this constructor to add more code into a <xref:System.CodeDom.CodeCompileUnit> that has already been generated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5203c-119">L'exemple suivant crée un <xref:System.Xml.Schema.XmlSchemaSet> et appelle la méthode <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> pour créer un <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="5203c-119">The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="5203c-120">Le <xref:System.CodeDom.CodeCompileUnit> est alors utilisé pour créer des fichiers de code Visual C# et Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5203c-120">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanImport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5203c-121">Obtient une valeur qui indique si les schémas peuvent être transformés en un <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-121">Gets a value that indicates whether the schemas can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5203c-122">Pour plus d’informations sur les types qui peuvent être importés, consultez [Types pris en charge par le sérialiseur de contrat de données](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span><span class="sxs-lookup"><span data-stu-id="5203c-122">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet -&gt; bool" Usage="xsdDataContractImporter.CanImport schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="5203c-123"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> qui contient les schémas à transformer.</span><span class="sxs-lookup"><span data-stu-id="5203c-123">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <summary><span data-ttu-id="5203c-124">Obtient une valeur qui indique si les schémas contenus dans un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> peuvent être transformés en un <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-124">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="5203c-125"><see langword="true" /> si les schémas peuvent être transformés en types de contrat de données ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-125"><see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5203c-126">L'exemple suivant appelle la méthode <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> pour déterminer si le <xref:System.CodeDom.CodeCompileUnit> peut être généré.</span><span class="sxs-lookup"><span data-stu-id="5203c-126">The following example calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to determine whether the <xref:System.CodeDom.CodeCompileUnit> can be generated.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5203c-127">Le paramètre <paramref name="schemas" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-127">The <paramref name="schemas" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="5203c-128">Un contrat de données impliqué dans l'importation n'est pas valide.</span><span class="sxs-lookup"><span data-stu-id="5203c-128">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="5203c-129"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> qui contient les schémas à transformer.</span><span class="sxs-lookup"><span data-stu-id="5203c-129">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <param name="typeNames"><span data-ttu-id="5203c-130"><see cref="T:System.Collections.Generic.ICollection`1" /> de <see cref="T:System.Xml.XmlQualifiedName" /> qui représente l'ensemble de types de schémas à importer.</span><span class="sxs-lookup"><span data-stu-id="5203c-130">An <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that represents the set of schema types to import.</span></span></param>
        <summary><span data-ttu-id="5203c-131">Obtient une valeur qui indique si l'ensemble spécifié de types contenu dans un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> peut être transformé en types CLR générés dans un <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-131">Gets a value that indicates whether the specified set of types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="5203c-132"><see langword="true" /> si les schémas peuvent être transformés ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-132"><see langword="true" /> if the schemas can be transformed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5203c-133">Le paramètre <paramref name="schemas" /> ou <paramref name="typeNames" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-133">The <paramref name="schemas" /> or <paramref name="typeNames" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="5203c-134">Un contrat de données impliqué dans l'importation n'est pas valide.</span><span class="sxs-lookup"><span data-stu-id="5203c-134">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, element As XmlSchemaElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="5203c-135"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> à importer.</span><span class="sxs-lookup"><span data-stu-id="5203c-135">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to import.</span></span></param>
        <param name="element"><span data-ttu-id="5203c-136"><see cref="T:System.Xml.Schema.XmlSchemaElement" /> spécifique à vérifier dans le jeu de schémas.</span><span class="sxs-lookup"><span data-stu-id="5203c-136">A specific <see cref="T:System.Xml.Schema.XmlSchemaElement" /> to check in the set of schemas.</span></span></param>
        <summary><span data-ttu-id="5203c-137">Obtient une valeur qui indique si un élément de schéma spécifique contenu dans un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> peut être importé.</span><span class="sxs-lookup"><span data-stu-id="5203c-137">Gets a value that indicates whether a specific schema element contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be imported.</span></span></summary>
        <returns><span data-ttu-id="5203c-138"><see langword="true" /> si l'élément peut être importé ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-138"><see langword="true" /> if the element can be imported; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5203c-139">Cette méthode vérifie le type et tous les types de schémas référencés à partir de celui-ci.</span><span class="sxs-lookup"><span data-stu-id="5203c-139">This method checks the type and all schema types referenced from it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5203c-140">Le paramètre <paramref name="schemas" /> ou <paramref name="element" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-140">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="5203c-141">Un contrat de données impliqué dans l'importation n'est pas valide.</span><span class="sxs-lookup"><span data-stu-id="5203c-141">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeName As XmlQualifiedName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="5203c-142"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> qui contient les représentations de schéma.</span><span class="sxs-lookup"><span data-stu-id="5203c-142">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeName"><span data-ttu-id="5203c-143">Un <see cref="T:System.Collections.IList" /> de <see cref="T:System.Xml.XmlQualifiedName" /> qui spécifie les noms des types de schémas qui doivent être importés à partir du <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-143">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the names of the schema types that need to be imported from the <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></param>
        <summary><span data-ttu-id="5203c-144">Obtient une valeur qui indique si les schémas contenus dans un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> peuvent être transformés en un <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-144">Gets a value that indicates whether the schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> can be transformed into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <returns><span data-ttu-id="5203c-145"><see langword="true" /> si les schémas peuvent être transformés en types de contrat de données ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-145"><see langword="true" /> if the schemas can be transformed to data contract types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5203c-146">Pour plus d’informations sur les types qui peuvent être importés, consultez [Types pris en charge par le sérialiseur de contrat de données](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span><span class="sxs-lookup"><span data-stu-id="5203c-146">For more information about types that can be imported, see [Types Supported by the Data Contract Serializer](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5203c-147">Le paramètre <paramref name="schemas" /> ou <paramref name="typeName" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-147">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"><span data-ttu-id="5203c-148">Un contrat de données impliqué dans l'importation n'est pas valide.</span><span class="sxs-lookup"><span data-stu-id="5203c-148">A data contract involved in the import is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CodeCompileUnit">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeCompileUnit CodeCompileUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeCompileUnit CodeCompileUnit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeCompileUnit As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeCompileUnit ^ CodeCompileUnit { System::CodeDom::CodeCompileUnit ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompileUnit : System.CodeDom.CodeCompileUnit" Usage="System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5203c-149">Obtient un <see cref="T:System.CodeDom.CodeCompileUnit" /> utilisé pour stocker les types CLR générés.</span><span class="sxs-lookup"><span data-stu-id="5203c-149">Gets a <see cref="T:System.CodeDom.CodeCompileUnit" /> used for storing the CLR types generated.</span></span></summary>
        <value><span data-ttu-id="5203c-150"><see cref="T:System.CodeDom.CodeCompileUnit" /> utilisé pour stocker les types CLR générés.</span><span class="sxs-lookup"><span data-stu-id="5203c-150">A <see cref="T:System.CodeDom.CodeCompileUnit" /> used to store the CLR types generated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5203c-151">Appelez cette propriété après avoir importé des schémas à l'aide du <xref:System.Runtime.Serialization.XsdDataContractImporter> pour accéder au <xref:System.CodeDom.CodeCompileUnit> dans lequel tout le code généré est stocké.</span><span class="sxs-lookup"><span data-stu-id="5203c-151">Call this property after importing schemas using the <xref:System.Runtime.Serialization.XsdDataContractImporter> to access the <xref:System.CodeDom.CodeCompileUnit> in which all the generated code is stored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5203c-152">L'exemple suivant crée <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="5203c-152">The following example uses creates a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="5203c-153">Le <xref:System.CodeDom.CodeCompileUnit> est alors utilisé pour créer un fichier de code Visual C# et Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5203c-153">The <xref:System.CodeDom.CodeCompileUnit> is then used to create both a Visual C# and Visual Basic code file.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCodeTypeReference">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5203c-154">Retourne un <see cref="T:System.CodeDom.CodeTypeReference" /> pour l'élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="5203c-154">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="5203c-155"><see cref="T:System.Xml.XmlQualifiedName" /> qui spécifie le type de schéma à rechercher.</span><span class="sxs-lookup"><span data-stu-id="5203c-155">The <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the schema type to look up.</span></span></param>
        <summary><span data-ttu-id="5203c-156">Retourne un <see cref="T:System.CodeDom.CodeTypeReference" /> au type CLR généré pour le type de schéma avec le <see cref="T:System.Xml.XmlQualifiedName" />spécifié.</span><span class="sxs-lookup"><span data-stu-id="5203c-156">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> to the CLR type generated for the schema type with the specified <see cref="T:System.Xml.XmlQualifiedName" />.</span></span></summary>
        <returns><span data-ttu-id="5203c-157">Référence <see cref="T:System.CodeDom.CodeTypeReference" /> au type CLR généré pour le type de schéma avec le <paramref name="typeName" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="5203c-157">A <see cref="T:System.CodeDom.CodeTypeReference" /> reference to the CLR type generated for the schema type with the <paramref name="typeName" /> specified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5203c-158">Utilisez cette méthode pour rechercher la référence à un type CLR généré après avoir appelé la méthode <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A>.</span><span class="sxs-lookup"><span data-stu-id="5203c-158">Use this method to look up the reference to a generated CLR type after calling the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span> <span data-ttu-id="5203c-159">Le <xref:System.CodeDom.CodeTypeReference> contient le nom du type généré et peut être utilisé pour rechercher le <xref:System.CodeDom.CodeTypeDeclaration> correspondant dans le <xref:System.CodeDom.CodeCompileUnit>.</span><span class="sxs-lookup"><span data-stu-id="5203c-159">The <xref:System.CodeDom.CodeTypeReference> contains the name of the generated type and can be used to look up the corresponding <xref:System.CodeDom.CodeTypeDeclaration> in the <xref:System.CodeDom.CodeCompileUnit>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName, element As XmlSchemaElement) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName * System.Xml.Schema.XmlSchemaElement -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference (typeName, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="5203c-160"><see cref="T:System.Xml.XmlQualifiedName" /> qui spécifie le nom qualifié XML du type de schéma à rechercher.</span><span class="sxs-lookup"><span data-stu-id="5203c-160">An <see cref="T:System.Xml.XmlQualifiedName" /> that specifies the XML qualified name of the schema type to look up.</span></span></param>
        <param name="element"><span data-ttu-id="5203c-161"><see cref="T:System.Xml.Schema.XmlSchemaElement" /> qui spécifie un élément dans un schéma XML.</span><span class="sxs-lookup"><span data-stu-id="5203c-161">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that specifies an element in an XML schema.</span></span></param>
        <summary><span data-ttu-id="5203c-162">Retourne un <see cref="T:System.CodeDom.CodeTypeReference" /> pour l'élément qualifié XML spécifié et l'élément de schéma.</span><span class="sxs-lookup"><span data-stu-id="5203c-162">Returns a <see cref="T:System.CodeDom.CodeTypeReference" /> for the specified XML qualified element and schema element.</span></span></summary>
        <returns><span data-ttu-id="5203c-163"><see cref="T:System.CodeDom.CodeTypeReference" /> qui représente le type qui a été généré pour le type de schéma spécifié.</span><span class="sxs-lookup"><span data-stu-id="5203c-163">A <see cref="T:System.CodeDom.CodeTypeReference" /> that represents the type that was generated for the specified schema type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5203c-164">L'élément de schéma est nécessaire pour les données à propos du type qui est spécifié au niveau de la portée de l'élément.</span><span class="sxs-lookup"><span data-stu-id="5203c-164">The schema element is needed for data about the type that is specified at the element scope.</span></span> <span data-ttu-id="5203c-165">L'exemple principal est l'attribut XSD `nillable`.</span><span class="sxs-lookup"><span data-stu-id="5203c-165">The main example of this is the XSD attribute `nillable`.</span></span> <span data-ttu-id="5203c-166">Dans le schéma, l'affectation de `nillable` à `true` est spécifiée sur l'élément de schéma conteneur alors que le concept de null est exprimé dans le type CLR <xref:System.Nullable%601>.</span><span class="sxs-lookup"><span data-stu-id="5203c-166">In schema, setting `nillable` to `true` is specified on the containing schema element whereas the concept of null is expressed in the CLR type <xref:System.Nullable%601>.</span></span> <span data-ttu-id="5203c-167">L'élément est passé afin que cet importateur puisse rechercher des informations au niveau de l'élément et retourner la référence de type correcte en conséquence.</span><span class="sxs-lookup"><span data-stu-id="5203c-167">The element is passed in so that this importer can look up the element-level information and return the correct type reference accordingly.</span></span>  
  
 <span data-ttu-id="5203c-168">Lors de l'importation de WSDL, chaque paramètre est importé séparément et les éléments parameter doivent par conséquent être passés séparément.</span><span class="sxs-lookup"><span data-stu-id="5203c-168">When importing WSDL, each parameter is imported separately and therefore the parameter elements need to be passed in separately.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownTypeReferences">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKnownTypeReferences (typeName As XmlQualifiedName) As ICollection(Of CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::CodeDom::CodeTypeReference ^&gt; ^ GetKnownTypeReferences(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetKnownTypeReferences : System.Xml.XmlQualifiedName -&gt; System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;" Usage="xsdDataContractImporter.GetKnownTypeReferences typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="5203c-169"><see cref="T:System.Xml.XmlQualifiedName" /> qui représente le type de schéma pour lequel rechercher des types connus.</span><span class="sxs-lookup"><span data-stu-id="5203c-169">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the schema type to look up known types for.</span></span></param>
        <summary><span data-ttu-id="5203c-170">Retourne une liste d'objets <see cref="T:System.CodeDom.CodeTypeReference" /> qui représente les types connus générés lors de la génération du code pour le type de schéma spécifié.</span><span class="sxs-lookup"><span data-stu-id="5203c-170">Returns a list of <see cref="T:System.CodeDom.CodeTypeReference" /> objects that represents the known types generated when generating code for the specified schema type.</span></span></summary>
        <returns><span data-ttu-id="5203c-171"><see cref="T:System.Collections.Generic.IList`1" /> de type <see cref="T:System.CodeDom.CodeTypeReference" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-171">A <see cref="T:System.Collections.Generic.IList`1" /> of type <see cref="T:System.CodeDom.CodeTypeReference" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5203c-172">Lors de la génération de types CLR pour les types de schémas, les types connus sont également générés pour tous les types dérivés qui sont présents dans le schéma.</span><span class="sxs-lookup"><span data-stu-id="5203c-172">When generating CLR types for schema types, known types are also generated for all derived types that are present in the schema.</span></span> <span data-ttu-id="5203c-173">Dans de nombreux cas, ces types connus sont ajoutés à l'aide d'attributs au code généré.</span><span class="sxs-lookup"><span data-stu-id="5203c-173">In many cases, these known types are added using attributes to the generated code.</span></span> <span data-ttu-id="5203c-174">(Par exemple, consultez la <xref:System.Runtime.Serialization.KnownTypeAttribute> classe.</span><span class="sxs-lookup"><span data-stu-id="5203c-174">(For example, see the <xref:System.Runtime.Serialization.KnownTypeAttribute> class.</span></span> <span data-ttu-id="5203c-175">) Toutefois, pour le type de niveau supérieur, il doit être un moyen de retourner l’ensemble des types connus générés.</span><span class="sxs-lookup"><span data-stu-id="5203c-175">) However, for the top-level type, there needs to be a way to return the set of known types generated.</span></span> <span data-ttu-id="5203c-176">Cette méthode retourne le <xref:System.CodeDom.CodeTypeReference> pour les types connus qui sont générés pour un type de schéma spécifique.</span><span class="sxs-lookup"><span data-stu-id="5203c-176">This method returns the <xref:System.CodeDom.CodeTypeReference> for known types that were generated for a specific schema type.</span></span>  
  
 <span data-ttu-id="5203c-177">Pour plus d’informations, consultez [Data Contract Known Types](~/docs/framework/wcf/feature-details/data-contract-known-types.md).</span><span class="sxs-lookup"><span data-stu-id="5203c-177">For more information, see [Data Contract Known Types](~/docs/framework/wcf/feature-details/data-contract-known-types.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/1a0baea1-27b7-470d-9136-5bbad86c4337"><span data-ttu-id="5203c-178">Types connus de contrats de données</span><span class="sxs-lookup"><span data-stu-id="5203c-178">Data Contract Known Types</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Import">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="5203c-179">Transforme un jeu de schémas XML en un <see cref="T:System.CodeDom.CodeCompileUnit" /> utilisé pour générer le code CLR.</span><span class="sxs-lookup"><span data-stu-id="5203c-179">Transforms a set of XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> used to generate CLR code.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xsdDataContractImporter.Import schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="5203c-180"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> qui contient les représentations de schéma pour lesquelles générer des types CLR.</span><span class="sxs-lookup"><span data-stu-id="5203c-180">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations to generate CLR types for.</span></span></param>
        <summary><span data-ttu-id="5203c-181">Transforme le jeu de schémas XML spécifié contenu dans un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> en un <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-181">Transforms the specified set of XML schemas contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5203c-182">L'exemple suivant utilise la méthode <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> pour tester si un jeu de schémas peut être importé.</span><span class="sxs-lookup"><span data-stu-id="5203c-182">The following example uses the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to test whether a set of schemas can be imported.</span></span> <span data-ttu-id="5203c-183">Si la méthode <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> retourne `true`, le code appelle la méthode <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A>.</span><span class="sxs-lookup"><span data-stu-id="5203c-183">If the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method returns `true`, the code invokes the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method.</span></span>  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5203c-184">Le paramètre <paramref name="schemas" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-184">The <paramref name="schemas" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="5203c-185"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> qui contient les représentations de schéma.</span><span class="sxs-lookup"><span data-stu-id="5203c-185">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeNames"><span data-ttu-id="5203c-186"><see cref="T:System.Collections.Generic.ICollection`1" /> (de <see cref="T:System.Xml.XmlQualifiedName" />) qui représente l'ensemble de types de schémas à importer.</span><span class="sxs-lookup"><span data-stu-id="5203c-186">A <see cref="T:System.Collections.Generic.ICollection`1" /> (of <see cref="T:System.Xml.XmlQualifiedName" />) that represents the set of schema types to import.</span></span></param>
        <summary><span data-ttu-id="5203c-187">Transforme l'ensemble spécifié de types de schémas contenu dans un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> en types CLR générés dans un <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-187">Transforms the specified set of schema types contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into CLR types generated into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Import (schemas As XmlSchemaSet, element As XmlSchemaElement) As XmlQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractImporter.Import (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="5203c-188"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> qui contient les schémas à transformer.</span><span class="sxs-lookup"><span data-stu-id="5203c-188">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to transform.</span></span></param>
        <param name="element"><span data-ttu-id="5203c-189"><see cref="T:System.Xml.Schema.XmlSchemaElement" /> qui représente l'élément de schéma spécifique à transformer.</span><span class="sxs-lookup"><span data-stu-id="5203c-189">An <see cref="T:System.Xml.Schema.XmlSchemaElement" /> that represents the specific schema element to transform.</span></span></param>
        <summary><span data-ttu-id="5203c-190">Transforme l'élément de schéma spécifié dans le jeu de schémas XML spécifiés en un <see cref="T:System.CodeDom.CodeCompileUnit" /> et retourne un <see cref="T:System.Xml.XmlQualifiedName" /> qui représente le nom de contrat de données pour l'élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="5203c-190">Transforms the specified schema element in the set of specified XML schemas into a <see cref="T:System.CodeDom.CodeCompileUnit" /> and returns an <see cref="T:System.Xml.XmlQualifiedName" /> that represents the data contract name for the specified element.</span></span></summary>
        <returns><span data-ttu-id="5203c-191"><see cref="T:System.Xml.XmlQualifiedName" /> qui représente l'élément spécifié.</span><span class="sxs-lookup"><span data-stu-id="5203c-191">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the specified element.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5203c-192">Le paramètre <paramref name="schemas" /> ou <paramref name="element" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-192">The <paramref name="schemas" /> or <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeName As XmlQualifiedName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas"><span data-ttu-id="5203c-193"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> qui contient les représentations de schéma.</span><span class="sxs-lookup"><span data-stu-id="5203c-193">A <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schema representations.</span></span></param>
        <param name="typeName"><span data-ttu-id="5203c-194"><see cref="T:System.Xml.XmlQualifiedName" /> qui représente un type de schéma spécifique à importer.</span><span class="sxs-lookup"><span data-stu-id="5203c-194">A <see cref="T:System.Xml.XmlQualifiedName" /> that represents a specific schema type to import.</span></span></param>
        <summary><span data-ttu-id="5203c-195">Transforme le type de schéma XML spécifié contenu dans un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> en un <see cref="T:System.CodeDom.CodeCompileUnit" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-195">Transforms the specified XML schema type contained in an <see cref="T:System.Xml.Schema.XmlSchemaSet" /> into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5203c-196">Le paramètre <paramref name="schemas" /> ou <paramref name="typeName" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5203c-196">The <paramref name="schemas" /> or <paramref name="typeName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.ImportOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Serialization.ImportOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As ImportOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::ImportOptions ^ Options { System::Runtime::Serialization::ImportOptions ^ get(); void set(System::Runtime::Serialization::ImportOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Runtime.Serialization.ImportOptions with get, set" Usage="System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.ImportOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5203c-197">Obtient ou définit un <see cref="T:System.Runtime.Serialization.ImportOptions" /> qui contient des options définissables pour l'opération d'importation.</span><span class="sxs-lookup"><span data-stu-id="5203c-197">Gets or sets an <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options for the import operation.</span></span></summary>
        <value><span data-ttu-id="5203c-198"><see cref="T:System.Runtime.Serialization.ImportOptions" /> qui contient des options définissables.</span><span class="sxs-lookup"><span data-stu-id="5203c-198">A <see cref="T:System.Runtime.Serialization.ImportOptions" /> that contains settable options.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5203c-199">Utilisez la classe <xref:System.Runtime.Serialization.ImportOptions> pour personnaliser la manière dont les types CLR sont générés pendant l'importation de schéma.</span><span class="sxs-lookup"><span data-stu-id="5203c-199">Use the <xref:System.Runtime.Serialization.ImportOptions> class to customize how the CLR types are generated during schema import.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
        <altmember cref="T:System.Runtime.Serialization.ImportOptions" />
      </Docs>
    </Member>
  </Members>
</Type>