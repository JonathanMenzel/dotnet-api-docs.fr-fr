<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XsdDataContractImporter.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d1e9a9c7ca5420f198e5489d5848a82e872d5211.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1e9a9c7ca5420f198e5489d5848a82e872d5211</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Allows the transformation of a set of XML schema files (.xsd) into common language runtime (CLR) types.</source>
          <target state="translated">Permet la transformation d'un ensemble de fichiers de schéma XML (.xsd) dans des types CLR (Common Language Runtime).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> if you are creating a Web service that must interoperate with an existing Web service, or to create data contract types from XML schemas.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> si vous créez un service Web qui doit interagir avec un service Web existant ou pour créer des types de contrat de données à partir des schémas XML.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> will transform a set of XML schemas and create the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> types that represent the data contract in a selected programming language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> transformera un jeu de schémas XML et créera les types <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> qui représentent le contrat de données dans un langage de programmation sélectionné.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>To create the code, use the classes in the <ph id="ph1">&lt;xref:System.CodeDom&gt;</ph> namespace.</source>
          <target state="translated">Pour créer le code, utilisez les classes dans l'espace de noms <ph id="ph1">&lt;xref:System.CodeDom&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Conversely, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> class when you have created a Web service that incorporates data represented by CLR types and when you need to export XML schemas for each data type to be consumed by other Web services.</source>
          <target state="translated">Inversement, utilisez la classe <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> lorsque vous avez créé un service Web qui incorpore des données représentées par les types CLR et lorsque vous devez exporter des schémas XML pour chaque type de données à consommer par d'autres services Web.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>That is, <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> transforms a set of CLR types into a set of XML schemas.</source>
          <target state="translated">Autrement dit, <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> transforme un ensemble de types CLR en un jeu de schémas XML.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>To generate CLR types from XML schemas at design time, use the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.</source>
          <target state="translated">Pour générer des types CLR à partir de schémas XML au moment du design, utilisez la <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>To generated code from XSD files, use the <ph id="ph1">`/dataContractOnly`</ph> switch of the tool.</source>
          <target state="translated">Pour générer du code à partir des fichiers XSD, utilisez le <ph id="ph1">`/dataContractOnly`</ph> switch de l’outil.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> if you need more control over the process or need to do it programmatically.</source>
          <target state="translated">Vous pouvez également utiliser le <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> si vous avez besoin de plus contrôler le processus ou que vous avez besoin de le faire par programme.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> and calls the <ph id="ph2">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> method to create a <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
          <target state="translated">L'exemple suivant crée un <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> et appelle la méthode <ph id="ph2">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> pour créer un <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> is then used to create both Visual C# and Visual Basic code files.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> est alors utilisé pour créer des fichiers de code Visual C# et Visual Basic.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
          <source>The <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> that will be used to store the code.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> qui sera utilisé pour stocker le code.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph> class with the <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> that will be used to generate CLR code.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /&gt;</ph> avec le <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> qui sera utilisé pour générer le code CLR.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
          <source>Use this constructor to add more code into a <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> that has already been generated.</source>
          <target state="translated">Utilisez ce constructeur pour ajouter davantage de code dans un <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> qui a déjà été généré.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> and calls the <ph id="ph2">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> method to create a <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
          <target state="translated">L'exemple suivant crée un <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> et appelle la méthode <ph id="ph2">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> pour créer un <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> is then used to create both Visual C# and Visual Basic code files.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> est alors utilisé pour créer des fichiers de code Visual C# et Visual Basic.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Gets a value that indicates whether the schemas can be transformed into a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Obtient une valeur qui indique si les schémas peuvent être transformés en un <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>For more information about types that can be imported, see <bpt id="p1">[</bpt>Types Supported by the Data Contract Serializer<ept id="p1">](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur les types qui peuvent être importés, consultez <bpt id="p1">[</bpt>Types pris en charge par le sérialiseur de contrat de données<ept id="p1">](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schemas to transform.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> qui contient les schémas à transformer.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source>Gets a value that indicates whether the schemas contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> can be transformed into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Obtient une valeur qui indique si les schémas contenus dans un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> peuvent être transformés en un <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the schemas can be transformed to data contract types; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les schémas peuvent être transformés en types de contrat de données ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> method to determine whether the <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> can be generated.</source>
          <target state="translated">L'exemple suivant appelle la méthode <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> pour déterminer si le <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> peut être généré.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">Un contrat de données impliqué dans l'importation n'est pas valide.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schemas to transform.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> qui contient les schémas à transformer.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that represents the set of schema types to import.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> de <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> qui représente l'ensemble de types de schémas à importer.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>Gets a value that indicates whether the specified set of types contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> can be transformed into CLR types generated into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Obtient une valeur qui indique si l'ensemble spécifié de types contenu dans un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> peut être transformé en types CLR générés dans un <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the schemas can be transformed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les schémas peuvent être transformés ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeNames" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeNames" /&gt;</ph> est <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">Un contrat de données impliqué dans l'importation n'est pas valide.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> to import.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> à importer.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>A specific <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> to check in the set of schemas.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> spécifique à vérifier dans le jeu de schémas.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>Gets a value that indicates whether a specific schema element contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> can be imported.</source>
          <target state="translated">Obtient une valeur qui indique si un élément de schéma spécifique contenu dans un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> peut être importé.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element can be imported; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'élément peut être importé ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>This method checks the type and all schema types referenced from it.</source>
          <target state="translated">Cette méthode vérifie le type et tous les types de schémas référencés à partir de celui-ci.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> or <ph id="ph2">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="element" /&gt;</ph> est <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">Un contrat de données impliqué dans l'importation n'est pas valide.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schema representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> qui contient les représentations de schéma.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that specifies the names of the schema types that need to be imported from the <ph id="ph3">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph>.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Collections.IList" /&gt;</ph> de <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> qui spécifie les noms des types de schémas qui doivent être importés à partir du <ph id="ph3">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>Gets a value that indicates whether the schemas contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> can be transformed into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Obtient une valeur qui indique si les schémas contenus dans un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> peuvent être transformés en un <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the schemas can be transformed to data contract types; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les schémas peuvent être transformés en types de contrat de données ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>For more information about types that can be imported, see <bpt id="p1">[</bpt>Types Supported by the Data Contract Serializer<ept id="p1">](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur les types qui peuvent être importés, consultez <bpt id="p1">[</bpt>Types pris en charge par le sérialiseur de contrat de données<ept id="p1">](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> est <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>A data contract involved in the import is invalid.</source>
          <target state="translated">Un contrat de données impliqué dans l'importation n'est pas valide.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> used for storing the CLR types generated.</source>
          <target state="translated">Obtient un <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> utilisé pour stocker les types CLR générés.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> used to store the CLR types generated.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> utilisé pour stocker les types CLR générés.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
          <source>Call this property after importing schemas using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> to access the <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> in which all the generated code is stored.</source>
          <target state="translated">Appelez cette propriété après avoir importé des schémas à l'aide du <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter&gt;</ph> pour accéder au <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> dans lequel tout le code généré est stocké.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
          <source>The following example uses creates a <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
          <target state="translated">L'exemple suivant crée <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> is then used to create both a Visual C# and Visual Basic code file.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph> est alors utilisé pour créer un fichier de code Visual C# et Visual Basic.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> for the specified element.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> pour l'élément spécifié.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that specifies the schema type to look up.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> qui spécifie le type de schéma à rechercher.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> to the CLR type generated for the schema type with the specified <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph>.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> au type CLR généré pour le type de schéma avec le <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph>spécifié.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> reference to the CLR type generated for the schema type with the <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> specified.</source>
          <target state="translated">Référence <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> au type CLR généré pour le type de schéma avec le <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
          <source>Use this method to look up the reference to a generated CLR type after calling the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> method.</source>
          <target state="translated">Utilisez cette méthode pour rechercher la référence à un type CLR généré après avoir appelé la méthode <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> contains the name of the generated type and can be used to look up the corresponding <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> in the <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> contient le nom du type généré et peut être utilisé pour rechercher le <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> correspondant dans le <ph id="ph3">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that specifies the XML qualified name of the schema type to look up.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> qui spécifie le nom qualifié XML du type de schéma à rechercher.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> that specifies an element in an XML schema.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> qui spécifie un élément dans un schéma XML.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> for the specified XML qualified element and schema element.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> pour l'élément qualifié XML spécifié et l'élément de schéma.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> that represents the type that was generated for the specified schema type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> qui représente le type qui a été généré pour le type de schéma spécifié.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>The schema element is needed for data about the type that is specified at the element scope.</source>
          <target state="translated">L'élément de schéma est nécessaire pour les données à propos du type qui est spécifié au niveau de la portée de l'élément.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>The main example of this is the XSD attribute <ph id="ph1">`nillable`</ph>.</source>
          <target state="translated">L'exemple principal est l'attribut XSD <ph id="ph1">`nillable`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>In schema, setting <ph id="ph1">`nillable`</ph> to <ph id="ph2">`true`</ph> is specified on the containing schema element whereas the concept of null is expressed in the CLR type <ph id="ph3">&lt;xref:System.Nullable%601&gt;</ph>.</source>
          <target state="translated">Dans le schéma, l'affectation de <ph id="ph1">`nillable`</ph> à <ph id="ph2">`true`</ph> est spécifiée sur l'élément de schéma conteneur alors que le concept de null est exprimé dans le type CLR <ph id="ph3">&lt;xref:System.Nullable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>The element is passed in so that this importer can look up the element-level information and return the correct type reference accordingly.</source>
          <target state="translated">L'élément est passé afin que cet importateur puisse rechercher des informations au niveau de l'élément et retourner la référence de type correcte en conséquence.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)">
          <source>When importing WSDL, each parameter is imported separately and therefore the parameter elements need to be passed in separately.</source>
          <target state="translated">Lors de l'importation de WSDL, chaque paramètre est importé séparément et les éléments parameter doivent par conséquent être passés séparément.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that represents the schema type to look up known types for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> qui représente le type de schéma pour lequel rechercher des types connus.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> objects that represents the known types generated when generating code for the specified schema type.</source>
          <target state="translated">Retourne une liste d'objets <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> qui représente les types connus générés lors de la génération du code pour le type de schéma spécifié.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> of type <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IList`1" /&gt;</ph> de type <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>When generating CLR types for schema types, known types are also generated for all derived types that are present in the schema.</source>
          <target state="translated">Lors de la génération de types CLR pour les types de schémas, les types connus sont également générés pour tous les types dérivés qui sont présents dans le schéma.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>In many cases, these known types are added using attributes to the generated code.</source>
          <target state="translated">Dans de nombreux cas, ces types connus sont ajoutés à l'aide d'attributs au code généré.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>(For example, see the <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> class.</source>
          <target state="translated">(Par exemple, consultez la <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>) However, for the top-level type, there needs to be a way to return the set of known types generated.</source>
          <target state="translated">) Toutefois, pour le type de niveau supérieur, il doit exister un moyen de retourner l’ensemble de types connus générés.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>This method returns the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> for known types that were generated for a specific schema type.</source>
          <target state="translated">Cette méthode retourne le <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> pour les types connus qui sont générés pour un type de schéma spécifique.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>Types connus de contrat de données<ept id="p1">](~/docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.XsdDataContractImporter">
          <source>Transforms a set of XML schemas into a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> used to generate CLR code.</source>
          <target state="translated">Transforme un jeu de schémas XML en un <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> utilisé pour générer le code CLR.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schema representations to generate CLR types for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> qui contient les représentations de schéma pour lesquelles générer des types CLR.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
          <source>Transforms the specified set of XML schemas contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Transforme le jeu de schémas XML spécifié contenu dans un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> en un <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> method to test whether a set of schemas can be imported.</source>
          <target state="translated">L'exemple suivant utilise la méthode <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> pour tester si un jeu de schémas peut être importé.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
          <source>If the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>, the code invokes the <ph id="ph3">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph> method.</source>
          <target state="translated">Si la méthode <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A&gt;</ph> retourne <ph id="ph2">`true`</ph>, le code appelle la méthode <ph id="ph3">&lt;xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schema representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> qui contient les représentations de schéma.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> (of <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph>) that represents the set of schema types to import.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> (de <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph>) qui représente l'ensemble de types de schémas à importer.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})">
          <source>Transforms the specified set of schema types contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> into CLR types generated into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Transforme l'ensemble spécifié de types de schémas contenu dans un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> en types CLR générés dans un <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schemas to transform.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> qui contient les schémas à transformer.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> that represents the specific schema element to transform.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaElement" /&gt;</ph> qui représente l'élément de schéma spécifique à transformer.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>Transforms the specified schema element in the set of specified XML schemas into a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> and returns an <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that represents the data contract name for the specified element.</source>
          <target state="translated">Transforme l'élément de schéma spécifié dans le jeu de schémas XML spécifiés en un <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> et retourne un <ph id="ph2">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> qui représente le nom de contrat de données pour l'élément spécifié.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that represents the specified element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> qui représente l'élément spécifié.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> or <ph id="ph2">&lt;paramref name="element" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="element" /&gt;</ph> est <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> that contains the schema representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> qui contient les représentations de schéma.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> that represents a specific schema type to import.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlQualifiedName" /&gt;</ph> qui représente un type de schéma spécifique à importer.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>Transforms the specified XML schema type contained in an <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> into a <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">Transforme le type de schéma XML spécifié contenu dans un <ph id="ph1">&lt;see cref="T:System.Xml.Schema.XmlSchemaSet" /&gt;</ph> en un <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)">
          <source>The <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> or <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> parameter is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="schemas" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="typeName" /&gt;</ph> est <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="P:System.Runtime.Serialization.XsdDataContractImporter.Options">
          <source>Gets or sets an <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ImportOptions" /&gt;</ph> that contains settable options for the import operation.</source>
          <target state="translated">Obtient ou définit un <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ImportOptions" /&gt;</ph> qui contient des options définissables pour l'opération d'importation.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.Options">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ImportOptions" /&gt;</ph> that contains settable options.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ImportOptions" /&gt;</ph> qui contient des options définissables.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Runtime.Serialization.XsdDataContractImporter.Options">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ImportOptions&gt;</ph> class to customize how the CLR types are generated during schema import.</source>
          <target state="translated">Utilisez la classe <ph id="ph1">&lt;xref:System.Runtime.Serialization.ImportOptions&gt;</ph> pour personnaliser la manière dont les types CLR sont générés pendant l'importation de schéma.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>