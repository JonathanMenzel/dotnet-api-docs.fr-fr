<Type Name="XsdDataContractExporter" FullName="System.Runtime.Serialization.XsdDataContractExporter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fdd65ac44d5fc27e199203a88c1cef7891af18e7" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37633673" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XsdDataContractExporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdDataContractExporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XsdDataContractExporter" />
  <TypeSignature Language="VB.NET" Value="Public Class XsdDataContractExporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsdDataContractExporter" />
  <TypeSignature Language="F#" Value="type XsdDataContractExporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>4.1.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Allows the transformation of a set of .NET Framework types that are used in data contracts into an XML schema file (.xsd).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la classe <xref:System.Runtime.Serialization.XsdDataContractExporter> lorsque vous avez créé un service Web qui incorpore des données représentées par les types CLR (Common Language Runtime) et que vous devez exporter des schémas XML pour chaque type à consommer par d'autres services Web. Autrement dit, <xref:System.Runtime.Serialization.XsdDataContractExporter> transforme un ensemble de types CLR en schémas XML. (Pour plus d’informations sur les types qui peuvent être utilisées, consultez [Types pris en charge par le sérialiseur de contrat de données](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).) Les schémas peuvent alors être exposés via un document WSDL (Web Services Description Language) à utiliser par d'autres qui doivent interopérer avec votre service.  
  
 À l'inverse, si vous créez un service Web qui doit interopérer avec un service Web existant, utilisez le <xref:System.Runtime.Serialization.XsdDataContractImporter> pour transformer des schémas XML et créer les types CLR qui représentent les données dans un langage de programmation sélectionné.  
  
 Le <xref:System.Runtime.Serialization.XsdDataContractExporter> génère un objet <xref:System.Xml.Schema.XmlSchemaSet> qui contient la collection de schémas. Accédez à l'jeu de schémas via la propriété <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>.  
  
> [!NOTE]
>  Pour rapidement générer des fichiers XSD (XML Schema Definition) que d'autres services Web peuvent consommer, utilisez le <xref:System.Runtime.Serialization.XsdDataContractExporter>.  
  
## <a name="exporting-schemas-into-an-xmlschemaset"></a>Exportation de schémas vers une classe XmlSchemaSet  
 Pour créer une instance de la classe <xref:System.Xml.Schema.XmlSchemaSet> qui contient des fichiers de schéma XML, vous devez être conscient des éléments suivants.  
  
 L'ensemble de types que vous exportez est enregistré comme un ensemble interne de contrats de données. Vous pouvez donc appeler plusieurs fois la méthode <xref:System.Runtime.Serialization.XsdDataContractExporter.CanExport%2A> pour ajouter des types nouveaux à l'jeu de schémas sans dégrader les performances parce que seuls les types nouveaux seront ajoutés à l'ensemble. Pendant l'opération <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%2A>, les schémas existants sont comparés aux nouveaux schémas qui sont ajoutés. Si des conflits existent, une exception sera levée. Un conflit est généralement détecté si deux types avec le même nom de contrat de données mais avec des contrats différents (membres différents) sont exportés par la même instance <xref:System.Runtime.Serialization.XsdDataContractExporter>.  
  
## <a name="using-the-exporter"></a>Utilisation de l'exportateur  
 Une solution recommandée d'utiliser cette classe est la suivante :  
  
1.  Utilisez l'une des surcharges <xref:System.Runtime.Serialization.XsdDataContractExporter.CanExport%2A> pour déterminer si le type spécifié ou l'ensemble de types peut être exporté. Utilisez l'une des surcharges qui est appropriée pour vos spécifications.  
  
2.  Appelez la méthode <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%2A> correspondante.  
  
3.  Récupérez les schémas à partir de la propriété <xref:System.Runtime.Serialization.XsdDataContractExporter.Schemas%2A>.  
  
   
  
## Examples  
 L'exemple suivant crée une instance du <xref:System.Runtime.Serialization.XsdDataContractExporter> et appelle la méthode <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%28System.Type%29>.  
  
 [!code-csharp[XsdDataContractExporter#0](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractexporter/cs/overview.cs#0)]
 [!code-vb[XsdDataContractExporter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractexporter/vb/overview.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.DataContractSerializer" />
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractExporter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractExporter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractExporter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractExporter (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractExporter.#ctor(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractExporter(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Serialization.XsdDataContractExporter : System.Xml.Schema.XmlSchemaSet -&gt; System.Runtime.Serialization.XsdDataContractExporter" Usage="new System.Runtime.Serialization.XsdDataContractExporter schemas" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> that contains the schemas to be exported.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XsdDataContractExporter" /> class with the specified set of schemas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette surcharge lorsque vous avez un <xref:System.Xml.Schema.XmlSchemaSet> existant auquel vous souhaitez ajouter de nouveaux schémas. Après avoir construit un <xref:System.Runtime.Serialization.XsdDataContractExporter> avec cette surcharge, appelez la méthode <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%2A> pour ajouter des types nouveaux à l'ensemble existant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanExport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a value that indicates whether a common language runtime (CLR) type (or set of types) can be exported.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les types CLR ne peuvent pas tous être utilisés dans les contrats de données. Pour plus d’informations sur ce qui peut être sérialisé, consultez [Types pris en charge par le sérialiseur de contrat de données](~/docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanExport">
      <MemberSignature Language="C#" Value="public bool CanExport (System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt; assemblies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExport(class System.Collections.Generic.ICollection`1&lt;class System.Reflection.Assembly&gt; assemblies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Reflection.Assembly})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExport (assemblies As ICollection(Of Assembly)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExport(System::Collections::Generic::ICollection&lt;System::Reflection::Assembly ^&gt; ^ assemblies);" />
      <MemberSignature Language="F#" Value="member this.CanExport : System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt; -&gt; bool" Usage="xsdDataContractExporter.CanExport assemblies" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblies" Type="System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt;" />
      </Parameters>
      <Docs>
        <param name="assemblies">A <see cref="T:System.Collections.Generic.ICollection`1" /> of <see cref="T:System.Reflection.Assembly" /> that contains the assemblies with the types to export.</param>
        <summary>Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a set of assemblies can be exported.</summary>
        <returns>
          <see langword="true" /> if the types can be exported; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExport">
      <MemberSignature Language="C#" Value="public bool CanExport (System.Collections.Generic.ICollection&lt;Type&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExport(class System.Collections.Generic.ICollection`1&lt;class System.Type&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Collections.Generic.ICollection{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExport (types As ICollection(Of Type)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExport(System::Collections::Generic::ICollection&lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.CanExport : System.Collections.Generic.ICollection&lt;Type&gt; -&gt; bool" Usage="xsdDataContractExporter.CanExport types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Collections.Generic.ICollection&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="types">A <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the specified types to export.</param>
        <summary>Gets a value that indicates whether the set of .common language runtime (CLR) types contained in a <see cref="T:System.Collections.Generic.ICollection`1" /> can be exported.</summary>
        <returns>
          <see langword="true" /> if the types can be exported; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExport">
      <MemberSignature Language="C#" Value="public bool CanExport (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanExport(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractExporter.CanExport(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExport(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.CanExport : Type -&gt; bool" Usage="xsdDataContractExporter.CanExport type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Type" /> to export.</param>
        <summary>Gets a value that indicates whether the specified common language runtime (CLR) type can be exported.</summary>
        <returns>
          <see langword="true" /> if the type can be exported; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant appelle la méthode <xref:System.Runtime.Serialization.XsdDataContractExporter.CanExport%28System.Type%29> avant d'appeler la méthode <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%28System.Type%29>.  
  
 [!code-csharp[XsdDataContractExporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractexporter/cs/overview.cs#1)]
 [!code-vb[XsdDataContractExporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractexporter/vb/overview.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Export">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Transforms the common language runtime (CLR) type, or set of types, into a set of XML schemas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une méthode recommandée est d'utiliser l'une des surcharges <xref:System.Runtime.Serialization.XsdDataContractExporter.CanExport%2A> pour déterminer si le type ou ensemble de types spécifié peut être exporté.  
  
 Après avoir appelé la méthode <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%2A>, récupérez les schémas à partir de la propriété <xref:System.Runtime.Serialization.XsdDataContractExporter.Schemas%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public void Export (System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt; assemblies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Export(class System.Collections.Generic.ICollection`1&lt;class System.Reflection.Assembly&gt; assemblies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Reflection.Assembly})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Export (assemblies As ICollection(Of Assembly))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Export(System::Collections::Generic::ICollection&lt;System::Reflection::Assembly ^&gt; ^ assemblies);" />
      <MemberSignature Language="F#" Value="member this.Export : System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt; -&gt; unit" Usage="xsdDataContractExporter.Export assemblies" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblies" Type="System.Collections.Generic.ICollection&lt;System.Reflection.Assembly&gt;" />
      </Parameters>
      <Docs>
        <param name="assemblies">A <see cref="T:System.Collections.Generic.ICollection`1" /> (of <see cref="T:System.Reflection.Assembly" />) that contains the types to export.</param>
        <summary>Transforms the types contained in the specified collection of assemblies.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies" /> argument is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">An <see cref="T:System.Reflection.Assembly" /> in the collection is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public void Export (System.Collections.Generic.ICollection&lt;Type&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Export(class System.Collections.Generic.ICollection`1&lt;class System.Type&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Collections.Generic.ICollection{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Export (types As ICollection(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Export(System::Collections::Generic::ICollection&lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.Export : System.Collections.Generic.ICollection&lt;Type&gt; -&gt; unit" Usage="xsdDataContractExporter.Export types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Collections.Generic.ICollection&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="types">A  <see cref="T:System.Collections.Generic.ICollection`1" /> (of <see cref="T:System.Type" />) that contains the types to export.</param>
        <summary>Transforms the types contained in the <see cref="T:System.Collections.Generic.ICollection`1" /> passed to this method.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="types" /> argument is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">A type in the collection is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public void Export (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Export(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractExporter.Export(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Export(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.Export : Type -&gt; unit" Usage="xsdDataContractExporter.Export type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Type" /> to transform into an XML schema.</param>
        <summary>Transforms the specified [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] type into an XML schema definition language (XSD) schema.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelez la <xref:System.Runtime.Serialization.XsdDataContractExporter.CanExport%2A> pour déterminer si le type peut être exporté. Après avoir appelé la méthode <xref:System.Runtime.Serialization.XsdDataContractExporter.Export%2A>, le schéma peut être récupéré via la propriété <xref:System.Runtime.Serialization.XsdDataContractExporter.Schemas%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> argument is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRootElementName">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName GetRootElementName (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName GetRootElementName(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ GetRootElementName(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.GetRootElementName : Type -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractExporter.GetRootElementName type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Type" /> to query.</param>
        <summary>Returns the top-level name and namespace for the <see cref="T:System.Type" />.</summary>
        <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> that represents the top-level name and namespace for this <see cref="T:System.Type" />, which is written to the stream when writing this object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> argument is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaType">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaType GetSchemaType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchemaType GetSchemaType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchemaType ^ GetSchemaType(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.GetSchemaType : Type -&gt; System.Xml.Schema.XmlSchemaType" Usage="xsdDataContractExporter.GetSchemaType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type to return a schema for.</param>
        <summary>Returns the XML schema type for the specified type.</summary>
        <returns>An <see cref="T:System.Xml.Schema.XmlSchemaType" /> that contains the XML schema.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le but principal de cette méthode est d'autoriser des types anonymes dans le schéma XML à représenter. Étant donné que les types anonymes n'ont ni nom de contrat, ni espace de noms, ils ne peuvent pas être recherchés à l'aide du <xref:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName%2A>. Cette méthode retourne la définition <xref:System.Xml.Schema.XmlSchemaType> pour de tels types. Pour les types pour lesquels la méthode <xref:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName%2A> retourne un nom valide, cette méthode retourne `null`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> argument is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaTypeName">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName GetSchemaTypeName (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName GetSchemaTypeName(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ GetSchemaTypeName(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.GetSchemaTypeName : Type -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractExporter.GetSchemaTypeName type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The <see cref="T:System.Type" /> that was exported.</param>
        <summary>Returns the contract name and contract namespace for the <see cref="T:System.Type" />.</summary>
        <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the contract name of the type and its namespace.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> argument is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.ExportOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Serialization.ExportOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractExporter.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As ExportOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::ExportOptions ^ Options { System::Runtime::Serialization::ExportOptions ^ get(); void set(System::Runtime::Serialization::ExportOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Runtime.Serialization.ExportOptions with get, set" Usage="System.Runtime.Serialization.XsdDataContractExporter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.ExportOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an <see cref="T:System.Runtime.Serialization.ExportOptions" /> that contains options that can be set for the export operation.</summary>
        <value>
          <see cref="T:System.Runtime.Serialization.ExportOptions" /> qui contient des options utilisées pour personnaliser l'exportation des types vers les schémas.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractExporter.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Schemas As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaSet ^ Schemas { System::Xml::Schema::XmlSchemaSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaSet" Usage="System.Runtime.Serialization.XsdDataContractExporter.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Xml</AssemblyName>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>4.1.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of exported XML schemas.</summary>
        <value>Un <see cref="T:System.Xml.Schema.XmlSchemaSet" /> qui contient les schémas transformés à partir de l'ensemble de types CLR après avoir appelé la méthode <see cref="Overload:System.Runtime.Serialization.XsdDataContractExporter.Export" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>