<Type Name="IObjectReference" FullName="System.Runtime.Serialization.IObjectReference">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e66ecc80c8a7ca0b241e0a186794d1cb29ef2f55" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36629314" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IObjectReference" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObjectReference" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.IObjectReference" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObjectReference" />
  <TypeSignature Language="C++ CLI" Value="public interface class IObjectReference" />
  <TypeSignature Language="F#" Value="type IObjectReference = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indique que l'implémenteur d'interface en cours est une référence à un autre objet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[IObjectReference Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IObjectReference Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[IObjectReference Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IObjectReference Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[IObjectReference Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IObjectReference Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Implémentez cette interface sur les objets qui sont des références à un autre objet, qui ne peut pas être résolu tant que l’objet actuel est restaurée dans son intégralité. Au cours de l’étape de correction, tout objet implémentant <see cref="T:System.Runtime.Serialization.IObjectReference" /> est interrogée pour son réel objet et cet objet est inséré dans le graphique. La correction fait référence au processus de finalisation de références n’est déjà fait pendant le processus de désérialisation d’objet.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="GetRealObject">
      <MemberSignature Language="C#" Value="public object GetRealObject (System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetRealObject(valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRealObject (context As StreamingContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetRealObject(System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetRealObject : System.Runtime.Serialization.StreamingContext -&gt; obj" Usage="iObjectReference.GetRealObject context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> à partir duquel l'objet en cours est désérialisé.</param>
        <summary>Retourne l'objet réel qui doit être désérialisé, plutôt que l'objet spécifié par le flux sérialisé.</summary>
        <returns>Retourne l'objet réel qui est placé dans le graphique.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est utile dans une situation de communication à distance dans laquelle vous sérialisez un objet créateur de proxy, et non un objet réel. Quand l’objet créateur de proxy est désérialisé, la désérialisation appelle sa <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A> (méthode). À ce stade, l’objet créateur de proxy crée une nouvelle instance de l’objet proxy qui fait référence à l’objet réel d’origine, par exemple sur un ordinateur distant. Enfin, l’objet créateur de proxy est ignorée et récupéré ultérieurement par le garbage collection.  
  
 Examinons, par exemple, comment <xref:System.Type> les objets sont sérialisés. Au lieu de transmettre les données à partir de la <xref:System.Type> de l’objet, le système transmet un objet conteneur avec le nom de l’objet de type et des informations sur l’assembly dans lequel il se trouve dans un objet qui implémente <xref:System.Runtime.Serialization.IObjectReference>. Lorsque le nom de type et le nom de l’assembly sont disponibles, l’infrastructure de désérialisation appelle <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A> sur l’objet conteneur qui a été transmis. Ce conteneur retourne le <xref:System.Type> objet qui est inséré dans le graphique.  
  
 Cette méthode est protégée par un <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> pour le <xref:System.Security.Permissions.SecurityPermission> avec le <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType> spécifié.  
  
   
  
## Examples  
 [!code-cpp[IObjectReference Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IObjectReference Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[IObjectReference Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IObjectReference Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[IObjectReference Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IObjectReference Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise. L'appel ne fonctionnera pas sur un serveur de confiance moyenne.</exception>
      </Docs>
    </Member>
  </Members>
</Type>