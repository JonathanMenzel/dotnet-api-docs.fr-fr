<Type Name="ECDiffieHellman" FullName="System.Security.Cryptography.ECDiffieHellman">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cb5a87ea6fe949d656b5a33c34f1f502cb481a4b" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
    <Meta Name="ms.locfileid" Value="31909587" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ECDiffieHellman : System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ECDiffieHellman extends System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ECDiffieHellman&#xA;Inherits AsymmetricAlgorithm" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDiffieHellman abstract : System::Security::Cryptography::AsymmetricAlgorithm" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.AsymmetricAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="47b9e-101">Fournit une classe de base abstraite de laquelle les implémentations de l'algorithme ECDH (Elliptic Curve Diffie-Hellman) peuvent dériver.</span>
      <span class="sxs-lookup">
        <span data-stu-id="47b9e-101">Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from.</span>
      </span>
      <span data-ttu-id="47b9e-102">Cette classe fournit le jeu d'opérations de base que toutes les implémentations ECDH doivent prendre en charge.</span>
      <span class="sxs-lookup">
        <span data-stu-id="47b9e-102">This class provides the basic set of operations that all ECDH implementations must support.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-103">Cette classe sert de classe de base abstraite pour les implémentations ECDH.</span><span class="sxs-lookup"><span data-stu-id="47b9e-103">This class serves as the abstract base class for ECDH implementations.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ECDiffieHellman ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ECDiffieHellman();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="47b9e-104">Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-104">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-105">Ce constructeur est appelé par les classes qui dérivent de la <xref:System.Security.Cryptography.ECDiffieHellman> classe.</span><span class="sxs-lookup"><span data-stu-id="47b9e-105">This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class.</span></span> <span data-ttu-id="47b9e-106">Le <xref:System.Security.Cryptography.ECDiffieHellmanCng> classe est la seule implémentation qui est incluse dans le [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span><span class="sxs-lookup"><span data-stu-id="47b9e-106">The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span> <span data-ttu-id="47b9e-107">Pour plus d’informations sur la création d’une nouvelle implémentation de l’algorithme ECDH Elliptic Curve Diffie-Hellman (), consultez le <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="47b9e-107">For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="47b9e-108">Crée une nouvelle instance d'une implémentation de l'algorithme ECDH (Elliptic Curve Diffie-Hellman).</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-108">Creates a new instance of an implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="47b9e-109">Crée une nouvelle instance de l'implémentation par défaut de l'algorithme ECDH (Elliptic Curve Diffie-Hellman).</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-109">Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-110">Une nouvelle instance de l'implémentation par défaut de cette classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-110">A new instance of the default implementation of this class.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (curve As ECCurve) As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create(System::Security::Cryptography::ECCurve curve);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="47b9e-111">La courbe à utiliser pour générer une nouvelle paire de clés publique/privée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-111">The curve to use to generate a new public/private key-pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-112">Crée une nouvelle instance de l’implémentation par défaut de l’algorithme Elliptic Curve Diffie-Hellman (ECDH) avec une nouvelle paire de clés publique/privée générée sur la courbe spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-112">Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with a new public/private key-pair generated over the specified curve.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-113">Une nouvelle instance de l’implémentation par défaut de l’algorithme Elliptic Curve Diffie-Hellman (ECDH).</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-113">A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-114">courbe doit valider (autrement dit, elle doit retourner true quand il est passé à la <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="47b9e-114">curve must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="47b9e-115">Courbes de caractéristique-2 ne sont pas pris en charge sur Windows.</span><span class="sxs-lookup"><span data-stu-id="47b9e-115">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="47b9e-116">
            <paramref name="curve" /> ne valide pas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-116">
              <paramref name="curve" /> does not validate.</span>
          </span>
        </exception>
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (parameters As ECParameters) As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create(System::Security::Cryptography::ECParameters parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">
          <span data-ttu-id="47b9e-117">Paramètres de l’algorithme ECC (Elliptic Curve Cryptography).</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-117">The parameters  for the elliptic curve cryptography (ECC) algorithm.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-118">Crée une nouvelle instance de l’implémentation par défaut de l’algorithme ECDH (Elliptic Curve Diffie-Hellman) avec la clé décrite par l’objet <see cref="T:System.Security.Cryptography.ECParameters" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-118">Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with the key described by the specified  <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-119">Une nouvelle instance de l’implémentation par défaut de l’algorithme Elliptic Curve Diffie-Hellman (ECDH).</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-119">A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-120">`parameters` doit valider (autrement dit, elle doit retourner `true`) lorsqu’il est passé à la <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="47b9e-120">`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="47b9e-121">Paramètres de courbes implicites ne sont pas pris en charge.</span><span class="sxs-lookup"><span data-stu-id="47b9e-121">Parameters over implicit curves are not supported.</span></span>  
  
 <span data-ttu-id="47b9e-122">Courbes de caractéristique-2 ne sont pas pris en charge sur Windows.</span><span class="sxs-lookup"><span data-stu-id="47b9e-122">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="47b9e-123">
            <paramref name="parameters" /> ne valide pas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-123">
              <paramref name="parameters" /> does not validate.</span>
          </span>
        </exception>
        <altmember cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDiffieHellman Create (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDiffieHellman Create(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (algorithm As String) As ECDiffieHellman" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDiffieHellman ^ Create(System::String ^ algorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellman</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">
          <span data-ttu-id="47b9e-124">Nom d’une implémentation de l’algorithme ECDH.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-124">The name of an implementation of the ECDH algorithm.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-125">Crée une nouvelle instance de l’implémentation spécifiée de l’algorithme ECHD (Elliptic Curve Diffie-Hellman).</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-125">Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-126">Nouvelle instance de l'implémentation spécifiée de cette classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-126">A new instance of the specified implementation of this class.</span>
          </span>
          <span data-ttu-id="47b9e-127">Si le nom de l’algorithme spécifié ne correspond pas à une implémentation ECDH, cette méthode retourne <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-127">If the specified algorithm name does not map to an ECDH implementation, this method returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-128">Si vous développez votre propre implémentation d’un <xref:System.Security.Cryptography.ECDiffieHellman> de l’objet, vous pouvez utiliser la <xref:System.Security.Cryptography.ECDiffieHellman.Create%28System.String%29> la surcharge de méthode pour créer un personnalisé `algorithm` chaîne qui spécifie votre implémentation.</span><span class="sxs-lookup"><span data-stu-id="47b9e-128">If you develop your own implementation of an <xref:System.Security.Cryptography.ECDiffieHellman> object, you can use the <xref:System.Security.Cryptography.ECDiffieHellman.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation.</span></span>  
  
 <span data-ttu-id="47b9e-129">Le `algorithm` paramètre spécifie le nom d’une implémentation de l’algorithme ECDH.</span><span class="sxs-lookup"><span data-stu-id="47b9e-129">The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm.</span></span> <span data-ttu-id="47b9e-130">Les chaînes suivantes font toutes référence à la même implémentation, qui est la seule implémentation actuellement prise en charge dans le [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] :</span><span class="sxs-lookup"><span data-stu-id="47b9e-130">The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:</span></span>  
  
-   <span data-ttu-id="47b9e-131">« ECDH »</span><span class="sxs-lookup"><span data-stu-id="47b9e-131">"ECDH"</span></span>  
  
-   <span data-ttu-id="47b9e-132">« ECDiffieHellman »</span><span class="sxs-lookup"><span data-stu-id="47b9e-132">"ECDiffieHellman"</span></span>  
  
-   <span data-ttu-id="47b9e-133">« ECDiffieHellmanCng »</span><span class="sxs-lookup"><span data-stu-id="47b9e-133">"ECDiffieHellmanCng"</span></span>  
  
-   <span data-ttu-id="47b9e-134">« System.Security.Cryptography.ECDiffieHellmanCng »</span><span class="sxs-lookup"><span data-stu-id="47b9e-134">"System.Security.Cryptography.ECDiffieHellmanCng"</span></span>  
  
 <span data-ttu-id="47b9e-135">Vous pouvez également fournir le nom d’une implémentation ECDH personnalisée pour le `algorithm` paramètre.</span><span class="sxs-lookup"><span data-stu-id="47b9e-135">You can also provide the name of a custom ECDH implementation for the `algorithm` parameter.</span></span> <span data-ttu-id="47b9e-136">Si vous procédez ainsi, le <xref:System.Security.Cryptography.CryptoConfig> objet utilisera pour déterminer si un objet ECDH peut être créé.</span><span class="sxs-lookup"><span data-stu-id="47b9e-136">If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="47b9e-137">Le paramètre <paramref name="algorithm" /> a la valeur <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-137">The <paramref name="algorithm" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHash">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="47b9e-138">Dérive des octets qui peuvent être utilisés comme clé à l’aide d’une fonction de hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-138">Derives bytes that can be used as a key using a hash function .</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="47b9e-139">La clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-139">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="47b9e-140">Algorithme de hachage à utiliser pour dériver la clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-140">The hash algorithm  to use to derive the key material.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-141">Dérive des octets qui peuvent être utilisés comme une clé à l’aide d’une fonction de hachage, en fonction de la clé publique d’une autre partie et du nom de l’algorithme de hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-141">Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-142">Le matériel de clé issu de l’échange de clés avec la clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-142">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-143">Cette surcharge appelle la <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A> méthode en passant `null` comme l’ajoutez et ajouter des valeurs.</span><span class="sxs-lookup"><span data-stu-id="47b9e-143">This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A> method passing `null` as the prepend and append values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="47b9e-144">La clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-144">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="47b9e-145">Algorithme de hachage à utiliser pour dériver la clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-145">The hash algorithm  to use to derive the key material.</span>
          </span>
        </param>
        <param name="secretPrepend">
          <span data-ttu-id="47b9e-146">Une valeur à ajouter avant la clé secrète dérivée avant le hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-146">A value to prepend to the derived secret before hashing.</span>
          </span>
        </param>
        <param name="secretAppend">
          <span data-ttu-id="47b9e-147">Valeur à ajouter après la clé secrète dérivée avant le hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-147">A value to append to the derived secret before hashing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-148">En cas d’implémentation dans une classe dérivée, dérive des octets qui peuvent être utilisés comme une clé à l’aide d’une fonction de hachage, en fonction de la clé publique d’une autre partie, le nom de l’algorithme de hachage, une valeur à ajouter au début et une valeur à ajouter à la fin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-148">When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-149">Le matériel de clé issu de l’échange de clés avec la clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-149">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="47b9e-150">Une classe dérivée doit remplacer cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-150">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHmac">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="47b9e-151">Dérive des octets qui peuvent être utilisés comme clé à l’aide d’un code d’authentification de message haché (HMAC).</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-151">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="hmacKey" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="47b9e-152">La clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-152">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="47b9e-153">L’algorithme de hachage à utiliser pour dériver la clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-153">The hash algorithm to use to derive the key material.</span>
          </span>
        </param>
        <param name="hmacKey">
          <span data-ttu-id="47b9e-154">La clé du HMAC.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-154">The key for the HMAC.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-155">Dérive des octets qui peuvent être utilisés comme clé à l’aide d’un code d’authentification de message haché (HMAC).</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-155">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-156">Le matériel de clé issu de l’échange de clés avec la clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-156">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-157">Cette surcharge appelle la <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A> méthode en passant `null` comme l’ajoutez et ajouter des valeurs.</span><span class="sxs-lookup"><span data-stu-id="47b9e-157">This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A> method passing `null` as the prepend and append values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte(), secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="hmacKey" Type="System.Byte[]" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="47b9e-158">La clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-158">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="47b9e-159">L’algorithme de hachage à utiliser pour dériver la clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-159">The hash algorithm to use to derive the key material.</span>
          </span>
        </param>
        <param name="hmacKey">
          <span data-ttu-id="47b9e-160">La clé du HMAC.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-160">The key for the HMAC.</span>
          </span>
        </param>
        <param name="secretPrepend">
          <span data-ttu-id="47b9e-161">Valeur à ajouter avant la clé secrète dérivée avant le hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-161">A value to prepend to the derived secret before hashing.</span>
          </span>
        </param>
        <param name="secretAppend">
          <span data-ttu-id="47b9e-162">Valeur à ajouter après la clé secrète dérivée avant le hachage.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-162">A value to append to the derived secret before hashing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-163">En cas d’implémentation dans une classe dérivée, dérive des octets qui peuvent être utilisés comme clé à l’aide d’un code d'authentification de message haché (HMAC).</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-163">When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-164">Le matériel de clé issu de l’échange de clés avec la clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-164">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="47b9e-165">Une classe dérivée doit remplacer cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-165">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="47b9e-166">La clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-166">The other party's public key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-167">Dérive des octets qui peuvent être utilisés comme clé, étant donné la clé publique d'un autre correspondant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-167">Derives bytes that can be used as a key, given another party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-168">Le matériel de clé issu de l’échange de clés avec la clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-168">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-169">Pour plus d’informations sur les clés publiques, consultez la <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> classe.</span><span class="sxs-lookup"><span data-stu-id="47b9e-169">For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyTls">
      <MemberSignature Language="C#" Value="public virtual byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] DeriveKeyTls(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, unsigned int8[] prfLabel, unsigned int8[] prfSeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeriveKeyTls (otherPartyPublicKey As ECDiffieHellmanPublicKey, prfLabel As Byte(), prfSeed As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ DeriveKeyTls(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, cli::array &lt;System::Byte&gt; ^ prfLabel, cli::array &lt;System::Byte&gt; ^ prfSeed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="prfLabel" Type="System.Byte[]" />
        <Parameter Name="prfSeed" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="47b9e-170">La clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-170">The other party's public key.</span>
          </span>
        </param>
        <param name="prfLabel">
          <span data-ttu-id="47b9e-171">L’étiquette PRF encodée en ASCII.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-171">The ASCII-encoded PRF label.</span>
          </span>
        </param>
        <param name="prfSeed">
          <span data-ttu-id="47b9e-172">La valeur de départ PRF à 64 octets.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-172">The 64-byte PRF seed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-173">En cas d’implémentation dans une classe dérivée, dérive des octets qui peuvent être utilisés comme une clé à l’aide d’un algorithme de dérivation TLS (Transport Layer Security) PRF (Pseudo-Random Function).</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-173">When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-174">Le matériel de clé issu de l’échange de clés avec la clé publique de l’autre partie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-174">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="47b9e-175">Une classe dérivée doit remplacer cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-175">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="47b9e-176">
            <see langword="true" /> pour inclure les paramètres privés ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-176">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-177">En cas de substitution dans une classe dérivée, exporte les informations de clé publique ou des clés publique et privée d’une clé <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> valide à l’aide du formulaire de courbe explicite vers une structure <see cref="T:System.Security.Cryptography.ECParameters" /> pour qu’elle puisse être passée à la méthode <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-177">When overridden in a derived class, exports either the public or the public and private key information using the explicit curve form from a working <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key to an <see cref="T:System.Security.Cryptography.ECParameters" /> structure so that it can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-178">Objet représentant le point sur la courbe pour cette clé, en utilisant le format de la courbe explicite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-178">An object that represents the point on the curve for this key, using the explicit curve format.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="47b9e-179">Une classe dérivée doit remplacer cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-179">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="47b9e-180">
            <see langword="true" /> pour inclure les paramètres privés ; Sinon, <see langword="false" /> pour inclure les paramètres publics uniquement.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-180">
              <see langword="true" /> to include private parameters; otehrwise,  <see langword="false" /> to include public parameters only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-181">En cas de substitution dans une classe dérivée, exporte les informations de clé publique ou des clés publique et privée d’une clé <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> valide vers une structure <see cref="T:System.Security.Cryptography.ECParameters" /> pour qu’elle puisse être passée à la méthode <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-181">When overridden in a derived class, exports either the public or the public and private key information from a working <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> key to an <see cref="T:System.Security.Cryptography.ECParameters" /> structure so that it can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="47b9e-182">Objet représentant le point sur la courbe pour cette clé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-182">An object that represents the point on the curve for this key.</span>
          </span>
          <span data-ttu-id="47b9e-183">Il peut être passé à la méthode <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-183">It can be passed to the <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-184">Si la courbe a un nom, le <xref:System.Security.Cryptography.ECParameters.Curve> propriété contient des paramètres de la courbe nommé ; Sinon, il contient des paramètres explicites.</span><span class="sxs-lookup"><span data-stu-id="47b9e-184">If the curve has a name, the <xref:System.Security.Cryptography.ECParameters.Curve> property contains named curve parameters; otherwise, it will contain explicit parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="47b9e-185">Une classe dérivée doit remplacer cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-185">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlString">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public virtual void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="47b9e-186">La courbe utilisée pour générer une paire de clés publique/privée éphémère.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-186">The curve used to generate an ephemeral public/private key pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-187">En cas de substitution dans une classe dérivée, génère une nouvelle paire de clés publique/privée éphémère pour la courbe spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-187">When overridden in a derived class, generates a new ephemeral public/private key pair for the specified curve.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-188">`curve` doit valider (autrement dit, elle doit retourner `true`) lorsqu’il est passé à la <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> méthode) et ne doit pas être implicite.</span><span class="sxs-lookup"><span data-stu-id="47b9e-188">`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method) and must not be implicit.</span></span>  
  
 <span data-ttu-id="47b9e-189">Courbes de caractéristique-2 ne sont pas pris en charge sur Windows.</span><span class="sxs-lookup"><span data-stu-id="47b9e-189">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="47b9e-190">
            <paramref name="curve" /> ne valide pas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-190">
              <paramref name="curve" /> does not validate.</span>
          </span>
        </exception>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="47b9e-191">Une classe dérivée doit remplacer cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-191">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public virtual void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">
          <span data-ttu-id="47b9e-192">Paramètres de la courbe à importer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-192">The curve's parameters to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="47b9e-193">En cas de substitution dans une classe dérivée, importe les paramètres spécifiés pour une <see cref="T:System.Security.Cryptography.ECCurve" /> en tant que clé éphémère dans l’objet <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-193">When overridden in a derived class, imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> as an ephemeral key into the current <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-194">`parameters` doit valider (autrement dit, elle doit retourner `true`) lorsqu’il est passé à la <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="47b9e-194">`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="47b9e-195">Paramètres de courbes implicites ne sont pas pris en charge.</span><span class="sxs-lookup"><span data-stu-id="47b9e-195">Parameters over implicit curves are not supported.</span></span>  
  
 <span data-ttu-id="47b9e-196">Courbes de caractéristique-2 ne sont pas pris en charge sur Windows.</span><span class="sxs-lookup"><span data-stu-id="47b9e-196">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="47b9e-197">
            <paramref name="parameters" /> ne valide pas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-197">
              <paramref name="parameters" /> does not validate.</span>
          </span>
        </exception>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="47b9e-198">Une classe dérivée doit remplacer cette méthode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-198">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="KeyExchangeAlgorithm">
      <MemberSignature Language="C#" Value="public override string KeyExchangeAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string KeyExchangeAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property KeyExchangeAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ KeyExchangeAlgorithm { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="47b9e-199">Obtient le nom de l'algorithme d'échange de clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-199">Gets the name of the key exchange algorithm.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="47b9e-200">Nom de l'algorithme d'échange de clés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-200">The name of the key exchange algorithm.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-201">L’implémentation par défaut (non substituée) de cette propriété retourne la chaîne « ECDiffieHellman ».</span><span class="sxs-lookup"><span data-stu-id="47b9e-201">The default (non-overridden) implementation of this property returns the string "ECDiffieHellman".</span></span>  
  
 <span data-ttu-id="47b9e-202">Cette propriété est héritée de la <xref:System.Security.Cryptography.AsymmetricAlgorithm> classe de base.</span><span class="sxs-lookup"><span data-stu-id="47b9e-202">This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellman.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PublicKey As ECDiffieHellmanPublicKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Security::Cryptography::ECDiffieHellmanPublicKey ^ PublicKey { System::Security::Cryptography::ECDiffieHellmanPublicKey ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="47b9e-203">Obtient la clé publique utilisée par l'instance ECDH (Elliptic Curve Diffie-Hellman) actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-203">Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="47b9e-204">Partie publique de la paire de clés ECDH utilisée par cette instance <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-204">The public part of the ECDH key pair that is being used by this <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> instance.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureAlgorithm">
      <MemberSignature Language="C#" Value="public override string SignatureAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SignatureAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SignatureAlgorithm { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="47b9e-205">Obtient le nom de l'algorithme de signature.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-205">Gets the name of the signature algorithm.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="47b9e-206">Toujours <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="47b9e-206">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47b9e-207">Cette propriété est héritée de la <xref:System.Security.Cryptography.AsymmetricAlgorithm> classe de base.</span><span class="sxs-lookup"><span data-stu-id="47b9e-207">This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.</span></span>  
  
 <span data-ttu-id="47b9e-208">L’algorithme ECDH Elliptic Curve Diffie-Hellman () est utilisé pour la dérivation de clé, la génération de signature numérique pas.</span><span class="sxs-lookup"><span data-stu-id="47b9e-208">The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation.</span></span> <span data-ttu-id="47b9e-209">Par conséquent, cette propriété retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="47b9e-209">Therefore, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellman.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>