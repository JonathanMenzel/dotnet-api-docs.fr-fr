<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HMACSHA512.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ae00326e4429099b284fc2153477467d5ae2701e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae00326e4429099b284fc2153477467d5ae2701e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>Computes a Hash-based Message Authentication Code (HMAC) using the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA512" /&gt;</ph> hash function.</source>
          <target state="translated">Calcule un code HMAC (Hash-based Message Authentication Code) à l'aide de la fonction de hachage <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.SHA512" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA-512 hash function and used as a Hash-based Message Authentication Code (HMAC).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> est un type d’algorithme de hachage à clé qui est construit à partir de la fonction de hachage SHA-512 et utilisé en tant qu’un Hash-based Message Authentication Code (HMAC).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The HMAC process mixes a secret key with the message data and hashes the result.</source>
          <target state="translated">Le processus HMAC mélange une clé secrète aux données du message et hache le résultat.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The hash value is mixed with the secret key again, and then hashed a second time.</source>
          <target state="translated">La valeur de hachage est combinée avec la clé secrète à nouveau et puis hachée une deuxième fois.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The output hash is 512 bits in length.</source>
          <target state="translated">Le hachage de sortie est la longueur de 512 bits.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key.</source>
          <target state="translated">Un code HMAC peut être utilisé pour déterminer si un message envoyé via un canal non sécurisé a été falsifié, à condition que l’expéditeur et le destinataire partagent une clé secrète.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The sender computes the hash value for the original data and sends both the original data and hash value as a single message.</source>
          <target state="translated">L’expéditeur calcule la valeur de hachage pour les données d’origine et envoie les données d’origine et la valeur de hachage sous la forme d’un seul message.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</source>
          <target state="translated">Le destinataire recalcule la valeur de hachage sur le message reçu et vérifie que le code HMAC calculé correspond à celui transmis.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>If the original and computed hash values match, the message is authenticated.</source>
          <target state="translated">Si les valeurs de hachage d’origine et calculées correspondent, le message est authentifié.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>If they do not match, either the data or the hash value has been changed.</source>
          <target state="translated">Si elles ne correspondent pas, les données ou la valeur de hachage a été modifiée.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.</source>
          <target state="translated">Les codes HMAC offrent une sécurité contre la falsification puisque la connaissance de la clé secrète est requise pour modifier le message et reproduire la valeur de hachage correcte.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> accepts keys of any size, and produces a hash sequence of length 512 bits.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> accepte des clés de toute taille et produit une séquence de hachage de la longueur de 512 bits.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>The following example shows how to sign a file by using the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> object and then how to verify the file.</source>
          <target state="translated">L’exemple suivant montre comment signer un fichier à l’aide de la <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> objet, puis comment vérifier le fichier.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.HMACSHA512">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> class with a randomly generated key.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> avec une clé générée de manière aléatoire.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA512.#ctor">
          <source>With this constructor, a 64-byte, randomly generated key is used.</source>
          <target state="translated">Avec ce constructeur, une clé de 64 octets générée de manière aléatoire est utilisée.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>The secret key for <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> encryption.</source>
          <target state="translated">Clé secrète pour le chiffrement <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>The key can be any length.</source>
          <target state="translated">La clé peut avoir n'importe quelle longueur.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>However, the recommended size is 128 bytes.</source>
          <target state="translated">Toutefois, la taille recommandée est de 128 octets.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>If the key is more than 128 bytes long, it is hashed (using SHA-512) to derive a 128-byte key.</source>
          <target state="translated">Si la clé dépasse 128 octets, elle est hachée (à l’aide de SHA-512) pour dériver une clé de 128 octets.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>If it is less than 128 bytes long, it is padded to 128 bytes.</source>
          <target state="translated">Si la valeur est inférieure à 128 octets, elle est complétée jusqu’à 128 octets.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> class with the specified key data.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> avec les données de clé spécifiées.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>For an example of how to use this constructor, see the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> class.</source>
          <target state="translated">Pour obtenir un exemple montrant comment utiliser ce constructeur, consultez la <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="key" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="key" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source>Provides a workaround for the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> implementation of the <ph id="ph2">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph> algorithm, which is inconsistent with the <ph id="ph3">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> implementation.</source>
          <target state="translated">Fournit une solution de contournement pour l'implémentation <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> de l'algorithme <ph id="ph2">&lt;see cref="T:System.Security.Cryptography.HMACSHA512" /&gt;</ph>, qui est incohérent avec l'implémentation <ph id="ph3">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to enable <ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> applications; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour permettre aux applications <ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> d'interagir avec les applications <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source>The purpose of the <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues%2A&gt;</ph> Boolean property is to enable <ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> applications to interact with <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> applications.</source>
          <target state="translated">L’objectif de la <ph id="ph1">&lt;xref:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues%2A&gt;</ph> propriété booléenne consiste à activer <ph id="ph2">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph> applications d’interagir avec <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> applications.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source>When you set this property to <ph id="ph1">`true`</ph>, the <ph id="ph2">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> object produces values that match the values produced by the <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>.</source>
          <target state="translated">Lorsque vous définissez cette propriété sur <ph id="ph1">`true`</ph>, le <ph id="ph2">&lt;xref:System.Security.Cryptography.HMACSHA512&gt;</ph> objet produit des valeurs qui correspondent aux valeurs produites par le <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source>You should set this property only once after you create your HMAC object.</source>
          <target state="translated">Vous devez définir cette propriété qu’une seule fois, après avoir créé votre objet HMAC.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
          <source>You will need to reset your key afterwards, as shown in the following example.</source>
          <target state="translated">Vous devez réinitialiser votre clé par la suite, comme illustré dans l’exemple suivant.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>