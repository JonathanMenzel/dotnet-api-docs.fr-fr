<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="RandomNumberGenerator.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac58941c4f4b7b3820fa1d653e1d60c162a44fab8e2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8941c4f4b7b3820fa1d653e1d60c162a44fab8e2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Represents the abstract class from which all implementations of cryptographic random number generators derive.</source>
          <target state="translated">Représente la classe abstraite dont toutes les implémentations des générateurs de nombres aléatoires de chiffrement doivent hériter.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Cryptographic random number generators create cryptographically strong random values.</source>
          <target state="translated">Les générateurs de nombres aléatoires cryptographiques créent des valeurs aléatoires forts.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>To create a random number generator, call the <ph id="ph1">@System.Security.Cryptography.RandomNumberGenerator.Create</ph> method.</source>
          <target state="translated">Pour créer un générateur de nombres aléatoires, appelez le <ph id="ph1">@System.Security.Cryptography.RandomNumberGenerator.Create</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>This is prefered over calling the constructor of the derived class <ph id="ph1">@System.Security.Cryptography.RNGCryptoServiceProvider</ph>, which is not available on all platforms.</source>
          <target state="translated">Cela est préféré sur l’appel du constructeur de la classe dérivée <ph id="ph1">@System.Security.Cryptography.RNGCryptoServiceProvider</ph>, ce qui n’est pas disponible sur toutes les plateformes.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph>.</source>
          <target state="translated">Initialise une nouvelle instance de <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>You cannot create an instance of an abstract class.</source>
          <target state="translated">Vous ne pouvez pas créer une instance d’une classe abstraite.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>Application code will create a new instance of a derived class.</source>
          <target state="translated">Code d’application créera une nouvelle instance d’une classe dérivée.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
          <source>For an implementation of a cryptographic random number generator, use the derived class <ph id="ph1">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt;</ph>.</source>
          <target state="translated">Pour une implémentation d’un générateur de nombres aléatoires de chiffrement, utilisez la classe dérivée <ph id="ph1">&lt;xref:System.Security.Cryptography.RNGCryptoServiceProvider&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Creates an instance of an implementation of a cryptographic random number generator.</source>
          <target state="translated">Crée une instance d'une implémentation d'un générateur de nombres aléatoires de chiffrement.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create">
          <source>Creates an instance of the default implementation of a cryptographic random number generator that can be used to generate random data.</source>
          <target state="translated">Crée une instance de l’implémentation par défaut d’un générateur de nombres aléatoires de chiffrement permettant de générer des données aléatoires.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create">
          <source>A new instance of a cryptographic random number generator.</source>
          <target state="translated">Nouvelle instance d'un générateur de nombres aléatoires de chiffrement.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
          <source>The name of the random number generator implementation to use.</source>
          <target state="translated">Nom de l'implémentation du générateur de nombres aléatoires à utiliser.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
          <source>Creates an instance of the specified implementation of a cryptographic random number generator.</source>
          <target state="translated">Crée une instance de l’implémentation spécifiée d’un générateur de nombres aléatoires de chiffrement.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
          <source>A new instance of a cryptographic random number generator.</source>
          <target state="translated">Nouvelle instance d'un générateur de nombres aléatoires de chiffrement.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>When overridden in a derived class, releases the unmanaged resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> class.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, libère les ressources non managées utilisées par l'instance actuelle de la classe <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>When overridden in a derived class, releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> class.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, libère toutes les ressources utilisées par l'instance actuelle de la classe <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</source>
          <target state="translated">Appelez la méthode <ph id="ph1">`Dispose`</ph> une fois que vous avez terminé d'utiliser <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> in an unusable state.</source>
          <target state="translated">La méthode <ph id="ph1">`Dispose`</ph> rend le <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> inutilisable.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> was occupying.</source>
          <target state="translated">Après avoir appelé <ph id="ph1">`Dispose`</ph>, vous devez libérer toutes les références à la <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> pour que le garbage collector puisse récupérer la mémoire qui le <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> occupée.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>de nettoyage des ressources non managées<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> et <bpt id="p2">[</bpt>implémentant une méthode de suppression<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</source>
          <target state="translated">Appelez toujours <ph id="ph1">`Dispose`</ph> avant de libérer votre dernière référence à <ph id="ph2">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <ph id="ph1">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> de l'objet <ph id="ph2">`Finalize`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour libérer les ressources managées et non managées ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour ne libérer que les ressources non managées.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>When overridden in a derived class, releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, libère les ressources non managées utilisées par <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.RandomNumberGenerator" /&gt;</ph> et libère éventuellement les ressources managées.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">Cette méthode est appelée par le public <ph id="ph1">`Dispose()`</ph> (méthode) et le <ph id="ph2">`Finalize`</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> appelle la méthode protégée <ph id="ph2">`Dispose(Boolean)`</ph> méthode avec la <ph id="ph3">`disposing`</ph> paramètre la valeur <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">`Finalize`</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">`Finalize`</ph> appelle <ph id="ph2">`Dispose`</ph> avec <ph id="ph3">`disposing`</ph> la valeur <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph> references.</source>
          <target state="translated">Si le paramètre <ph id="ph1">`disposing`</ph> a la valeur <ph id="ph2">`true`</ph>, cette méthode libère toutes les ressources détenues par les objets managés référencés par ce <ph id="ph3">&lt;xref:System.Security.Cryptography.RandomNumberGenerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">Cette méthode appelle la méthode <ph id="ph1">`Dispose()`</ph> de chaque objet référencé.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> peut être appelée plusieurs fois par d'autres objets.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">Lors de la substitution <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, veillez à ne pas référencer des objets qui ont été préalablement supprimés lors d’un appel antérieur à <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’implémentation <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, consultez <bpt id="p1">[</bpt>implémentant une méthode de suppression<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> et <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, consultez <bpt id="p1">[</bpt>de nettoyage des ressources non managées<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.RandomNumberGenerator">
          <source>Fills an array of bytes with a cryptographically strong random sequence of values.</source>
          <target state="translated">Remplit un tableau d'octets avec une séquence de valeurs aléatoire forte du point de vue du chiffrement.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>The array to fill with cryptographically strong random bytes.</source>
          <target state="translated">Tableau à remplir avec les octets aléatoires forts du point de vue du chiffrement.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, remplit un tableau d'octets avec une séquence de valeurs aléatoire et forte du point de vue du chiffrement.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>The length of the byte array determines how many random bytes are produced.</source>
          <target state="translated">La longueur du tableau d’octets détermine le nombre d’octets aléatoire est généré.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
          <source>The following example creates a random sequence 100 bytes long and stores it in <ph id="ph1">`random`</ph>.</source>
          <target state="translated">L’exemple suivant crée une séquence aléatoire de 100 octets de long et la stocke dans <ph id="ph1">`random`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>The array to fill with cryptographically strong random bytes.</source>
          <target state="translated">Tableau à remplir avec les octets aléatoires forts du point de vue du chiffrement.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>The index of the array to start the fill operation.</source>
          <target state="translated">Index du tableau auquel commencer l'opération de remplissage.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to fill.</source>
          <target state="translated">Nombre d'octets à remplir.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source>Fills the specified byte array with a cryptographically strong random sequence of values.</source>
          <target state="translated">Remplit le tableau d'octets spécifié avec une séquence de valeurs aléatoire et forte du point de vue du chiffrement.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="data" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="data" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than 0</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="count" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="count" /&gt;</ph> exceeds the length of <ph id="ph3">&lt;paramref name="data" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> plus <ph id="ph2">&lt;paramref name="count" /&gt;</ph> excède la longueur de <ph id="ph3">&lt;paramref name="data" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>The array to fill with cryptographically strong random nonzero bytes.</source>
          <target state="translated">Tableau à remplir avec les octets aléatoires forts du point de vue du chiffrement, différents de zéro.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of nonzero values.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, remplit un tableau d'octets avec une séquence de valeurs différentes de zéro, aléatoire et forte du point de vue du chiffrement.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>The length of the byte array determines how many random bytes are produced.</source>
          <target state="translated">La longueur du tableau d’octets détermine le nombre d’octets aléatoire est généré.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
          <source>The following example creates a random sequence of 100 nonzero bytes and stores it in <ph id="ph1">`random`</ph>.</source>
          <target state="translated">L’exemple suivant crée une séquence aléatoire de 100 octets différents de zéro et la stocke dans <ph id="ph1">`random`</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>