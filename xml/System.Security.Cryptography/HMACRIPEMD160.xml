<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="80961-101">Calcule un code HMAC (Hash-based Message Authentication Code) à l'aide de la fonction de hachage <see cref="T:System.Security.Cryptography.RIPEMD160" />.</span><span class="sxs-lookup"><span data-stu-id="80961-101">Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash function.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80961-102"><xref:System.Security.Cryptography.HMACRIPEMD160> est un type d’algorithme de hachage à clé qui est construit à partir de la fonction de hachage RIPEMD-160 et utilisé en tant qu’un Hash-based Message Authentication Code (HMAC).</span><span class="sxs-lookup"><span data-stu-id="80961-102"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="80961-103">Le processus HMAC mélange une clé secrète aux données du message, hache le résultat avec la fonction de hachage, mélange de cette valeur de hachage avec la clé secrète à nouveau, puis applique la fonction de hachage une deuxième fois.</span><span class="sxs-lookup"><span data-stu-id="80961-103">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="80961-104">Le hachage de sortie est la longueur de 160 bits.</span><span class="sxs-lookup"><span data-stu-id="80961-104">The output hash is 160 bits in length.</span></span>  
  
 <span data-ttu-id="80961-105">Un code HMAC peut être utilisé pour déterminer si un message envoyé via un canal non sécurisé a été falsifié, à condition que l’expéditeur et le destinataire partagent une clé secrète.</span><span class="sxs-lookup"><span data-stu-id="80961-105">An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="80961-106">L’expéditeur calcule la valeur de hachage pour les données d’origine et envoie les données d’origine et la valeur de hachage sous la forme d’un seul message.</span><span class="sxs-lookup"><span data-stu-id="80961-106">The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</span></span> <span data-ttu-id="80961-107">Le destinataire recalcule la valeur de hachage sur le message reçu et vérifie que le code HMAC calculé correspond à celui transmis.</span><span class="sxs-lookup"><span data-stu-id="80961-107">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="80961-108">Toute modification apportée aux données ou à la valeur de hachage entraîne une incompatibilité, car la connaissance de la clé secrète est requise pour modifier le message et reproduire la valeur de hachage correcte.</span><span class="sxs-lookup"><span data-stu-id="80961-108">Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span> <span data-ttu-id="80961-109">Par conséquent, si les valeurs de hachage d’origine et calculées correspondent, le message est authentifié.</span><span class="sxs-lookup"><span data-stu-id="80961-109">Therefore, if the original and computed hash values match, the message is authenticated.</span></span>  
  
 <span data-ttu-id="80961-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accepte des clés de toute taille et produit une séquence de hachage est de 160 bits.</span><span class="sxs-lookup"><span data-stu-id="80961-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accepts keys of any size, and produces a hash sequence that is 160 bits long.</span></span>  
  
 <span data-ttu-id="80961-111">L’algorithme de hachage RIPEMD et ses successeurs ont été développés par le projet européen maturité.</span><span class="sxs-lookup"><span data-stu-id="80961-111">The RIPEMD hash algorithm and its successors were developed by the European RIPE project.</span></span> <span data-ttu-id="80961-112">L’algorithme RIPEMD d’origine a été conçu pour remplacer MD4 et MD5 et a été renforcé ultérieurement et renommé RIPEMD-160.</span><span class="sxs-lookup"><span data-stu-id="80961-112">The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.</span></span> <span data-ttu-id="80961-113">L’algorithme de hachage RIPEMD-160 produit une valeur de hachage de 160 bits.</span><span class="sxs-lookup"><span data-stu-id="80961-113">The RIPEMD-160 hash algorithm produces a 160-bit hash value.</span></span> <span data-ttu-id="80961-114">Les concepteurs de l’algorithme ont placé dans le domaine public.</span><span class="sxs-lookup"><span data-stu-id="80961-114">The algorithm's designers have placed it in the public domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80961-115">L’exemple suivant montre comment signer un fichier à l’aide de la <xref:System.Security.Cryptography.HMACRIPEMD160> objet, puis comment vérifier le fichier.</span><span class="sxs-lookup"><span data-stu-id="80961-115">The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACRIPEMD160> object and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="80961-116">Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />.</span><span class="sxs-lookup"><span data-stu-id="80961-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="80961-117">Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> avec une clé de 64 octets générée de manière aléatoire.</span><span class="sxs-lookup"><span data-stu-id="80961-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with a randomly generated 64-byte key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80961-118"><xref:System.Security.Cryptography.HMACRIPEMD160> est un type d’algorithme de hachage à clé qui est construit à partir de la fonction de hachage RIPEMD-160 et utilisé en tant qu’un Hash-based Message Authentication Code (HMAC).</span><span class="sxs-lookup"><span data-stu-id="80961-118"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="80961-119">Le processus HMAC mélange une clé secrète aux données du message, hache le résultat avec la fonction de hachage, mélange de cette valeur de hachage avec la clé secrète à nouveau, puis applique la fonction de hachage une deuxième fois.</span><span class="sxs-lookup"><span data-stu-id="80961-119">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="80961-120">Le hachage de sortie est la longueur de 160 octets.</span><span class="sxs-lookup"><span data-stu-id="80961-120">The output hash is 160 bytes in length.</span></span>  
  
 <span data-ttu-id="80961-121">Ce constructeur utilise une clé de 64 octets générée de manière aléatoire.</span><span class="sxs-lookup"><span data-stu-id="80961-121">This constructor uses a 64-byte, randomly generated key.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="80961-122">Clé secrète pour le chiffrement <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />.</span><span class="sxs-lookup"><span data-stu-id="80961-122">The secret key for <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> encryption.</span></span> <span data-ttu-id="80961-123">La clé peut avoir n'importe quelle longueur, mais si elle dépasse 64 octets, elle est hachée (à l'aide de SHA-1) pour dériver une clé de 64 octets.</span><span class="sxs-lookup"><span data-stu-id="80961-123">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span></span> <span data-ttu-id="80961-124">Par conséquent, la taille recommandée pour la clé secrète est égale à 64 octets.</span><span class="sxs-lookup"><span data-stu-id="80961-124">Therefore, the recommended size of the secret key is 64 bytes.</span></span></param>
        <summary><span data-ttu-id="80961-125">Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> avec les données de clé spécifiées.</span><span class="sxs-lookup"><span data-stu-id="80961-125">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with the specified key data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80961-126"><xref:System.Security.Cryptography.HMACRIPEMD160> est un type d’algorithme de hachage à clé qui est construit à partir de la fonction de hachage RIPEMD-160 et utilisé en tant qu’un Hash-based Message Authentication Code (HMAC).</span><span class="sxs-lookup"><span data-stu-id="80961-126"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="80961-127">Le processus HMAC mélange une clé secrète aux données du message, hache le résultat avec la fonction de hachage, mélange de cette valeur de hachage avec la clé secrète à nouveau, puis applique la fonction de hachage une deuxième fois.</span><span class="sxs-lookup"><span data-stu-id="80961-127">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="80961-128">Le hachage de sortie est la longueur de 160 octets.</span><span class="sxs-lookup"><span data-stu-id="80961-128">The output hash is 160 bytes in length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="80961-129">Pour obtenir un exemple montrant comment utiliser ce constructeur, consultez la <xref:System.Security.Cryptography.HMACRIPEMD160> classe.</span><span class="sxs-lookup"><span data-stu-id="80961-129">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="80961-130">Le paramètre <paramref name="key" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="80961-130">The <paramref name="key" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>