<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ECDsa.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac547e61ecf49d3cd47b61ce61a9a064cc1057a3778.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47e61ecf49d3cd47b61ce61a9a064cc1057a3778</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.ECDsa">
          <source>Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).</source>
          <target state="translated">Fournit une classe de base abstraite qui encapsule l’algorithme ECDSA (Elliptic Curve Digital Signature Algorithm).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Cryptography.ECDsa">
          <source>This class serves as the abstract base class for <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDsaCng&gt;</ph> derivations.</source>
          <target state="translated">Cette classe sert de classe de base abstraite pour <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDsaCng&gt;</ph> dérivations.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ECDsa" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ECDsa" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ECDsa.#ctor">
          <source>This constructor is called by classes that derive from the <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDsa&gt;</ph> class.</source>
          <target state="translated">Ce constructeur est appelé par les classes qui dérivent de la <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDsa&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ECDsa.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDsaCng&gt;</ph> class is the only implementation currently supported by the <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDsaCng&gt;</ph> classe est la seule implémentation actuellement pris en charge par le <ph id="ph2">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ECDsa.#ctor">
          <source>You may provide your own custom implementation.</source>
          <target state="translated">Vous pouvez fournir votre propre implémentation personnalisée.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.ECDsa">
          <source>Creates a new instance of an implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</source>
          <target state="translated">Crée une nouvelle instance d'une implémentation de l'algorithme ECDSA (Elliptic Curve Digital Signature Algorithm).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create">
          <source>Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</source>
          <target state="translated">Crée une nouvelle instance de l'implémentation par défaut de l'algorithme ECDSA (Elliptic Curve Digital Signature Algorithm).</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create">
          <source>A new instance of the default implementation (<ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ECDsaCng" /&gt;</ph>) of this class.</source>
          <target state="translated">Nouvelle instance de l'implémentation par défaut (<ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ECDsaCng" /&gt;</ph>) de cette classe.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
          <source>The curve to use for key generation.</source>
          <target state="translated">La courbe à utiliser pour la génération de clé.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
          <source>Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) with a newly generated key over the specified curve.</source>
          <target state="translated">Crée une nouvelle instance de l’implémentation par défaut de l’algorithme Elliptic Curve Digital Signature Algorithm (ECDSA) avec une nouvelle clé générée sur la courbe spécifiée.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
          <source>A new instance of the default implementation (<ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ECDsaCng" /&gt;</ph>) of this class.</source>
          <target state="translated">Nouvelle instance de l'implémentation par défaut (<ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ECDsaCng" /&gt;</ph>) de cette classe.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
          <source>The parameters representing the key to use.</source>
          <target state="translated">Les paramètres représentant la clé à utiliser.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
          <source>Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) using the specified parameters as the key.</source>
          <target state="translated">Crée une nouvelle instance de l’implémentation par défaut de l’algorithme Elliptic Curve Digital Signature Algorithm (ECDSA) en utilisant les paramètres spécifiés en tant que clé.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
          <source>A new instance of the default implementation (<ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ECDsaCng" /&gt;</ph>) of this class.</source>
          <target state="translated">Nouvelle instance de l'implémentation par défaut (<ph id="ph1">&lt;see cref="T:System.Security.Cryptography.ECDsaCng" /&gt;</ph>) de cette classe.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source>The name of an ECDSA implementation.</source>
          <target state="translated">Le nom d'une implémentation ECDSA.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source>The following strings all refer to the same implementation, which is the only implementation currently supported in the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>:</source>
          <target state="translated">Les chaînes suivantes font toutes référence à la même implémentation, qui est la seule implémentation actuellement prise en charge dans le <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> :</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source><ph id="ph1">\-</ph> "ECDsa"</source>
          <target state="translated"><ph id="ph1">\-</ph> « ECDsa »</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source><ph id="ph1">\-</ph> "ECDsaCng"</source>
          <target state="translated"><ph id="ph1">\-</ph> « ECDsaCng »</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source><ph id="ph1">\-</ph> "System.Security.Cryptography.ECDsaCng"</source>
          <target state="translated"><ph id="ph1">\-</ph> « System.Security.Cryptography.ECDsaCng »</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source>You can also provide the name of a custom ECDSA implementation.</source>
          <target state="translated">Vous pouvez également fournir le nom d'une implémentation ECDSA personnalisée.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source>Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</source>
          <target state="translated">Crée une nouvelle instance de l'implémentation spécifiée de l'algorithme ECDSA (Elliptic Curve Digital Signature Algorithm).</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source>A new instance of the specified implementation of this class.</source>
          <target state="translated">Nouvelle instance de l'implémentation spécifiée de cette classe.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source>If the specified algorithm name does not map to an ECDSA implementation, this method returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Si le nom de l'algorithme spécifié n'est pas mappé avec une implémentation ECDSA, cette méthode retourne <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source>If you develop your own implementation of an <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDsa&gt;</ph> object, you can use the <ph id="ph2">&lt;xref:System.Security.Cryptography.ECDsa.Create%28System.String%29&gt;</ph> method overload to create a custom <ph id="ph3">`algorithm`</ph> string that specifies your implementation.</source>
          <target state="translated">Si vous développez votre propre implémentation d’un <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDsa&gt;</ph> de l’objet, vous pouvez utiliser la <ph id="ph2">&lt;xref:System.Security.Cryptography.ECDsa.Create%28System.String%29&gt;</ph> la surcharge de méthode pour créer un personnalisé <ph id="ph3">`algorithm`</ph> chaîne qui spécifie votre implémentation.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source>If you specify a custom value for the <ph id="ph1">`algorithm`</ph> parameter, the <ph id="ph2">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> object will use it to determine whether an ECDSA object can be created.</source>
          <target state="translated">Si vous spécifiez une valeur personnalisée pour le <ph id="ph1">`algorithm`</ph> paramètre, le <ph id="ph2">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> objet utilisera pour déterminer si un objet ECDSA peut être créé.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.Create(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="algorithm" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="algorithm" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to include private parameters; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour inclure les paramètres privés ; sinon <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
          <source>When overridden in a derived class, exports the explicit parameters for an elliptic curve.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, exporte les paramètres explicites pour une courbe elliptique.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
          <source>The parameters representing the point on the curve for this key, using the explicit curve format.</source>
          <target state="translated">Les paramètres représentant le point sur la courbe pour cette clé, en utilisant le format de la courbe explicite.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
          <source>A derived class must override this method.</source>
          <target state="translated">Une classe dérivée doit remplacer cette méthode.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to include private parameters; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour inclure les paramètres privés ; sinon <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
          <source>When overridden in a derived class, exports the named or explicit parameters for an elliptic curve.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, exporte les paramètres nommés ou explicites pour une courbe elliptique.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
          <source>If the curve has a name, the <ph id="ph1">&lt;see cref="F:System.Security.Cryptography.ECParameters.Curve" /&gt;</ph> field contains named curve parameters, otherwise it         contains explicit parameters.</source>
          <target state="translated">Si la courbe a un nom, le champ <ph id="ph1">&lt;see cref="F:System.Security.Cryptography.ECParameters.Curve" /&gt;</ph> contient les paramètres de la courbe nommée, sinon il contient des paramètres explicites.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
          <source>The parameters representing the point on the curve for this key.</source>
          <target state="translated">Les paramètres représentant le point sur la courbe pour cette clé.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
          <source>A derived class must override this method.</source>
          <target state="translated">Une classe dérivée doit remplacer cette méthode.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
          <source>The curve to use.</source>
          <target state="translated">La courbe à utiliser.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
          <source>When overridden in a derived class, generates a new public/private key pair for the specified curve.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, génère une nouvelle paire de clés publique/privée pour la courbe spécifiée.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
          <source>A derived class must override this method.</source>
          <target state="translated">Une classe dérivée doit remplacer cette méthode.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.ECDsa">
          <source>Computes the hash value of binary data.</source>
          <target state="translated">Calcule la valeur de hachage de données binaires.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source>The binary stream to hash.</source>
          <target state="translated">Flux binaire à hacher.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source>The algorithm to use to hash the data.</source>
          <target state="translated">Algorithme à utiliser pour hacher les données.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source>When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, calcule la valeur de hachage du flux binaire indiqué à l'aide de l'algorithme de hachage spécifié.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source>The hashed data.</source>
          <target state="translated">Données hachées.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source>A derived class must override this method.</source>
          <target state="translated">Une classe dérivée doit remplacer cette méthode.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The data to be hashed.</source>
          <target state="translated">Données à hacher.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The index of the first byte in <bpt id="p1">&lt;c&gt;</bpt>data<ept id="p1">&lt;/c&gt;</ept> to be hashed.</source>
          <target state="translated">Index du premier octet dans les données (<bpt id="p1">&lt;c&gt;</bpt>data<ept id="p1">&lt;/c&gt;</ept>) à hacher.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The number of bytes to hash.</source>
          <target state="translated">Nombre d’octets à hacher.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The algorithm to use to hash the data.</source>
          <target state="translated">Algorithme à utiliser pour hacher les données.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.</source>
          <target state="translated">En cas de substitution dans une classe dérivée, calcule la valeur de hachage de la partie indiquée d'un tableau d'octets à l'aide de l'algorithme de hachage spécifié.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The hashed data.</source>
          <target state="translated">Données hachées.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>A derived class must override this method.</source>
          <target state="translated">Une classe dérivée doit remplacer cette méthode.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
          <source>The curve parameters.</source>
          <target state="translated">Les paramètres de la courbe.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
          <source>When overridden in a derived class, imports the specified parameters.</source>
          <target state="translated">En cas de remplacement dans une classe dérivée, importe les paramètres spécifiés.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
          <source>A derived class must override this method.</source>
          <target state="translated">Une classe dérivée doit remplacer cette méthode.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
          <source>Gets the name of the key exchange algorithm.</source>
          <target state="translated">Obtient le nom de l'algorithme d'échange de clés.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
          <source>Always <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Toujours <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
          <source>This property is inherited from the <ph id="ph1">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> base class.</source>
          <target state="translated">Cette propriété est héritée de la <ph id="ph1">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> classe de base.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
          <source>The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">L’algorithme ECDSA (Elliptic courbe numérique Signature Algorithm) est utilisé pour la génération des signatures numériques ; Il n’est pas utilisé pour la dérivation de clés, cette propriété retourne <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
          <source>Gets the name of the signature algorithm.</source>
          <target state="translated">Obtient le nom de l'algorithme de signature.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
          <source>The string "ECDsa".</source>
          <target state="translated">La chaîne "ECDsa".</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.ECDsa">
          <source>Computes the hash value of the specified data and signs it.</source>
          <target state="translated">Calcule la valeur de hachage des données spécifiées et la signe.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The input data for which to compute the hash.</source>
          <target state="translated">Données d'entrée pour lesquelles calculer le hachage.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The hash algorithm to use to create the hash value.</source>
          <target state="translated">Algorithme de hachage à utiliser pour créer la valeur de hachage.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.</source>
          <target state="translated">Calcule la valeur de hachage du tableau d'octets indiqué à l'aide de l'algorithme de hachage spécifié et signe la valeur de hachage obtenue.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The ECDSA signature for the specified data.</source>
          <target state="translated">Signature ECDSA pour les données spécifiées.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="data" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="data" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">est <ph id="ph1">&lt;see langword="null" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source>The input stream for which to compute the hash.</source>
          <target state="translated">Flux d'entrée pour lequel calculer le hachage.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source>The hash algorithm to use to create the hash value.</source>
          <target state="translated">Algorithme de hachage à utiliser pour créer la valeur de hachage.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source>Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.</source>
          <target state="translated">Calcule la valeur de hachage du flux indiqué à l'aide de l'algorithme de hachage spécifié et signe la valeur de hachage obtenue.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source>The ECDSA signature for the specified data.</source>
          <target state="translated">Signature ECDSA pour les données spécifiées.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="data" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="data" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
          <source>is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">est <ph id="ph1">&lt;see langword="null" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The input data for which to compute the hash.</source>
          <target state="translated">Données d'entrée pour lesquelles calculer le hachage.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The offset into the array at which to begin using data.</source>
          <target state="translated">Décalage dans le tableau à partir duquel l’utilisation de données commence.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The number of bytes in the array to use as data.</source>
          <target state="translated">Nombre d'octets dans le tableau à utiliser comme données.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The hash algorithm to use to create the hash value.</source>
          <target state="translated">Algorithme de hachage à utiliser pour créer la valeur de hachage.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.</source>
          <target state="translated">Calcule la valeur de hachage d'une partie du tableau d'octets indiqué à l'aide de l'algorithme de hachage spécifié et signe la valeur de hachage obtenue.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>The ECDSA signature for the specified data.</source>
          <target state="translated">Signature ECDSA pour les données spécifiées.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="data" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="data" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">est <ph id="ph1">&lt;see langword="null" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est inférieur à zéro.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à zéro.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> – 1 results in an index that is beyond the upper bound of <ph id="ph4">&lt;paramref name="data" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> – 1 génère un index qui dépasse la limite supérieure de <ph id="ph4">&lt;paramref name="data" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
          <source>The hash value of the data that is being signed.</source>
          <target state="translated">Valeur de hachage des données signées.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
          <source>Generates a digital signature for the specified hash value.</source>
          <target state="translated">Génère une signature numérique pour la valeur de hachage spécifiée.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
          <source>A digital signature that consists of the given hash value encrypted with the private key.</source>
          <target state="translated">Une signature numérique qui se compose de la valeur de hachage donnée chiffrée avec la clé privée.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
          <source>The <ph id="ph1">&lt;paramref name="hash" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="hash" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="T:System.Security.Cryptography.ECDsa">
          <source>Verifies that a digital signature is valid.</source>
          <target state="translated">Vérifie qu’une signature numérique est valide.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The signed data.</source>
          <target state="translated">Données signées.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The signature data to be verified.</source>
          <target state="translated">Données de la signature à vérifier.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The hash algorithm used to create the hash value of the data.</source>
          <target state="translated">Algorithme de hachage utilisé pour créer la valeur de hachage des données.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.</source>
          <target state="translated">Vérifie qu'une signature numérique est valide en calculant la valeur de hachage des données indiquées à l'aide de l'algorithme de hachage spécifié et en la comparant à la signature fournie.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the signature is valid; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la signature est valide ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="data" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="data" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="signature" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="signature" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">est <ph id="ph1">&lt;see langword="null" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The signed data.</source>
          <target state="translated">Données signées.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The signature data to be verified.</source>
          <target state="translated">Données de la signature à vérifier.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The hash algorithm used to create the hash value of the data.</source>
          <target state="translated">Algorithme de hachage utilisé pour créer la valeur de hachage des données.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.</source>
          <target state="translated">Vérifie qu'une signature numérique est valide en calculant la valeur de hachage du flux indiqué à l'aide de l'algorithme de hachage spécifié et en la comparant à la signature fournie.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the signature is valid; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la signature est valide ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="data" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="data" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="signature" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="signature" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">est <ph id="ph1">&lt;see langword="null" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The signed data.</source>
          <target state="translated">Données signées.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The starting index at which to compute the hash.</source>
          <target state="translated">Index de départ à partir duquel calculer le hachage.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The number of bytes to hash.</source>
          <target state="translated">Nombre d’octets à hacher.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The signature data to be verified.</source>
          <target state="translated">Données de la signature à vérifier.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>The hash algorithm used to create the hash value of the data.</source>
          <target state="translated">Algorithme de hachage utilisé pour créer la valeur de hachage des données.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.</source>
          <target state="translated">Vérifie qu'une signature numérique est valide en calculant la valeur de hachage des données dans une partie d'un tableau d'octets à l'aide de l'algorithme de hachage spécifié et en la comparant à la signature fournie.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the signature is valid; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la signature est valide ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="data" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="data" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="signature" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="signature" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="hashAlgorithm" /&gt;</ph>.<ph id="ph2">&lt;see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">est <ph id="ph1">&lt;see langword="null" /&gt;</ph> ou <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est inférieur à zéro.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> est inférieur à zéro.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> – 1 results in an index that is beyond the upper bound of <ph id="ph4">&lt;paramref name="data" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> – 1 génère un index qui dépasse la limite supérieure de <ph id="ph4">&lt;paramref name="data" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
          <source>The hash value of a block of data.</source>
          <target state="translated">Valeur de hachage d’un bloc de données.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
          <source>The digital signature to be verified.</source>
          <target state="translated">Signature numérique à vérifier.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
          <source>Verifies a digital signature against the specified hash value.</source>
          <target state="translated">Vérifie une signature numérique par rapport à la valeur de hachage spécifiée.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the hash value equals the decrypted signature; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la valeur de hachage est égale à la signature déchiffrée ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
          <source>The signature is first decrypted by using the public key, and then compared to the hash value for verification.</source>
          <target state="translated">La signature est tout d’abord déchiffrée à l’aide de la clé publique et comparée à la valeur de hachage pour la vérification.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>