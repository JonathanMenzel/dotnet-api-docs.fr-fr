<Type Name="HashAlgorithm" FullName="System.Security.Cryptography.HashAlgorithm">
  <Metadata><Meta Name="ms.openlocfilehash" Value="337dbc56f7f766824323fb7d5e8159f86f762087" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52602787" /></Metadata><TypeSignature Language="C#" Value="public abstract class HashAlgorithm : System.Security.Cryptography.ICryptoTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit HashAlgorithm extends System.Object implements class System.IDisposable, class System.Security.Cryptography.ICryptoTransform" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HashAlgorithm" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class HashAlgorithm&#xA;Implements ICryptoTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class HashAlgorithm abstract : System::Security::Cryptography::ICryptoTransform" />
  <TypeSignature Language="F#" Value="type HashAlgorithm = class&#xA;    interface IDisposable&#xA;    interface ICryptoTransform" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Cryptography.ICryptoTransform</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8c46f-101">Représente la classe de base dont toutes les implémentations des algorithmes de hachage de chiffrement doivent dériver.</span><span class="sxs-lookup"><span data-stu-id="8c46f-101">Represents the base class from which all implementations of cryptographic hash algorithms must derive.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-102">Fonctions de hachage sont fondamentale pour le chiffrement moderne.</span><span class="sxs-lookup"><span data-stu-id="8c46f-102">Hash functions are fundamental to modern cryptography.</span></span> <span data-ttu-id="8c46f-103">Ces fonctions mappent des chaînes binaires de longueur arbitraire en petites chaînes binaires de longueur fixe, connue en tant que valeurs de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-103">These functions map binary strings of an arbitrary length to small binary strings of a fixed length, known as hash values.</span></span> <span data-ttu-id="8c46f-104">Une fonction de hachage de chiffrement a la propriété qu’il est impossible de trouver deux entrées distinctes sur la même valeur de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-104">A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value.</span></span> <span data-ttu-id="8c46f-105">Fonctions de hachage sont couramment utilisées avec des signatures numériques et l’intégrité des données.</span><span class="sxs-lookup"><span data-stu-id="8c46f-105">Hash functions are commonly used with digital signatures and for data integrity.</span></span>  
  
 <span data-ttu-id="8c46f-106">Le hachage est utilisé en tant que valeur unique de taille fixe représentant une grande quantité de données.</span><span class="sxs-lookup"><span data-stu-id="8c46f-106">The hash is used as a unique value of fixed size representing a large amount of data.</span></span> <span data-ttu-id="8c46f-107">Hachages de deux jeux de données doivent correspondre si les données correspondantes correspondent également.</span><span class="sxs-lookup"><span data-stu-id="8c46f-107">Hashes of two sets of data should match if the corresponding data also matches.</span></span> <span data-ttu-id="8c46f-108">Petites modifications aux données entraîne des modifications importantes et imprévisibles dans le hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-108">Small changes to the data result in large unpredictable changes in the hash.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c46f-109">Le code suivant exemple calcule le <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> hachage pour un tableau.</span><span class="sxs-lookup"><span data-stu-id="8c46f-109">The following code example computes the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> hash for an array.</span></span> <span data-ttu-id="8c46f-110">Cet exemple suppose qu’il existe un tableau d’octets prédéfini `dataArray[]`.</span><span class="sxs-lookup"><span data-stu-id="8c46f-110">This example assumes that there is a predefined byte array `dataArray[]`.</span></span> <span data-ttu-id="8c46f-111"><xref:System.Security.Cryptography.SHA1CryptoServiceProvider> est une classe dérivée de <xref:System.Security.Cryptography.HashAlgorithm>.</span><span class="sxs-lookup"><span data-stu-id="8c46f-111"><xref:System.Security.Cryptography.SHA1CryptoServiceProvider> is a derived class of <xref:System.Security.Cryptography.HashAlgorithm>.</span></span>  
  
 [!code-cpp[Classic HashAlgorithm Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic HashAlgorithm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HashAlgorithm Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic HashAlgorithm Example/CS/source.cs#1)]
 [!code-vb[Classic HashAlgorithm Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic HashAlgorithm Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="8c46f-112">Lorsque vous héritez de la <see cref="T:System.Security.Cryptography.HashAlgorithm" /> (classe), vous devez substituer les membres suivants : <see cref="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)" /> et <see cref="M:System.Security.Cryptography.HashAlgorithm.HashFinal" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-112">When you inherit from the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class, you must override the following members:  <see cref="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.Security.Cryptography.HashAlgorithm.HashFinal" />.</span></span></para></block>
    <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="8c46f-113">services de chiffrement</span><span class="sxs-lookup"><span data-stu-id="8c46f-113">Cryptographic Services</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HashAlgorithm ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HashAlgorithm();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c46f-114">Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-114">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-115">Vous ne pouvez pas créer une instance d’une classe abstraite.</span><span class="sxs-lookup"><span data-stu-id="8c46f-115">You cannot create an instance of an abstract class.</span></span> <span data-ttu-id="8c46f-116">Code d’application crée une nouvelle instance d’une classe dérivée.</span><span class="sxs-lookup"><span data-stu-id="8c46f-116">Application code creates a new instance of a derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReuseTransform">
      <MemberSignature Language="C#" Value="public virtual bool CanReuseTransform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReuseTransform" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanReuseTransform As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReuseTransform { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReuseTransform : bool" Usage="System.Security.Cryptography.HashAlgorithm.CanReuseTransform" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c46f-117">Obtient une valeur indiquant si la transformation actuelle peut être réutilisée.</span><span class="sxs-lookup"><span data-stu-id="8c46f-117">Gets a value indicating whether the current transform can be reused.</span></span></summary>
        <value><span data-ttu-id="8c46f-118">Toujours <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-118">Always <see langword="true" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTransformMultipleBlocks">
      <MemberSignature Language="C#" Value="public virtual bool CanTransformMultipleBlocks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTransformMultipleBlocks" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanTransformMultipleBlocks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTransformMultipleBlocks { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTransformMultipleBlocks : bool" Usage="System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c46f-119">En cas de substitution dans une classe dérivée, obtient une valeur indiquant si plusieurs blocs peuvent être transformés.</span><span class="sxs-lookup"><span data-stu-id="8c46f-119">When overridden in a derived class, gets a value indicating whether multiple blocks can be transformed.</span></span></summary>
        <value><span data-ttu-id="8c46f-120"><see langword="true" /> si plusieurs blocs peuvent être transformés ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-120"><see langword="true" /> if multiple blocks can be transformed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="hashAlgorithm.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c46f-121">Libère toutes les ressources utilisées par la classe <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-121">Releases all resources used by the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-122">Cette méthode est un simple appel à la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8c46f-122">This method is a simple call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="8c46f-123">Appel `Dispose` autorise les ressources utilisées par la <xref:System.Security.Cryptography.HashAlgorithm> classe d’être réaffectées à d’autres fins.</span><span class="sxs-lookup"><span data-stu-id="8c46f-123">Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.HashAlgorithm> class to be reallocated for other purposes.</span></span> <span data-ttu-id="8c46f-124">Pour plus d’informations sur `Dispose`, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="8c46f-124">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ComputeHash">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c46f-125">Calcule la valeur de hachage pour les données d'entrée.</span><span class="sxs-lookup"><span data-stu-id="8c46f-125">Computes the hash value for the input data.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ComputeHash">
      <MemberSignature Language="C#" Value="public byte[] ComputeHash (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ComputeHash(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeHash (buffer As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ComputeHash(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.ComputeHash : byte[] -&gt; byte[]" Usage="hashAlgorithm.ComputeHash buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8c46f-126">Entrée pour laquelle le code de hachage doit être calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-126">The input to compute the hash code for.</span></span></param>
        <summary><span data-ttu-id="8c46f-127">Calcule la valeur de hachage pour le tableau d'octets spécifié.</span><span class="sxs-lookup"><span data-stu-id="8c46f-127">Computes the hash value for the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="8c46f-128">Code de hachage calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-128">The computed hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8c46f-129">L’exemple suivant calcule le <xref:System.Security.Cryptography.SHA256> valeur d’une chaîne de hachage et retourne le hachage comme une chaîne au format hexadécimal de 64 caractères.</span><span class="sxs-lookup"><span data-stu-id="8c46f-129">The following example computes the <xref:System.Security.Cryptography.SHA256> hash value of a string and returns the hash as a 64-character, hexadecimal-formatted string.</span></span>  <span data-ttu-id="8c46f-130">La chaîne de hachage créée par cet exemple de code est compatible avec toute fonction de hachage SHA256 (sur n’importe quelle plateforme) qui crée une chaîne de hachage de 64 caractères, au format hexadécimal.</span><span class="sxs-lookup"><span data-stu-id="8c46f-130">The hash string created by this code example is compatible with any SHA256 hash function (on any platform) that creates a 64-character, hexadecimal-formatted hash string.</span></span>  
  
 [!code-csharp[HashAlgorithm.ComputeHash-1](~/samples/snippets/csharp/api/system.security.cryptography/hashalgorithm/example1.cs)]
 [!code-vb[HashAlgorithm.ComputeHash-1](~/samples/snippets/visualbasic/api/system.security.cryptography/hashalgorithm/example1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8c46f-131"><paramref name="buffer" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-131"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8c46f-132">L'objet a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-132">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ComputeHash">
      <MemberSignature Language="C#" Value="public byte[] ComputeHash (System.IO.Stream inputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ComputeHash(class System.IO.Stream inputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeHash (inputStream As Stream) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ComputeHash(System::IO::Stream ^ inputStream);" />
      <MemberSignature Language="F#" Value="member this.ComputeHash : System.IO.Stream -&gt; byte[]" Usage="hashAlgorithm.ComputeHash inputStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputStream"><span data-ttu-id="8c46f-133">Entrée pour laquelle le code de hachage doit être calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-133">The input to compute the hash code for.</span></span></param>
        <summary><span data-ttu-id="8c46f-134">Calcule la valeur de hachage pour l'objet <see cref="T:System.IO.Stream" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="8c46f-134">Computes the hash value for the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <returns><span data-ttu-id="8c46f-135">Code de hachage calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-135">The computed hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  

<span data-ttu-id="8c46f-136">L’exemple suivant calcule le <xref:System.Security.Cryptography.SHA256> hachage pour tous les fichiers dans un répertoire.</span><span class="sxs-lookup"><span data-stu-id="8c46f-136">The following example calculates the <xref:System.Security.Cryptography.SHA256> hash for all files in a directory.</span></span>  
  
[!code-csharp[HashAlgorithm.ComputeHash Example](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SHA256 Example/CS/source.cs#1)]
[!code-vb[HashAlgorithm.ComputeHash Example](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SHA256 Example/VB/source.vb#1)] 

 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8c46f-137">L'objet a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-137">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ComputeHash">
      <MemberSignature Language="C#" Value="public byte[] ComputeHash (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ComputeHash(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ComputeHash (buffer As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ ComputeHash(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="member this.ComputeHash : byte[] * int * int -&gt; byte[]" Usage="hashAlgorithm.ComputeHash (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="8c46f-138">Entrée pour laquelle le code de hachage doit être calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-138">The input to compute the hash code for.</span></span></param>
        <param name="offset"><span data-ttu-id="8c46f-139">Offset dans le tableau d'octets à partir duquel l'utilisation de données commence.</span><span class="sxs-lookup"><span data-stu-id="8c46f-139">The offset into the byte array from which to begin using data.</span></span></param>
        <param name="count"><span data-ttu-id="8c46f-140">Nombre d'octets dans le tableau à utiliser comme données.</span><span class="sxs-lookup"><span data-stu-id="8c46f-140">The number of bytes in the array to use as data.</span></span></param>
        <summary><span data-ttu-id="8c46f-141">Calcule la valeur de hachage pour la région spécifiée du tableau d'octets spécifié.</span><span class="sxs-lookup"><span data-stu-id="8c46f-141">Computes the hash value for the specified region of the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="8c46f-142">Code de hachage calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-142">The computed hash code.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8c46f-143"><paramref name="count" /> n’est pas une valeur valide.</span><span class="sxs-lookup"><span data-stu-id="8c46f-143"><paramref name="count" /> is an invalid value.</span></span>  
  
<span data-ttu-id="8c46f-144">- ou -</span><span class="sxs-lookup"><span data-stu-id="8c46f-144">-or-</span></span> 
 <span data-ttu-id="8c46f-145"><paramref name="buffer" /> a une longueur non valide.</span><span class="sxs-lookup"><span data-stu-id="8c46f-145"><paramref name="buffer" /> length is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8c46f-146"><paramref name="buffer" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-146"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8c46f-147"><paramref name="offset" /> est hors limites.</span><span class="sxs-lookup"><span data-stu-id="8c46f-147"><paramref name="offset" /> is out of range.</span></span> <span data-ttu-id="8c46f-148">Ce paramètre requiert un nombre non négatif.</span><span class="sxs-lookup"><span data-stu-id="8c46f-148">This parameter requires a non-negative number.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8c46f-149">L'objet a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-149">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c46f-150">Crée une instance d'une implémentation d'un algorithme de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-150">Creates an instance of an implementation of a hash algorithm.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.HashAlgorithm Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.HashAlgorithm Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As HashAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::HashAlgorithm ^ Create();" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; System.Security.Cryptography.HashAlgorithm" Usage="System.Security.Cryptography.HashAlgorithm.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c46f-151">Crée une instance de l'implémentation par défaut d'un algorithme de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-151">Creates an instance of the default implementation of a hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="8c46f-152">Nouvelle instance de <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />, à moins que les paramètres par défaut n’aient été modifiés à l’aide de l’élément .</span><span class="sxs-lookup"><span data-stu-id="8c46f-152">A new <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> instance, unless the default settings have been changed using the .</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-153">Par défaut, cette surcharge utilise le <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> implémentation d’un algorithme de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-153">By default, this overload uses the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> implementation of a hash algorithm.</span></span> <span data-ttu-id="8c46f-154">Si vous souhaitez spécifier une implémentation différente, utilisez la <xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29> de surcharge, ce qui vous permet de spécifier un nom d’algorithme, à la place.</span><span class="sxs-lookup"><span data-stu-id="8c46f-154">If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead.</span></span> <span data-ttu-id="8c46f-155">Le système de configuration de chiffrement définit l’implémentation par défaut de <xref:System.Security.Cryptography.HashAlgorithm>.</span><span class="sxs-lookup"><span data-stu-id="8c46f-155">The cryptography configuration system defines the default implementation of <xref:System.Security.Cryptography.HashAlgorithm>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.HashAlgorithm Create (string hashName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.HashAlgorithm Create(string hashName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (hashName As String) As HashAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::HashAlgorithm ^ Create(System::String ^ hashName);" />
      <MemberSignature Language="F#" Value="static member Create : string -&gt; System.Security.Cryptography.HashAlgorithm" Usage="System.Security.Cryptography.HashAlgorithm.Create hashName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hashName"><span data-ttu-id="8c46f-156">Implémentation de l'algorithme de hachage à utiliser.</span><span class="sxs-lookup"><span data-stu-id="8c46f-156">The hash algorithm implementation to use.</span></span> <span data-ttu-id="8c46f-157">Le tableau suivant indique les valeurs valides du paramètre <paramref name="hashName" /> et les algorithmes auxquels elles sont mappées.</span><span class="sxs-lookup"><span data-stu-id="8c46f-157">The following table shows the valid values for the <paramref name="hashName" /> parameter and the algorithms they map to.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="8c46f-158">Valeur de paramètre</span><span class="sxs-lookup"><span data-stu-id="8c46f-158">Parameter value</span></span> 
 </term><description> <span data-ttu-id="8c46f-159">Implémentations</span><span class="sxs-lookup"><span data-stu-id="8c46f-159">Implements</span></span> 
 </description></listheader><item><term> <span data-ttu-id="8c46f-160">SHA</span><span class="sxs-lookup"><span data-stu-id="8c46f-160">SHA</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="8c46f-161">SHA1</span><span class="sxs-lookup"><span data-stu-id="8c46f-161">SHA1</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="8c46f-162">System.Security.Cryptography.SHA1</span><span class="sxs-lookup"><span data-stu-id="8c46f-162">System.Security.Cryptography.SHA1</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="8c46f-163">System.Security.Cryptography.HashAlgorithm</span><span class="sxs-lookup"><span data-stu-id="8c46f-163">System.Security.Cryptography.HashAlgorithm</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="8c46f-164">MD5</span><span class="sxs-lookup"><span data-stu-id="8c46f-164">MD5</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="8c46f-165">System.Security.Cryptography.MD5</span><span class="sxs-lookup"><span data-stu-id="8c46f-165">System.Security.Cryptography.MD5</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /></description></item><item><term> <span data-ttu-id="8c46f-166">SHA256</span><span class="sxs-lookup"><span data-stu-id="8c46f-166">SHA256</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA256Managed" /></description></item><item><term> <span data-ttu-id="8c46f-167">SHA-256</span><span class="sxs-lookup"><span data-stu-id="8c46f-167">SHA-256</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA256Managed" /></description></item><item><term> <span data-ttu-id="8c46f-168">System.Security.Cryptography.SHA256</span><span class="sxs-lookup"><span data-stu-id="8c46f-168">System.Security.Cryptography.SHA256</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA256Managed" /></description></item><item><term> <span data-ttu-id="8c46f-169">SHA384</span><span class="sxs-lookup"><span data-stu-id="8c46f-169">SHA384</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA384Managed" /></description></item><item><term> <span data-ttu-id="8c46f-170">SHA-384</span><span class="sxs-lookup"><span data-stu-id="8c46f-170">SHA-384</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA384Managed" /></description></item><item><term> <span data-ttu-id="8c46f-171">System.Security.Cryptography.SHA384</span><span class="sxs-lookup"><span data-stu-id="8c46f-171">System.Security.Cryptography.SHA384</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA384Managed" /></description></item><item><term> <span data-ttu-id="8c46f-172">SHA512</span><span class="sxs-lookup"><span data-stu-id="8c46f-172">SHA512</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA512Managed" /></description></item><item><term> <span data-ttu-id="8c46f-173">SHA-512</span><span class="sxs-lookup"><span data-stu-id="8c46f-173">SHA-512</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA512Managed" /></description></item><item><term> <span data-ttu-id="8c46f-174">System.Security.Cryptography.SHA512</span><span class="sxs-lookup"><span data-stu-id="8c46f-174">System.Security.Cryptography.SHA512</span></span> 
 </term><description><see cref="T:System.Security.Cryptography.SHA512Managed" /></description></item></list></param>
        <summary><span data-ttu-id="8c46f-175">Crée une instance de l'implémentation spécifiée d'un algorithme de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-175">Creates an instance of the specified implementation of a hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="8c46f-176">Nouvelle instance de l'algorithme de hachage spécifié ou <see langword="null" /> si <paramref name="hashName" /> n'est pas un algorithme de hachage valide.</span><span class="sxs-lookup"><span data-stu-id="8c46f-176">A new instance of the specified hash algorithm, or <see langword="null" /> if <paramref name="hashName" /> is not a valid hash algorithm.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8c46f-177">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-177">Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="hashAlgorithm.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c46f-178">Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-178">Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-179">Appelez la méthode `Dispose` une fois que vous avez terminé d'utiliser <xref:System.Security.Cryptography.HashAlgorithm>.</span><span class="sxs-lookup"><span data-stu-id="8c46f-179">Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.HashAlgorithm>.</span></span> <span data-ttu-id="8c46f-180">La méthode `Dispose` rend le <xref:System.Security.Cryptography.HashAlgorithm> inutilisable.</span><span class="sxs-lookup"><span data-stu-id="8c46f-180">The `Dispose` method leaves the <xref:System.Security.Cryptography.HashAlgorithm> in an unusable state.</span></span> <span data-ttu-id="8c46f-181">Après avoir appelé `Dispose`, vous devez libérer toutes les références à la <xref:System.Security.Cryptography.HashAlgorithm> pour que le garbage collector puisse récupérer la mémoire qui le <xref:System.Security.Cryptography.HashAlgorithm> occupée.</span><span class="sxs-lookup"><span data-stu-id="8c46f-181">After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.HashAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.HashAlgorithm> was occupying.</span></span>  
  
 <span data-ttu-id="8c46f-182">Pour plus d’informations, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="8c46f-182">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8c46f-183">Appelez toujours `Dispose` avant de libérer votre dernière référence à <xref:System.Security.Cryptography.HashAlgorithm>.</span><span class="sxs-lookup"><span data-stu-id="8c46f-183">Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.HashAlgorithm>.</span></span> <span data-ttu-id="8c46f-184">Sinon, les ressources utilisées ne seront pas libérées tant que le garbage collector n'aura pas appelé la méthode <xref:System.Security.Cryptography.HashAlgorithm> de l'objet `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="8c46f-184">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.HashAlgorithm> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="hashAlgorithm.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="8c46f-185"><see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</span><span class="sxs-lookup"><span data-stu-id="8c46f-185"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="8c46f-186">Libère les ressources non managées utilisées par <see cref="T:System.Security.Cryptography.HashAlgorithm" /> et libère éventuellement les ressources managées.</span><span class="sxs-lookup"><span data-stu-id="8c46f-186">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-187">Cette méthode est appelée par le public `Dispose()` (méthode) et le `Finalize` (méthode).</span><span class="sxs-lookup"><span data-stu-id="8c46f-187">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="8c46f-188">`Dispose()` appelle la méthode protégée `Dispose(Boolean)` méthode avec le `disposing` paramètre défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="8c46f-188">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="8c46f-189">`Finalize` appelle `Dispose` avec `disposing` défini sur `false`.</span><span class="sxs-lookup"><span data-stu-id="8c46f-189">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="8c46f-190">Si le paramètre `disposing` a la valeur `true`, cette méthode libère toutes les ressources détenues par les objets managés référencés par ce <xref:System.Security.Cryptography.HashAlgorithm>.</span><span class="sxs-lookup"><span data-stu-id="8c46f-190">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HashAlgorithm> references.</span></span> <span data-ttu-id="8c46f-191">Cette méthode appelle la méthode `Dispose()` de chaque objet référencé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-191">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="8c46f-192">
            <see langword="Dispose" /> peut être appelée plusieurs fois par d'autres objets.</span><span class="sxs-lookup"><span data-stu-id="8c46f-192">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="8c46f-193">Lors de la substitution <see langword="Dispose(Boolean)" />, veillez à ne pas référencer des objets qui ont été préalablement supprimés lors d’un précédent appel à <see langword="Dispose" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-193">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="8c46f-194">Pour plus d’informations sur l’implémentation <see langword="Dispose(Boolean)" />, consultez [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="8c46f-194">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="8c46f-195">Pour plus d’informations sur <see langword="Dispose" /> et <see langword="Finalize" />, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="8c46f-195">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Hash">
      <MemberSignature Language="C#" Value="public virtual byte[] Hash { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Hash" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.Hash" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Hash As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Byte&gt; ^ Hash { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hash : byte[]" Usage="System.Security.Cryptography.HashAlgorithm.Hash" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c46f-196">Obtient la valeur du code de hachage calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-196">Gets the value of the computed hash code.</span></span></summary>
        <value><span data-ttu-id="8c46f-197">Valeur actuelle du code de hachage calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-197">The current value of the computed hash code.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-198">Le <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> propriété est un tableau d’octets ; le <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> propriété est une valeur qui représentent les bits.</span><span class="sxs-lookup"><span data-stu-id="8c46f-198">The <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property is a byte array; the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property is a value that represent bits.</span></span> <span data-ttu-id="8c46f-199">Par conséquent, le nombre d’éléments dans <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> est un huitième de la taille de <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="8c46f-199">Therefore, the number of elements in <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> is one-eighth the size of <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException"><span data-ttu-id="8c46f-200"><see cref="F:System.Security.Cryptography.HashAlgorithm.HashValue" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-200"><see cref="F:System.Security.Cryptography.HashAlgorithm.HashValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8c46f-201">L'objet a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-201">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HashCore">
      <MemberSignature Language="C#" Value="protected virtual void HashCore (ReadOnlySpan&lt;byte&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void HashCore(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub HashCore (source As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void HashCore(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="abstract member HashCore : ReadOnlySpan&lt;byte&gt; -&gt; unit&#xA;override this.HashCore : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="hashAlgorithm.HashCore source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashCore">
      <MemberSignature Language="C#" Value="protected abstract void HashCore (byte[] array, int ibStart, int cbSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void HashCore(unsigned int8[] array, int32 ibStart, int32 cbSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub HashCore (array As Byte(), ibStart As Integer, cbSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void HashCore(cli::array &lt;System::Byte&gt; ^ array, int ibStart, int cbSize);" />
      <MemberSignature Language="F#" Value="abstract member HashCore : byte[] * int * int -&gt; unit" Usage="hashAlgorithm.HashCore (array, ibStart, cbSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="ibStart" Type="System.Int32" />
        <Parameter Name="cbSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="8c46f-202">Entrée pour laquelle le code de hachage doit être calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-202">The input to compute the hash code for.</span></span></param>
        <param name="ibStart"><span data-ttu-id="8c46f-203">Offset dans le tableau d'octets à partir duquel l'utilisation de données commence.</span><span class="sxs-lookup"><span data-stu-id="8c46f-203">The offset into the byte array from which to begin using data.</span></span></param>
        <param name="cbSize"><span data-ttu-id="8c46f-204">Nombre d'octets dans le tableau d'octets à utiliser comme données.</span><span class="sxs-lookup"><span data-stu-id="8c46f-204">The number of bytes in the byte array to use as data.</span></span></param>
        <summary><span data-ttu-id="8c46f-205">En cas de substitution dans une classe dérivée, achemine les données écrites dans l'objet vers l'algorithme de hachage pour calculer le hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-205">When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-206">Cette méthode n’est pas appelée par le code d’application.</span><span class="sxs-lookup"><span data-stu-id="8c46f-206">This method is not called by application code.</span></span>  
  
 <span data-ttu-id="8c46f-207">Cette méthode abstraite effectue le calcul de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-207">This abstract method performs the hash computation.</span></span> <span data-ttu-id="8c46f-208">Chaque opération d’écriture à l’objet de flux de chiffrement transmet les données via cette méthode.</span><span class="sxs-lookup"><span data-stu-id="8c46f-208">Every write to the cryptographic stream object passes the data through this method.</span></span> <span data-ttu-id="8c46f-209">Pour chaque bloc de données, cette méthode met à jour l’état de l’objet de hachage pour une valeur de hachage correcte est retournée à la fin du flux de données.</span><span class="sxs-lookup"><span data-stu-id="8c46f-209">For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashFinal">
      <MemberSignature Language="C#" Value="protected abstract byte[] HashFinal ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] HashFinal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.HashFinal" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HashFinal () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::Byte&gt; ^ HashFinal();" />
      <MemberSignature Language="F#" Value="abstract member HashFinal : unit -&gt; byte[]" Usage="hashAlgorithm.HashFinal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c46f-210">En cas de substitution dans une classe dérivée, finalise le calcul de hachage une fois les dernières données traitées par l'objet de flux de chiffrement.</span><span class="sxs-lookup"><span data-stu-id="8c46f-210">When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.</span></span></summary>
        <returns><span data-ttu-id="8c46f-211">Code de hachage calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-211">The computed hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-212">Cette méthode finalise les calculs partiels et retourne la valeur de hachage adéquat pour le flux de données.</span><span class="sxs-lookup"><span data-stu-id="8c46f-212">This method finalizes any partial computation and returns the correct hash value for the data stream.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashSize">
      <MemberSignature Language="C#" Value="public virtual int HashSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HashSize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.HashSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HashSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int HashSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.HashSize : int" Usage="System.Security.Cryptography.HashAlgorithm.HashSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c46f-213">Obtient la taille, en bits, du code de hachage calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-213">Gets the size, in bits, of the computed hash code.</span></span></summary>
        <value><span data-ttu-id="8c46f-214">Taille, en bits, du code de hachage calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-214">The size, in bits, of the computed hash code.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HashSizeValue">
      <MemberSignature Language="C#" Value="protected int HashSizeValue;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 HashSizeValue" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.HashAlgorithm.HashSizeValue" />
      <MemberSignature Language="VB.NET" Value="Protected HashSizeValue As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected: int HashSizeValue;" />
      <MemberSignature Language="F#" Value="val mutable HashSizeValue : int" Usage="System.Security.Cryptography.HashAlgorithm.HashSizeValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c46f-215">Représente la taille, en bits, du code de hachage calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-215">Represents the size, in bits, of the computed hash code.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-216">L’algorithme de hachage spécifie la taille du code de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-216">The hash algorithm specifies the size of the hash code.</span></span> <span data-ttu-id="8c46f-217">Par exemple, <xref:System.Security.Cryptography.SHA1> utilise une taille de hachage de 160 bits.</span><span class="sxs-lookup"><span data-stu-id="8c46f-217">For example, <xref:System.Security.Cryptography.SHA1> uses a hash size of 160 bits.</span></span>  
  
 <span data-ttu-id="8c46f-218">Ce champ est accessible via la <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="8c46f-218">This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashValue">
      <MemberSignature Language="C#" Value="protected internal byte[] HashValue;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly unsigned int8[] HashValue" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.HashAlgorithm.HashValue" />
      <MemberSignature Language="VB.NET" Value="Protected Friend HashValue As Byte() " />
      <MemberSignature Language="C++ CLI" Value="protected public: cli::array &lt;System::Byte&gt; ^ HashValue;" />
      <MemberSignature Language="F#" Value="val mutable HashValue : byte[]" Usage="System.Security.Cryptography.HashAlgorithm.HashValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c46f-219">Représente la valeur du code de hachage calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-219">Represents the value of the computed hash code.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-220">Ce champ est accessible via la <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="8c46f-220">This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Initialize();" />
      <MemberSignature Language="F#" Value="abstract member Initialize : unit -&gt; unit" Usage="hashAlgorithm.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c46f-221">Initialise une implémentation de la classe <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-221">Initializes an implementation of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBlockSize">
      <MemberSignature Language="C#" Value="public virtual int InputBlockSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InputBlockSize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.InputBlockSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InputBlockSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int InputBlockSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.InputBlockSize : int" Usage="System.Security.Cryptography.HashAlgorithm.InputBlockSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.Cryptography.ICryptoTransform.InputBlockSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c46f-222">En cas de substitution dans une classe dérivée, obtient la taille du bloc d'entrée.</span><span class="sxs-lookup"><span data-stu-id="8c46f-222">When overridden in a derived class, gets the input block size.</span></span></summary>
        <value><span data-ttu-id="8c46f-223">Taille du bloc d'entrée.</span><span class="sxs-lookup"><span data-stu-id="8c46f-223">The input block size.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-224">À moins que la substitution, cette propriété retourne la valeur 1.</span><span class="sxs-lookup"><span data-stu-id="8c46f-224">Unless overridden, this property returns the value 1.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputBlockSize">
      <MemberSignature Language="C#" Value="public virtual int OutputBlockSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OutputBlockSize" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OutputBlockSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int OutputBlockSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputBlockSize : int" Usage="System.Security.Cryptography.HashAlgorithm.OutputBlockSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c46f-225">En cas de substitution dans une classe dérivée, obtient la taille du bloc de sortie.</span><span class="sxs-lookup"><span data-stu-id="8c46f-225">When overridden in a derived class, gets the output block size.</span></span></summary>
        <value><span data-ttu-id="8c46f-226">Taille du bloc de sortie.</span><span class="sxs-lookup"><span data-stu-id="8c46f-226">The output block size.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-227">À moins que la substitution, cette propriété retourne la valeur 1.</span><span class="sxs-lookup"><span data-stu-id="8c46f-227">Unless overridden, this property returns the value 1.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="protected int State;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 State" />
      <MemberSignature Language="DocId" Value="F:System.Security.Cryptography.HashAlgorithm.State" />
      <MemberSignature Language="VB.NET" Value="Protected State As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected: int State;" />
      <MemberSignature Language="F#" Value="val mutable State : int" Usage="System.Security.Cryptography.HashAlgorithm.State" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8c46f-228">Représente l'état du calcul du hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-228">Represents the state of the hash computation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-229">Ce champ est utilisé pour empêcher les utilisateurs de la modification de la clé d’un algorithme de hachage à clé pendant une opération de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-229">This field is used to prevent users from changing the key of a keyed hash algorithm during a hash operation.</span></span> <span data-ttu-id="8c46f-230">Lorsqu’un changement de clé est légitime, la valeur de ce champ est égal à zéro avant et après une opération de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-230">When a key change is legitimate, the value of this field is zero both before and after a hash operation.</span></span> <span data-ttu-id="8c46f-231">Quand un changement de clé n’est pas légitime, la valeur de ce champ est différente de zéro.</span><span class="sxs-lookup"><span data-stu-id="8c46f-231">When a key change is not legitimate, the value of this field is nonzero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8c46f-232">Libère les ressources non managées utilisées par <see cref="T:System.Security.Cryptography.HashAlgorithm" /> et libère éventuellement les ressources managées.</span><span class="sxs-lookup"><span data-stu-id="8c46f-232">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="8c46f-233">Cette méthode est appelée par la méthode Dispose() publique et la méthode Finalize.</span><span class="sxs-lookup"><span data-stu-id="8c46f-233">This method is called by the public Dispose() method and the Finalize method.</span></span> <span data-ttu-id="8c46f-234">Dispose() appelle la méthode Dispose (Boolean) protégée avec le jeu de paramètres en cours de suppression sur true.</span><span class="sxs-lookup"><span data-stu-id="8c46f-234">Dispose() invokes the protected Dispose(Boolean) method with the disposing parameter set to true.</span></span> <span data-ttu-id="8c46f-235">Finaliser appelle Dispose ayant la valeur False.</span><span class="sxs-lookup"><span data-stu-id="8c46f-235">Finalize invokes Dispose with disposing set to false.</span></span>

<span data-ttu-id="8c46f-236">Lorsque le paramètre disposing a la valeur est true, cette méthode libère toutes les ressources détenues par les objets managés par ce <xref:System.Security.Cryptography.HashAlgorithm> références.</span><span class="sxs-lookup"><span data-stu-id="8c46f-236">When the disposing parameter is true, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HashAlgorithm> references.</span></span> <span data-ttu-id="8c46f-237">Cette méthode appelle la méthode Dispose() de chaque objet référencé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-237">This method invokes the Dispose() method of each referenced object.</span></span>

<span data-ttu-id="8c46f-238">**Notes pour les héritiers :**</span><span class="sxs-lookup"><span data-stu-id="8c46f-238">**Notes to Inheritors:**</span></span>

<span data-ttu-id="8c46f-239">Dispose peut être appelé plusieurs fois par d’autres objets.</span><span class="sxs-lookup"><span data-stu-id="8c46f-239">Dispose can be called multiple times by other objects.</span></span> <span data-ttu-id="8c46f-240">Lorsque vous substituez Dispose (Boolean), veillez à ne pas référencer des objets qui ont été préalablement supprimés lors d’un précédent appel à Dispose.</span><span class="sxs-lookup"><span data-stu-id="8c46f-240">When overriding Dispose(Boolean), be careful not to reference objects that have been previously disposed in an earlier call to Dispose.</span></span> <span data-ttu-id="8c46f-241">Pour plus d’informations sur l’implémentation de dispose (Boolean), consultez [implémentation d’une méthode Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="8c46f-241">For more information about how to implement Dispose(Boolean), see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

<span data-ttu-id="8c46f-242">Pour plus d’informations sur la méthode Dispose et Finalize, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [substitution de la méthode Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v%3dvs.100)).</span><span class="sxs-lookup"><span data-stu-id="8c46f-242">For more information about Dispose and Finalize, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v%3dvs.100)).</span></span>

]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/security/cryptographic-services.md"><span data-ttu-id="8c46f-243">services de chiffrement</span><span class="sxs-lookup"><span data-stu-id="8c46f-243">Cryptographic Services</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TransformBlock">
      <MemberSignature Language="C#" Value="public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 TransformBlock(unsigned int8[] inputBuffer, int32 inputOffset, int32 inputCount, unsigned int8[] outputBuffer, int32 outputOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TransformBlock (inputBuffer As Byte(), inputOffset As Integer, inputCount As Integer, outputBuffer As Byte(), outputOffset As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int TransformBlock(cli::array &lt;System::Byte&gt; ^ inputBuffer, int inputOffset, int inputCount, cli::array &lt;System::Byte&gt; ^ outputBuffer, int outputOffset);" />
      <MemberSignature Language="F#" Value="abstract member TransformBlock : byte[] * int * int * byte[] * int -&gt; int&#xA;override this.TransformBlock : byte[] * int * int * byte[] * int -&gt; int" Usage="hashAlgorithm.TransformBlock (inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputBuffer" Type="System.Byte[]" />
        <Parameter Name="inputOffset" Type="System.Int32" />
        <Parameter Name="inputCount" Type="System.Int32" />
        <Parameter Name="outputBuffer" Type="System.Byte[]" />
        <Parameter Name="outputOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inputBuffer"><span data-ttu-id="8c46f-244">Entrée pour laquelle le code de hachage doit être calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-244">The input to compute the hash code for.</span></span></param>
        <param name="inputOffset"><span data-ttu-id="8c46f-245">Offset dans le tableau d'octets d'entrée à partir duquel l'utilisation des données commence.</span><span class="sxs-lookup"><span data-stu-id="8c46f-245">The offset into the input byte array from which to begin using data.</span></span></param>
        <param name="inputCount"><span data-ttu-id="8c46f-246">Nombre d'octets dans le tableau d'octets d'entrée à utiliser comme données.</span><span class="sxs-lookup"><span data-stu-id="8c46f-246">The number of bytes in the input byte array to use as data.</span></span></param>
        <param name="outputBuffer"><span data-ttu-id="8c46f-247">Copie de la partie du tableau d'entrée utilisée pour calculer le code de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-247">A copy of the part of the input array used to compute the hash code.</span></span></param>
        <param name="outputOffset"><span data-ttu-id="8c46f-248">Offset dans le tableau d'octets de sortie à partir duquel l'écriture des données commence.</span><span class="sxs-lookup"><span data-stu-id="8c46f-248">The offset into the output byte array from which to begin writing data.</span></span></param>
        <summary><span data-ttu-id="8c46f-249">Calcule la valeur de hachage pour la région spécifiée du tableau d'octets d'entrée et copie la région spécifiée du tableau d'octets d'entrée dans la région spécifiée du tableau d'octets de sortie.</span><span class="sxs-lookup"><span data-stu-id="8c46f-249">Computes the hash value for the specified region of the input byte array and copies the specified region of the input byte array to the specified region of the output byte array.</span></span></summary>
        <returns><span data-ttu-id="8c46f-250">Nombre d'octets écrits.</span><span class="sxs-lookup"><span data-stu-id="8c46f-250">The number of bytes written.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-251">Vous devez appeler la <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> méthode avant d’appeler le <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="8c46f-251">You must call the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method before calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method.</span></span> <span data-ttu-id="8c46f-252">Vous devez appeler les deux méthodes avant de récupérer la valeur de hachage finale.</span><span class="sxs-lookup"><span data-stu-id="8c46f-252">You must call both methods before you retrieve the final hash value.</span></span>  
  
 <span data-ttu-id="8c46f-253">Pour récupérer la valeur de hachage finale après avoir appelé la <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> (méthode), obtenir le tableau d’octets contenu dans le <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="8c46f-253">To retrieve the final hash value after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method, get the byte array contained within the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.</span></span>  
  
 <span data-ttu-id="8c46f-254">Appel de la <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> méthode avec différentes d’entrée et sortie tableaux entraîne une <xref:System.IO.IOException>.</span><span class="sxs-lookup"><span data-stu-id="8c46f-254">Calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method with different input and output arrays results in an <xref:System.IO.IOException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c46f-255">Exemple de code suit le <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> méthode avec le <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> méthode à une chaîne de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-255">The following code examples use the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method with the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method to hash a string.</span></span>  
  
 [!code-csharp[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/CS/sample.cs#1)]
 [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8c46f-256"><paramref name="inputCount" /> utilise une valeur non valide.</span><span class="sxs-lookup"><span data-stu-id="8c46f-256"><paramref name="inputCount" /> uses an invalid value.</span></span>  
  
<span data-ttu-id="8c46f-257">- ou -</span><span class="sxs-lookup"><span data-stu-id="8c46f-257">-or-</span></span> 
 <span data-ttu-id="8c46f-258"><paramref name="inputBuffer" /> a une longueur non valide.</span><span class="sxs-lookup"><span data-stu-id="8c46f-258"><paramref name="inputBuffer" /> has an invalid length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8c46f-259"><paramref name="inputBuffer" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-259"><paramref name="inputBuffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8c46f-260"><paramref name="inputOffset" /> est hors limites.</span><span class="sxs-lookup"><span data-stu-id="8c46f-260"><paramref name="inputOffset" /> is out of range.</span></span> <span data-ttu-id="8c46f-261">Ce paramètre requiert un nombre non négatif.</span><span class="sxs-lookup"><span data-stu-id="8c46f-261">This parameter requires a non-negative number.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8c46f-262">L'objet a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-262">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TransformFinalBlock">
      <MemberSignature Language="C#" Value="public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] TransformFinalBlock(unsigned int8[] inputBuffer, int32 inputOffset, int32 inputCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function TransformFinalBlock (inputBuffer As Byte(), inputOffset As Integer, inputCount As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ TransformFinalBlock(cli::array &lt;System::Byte&gt; ^ inputBuffer, int inputOffset, int inputCount);" />
      <MemberSignature Language="F#" Value="abstract member TransformFinalBlock : byte[] * int * int -&gt; byte[]&#xA;override this.TransformFinalBlock : byte[] * int * int -&gt; byte[]" Usage="hashAlgorithm.TransformFinalBlock (inputBuffer, inputOffset, inputCount)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputBuffer" Type="System.Byte[]" />
        <Parameter Name="inputOffset" Type="System.Int32" />
        <Parameter Name="inputCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inputBuffer"><span data-ttu-id="8c46f-263">Entrée pour laquelle le code de hachage doit être calculé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-263">The input to compute the hash code for.</span></span></param>
        <param name="inputOffset"><span data-ttu-id="8c46f-264">Offset dans le tableau d'octets à partir duquel l'utilisation de données commence.</span><span class="sxs-lookup"><span data-stu-id="8c46f-264">The offset into the byte array from which to begin using data.</span></span></param>
        <param name="inputCount"><span data-ttu-id="8c46f-265">Nombre d'octets dans le tableau d'octets à utiliser comme données.</span><span class="sxs-lookup"><span data-stu-id="8c46f-265">The number of bytes in the byte array to use as data.</span></span></param>
        <summary><span data-ttu-id="8c46f-266">Calcule la valeur de hachage pour la région spécifiée du tableau d'octets spécifié.</span><span class="sxs-lookup"><span data-stu-id="8c46f-266">Computes the hash value for the specified region of the specified byte array.</span></span></summary>
        <returns><span data-ttu-id="8c46f-267">Tableau qui est une copie de la partie de l'entrée qui est hachée.</span><span class="sxs-lookup"><span data-stu-id="8c46f-267">An array that is a copy of the part of the input that is hashed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c46f-268">Vous devez appeler la <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> méthode après avoir appelé la <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> (méthode), mais avant que vous récupérez la valeur de hachage finale.</span><span class="sxs-lookup"><span data-stu-id="8c46f-268">You must call the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method but before you retrieve the final hash value.</span></span>  
  
 <span data-ttu-id="8c46f-269">Notez que la valeur de retour de cette méthode n’est pas la valeur de hachage, mais uniquement une copie de la partie hachée des données d’entrée.</span><span class="sxs-lookup"><span data-stu-id="8c46f-269">Note that the return value of this method is not the hash value, but only a copy of the hashed part of the input data.</span></span>  <span data-ttu-id="8c46f-270">Pour récupérer la dernière valeur de hachage après avoir appelé la <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> (méthode), get, le tableau d’octets contenu dans le <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="8c46f-270">To retrieve the final hashed value after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method, get the byte array contained in the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c46f-271">Exemple de code suit le <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> méthode avec le <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> méthode à une chaîne de hachage.</span><span class="sxs-lookup"><span data-stu-id="8c46f-271">The following code examples use the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method with the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method to hash a string.</span></span>  
  
 [!code-csharp[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/CS/sample.cs#1)]
 [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8c46f-272"><paramref name="inputCount" /> utilise une valeur non valide.</span><span class="sxs-lookup"><span data-stu-id="8c46f-272"><paramref name="inputCount" /> uses an invalid value.</span></span>  
  
<span data-ttu-id="8c46f-273">- ou -</span><span class="sxs-lookup"><span data-stu-id="8c46f-273">-or-</span></span> 
 <span data-ttu-id="8c46f-274"><paramref name="inputBuffer" /> a une longueur d'offset non valide.</span><span class="sxs-lookup"><span data-stu-id="8c46f-274"><paramref name="inputBuffer" /> has an invalid offset length.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8c46f-275"><paramref name="inputBuffer" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="8c46f-275"><paramref name="inputBuffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="8c46f-276"><paramref name="inputOffset" /> est hors limites.</span><span class="sxs-lookup"><span data-stu-id="8c46f-276"><paramref name="inputOffset" /> is out of range.</span></span> <span data-ttu-id="8c46f-277">Ce paramètre requiert un nombre non négatif.</span><span class="sxs-lookup"><span data-stu-id="8c46f-277">This parameter requires a non-negative number.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8c46f-278">L'objet a déjà été supprimé.</span><span class="sxs-lookup"><span data-stu-id="8c46f-278">The object has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryComputeHash">
      <MemberSignature Language="C#" Value="public bool TryComputeHash (ReadOnlySpan&lt;byte&gt; source, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryComputeHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.TryComputeHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryComputeHash (source As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryComputeHash(ReadOnlySpan&lt;System::Byte&gt; source, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryComputeHash : ReadOnlySpan&lt;byte&gt; * Span&lt;byte&gt; *  -&gt; bool" Usage="hashAlgorithm.TryComputeHash (source, destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryHashFinal">
      <MemberSignature Language="C#" Value="protected virtual bool TryHashFinal (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryHashFinal(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HashAlgorithm.TryHashFinal(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryHashFinal (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryHashFinal(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="abstract member TryHashFinal : Span&lt;byte&gt; *  -&gt; bool&#xA;override this.TryHashFinal : Span&lt;byte&gt; *  -&gt; bool" Usage="hashAlgorithm.TryHashFinal (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>