<Type Name="IRouteConstraint" FullName="System.Web.Routing.IRouteConstraint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a9282664eaba3ced642eebe12b8ecd9940e6f8e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30537393" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRouteConstraint" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRouteConstraint" />
  <TypeSignature Language="DocId" Value="T:System.Web.Routing.IRouteConstraint" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRouteConstraint" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRouteConstraint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Définit le contrat qu’une classe doit implémenter pour vérifier si une valeur de paramètre d’URL est valide pour une contrainte.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque vous incluez une contrainte pour un paramètre d’URL dans une définition d’itinéraire, vous devez représenter la contrainte comme une chaîne ou un objet qui implémente le <xref:System.Web.Routing.IRouteConstraint> interface. Si la contrainte est une chaîne, il est traité comme une expression régulière. Vous créez une classe qui implémente <xref:System.Web.Routing.IRouteConstraint> lorsque vous ne peut pas représenter la logique de validation facilement comme une expression régulière. Vous ajoutez la logique de validation dans le <xref:System.Web.Routing.IRouteConstraint.Match%2A> (méthode).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public bool Match (System.Web.HttpContextBase httpContext, System.Web.Routing.Route route, string parameterName, System.Web.Routing.RouteValueDictionary values, System.Web.Routing.RouteDirection routeDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.Web.HttpContextBase httpContext, class System.Web.Routing.Route route, string parameterName, class System.Web.Routing.RouteValueDictionary values, valuetype System.Web.Routing.RouteDirection routeDirection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.IRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Match(System::Web::HttpContextBase ^ httpContext, System::Web::Routing::Route ^ route, System::String ^ parameterName, System::Web::Routing::RouteValueDictionary ^ values, System::Web::Routing::RouteDirection routeDirection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="System.Web.HttpContextBase" />
        <Parameter Name="route" Type="System.Web.Routing.Route" />
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="values" Type="System.Web.Routing.RouteValueDictionary" />
        <Parameter Name="routeDirection" Type="System.Web.Routing.RouteDirection" />
      </Parameters>
      <Docs>
        <param name="httpContext">Objet qui encapsule des informations sur la requête HTTP.</param>
        <param name="route">Objet auquel appartient cette contrainte.</param>
        <param name="parameterName">Nom du paramètre vérifié.</param>
        <param name="values">Objet qui contient les paramètres de l’URL.</param>
        <param name="routeDirection">Objet qui indique si la vérification de contrainte est exécutée au quand une requête entrante est traitée ou quand une URL est générée.</param>
        <summary>Détermine si le paramètre d’URL contient une valeur valide pour cette contrainte.</summary>
        <returns>
          <see langword="true" /> si le paramètre d'URL contient une valeur valide ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous utilisez la <xref:System.Web.Routing.IRouteConstraint.Match%2A> méthode pour ajouter la logique de validation pour la contrainte. Cette méthode est appelée par l’infrastructure de routage lorsqu’une demande entrante est traitée et lors de la construction d’une URL. Vous pouvez déterminer le scénario actuel en examinant le `routeDirection` paramètre.  
  
 Lorsqu’une demande est traitée, l’infrastructure de routage détermine si le modèle et les valeurs de la demande entrante correspondent à ceux du modèle et les contraintes de l’itinéraire. Lors de la construction d’une URL, l’infrastructure de routage qui détermine si les valeurs fournies lorsque la <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> méthode est appelée correspondent au modèle et les contraintes de l’itinéraire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>