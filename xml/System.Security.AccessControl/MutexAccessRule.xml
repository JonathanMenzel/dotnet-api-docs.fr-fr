<Type Name="MutexAccessRule" FullName="System.Security.AccessControl.MutexAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="02e88fa56e8cd5f63bd781a4f69ddd801f0381c3" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49132640" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MutexAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MutexAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.MutexAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MutexAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class MutexAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type MutexAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Représente un jeu de droits d'accès accordés ou refusés à un utilisateur ou à un groupe. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Security.AccessControl.MutexAccessRule> classe fait partie d’un jeu de classes .NET Framework fournit pour gérer la sécurité de contrôle d’accès Windows sur les mutex système nommé. Pour une vue d’ensemble de ces classes et leur relation avec les structures sous-jacentes de contrôle d’accès Windows, consultez <xref:System.Security.AccessControl.MutexSecurity>.  
  
> [!NOTE]
>  Sécurité de contrôle d’accès Windows est significative uniquement pour les mutex système nommés. Si un <xref:System.Threading.Mutex> objet représente un mutex local, le contrôle d’accès n’est pas pertinent.  
  
 Pour obtenir une liste des règles actuellement appliqué à un mutex nommé, utilisez la <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> méthode pour obtenir un <xref:System.Security.AccessControl.MutexSecurity> objet, puis utiliser son <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> méthode pour obtenir une collection de <xref:System.Security.AccessControl.MutexAccessRule> objets.  
  
 <xref:System.Security.AccessControl.MutexAccessRule> objets ne correspondent pas-à-un avec les entrées de contrôle d’accès dans la liste de contrôle accès discrétionnaire (DACL) sous-jacent. Lorsque vous obtenez l’ensemble de toutes les règles d’accès d’un mutex, le jeu contient le nombre minimal de règles actuellement requises pour exprimer toutes les entrées de contrôle d’accès.  
  
> [!NOTE]
>  Les entrées de contrôle d’accès sous-jacent modifier comme vous appliquer et supprimez des règles. Les informations dans les règles sont fusionnées dans la mesure du possible, pour maintenir le plus petit nombre d’entrées de contrôle d’accès. Par conséquent, lorsque vous lisez la liste actuelle des règles, il ne ressemble pas forcément exactement à la liste de toutes les règles que vous avez ajouté.  
  
 Utilisez <xref:System.Security.AccessControl.MutexAccessRule> objets pour spécifier les droits d’accès pour autoriser ou refuser à un utilisateur ou un groupe. Un <xref:System.Security.AccessControl.MutexAccessRule> toujours l’objet représente un accès accordé ou refusé d’accès, jamais les deux.  
  
 Pour appliquer une règle à un mutex système nommé, utilisez la <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> méthode pour obtenir le <xref:System.Security.AccessControl.MutexSecurity> objet. Modifier le <xref:System.Security.AccessControl.MutexSecurity> objet à l’aide de ses méthodes pour ajouter la règle, puis utilisez le <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> méthode rattacher l’objet de sécurité.  
  
> [!IMPORTANT]
>  Modifications apportées à un <xref:System.Security.AccessControl.MutexSecurity> objet n’affectent pas les niveaux d’accès du mutex nommé jusqu'à ce que vous appeliez la <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType> méthode pour attribuer l’objet de sécurité modifié pour le mutex nommé.  
  
 <xref:System.Security.AccessControl.MutexAccessRule> les objets sont immuables. Sécurité d’un mutex est modifiée à l’aide des méthodes de la <xref:System.Security.AccessControl.MutexSecurity> classe pour ajouter ou supprimer des règles ; comme vous le faites, les entrées de contrôle d’accès sous-jacentes sont modifiées.  
  
> [!NOTE]
>  Sécurité sur les objets de synchronisation n’est pas prise en charge pour Windows 98 ou Windows Millennium Edition.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la création et l’utilisation de <xref:System.Security.AccessControl.MutexAccessRule> objets. L’exemple crée un <xref:System.Security.AccessControl.MutexSecurity> objet, ajoute des règles qui accordent et refusent divers droits à l’utilisateur actuel et affiche la paire de règles résultante. L’exemple permet de nouveaux droits de l’utilisateur actuel, puis affiche le résultat, indiquant que les nouveaux droits sont fusionnés avec le <xref:System.Security.AccessControl.AccessControlType.Allow> règle.  
  
> [!NOTE]
>  Cet exemple ne s’attache pas l’objet de sécurité à un <xref:System.Threading.Mutex> objet. Vous trouverez des exemples qui attachent des objets de sécurité dans <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> et <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.MutexSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.AccessControl.MutexAccessRule" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.MutexRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As MutexRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::MutexRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.MutexAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.MutexRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.MutexAccessRule" Usage="new System.Security.AccessControl.MutexAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Utilisateur ou groupe auquel s'applique la règle. Doit être de type <see cref="T:System.Security.Principal.SecurityIdentifier" /> ou d'un type, tel que <see cref="T:System.Security.Principal.NTAccount" /> qui peut être converti en type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="eventRights">Combinaison d'opérations de bits de valeurs <see cref="T:System.Security.AccessControl.MutexRights" /> spécifiant les droits accordés ou refusés.</param>
        <param name="type">Une des valeurs <see cref="T:System.Security.AccessControl.AccessControlType" /> spécifiant si les droits sont accordés ou refusés.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.AccessControl.MutexAccessRule" />, en spécifiant l'utilisateur ou le groupe auquel la règle s'applique, les droits d'accès, et si les droits d'accès spécifiés sont accordés ou refusés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour attendre un <xref:System.Threading.Mutex> (en appelant le <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> ou <xref:System.Threading.WaitHandle.WaitAll%2A> méthode), un utilisateur doit avoir <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> accès. Pour libérer le mutex en appelant le <xref:System.Threading.Mutex.ReleaseMutex%2A> méthode, l’utilisateur doit avoir <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> accès.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> spécifie une valeur non valide.  
  
- ou - 
 <paramref name="type" /> spécifie une valeur non valide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="eventRights" /> est égal à zéro.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> n'est pas du type <see cref="T:System.Security.Principal.SecurityIdentifier" />, ni <see cref="T:System.Security.Principal.NTAccount" /> qui peut être converti en type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MutexAccessRule (string identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.MutexRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As MutexRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MutexAccessRule(System::String ^ identity, System::Security::AccessControl::MutexRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.MutexAccessRule : string * System.Security.AccessControl.MutexRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.MutexAccessRule" Usage="new System.Security.AccessControl.MutexAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.MutexRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nom de l'utilisateur ou du groupe auquel s'applique la règle.</param>
        <param name="eventRights">Combinaison d'opérations de bits de valeurs <see cref="T:System.Security.AccessControl.MutexRights" /> spécifiant les droits accordés ou refusés.</param>
        <param name="type">Une des valeurs <see cref="T:System.Security.AccessControl.AccessControlType" /> spécifiant si les droits sont accordés ou refusés.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.AccessControl.MutexAccessRule" />, en spécifiant le nom de l'utilisateur ou du groupe auquel la règle s'applique, les droits d'accès, et si les droits d'accès spécifiés sont accordés ou refusés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour attendre un <xref:System.Threading.Mutex> (en appelant le <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> ou <xref:System.Threading.WaitHandle.WaitAll%2A> méthode), un utilisateur doit avoir <xref:System.Security.AccessControl.MutexRights.Synchronize?displayProperty=nameWithType> accès. Pour libérer le mutex en appelant le <xref:System.Threading.Mutex.ReleaseMutex%2A> méthodes, l’utilisateur doit avoir <xref:System.Security.AccessControl.MutexRights.Modify?displayProperty=nameWithType> accès.  
  
 Ce constructeur est équivalent à la création d’un <xref:System.Security.Principal.NTAccount> objet, en passant `identity` à la <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> constructeur et en passant le nouvellement créé <xref:System.Security.Principal.NTAccount> de l’objet à le <xref:System.Security.AccessControl.MutexAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.MutexRights%2CSystem.Security.AccessControl.AccessControlType%29> constructeur.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce constructeur pour créer <xref:System.Security.AccessControl.MutexAccessRule> objets. L’exemple crée un <xref:System.Security.AccessControl.MutexSecurity> objet, ajoute des règles qui accordent et refusent divers droits à l’utilisateur actuel et affiche la paire de règles résultante. L’exemple permet de nouveaux droits de l’utilisateur actuel, puis affiche le résultat, indiquant que les nouveaux droits sont fusionnés avec le <xref:System.Security.AccessControl.AccessControlType.Allow> règle.  
  
> [!NOTE]
>  Cet exemple ne s’attache pas l’objet de sécurité à un <xref:System.Threading.Mutex> objet. Vous trouverez des exemples qui attachent des objets de sécurité dans <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> et <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> spécifie une valeur non valide.  
  
- ou - 
 <paramref name="type" /> spécifie une valeur non valide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> est égal à zéro.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="identity" /> est une chaîne de longueur nulle.  
  
- ou - 
 <paramref name="identity" /> fait plus de 512 caractères.</exception>
      </Docs>
    </Member>
    <Member MemberName="MutexRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.MutexRights MutexRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.MutexRights MutexRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.MutexAccessRule.MutexRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MutexRights As MutexRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::MutexRights MutexRights { System::Security::AccessControl::MutexRights get(); };" />
      <MemberSignature Language="F#" Value="member this.MutexRights : System.Security.AccessControl.MutexRights" Usage="System.Security.AccessControl.MutexAccessRule.MutexRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.MutexRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les droits accordés ou refusés par la règle d'accès.</summary>
        <value>Combinaison d'opérations de bits de valeurs <see cref="T:System.Security.AccessControl.MutexRights" /> spécifiant les droits accordés ou refusés par la règle d'accès.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.MutexAccessRule> les objets sont immuables. Vous pouvez créer une nouvelle règle d’accès qui représente un utilisateur différent, des droits différents ou un autre <xref:System.Security.AccessControl.AccessControlType>, mais vous ne pouvez pas modifier une règle d’accès existant.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Security.AccessControl.MutexAccessRule.MutexRights%2A> propriété pour afficher les droits dans l’ensemble de règles contenues dans un <xref:System.Security.AccessControl.MutexSecurity> objet. L’exemple crée un <xref:System.Security.AccessControl.MutexSecurity> objet, ajoute des règles qui accordent et refusent divers droits à l’utilisateur actuel et affiche la paire de règles résultante. L’exemple permet de nouveaux droits de l’utilisateur actuel, puis affiche le résultat, indiquant que les nouveaux droits sont fusionnés avec le <xref:System.Security.AccessControl.AccessControlType.Allow> règle.  
  
> [!NOTE]
>  Cet exemple ne s’attache pas l’objet de sécurité à un <xref:System.Threading.Mutex> objet. Vous trouverez des exemples qui attachent des objets de sécurité dans <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=nameWithType> et <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.MutexSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>