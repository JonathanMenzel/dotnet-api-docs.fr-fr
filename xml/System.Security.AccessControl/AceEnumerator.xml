<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AceEnumerator.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac57a8e9039c23d2f0f3c47000c69c62c5dfce609f6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a8e9039c23d2f0f3c47000c69c62c5dfce609f6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.AccessControl.AceEnumerator">
          <source>Provides the ability to iterate through the access control entries (ACEs) in an access control list (ACL).</source>
          <target state="translated">Permet d’itérer au sein des entrées de contrôle d’accès (ACE) d’une liste de contrôle d’accès (ACL).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.AceEnumerator.Current">
          <source>Gets the current element in the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> collection.</source>
          <target state="translated">Obtient l'élément en cours dans la collection <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.AceEnumerator.Current">
          <source>This property gets the type-friendly version of the object.</source>
          <target state="translated">Cette propriété obtient la version de type convivial de l'objet.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.Current">
          <source>The current element in the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> collection.</source>
          <target state="translated">Élément en cours dans la collection <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>Advances the enumerator to the next element of the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> collection.</source>
          <target state="translated">Avance l’énumérateur à l’élément suivant de la collection <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the enumerator was successfully advanced to the next element; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the enumerator has passed the end of the collection.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si l'énumérateur a dépassé la fin de la collection.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>After an enumerator is created or after a call to the <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> method, an enumerator is positioned before the first element of the collection, and the first call to the <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> method moves the enumerator over the first element of the collection.</source>
          <target state="translated">Après avoir créé un énumérateur ou après un appel à la <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> (méthode), un énumérateur est positionné avant le premier élément de la collection et le premier appel à la <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> méthode déplace l’énumérateur sur le premier élément de la collection.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>After the end of the collection is passed, subsequent calls to <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> return <ph id="ph2">`false`</ph> until <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated">Après la fin de la collection est passées, les appels suivants à <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> retourner <ph id="ph2">`false`</ph> jusqu'à ce que <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un énumérateur est valide tant que la collection demeure inchangée.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si des modifications, telles que l’ajout, modification ou suppression d’éléments, sont apportées à la collection, l’énumérateur est définitivement invalidé et l’appel suivant à <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> lève une <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.AceEnumerator.MoveNext">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">La collection a été modifiée après la création de l'énumérateur.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>Sets the enumerator to its initial position, which is before the first element in the <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph> collection.</source>
          <target state="translated">Rétablit l'énumérateur à sa position initiale, qui précède le premier élément de la collection <ph id="ph1">&lt;see cref="T:System.Security.AccessControl.GenericAce" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un énumérateur est valide tant que la collection demeure inchangée.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>If , such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated and the next call to the <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> method throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph></source>
          <target state="translated">Si, telles que l’ajout, modification ou suppression d’éléments, est apportée à la collection, l’énumérateur est définitivement invalidé et l’appel suivant à la <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> méthode ou la <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> méthode lève une exception une <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">La collection a été modifiée après la création de l'énumérateur.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>All calls to <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /&gt;</ph> must result in the same state for the enumerator.</source>
          <target state="translated">Tous les appels à <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.AceEnumerator.Reset" /&gt;</ph> doit aboutir dans le même état de l’énumérateur.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>The preferred implementation is to move the enumerator to the beginning of the collection, before the first element.</source>
          <target state="translated">L’implémentation par défaut consiste à déplacer de l’énumérateur au début de la collection, avant le premier élément.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.AccessControl.AceEnumerator.Reset">
          <source>This invalidates the enumerator if the collection has been modified since the enumerator was created, which is consistent with <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /&gt;</ph> and <ph id="ph2">&lt;see cref="P:System.Security.AccessControl.AceEnumerator.Current" /&gt;</ph>.</source>
          <target state="translated">Cela rend non valide l’énumérateur si la collection a été modifiée depuis la création de l’énumérateur, qui est cohérent avec <ph id="ph1">&lt;see cref="M:System.Security.AccessControl.AceEnumerator.MoveNext" /&gt;</ph> et <ph id="ph2">&lt;see cref="P:System.Security.AccessControl.AceEnumerator.Current" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>Gets the current element in the collection.</source>
          <target state="translated">Obtient l’élément actuel dans la collection.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>Returns the current element in the collection.</source>
          <target state="translated">Retourne l’élément actuel dans la collection.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>After an enumerator is created or after a call to the <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> method, you must call the <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph>; otherwise, <ph id="ph4">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Après avoir créé un énumérateur ou après un appel à la <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> (méthode), vous devez appeler la <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> méthode pour avancer l’énumérateur jusqu’au premier élément de la collection avant de lire la valeur de <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph>; sinon, <ph id="ph4">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> n’est pas défini .</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> also throws an exception if the last call to <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph3">`false`</ph>, which indicates the end of the collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> lève également une exception si le dernier appel à <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> retourné <ph id="ph3">`false`</ph>, qui indique la fin de la collection.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source><ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> does not move the position of the enumerator, and consecutive calls to <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> return the same object until either <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> ne déplace pas la position de l’énumérateur et les appels successifs à <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> retournent le même objet jusqu'à ce que <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph4">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un énumérateur est valide tant que la collection demeure inchangée.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>If changes, such as adding, modifying, or deleting elements, are made to the collection, the enumerator is irrecoverably invalidated, and the next call to <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si des modifications, telles que l’ajout, modification ou suppression d’éléments, sont apportées à la collection, l’énumérateur est définitivement invalidé et l’appel suivant à <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.Reset%2A&gt;</ph> lève une <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>If the collection is modified between <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">Si la collection est modifiée entre <ph id="ph1">&lt;xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.AccessControl.AceEnumerator.System%23Collections%23IEnumerator%23Current%2A&gt;</ph> retourne l’élément auquel il est attribué, même si l’énumérateur est déjà invalidé.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current">
          <source>The collection was modified after the enumerator was created.</source>
          <target state="translated">La collection a été modifiée après la création de l'énumérateur.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>