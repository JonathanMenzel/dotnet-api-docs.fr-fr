<Type Name="SemaphoreAccessRule" FullName="System.Security.AccessControl.SemaphoreAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="365c51655e839cf57d44c185d11b20ced86ad8c6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37632613" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SemaphoreAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SemaphoreAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.SemaphoreAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SemaphoreAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemaphoreAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type SemaphoreAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Security.AccessControl.SemaphoreAccessRule> classe fait partie d’un jeu de classes .NET Framework fournit pour gérer la sécurité de contrôle d’accès Windows sur les sémaphores de système nommé. Pour une vue d’ensemble de ces classes et leur relation avec les structures sous-jacentes de contrôle d’accès Windows, consultez <xref:System.Security.AccessControl.SemaphoreSecurity>.  
  
> [!NOTE]
>  Sécurité de contrôle d’accès Windows est significative uniquement pour les sémaphores de système nommé. Si un <xref:System.Threading.Semaphore> objet représente un sémaphore local, le contrôle d’accès n’est pas pertinent.  
  
 Pour obtenir une liste des règles actuellement appliqué à un sémaphore nommé, utilisez la <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> méthode pour obtenir un <xref:System.Security.AccessControl.SemaphoreSecurity> de l’objet, puis utiliser son <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> méthode pour obtenir une collection de <xref:System.Security.AccessControl.SemaphoreAccessRule> objets.  
  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> objets ne correspondent pas-à-un avec les entrées de contrôle d’accès dans la liste de contrôle accès discrétionnaire (DACL) sous-jacent. Lorsque vous obtenez l’ensemble de toutes les règles d’accès d’un sémaphore, le jeu contient le nombre minimal de règles actuellement requises pour exprimer toutes les entrées de contrôle d’accès.  
  
> [!NOTE]
>  Les entrées de contrôle d’accès sous-jacent modifier comme vous appliquer et supprimez des règles. Les informations dans les règles sont fusionnées dans la mesure du possible, pour maintenir le plus petit nombre d’entrées de contrôle d’accès. Par conséquent, lorsque vous lisez la liste actuelle des règles, il ne ressemble pas forcément exactement à la liste de toutes les règles que vous avez ajouté.  
  
 Utilisez <xref:System.Security.AccessControl.SemaphoreAccessRule> objets pour spécifier les droits d’accès pour autoriser ou refuser à un utilisateur ou un groupe. Un <xref:System.Security.AccessControl.SemaphoreAccessRule> toujours l’objet représente un accès accordé ou refusé d’accès, jamais les deux.  
  
 Pour appliquer une règle à un sémaphore système nommé, utilisez la <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> méthode pour obtenir le <xref:System.Security.AccessControl.SemaphoreSecurity> objet. Modifier le <xref:System.Security.AccessControl.SemaphoreSecurity> objet à l’aide de ses méthodes pour ajouter la règle, puis utilisez le <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> méthode rattacher l’objet de sécurité.  
  
> [!IMPORTANT]
>  Modifications apportées à un <xref:System.Security.AccessControl.SemaphoreSecurity> objet n’affectent pas les niveaux d’accès du sémaphore nommé jusqu'à ce que vous appeliez la <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType> méthode pour attribuer l’objet de sécurité modifié pour le sémaphore nommé.  
  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> les objets sont immuables. Sécurité d’un sémaphore est modifiée à l’aide des méthodes de la <xref:System.Security.AccessControl.SemaphoreSecurity> classe pour ajouter ou supprimer des règles ; comme vous le faites, les entrées de contrôle d’accès sous-jacentes sont modifiées.  
  
> [!NOTE]
>  Sécurité sur les objets de synchronisation n’est pas prise en charge pour Windows 98 ou Windows Millennium Edition.  
  
   
  
## Examples  
 L’exemple de code suivant illustre la séparation entre <xref:System.Security.AccessControl.AccessControlType.Allow> règles et <xref:System.Security.AccessControl.AccessControlType.Deny> règles et affiche la combinaison de droits des règles compatibles. L’exemple crée un <xref:System.Security.AccessControl.SemaphoreSecurity> objet, ajoute des règles qui accordent et refusent divers droits à l’utilisateur actuel et affiche la paire de règles résultante. L’exemple permet de nouveaux droits de l’utilisateur actuel, puis affiche le résultat, indiquant que les nouveaux droits sont fusionnés avec le <xref:System.Security.AccessControl.AccessControlType.Allow> règle.  
  
> [!NOTE]
>  Cet exemple ne s’attache pas l’objet de sécurité à un <xref:System.Threading.Semaphore> objet. Vous trouverez des exemples qui attachent des objets de sécurité dans <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> et <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.SemaphoreSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.SemaphoreRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As SemaphoreRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::SemaphoreRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.SemaphoreAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.SemaphoreRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.SemaphoreAccessRule" Usage="new System.Security.AccessControl.SemaphoreAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">The user or group the rule applies to. Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> or a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="eventRights">A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights" /> values specifying the rights allowed or denied.</param>
        <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour entrer un <xref:System.Threading.Semaphore>, par exemple en appelant le <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode), un utilisateur doit avoir <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> accès. Pour quitter le sémaphore, en appelant le <xref:System.Threading.Semaphore.Release%2A> méthode, l’utilisateur doit avoir <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> accès.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> specifies an invalid value.  -or-  <paramref name="type" /> specifies an invalid value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> is <see langword="null" />.  -or-  <paramref name="eventRights" /> is zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemaphoreAccessRule (string identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.SemaphoreRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As SemaphoreRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemaphoreAccessRule(System::String ^ identity, System::Security::AccessControl::SemaphoreRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.SemaphoreAccessRule : string * System.Security.AccessControl.SemaphoreRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.SemaphoreAccessRule" Usage="new System.Security.AccessControl.SemaphoreAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.SemaphoreRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">The name of the user or group the rule applies to.</param>
        <param name="eventRights">A bitwise combination of <see cref="T:System.Security.AccessControl.SemaphoreRights" /> values specifying the rights allowed or denied.</param>
        <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour entrer un <xref:System.Threading.Semaphore>, par exemple en appelant le <xref:System.Threading.WaitHandle.WaitOne%2A> (méthode), un utilisateur doit avoir <xref:System.Security.AccessControl.SemaphoreRights.Synchronize?displayProperty=nameWithType> accès. Pour quitter le sémaphore, en appelant le <xref:System.Threading.Semaphore.Release%2A> méthode, l’utilisateur doit avoir <xref:System.Security.AccessControl.SemaphoreRights.Modify?displayProperty=nameWithType> accès.  
  
 Ce constructeur est équivalent à la création d’un <xref:System.Security.Principal.NTAccount> objet, en passant `identity` à la <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> constructeur et en passant le nouvellement créé <xref:System.Security.Principal.NTAccount> de l’objet à le <xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29> constructeur.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de ce constructeur pour créer <xref:System.Security.AccessControl.SemaphoreAccessRule> objets. L’exemple crée un <xref:System.Security.AccessControl.SemaphoreSecurity> objet, ajoute des règles qui accordent et refusent divers droits à l’utilisateur actuel et affiche la paire de règles résultante. L’exemple permet de nouveaux droits de l’utilisateur actuel, puis affiche le résultat, indiquant que les nouveaux droits sont fusionnés avec le <xref:System.Security.AccessControl.AccessControlType.Allow> règle.  
  
> [!NOTE]
>  Cet exemple ne s’attache pas l’objet de sécurité à un <xref:System.Threading.Semaphore> objet. Vous trouverez des exemples qui attachent des objets de sécurité dans <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> et <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" /> specifies an invalid value.  -or-  <paramref name="type" /> specifies an invalid value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> is zero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> is <see langword="null" />.  -or-  <paramref name="identity" /> is a zero-length string.  -or-  <paramref name="identity" /> is longer than 512 characters.</exception>
      </Docs>
    </Member>
    <Member MemberName="SemaphoreRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.SemaphoreRights SemaphoreRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.SemaphoreRights SemaphoreRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SemaphoreRights As SemaphoreRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::SemaphoreRights SemaphoreRights { System::Security::AccessControl::SemaphoreRights get(); };" />
      <MemberSignature Language="F#" Value="member this.SemaphoreRights : System.Security.AccessControl.SemaphoreRights" Usage="System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.SemaphoreRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rights allowed or denied by the access rule.</summary>
        <value>Une combinaison au niveau du bit de <see cref="T:System.Security.AccessControl.SemaphoreRights" /> valeurs spécifiant les droits accordés ou refusés par la règle d’accès.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.SemaphoreAccessRule> les objets sont immuables. Vous pouvez créer une nouvelle règle d’accès qui représente un utilisateur différent, des droits différents ou un autre <xref:System.Security.AccessControl.AccessControlType>, mais vous ne pouvez pas modifier une règle d’accès existant.  
  
   
  
## Examples  
 L’exemple de code suivant illustre l’utilisation de la <xref:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights%2A> propriété pour afficher les droits dans l’ensemble de règles contenues dans un <xref:System.Security.AccessControl.SemaphoreSecurity> objet. L’exemple crée un <xref:System.Security.AccessControl.SemaphoreSecurity> objet, ajoute des règles qui accordent et refusent divers droits à l’utilisateur actuel et affiche la paire de règles résultante. L’exemple permet de nouveaux droits de l’utilisateur actuel, puis affiche le résultat, indiquant que les nouveaux droits sont fusionnés avec le <xref:System.Security.AccessControl.AccessControlType.Allow> règle.  
  
> [!NOTE]
>  Cet exemple ne s’attache pas l’objet de sécurité à un <xref:System.Threading.Semaphore> objet. Vous trouverez des exemples qui attachent des objets de sécurité dans <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=nameWithType> et <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.SemaphoreSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>