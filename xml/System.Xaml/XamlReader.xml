<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7b2da5f815178ee576b5206e3e4b9ed3089a9b75" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39852613" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fournit les définitions de base des classes qui consomment des entrées XAML et produisent des flux de données de nœud XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlReader> est une classe abstraite et ne fournit pas d’implémentations ou définitions ayant un résultat de travail pour tous les membres. Les membres qui ont une implémentation dans <xref:System.Xaml.XamlReader> sont indiquées dans la section Notes pour ce membre. Plus précisément, <xref:System.Xaml.XamlReader> a plusieurs membres abstraits qui doivent être implémentées, ainsi que plusieurs membres virtuels.  
  
 Des membres virtuels, <xref:System.Xaml.XamlReader.ReadSubtree%2A> et <xref:System.Xaml.XamlReader.Skip%2A> chacun fournir une implémentation par défaut qui convient à la plupart des cas. Toutefois, le <xref:System.Xaml.XamlReader.ReadSubtree%2A> et <xref:System.Xaml.XamlReader.Skip%2A> implémentations par défaut s’appuient sur un autre comportement attendu du lecteur XAML implémentation ; en particulier, ils s’appuient sur le <xref:System.Xaml.XamlReader.Read%2A> remplacer. <xref:System.Xaml.XamlReader.Dispose%2A> est également un membre virtuel qui a une implémentation par défaut de travail.  
  
 Les deux classes suivantes sont les plus pertinentes et pratiques des classes dérivées dans les Services XAML .NET Framework et l’assembly System.Xaml :  
  
-   <xref:System.Xaml.XamlObjectReader>, qui lit un graphique d’objets, tels que le graphique d’objet active d’une application au moment de l’exécution.  
  
-   <xref:System.Xaml.XamlXmlReader>, qui lit le XAML sous la forme d’un fichier texte XML à l’aide d’un grand <xref:System.Xml.XmlReader> qui charge le fichier en tant que classe d’assistance intermédiaire.  
  
 Incluent d’autres lecteurs XAML à partir d’autres infrastructures <xref:System.Windows.Baml2006.Baml2006Reader> et <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.  
  
 <xref:System.Xaml.XamlReader> diffère [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] et <xref:System.Xml.XmlReader> principes de conception, car <xref:System.Xaml.XamlReader> n’a pas un `Create` méthode pour retourner des implémentations de lecteur XAML sous-jacent par défaut. Vous devez à la place instancier des classes de lecteur XAML dérivées spécifiques en appelant leurs constructeurs ou autres API d’assistance spécifiques à la classe.  
  
## <a name="subtree-readers"></a>Lecteurs de sous-arborescence  
 La plupart du temps, vous appelez <xref:System.Xaml.XamlReader> API dans le contexte de classes de lecteur XAML spécifiques qui dérivent de <xref:System.Xaml.XamlReader>. Toutefois, dans un cas particulier, vous accédez <xref:System.Xaml.XamlReader> API sur une instance de lecteur XAML pratique qui n’est pas publique et non dérivée de <xref:System.Xaml.XamlObjectReader> ou <xref:System.Xaml.XamlXmlReader>. Ce cas est lorsque vous appelez <xref:System.Xaml.XamlReader.ReadSubtree%2A>, qui retourne un <xref:System.Xaml.XamlReader> instance. Dans l’implémentation par défaut, le <xref:System.Xaml.XamlReader> qui est retourné par cette API est une classe interne.  
  
 Le <xref:System.Xaml.XamlReader> obtenu pour la lecture de la sous-arborescence a des actions valides pour les API comme <xref:System.Xaml.XamlReader.Read%2A> et <xref:System.Xaml.XamlReader.NodeType%2A>, et ces actions sont basées sur la classe du lecteur parent. Cette conception permet à la classe interne suivre le frame de niveau où la sous-arborescence a été entrée. La sous-arborescence <xref:System.Xaml.XamlReader> permet de s’assurer que si la position du nœud actuel est déplacée au-delà des limites de la sous-arborescence, le lecteur de sous-arborescence spécifique signale une fin de fichier ou `null` au niveau du nœud actuel.  
  
 Remarques sur l’utilisation de lecteur de sous-arborescence sont incluses dans certaines <xref:System.Xaml.XamlReader> API.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise la classe <see cref="T:System.Xaml.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ferme le flux de données de nœud XAML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans l’implémentation de base, l’appel <xref:System.Xaml.XamlReader.Close%2A> appels <xref:System.Xaml.XamlReader.Dispose%2A> avec la `isDisposing` paramètre en tant que `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées ; sinon, <see langword="false" />.</param>
        <summary>Libère les ressources non managées utilisées par <see cref="T:System.Xaml.XamlReader" />, et libère éventuellement les ressources managées.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez appeler la classe de base pour obtenir <xref:System.Xaml.XamlReader.IsDisposed%2A>  =  `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur indiquant si <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> a été appelé.</summary>
        <value>
          <see langword="true" /> si <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> a été appelé ; sinon, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEof : bool" Usage="System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas d'implémentation dans une classe dérivée, obtient une valeur qui indique si la position du lecteur est à la fin du fichier.</summary>
        <value>
          <see langword="true" /> si la position est à la fin conceptuelle du fichier du flux de nœud XAML ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lecteurs de sous-arborescence peuvent appeler <xref:System.Xaml.XamlReader.IsEof%2A>, avec un comportement qui reflète fidèlement les limites de la sous-arborescence entrée. Pour plus d’informations, consultez la section « Lecteurs de sous-arborescence » dans <xref:System.Xaml.XamlReader>, ou consultez <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Member : System.Xaml.XamlMember" Usage="System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas d'implémentation dans une classe dérivée, obtient le membre actuel à la position du lecteur, si la position du lecteur est sur un <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
        <value>Membre actuel ; ou <see langword="null" /> si la position du lecteur ne se trouve pas sur un membre.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lecteurs de sous-arborescence peuvent appeler <xref:System.Xaml.XamlReader.Member%2A>, avec les restrictions de comportement. Pour plus d’informations, consultez la section « Lecteurs de sous-arborescence » dans <xref:System.Xaml.XamlReader>, ou consultez <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xaml.NamespaceDeclaration" Usage="System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas d'implémentation dans une classe dérivée, obtient des informations sur l'espace de noms XAML du nœud actuel.</summary>
        <value>Informations sur l'espace de noms XAML, si elles sont disponibles ; sinon, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La conception prévue de cette API est de retourner un résultat de non null uniquement si la <xref:System.Xaml.XamlReader.NodeType%2A> du nœud actuel est <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>. La propriété ne signale pas l’espace de noms XAML qui s’applique aux objets ou membres d’une manière générale, comme interprété dans un contexte de schéma XAML. Votre application doit fournir un moyen aux informations de cache pour le convertisseur espace de noms XAML tel qu’il parcourt les nœuds XAML, si vous avez besoin de ces informations de manière autre que la façon dont le contexte de schéma XAML signale à un writer. Consultez <xref:System.Xaml.XamlXmlReader.Namespace%2A> pour des remarques sur l’implémentation de référence.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xaml.XamlNodeType" Usage="System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas d'implémentation dans une classe dérivée, obtient le type du nœud actuel.</summary>
        <value>Valeur de l'énumération <see cref="T:System.Xaml.XamlNodeType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lecteurs de sous-arborescence peuvent appeler <xref:System.Xaml.XamlReader.NodeType%2A>, avec les restrictions de comportement. Pour plus d’informations, consultez la section « Lecteurs de sous-arborescence » dans <xref:System.Xaml.XamlReader>, ou consultez <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xamlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas d'implémentation dans une classe dérivée, fournit le nœud XAML suivant depuis la source, si un nœud est disponible.</summary>
        <returns>
          <see langword="true" /> si un nœud est disponible ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lecteurs de sous-arborescence peuvent appeler <xref:System.Xaml.XamlReader.Read%2A>, avec les restrictions de comportement. Pour plus d’informations, consultez la section « Lecteurs de sous-arborescence » dans <xref:System.Xaml.XamlReader>, ou consultez <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xaml.XamlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xaml.XamlReader" Usage="xamlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne un <see cref="T:System.Xaml.XamlReader" /> qui est basé sur le <see cref="T:System.Xaml.XamlReader" />actuel, où le <see cref="T:System.Xaml.XamlReader" /> retourné est utilisé pour itérer au sein d'une sous-arborescence de la structure de nœud XAML.</summary>
        <returns>Nouvelle instance de lecteur XAML pour la sous-arborescence.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode a une implémentation par défaut et retourne un valide <xref:System.Xaml.XamlReader>. Retourné <xref:System.Xaml.XamlReader> est une classe interne qui restreint certaines <xref:System.Xaml.XamlReader> actions. Les restrictions sont cohérentes dans le but de lire uniquement une sous-arborescence dimensionnée d’une plus grande source pour un jeu de nœud XAML et à retourner la fin de fichier ou `null` au niveau du nœud actuel lors de la sortie de la sous-arborescence.  
  
 En règle générale, vous devez vérifier le nœud actuel à partir de la première <xref:System.Xaml.XamlReader.Read%2A> pour déterminer si vous avez besoin d’un lecteur de sous-arborescence. La manière de vérifier cela peut être spécifique à l’implémentation ; Toutefois, évitez de créer plusieurs lecteurs de sous-arborescence pour chaque sous-arborescence. En outre, évitez d’appeler un lecteur de sous-arborescence pour certains cas de nœud (par exemple, pour <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>) qui ne peut pas contenir un sous-arbre de nœuds.  
  
 Après avoir obtenu un lecteur de sous-arborescence, vous devez appeler <xref:System.Xaml.XamlReader.Read%2A> dessus pour obtenir un nœud actuel (ou appeler <xref:System.Xaml.XamlReader.Skip%2A> pour obtenir un nœud suivant). Vous n’obtenez pas automatiquement une position de nœud initial à partir du lecteur de sous-arborescence lors de sa création.  
  
 Le lecteur que vous obtenez en appelant <xref:System.Xaml.XamlReader.ReadSubtree%2A> à partir de cette valeur par défaut implémentation est une classe interne. La classe interne base son comportement sur le <xref:System.Xaml.XamlReader> implémentation qui est utilisée lorsque <xref:System.Xaml.XamlReader.ReadSubtree%2A> est appelée. L’objectif de la classe interne est d’encapsuler le <xref:System.Xaml.XamlReader.Read%2A> et le comportement de parcours général. Le parcours demeure dans la sous-arborescence prévue en effectuant le suivi des <xref:System.Xaml.XamlNodeType.StartMember> / <xref:System.Xaml.XamlNodeType.EndMember> paires ou <xref:System.Xaml.XamlNodeType.StartObject> / <xref:System.Xaml.XamlNodeType.EndObject> paires. Il retourne également correctement `false` pour <xref:System.Xaml.XamlReader.Read%2A> et `true` pour <xref:System.Xaml.XamlReader.IsEof%2A> lorsque le lecteur est à la fin de la sous-arborescence, tel que défini par son point d’entrée. En général, vous supposez que toute <xref:System.Xaml.XamlReader> API que vous appelez à partir d’un lecteur de sous-arborescence a la même implémentation que l’ensemble <xref:System.Xaml.XamlReader> à l’exception du comportement.  
  
 Toutefois, <xref:System.Xaml.XamlReader.ReadSubtree%2A> est virtuel. Par conséquent, un spécifique <xref:System.Xaml.XamlReader> implémentation peut fournir un comportement qui diffère la <xref:System.Xaml.XamlReader> comportement de wrapper interne ; et un <xref:System.Xaml.XamlReader> implémentation peut même désactiver les fonctionnalités du lecteur de sous-arborescence en retournant <xref:System.NotImplementedException> ou autres exceptions.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas d'implémentation dans une classe dérivée, obtient un objet qui fournit des informations de contexte de schéma XAML pour le jeu d'informations.</summary>
        <value>Objet qui fournit des informations de contexte de schéma XAML pour le jeu d'informations.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xamlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ignore le nœud actuel et avance la position du lecteur au nœud suivant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une fois ignoré, <xref:System.Xaml.XamlReader.Read%2A> est appelée par la valeur par défaut <xref:System.Xaml.XamlReader.Skip%2A> implémentation. Vous n’appelez pas généralement <xref:System.Xaml.XamlReader.Skip%2A> et <xref:System.Xaml.XamlReader.Read%2A> dans la séquence.  
  
 Dans la valeur par défaut <xref:System.Xaml.XamlReader.Skip%2A> implémentation, différentes actions sont effectuées en fonction de qui <xref:System.Xaml.XamlReader.NodeType%2A> la position du lecteur est actuellement activée. Si la position du lecteur est actuellement suite un <xref:System.Xaml.XamlNodeType.StartMember> ou <xref:System.Xaml.XamlNodeType.StartObject>, ce membre ou un objet est ignoré. Pour d’autres <xref:System.Xaml.XamlReader.NodeType%2A> valeurs, aucune action autre que d’appeler <xref:System.Xaml.XamlReader.Read%2A> à partir de la position actuelle.  
  
 Lecteurs de sous-arborescence peuvent appeler <xref:System.Xaml.XamlReader.Skip%2A>, avec les restrictions de comportement. Pour plus d’informations, consultez la section « Lecteurs de sous-arborescence » dans <xref:System.Xaml.XamlReader>, ou consultez <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 Le comportement d’arborescence de nœuds de <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> est basé sur l’équivalent XML <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>. Selon le <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> équivalence de comportement, <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> ignore le nœud et sa sous-arborescence, pas seulement le nœud d’entrée unique.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Xaml.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas d'implémentation dans une classe dérivée, obtient le <see cref="T:System.Xaml.XamlType" /> du nœud actuel.</summary>
        <value>
          <see cref="T:System.Xaml.XamlType" /> du nœud actuel ; ou <see langword="null" /> si la position actuelle du lecteur n'est pas sur un objet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lecteurs de sous-arborescence peuvent appeler <xref:System.Xaml.XamlReader.Type%2A>, avec les restrictions de comportement. Pour plus d’informations, consultez la section « Lecteurs de sous-arborescence » dans <xref:System.Xaml.XamlReader>, ou consultez <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>En cas d'implémentation dans une classe dérivée, obtient la valeur du nœud actuel.</summary>
        <value>Valeur du nœud actuel ; ou <see langword="null" /> si la position actuelle du lecteur n'est pas sur un type de nœud <see cref="F:System.Xaml.XamlNodeType.Value" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>