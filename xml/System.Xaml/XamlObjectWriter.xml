<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlObjectWriter.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ca402de94a9fb4c2404a3eb885b3a1fc9d0fc4b6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca402de94a9fb4c2404a3eb885b3a1fc9d0fc4b6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlObjectWriter">
          <source>Creates an object graph from a source XAML node stream.</source>
          <target state="translated">Crée un graphique d'objet à partir d'un flux de données de nœud XAML source.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The <ph id="ph1">`Write`</ph> methods of <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> implement a pattern so that the <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> uses the <ph id="ph4">&lt;xref:System.Xaml.XamlWriter&gt;</ph> that is defined by the <ph id="ph5">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> method.</source>
          <target state="translated">Le <ph id="ph1">`Write`</ph> méthodes de <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> implémentent un modèle afin que la <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> utilise le <ph id="ph4">&lt;xref:System.Xaml.XamlWriter&gt;</ph> qui est définie par le <ph id="ph5">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> logic switches between the <ph id="ph2">`Write`</ph> methods, depending on which node type is at the current position in the reader.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlWriter.WriteNode%2A&gt;</ph> logique de basculer entre les <ph id="ph2">`Write`</ph> méthodes, selon le nœud de type est à la position actuelle dans le lecteur.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Scope</source>
          <target state="translated">Portée</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> has a concept of scope; that is, the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> maintains a conceptual point of reference in its output object graph.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> a un concept de portée ; c'est-à-dire, le <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> maintient un point conceptuel de référence dans son graphique d’objet de sortie.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>For a particular scope, certain operations might be valid or invalid, or produce a no-operation result.</source>
          <target state="translated">Pour une portée particulière, certaines opérations peuvent être valide ou non valide ou produire un résultat non opération.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>For example, if you call <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> to write directives for initialization on an object that already exists as an instance, the default implementation throws an exception.</source>
          <target state="translated">Par exemple, si vous appelez <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> pour écrire des directives pour l’initialisation d’un objet qui déjà existe comme une instance, l’implémentation par défaut lève une exception.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>A possible technique for tracking scope in a custom <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> is to align the node actions with a stack or frame class.</source>
          <target state="translated">Une technique possible pour le suivi de la portée personnalisé <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> consiste à aligner les actions de nœud avec une classe de la pile ou le frame.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The stack or frame can keep track of push and pop for each level of object-model depth that is entered or exited while the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> writes the object graph.</source>
          <target state="translated">La pile ou le frame peut effectuer le suivi de push et pop pour chaque niveau de profondeur de modèle objet qui est entrée ou sortie alors que le <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> écrit le graphique d’objets.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Callbacks</source>
          <target state="translated">Rappels</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>To support intermediate and advanced <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> scenarios, the mechanism of writing an object graph provides callback entry points that occur when a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> commits or is about to commit certain actions.</source>
          <target state="translated">Pour prendre en charge les intermédiaires et avancés <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> scénarios, le mécanisme d’écriture d’un graphique d’objet de rappel fournit des points d’entrée qui se produisent lorsqu’un <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> valide ou est prêt à valider certaines actions.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Some callbacks are enabled in the settings and are not specific to the object type or the member being written; however, callback information is often available in context or is in the event data that is sent through the callback.</source>
          <target state="translated">Certains de ces rappels sont activés dans les paramètres et ne sont pas spécifiques pour le type d’objet ou le membre en cours d’écriture ; Toutefois, les informations de rappel sont souvent disponibles dans le contexte ou événements dans les données envoyées via le rappel.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The following is a list of relevant callbacks:</source>
          <target state="translated">Voici une liste des rappels appropriés :</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A&gt;</ph> is invoked when the scope goes to a new object and at the <ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.BeginInit%2A&gt;</ph> phase of object lifetime for each created object.</source>
          <target state="translated">Le rappel est déclaré par <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A&gt;</ph> est appelé lorsque la portée passe à un nouvel objet et à la <ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.BeginInit%2A&gt;</ph> phase de durée de vie de chaque objet créé.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A&gt;</ph> is invoked when the scope goes to a new object and at the <ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.EndInit%2A&gt;</ph> phase of object lifetime for each created object.</source>
          <target state="translated">Le rappel est déclaré par <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A&gt;</ph> est appelé lorsque la portée passe à un nouvel objet et à la <ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize.EndInit%2A&gt;</ph> phase de durée de vie de chaque objet créé.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A&gt;</ph> is invoked when the scope starts in an object, and occurs when the first <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> call to that object scope is made but not yet committed.</source>
          <target state="translated">Le rappel est déclaré par <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A&gt;</ph> est appelé lorsque la portée démarre dans un objet et se produit lorsque le premier <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> appel à cette portée d’objet est effectué mais pas encore validée.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A&gt;</ph> is invoked when the scope starts in an object, and happens when the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> call to that object scope is made but not yet committed.</source>
          <target state="translated">Le rappel est déclaré par <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A&gt;</ph> est appelé lorsque la portée démarre dans un objet et se produit lorsque le <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> appel à cette portée d’objet est effectué mais pas encore validée.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The callback that is declared by <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph> is invoked when <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.OnSetValue%2A&gt;</ph> is called.</source>
          <target state="translated">Le rappel est déclaré par <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph> est appelé lorsque <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.OnSetValue%2A&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Writing Dictionary Keys</source>
          <target state="translated">Clés de dictionnaire en écriture</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> supports type conversion on the constraints of a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> before the dictionary contents are added to the object graph.</source>
          <target state="translated">L’implémentation par défaut de <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> prend en charge la conversion de type sur les contraintes d’un <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> avant le dictionnaire de contenu est ajouté au graphique d’objet.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>In this manner, a generic dictionary can be keyed at run time by objects and can match the relevant generic <ph id="ph1">`Add`</ph> and indexer behavior.</source>
          <target state="translated">De cette manière, un dictionnaire générique peut être indexé par des objets en cours d’exécution et peut correspondre à l’objet générique applique <ph id="ph1">`Add`</ph> et le comportement de l’indexeur.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>However, as implemented for the base <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, this capability exists only for object graph creation from the base <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class and not for derived classes of <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
          <target state="translated">Toutefois, comme implémentée pour la base de <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, cette fonction existe uniquement pour la création de graphique d’objet à partir de la base de <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> classe et non pas pour les classes dérivées de <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Checks for Disposed</source>
          <target state="translated">Recherche de suppressions</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>XAML writers are potentially used for deferred operations or where a call is made against a XAML writer instance that has been disposed in the interim.</source>
          <target state="translated">Writers XAML sont utilisés potentiellement pour les opérations différées ou où un appel est effectué par rapport à une instance de writer XAML a été supprimée dans l’intervalle.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlObjectWriter">
          <source>Various APIs of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> might throw <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> in these cases.</source>
          <target state="translated">Différentes API de <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> peut lever <ph id="ph2">&lt;xref:System.ObjectDisposedException&gt;</ph> dans ces cas.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlObjectWriter">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
          <source>A XAML schema context that is shared with the XAML reader that provides nodes for writing.</source>
          <target state="translated">Contexte de schéma XAML partagé avec le lecteur XAML qui fournit des nœuds pour l'écriture.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> class using  the XAML schema context that is used by a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> à l’aide du contexte de schéma XAML utilisé par un <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
          <source><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source>A XAML schema context that is shared with the XAML reader that provides nodes for writing.</source>
          <target state="translated">Contexte de schéma XAML partagé avec le lecteur XAML qui fournit des nœuds pour l'écriture.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source>A settings object that specifies certain options for <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> behavior and output.</source>
          <target state="translated">Objet de paramètres qui spécifie certaines options pour le comportement et la sortie de <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> class using the context that is used by a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> and its settings.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph> à l'aide du contexte utilisé par un <ph id="ph2">&lt;see cref="T:System.Xaml.XamlReader" /&gt;</ph> et ses paramètres.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
          <source><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="schemaContext" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.Clear">
          <source>Resets all possible frames and clears the object graph.</source>
          <target state="translated">Réinitialise toutes les images possibles et efface le graphique d'objet.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release the managed resources; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour libérer les ressources managées ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>, and optionally, releases the managed resources.</source>
          <target state="translated">Libère les ressources non managées utilisées par <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>, et libère éventuellement les ressources managées.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
          <source>The object to report on.</source>
          <target state="translated">Objet à signaler.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
          <source>The object is packaged into <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">L'objet est empaqueté dans <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> lorsque le gestionnaire est appelé.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /&gt;</ph> method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">Appelle une méthode <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /&gt;</ph> associée à <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> pour ce <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
          <source>The object to report on.</source>
          <target state="translated">Objet à signaler.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
          <source>The value  is packaged into <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">La valeur est empaquetée dans <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> lorsque le gestionnaire est appelé.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /&gt;</ph> method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">Appelle une méthode <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /&gt;</ph> associée à <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> pour ce <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
          <source>The object to report on.</source>
          <target state="translated">Objet à signaler.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
          <source>This is packaged into <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">Il est empaqueté dans <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> lorsque le gestionnaire est appelé.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">Appelle une méthode référencée <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /&gt;</ph> associée à <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> pour ce <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
          <source>The value to pass through <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> when the handler is invoked.</source>
          <target state="translated">Valeur à passer via <ph id="ph1">&lt;see cref="T:System.Xaml.XamlObjectEventArgs" /&gt;</ph> lorsque le gestionnaire est appelé.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</source>
          <target state="translated">Appelle une méthode référencée <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /&gt;</ph> associée à <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> pour ce <ph id="ph3">&lt;see cref="T:System.Xaml.XamlObjectWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The object to report as the source to the handler.</source>
          <target state="translated">Objet à signaler en tant que source au gestionnaire.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The name of the property to set, which is passed to the handler as part of <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph>.</source>
          <target state="translated">Nom de la propriété à définir, qui est passée au gestionnaire dans le cadre de <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The value to provide for the property that is named by <bpt id="p1">&lt;c&gt;</bpt>property<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Valeur à fournir pour la propriété qui est nommée par <bpt id="p1">&lt;c&gt;</bpt>property<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The value is passed to the handler as part of <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph>.</source>
          <target state="translated">La valeur est passée au gestionnaire dans le cadre de <ph id="ph1">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>Invokes any <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /&gt;</ph> referenced method that is associated with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> for this writer, as long as <ph id="ph3">&lt;paramref name="handled" /&gt;</ph> in <ph id="ph4">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph> event data is not <ph id="ph5">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Appelle une méthode référencée <ph id="ph1">&lt;see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /&gt;</ph> associée à <ph id="ph2">&lt;see cref="T:System.Xaml.XamlObjectWriterSettings" /&gt;</ph> pour ce writer, dans la mesure où <ph id="ph3">&lt;paramref name="handled" /&gt;</ph> dans les données d'événement <ph id="ph4">&lt;see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /&gt;</ph> n'a pas la valeur <ph id="ph5">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>A Boolean value that is set by any associated handler; otherwise, <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Valeur booléenne définie par un gestionnaire associé ; sinon, <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>If the <ph id="ph1">`SetValue`</ph> operation for this XAML writer has an associated handler (a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph> is declared in <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;</ph>), this method creates new <ph id="ph4">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs&gt;</ph> and passes them to the handler.</source>
          <target state="translated">Si le <ph id="ph1">`SetValue`</ph> opération pour ce writer XAML a un gestionnaire associé (un <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A&gt;</ph> est déclarée dans <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriterSettings&gt;</ph>), cette méthode crée de nouveaux <ph id="ph4">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs&gt;</ph> et les transmet au gestionnaire.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>The return value is set by reading the <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A&gt;</ph> value that is passed through the event data.</source>
          <target state="translated">La valeur de retour est définie en lisant la <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A&gt;</ph> valeur qui est passé par les données d’événement.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
          <source>If no handler exists and this method is invoked, the call returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Si aucun gestionnaire n’existe et que cette méthode est appelée, l’appel retourne <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>Gets the last object that was written.</source>
          <target state="translated">Obtient le dernier objet qui a été écrit.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>Typically only called when the node stream is at its end and the object graph is complete.</source>
          <target state="translated">En général, appelé uniquement lorsque le flux de nœud est à sa fin et que le graphique d'objet est terminé.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>The last object written, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Dernier objet écrit, ou <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>The most typical usage of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> is to call it only when the node stream is known to be at its end, and the object graph is complete.</source>
          <target state="translated">L’utilisation la plus courante de <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> consiste à appeler uniquement lorsque le flux de nœud est connu à sa fin, et le graphique d’objets est terminé.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source>Otherwise, the object graph is likely to be incomplete, and is not useful for most platform scenarios.</source>
          <target state="translated">Sinon, le graphique d’objets est susceptible d’être incomplet et n’est pas utile pour la plupart des scénarios de plateforme.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.Result">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> typically only contains a non-null value if it is called immediately after a call to <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>, and if the current scope is in the member where the object provides a value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.Result%2A&gt;</ph> en général contient uniquement une valeur non null si elle est appelée immédiatement après un appel à <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph>, et si la portée actuelle se trouve dans le membre où l’objet fournit une valeur.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.RootNameScope">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> service that maintains the XAML namescope for the absolute node root of the XAML object writer.</source>
          <target state="translated">Obtient le service <ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> qui maintient la portée de nom XAML pour le nœud racine absolu du writer d'objet XAML.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.RootNameScope">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> service that maintains the XAML namescope for the current root of the object writer.</source>
          <target state="translated">Service <ph id="ph1">&lt;see cref="T:System.Windows.Markup.INameScope" /&gt;</ph> qui maintient la portée de nom XAML pour la racine actuelle du writer d'objet.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.RootNameScope">
          <source>The value of this property may come from the object writer context.</source>
          <target state="translated">La valeur de cette propriété peut-être provenir du contexte d’objet writer.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>Gets the active XAML schema context.</source>
          <target state="translated">Obtient le contexte de schéma XAML actif.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>The XAML schema context.</source>
          <target state="translated">Contexte du schéma XAML.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>XAML schema context is a necessary information source for most practical object-writing scenarios.</source>
          <target state="translated">Contexte de schéma XAML est une source d’informations nécessaire pour les scénarios d’écriture d’objet plus pratiques.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>The XAML schema context influences the type lookup for backing types and holds information about the assemblies where backing types exist.</source>
          <target state="translated">Le contexte de schéma XAML influence la recherche de type pour les types de stockage et conserve des informations sur les assemblys où il existe des types de stockage.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>The default XAML schema context is based on CLR type-mapping rules.</source>
          <target state="translated">Le contexte de schéma XAML par défaut est basé sur les règles de mappage de type CLR.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.SchemaContext">
          <source>Frameworks typically provide their own XAML schema context in order to assure that that the assembly-loading mechanisms match the framework's programming amd application models.</source>
          <target state="translated">En général, les infrastructures fournissent leur propre contexte de schéma XAML pour garantir que les mécanismes de chargement d’assemblys correspondent à programmation modèles d’application de l’infrastructure.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>The line number from the reader.</source>
          <target state="translated">Numéro de ligne du lecteur.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>The line position from the reader.</source>
          <target state="translated">Position de ligne du lecteur.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>Implements <ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph> and provides line information for exceptions.</source>
          <target state="translated">Implémente <ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph> et fournit les informations de ligne pour les exceptions.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>This service method is not intended to be called directly from your code.</source>
          <target state="translated">Cette méthode de service n’est pas destinée à être appelée directement depuis votre code.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
          <source>However, if you are creating a derived class from <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> and expect to report a context where line numbers are unavailable or not useful, this method may be called.</source>
          <target state="translated">Toutefois, si vous créez une classe dérivée de <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> et souhaitez signaler un contexte où les numéros de ligne ne sont pas disponibles ou pas utiles, cette méthode peut être appelée.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
          <source>Gets a value that reports whether a line information service should provide values and therefore, should also call the <ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph> method when it is relevant.</source>
          <target state="translated">Obtient une valeur qui indique si un service d'informations de ligne doit fournir des valeurs et par conséquent également appeler la méthode <ph id="ph1">&lt;see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /&gt;</ph> si nécessaire.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if line information is used by the writer; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les informations de ligne sont utilisées par le writer ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
          <source>This implementation always returns <ph id="ph1">`true`</ph>.</source>
          <target state="translated">Cette implémentation retourne toujours <ph id="ph1">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndMember">
          <source>Closes the current member scope, and may write the value of the member scope while it closes.</source>
          <target state="translated">Ferme la portée de membres actuelle et écrit éventuellement la valeur de la portée de membres pendant qu'elle se ferme.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndMember">
          <source>The new scope becomes the parent object scope of the member.</source>
          <target state="translated">La nouvelle portée devient la portée d'objets parents du membre.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndMember">
          <source>Failed to create member value from a value node that is encountered between this call and a previous <ph id="ph1">&lt;see langword="StartMember" /&gt;</ph>.</source>
          <target state="translated">Échec de la création de la valeur d'un membre à partir d'un nœud de valeur qui est rencontré entre cet appel et un <ph id="ph1">&lt;see langword="StartMember" /&gt;</ph> précédent.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>Closes the current object scope in the writer.</source>
          <target state="translated">Ferme la portée d'objets actuelle dans le writer.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>The new object scope becomes the parent member scope.</source>
          <target state="translated">La nouvelle portée d'objets devient la portée de membres parents.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>If this <ph id="ph1">`EndObject`</ph> position scope is closing the root object, the new object scope becomes the root scope.</source>
          <target state="translated">Si cette <ph id="ph1">`EndObject`</ph> position étendue ferme l’objet racine, la nouvelle étendue de l’objet devient la portée racine.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>The call to <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> might not yet have created the object because an object member might be a necessary initialization pathway, such as initialization text or initialization parameters.</source>
          <target state="translated">L’appel à <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> ne peut-être pas encore créé l’objet, car un membre d’objet peut être une voie d’initialisation nécessaires, telles que le texte d’initialisation ou des paramètres d’initialisation.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteEndObject">
          <source>For these cases, the call to <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> actually writes the object.</source>
          <target state="translated">Dans ce cas, l’appel à <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> écrit l’objet.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>Writes the conceptual <ph id="ph1">&lt;see langword="StartObject" /&gt;</ph> into the object graph when the specified object is a default or implicit value of the parent property.</source>
          <target state="translated">Écrit le <ph id="ph1">&lt;see langword="StartObject" /&gt;</ph> conceptuel dans le graphique d'objet lorsque l'objet spécifié est une valeur par défaut ou implicite de la propriété parente.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>The implicit value comes from information that is obtained from the XAML schema context and backing type information, instead of being specified as an object value in the input XAML node set.</source>
          <target state="translated">La valeur implicite provient des informations obtenues du contexte de schéma XAML et des informations de type de stockage, au lieu d'être spécifiée en tant que valeur d'objet dans le jeu de nœuds XAML d'entrée.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>The difference between writing with <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> and writing with <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> can be seen in the resulting object graph.</source>
          <target state="translated">La différence entre l’écriture avec <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> et écrire avec <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> peuvent être consultés dans le graphique d’objet obtenu.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> does not construct an instance of a type because the <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> API has no information to inform the object graph of what to construct.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> ne construit pas une instance d’un type, car le <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> API dispose d’aucune information d’informer le graphique d’objets des éléments à construire.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>Instead, the object was created when the parent property was initialized; so a <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> does not need to construct it.</source>
          <target state="translated">Au lieu de cela, l’objet a été créé lors de l’initialisation de la propriété parent ; pour un <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> n’avez pas besoin pour la construction.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> specifies that an instance of that type should be constructed and inserted into the object graph.</source>
          <target state="translated">En revanche, <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> Spécifie qu’une instance de ce type doit être construite et insérée dans le graphique d’objets.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>If you think of the XAML node stream as a series of frames, a <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> is balanced to a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> call.</source>
          <target state="translated">Si vous pensez que le flux de nœud XAML comme une série d’images, un <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> est équilibré à un <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> appeler.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>Therefore, the number of <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> plus <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> calls should equal the number of <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> calls as part of a complete object-writing evaluation of the XAML node stream.</source>
          <target state="translated">Par conséquent, le nombre de <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A&gt;</ph> plus <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> appels doivent être égal au nombre de <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A&gt;</ph> appels dans le cadre d’une évaluation complète de l’écriture de l’objet du flux de nœud XAML.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>The conceptual <ph id="ph1">`StartObject`</ph> position for an implicit object in the object graph is necessary because although the object value itself is an implicit default, that object might still have members that need to be written based on the XAML node stream.</source>
          <target state="translated">L’aide conceptuelle <ph id="ph1">`StartObject`</ph> positionner pour un objet implicite dans le graphique d’objets est nécessaire, car même si la valeur de l’objet est une valeur par défaut implicite, cet objet peut avoir encore des membres qui doivent être écrits selon le flux de nœud XAML.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteGetObject">
          <source>A typical scenario where this occurs is when <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> writes member nodes for a collection property, and the collection initialization is implicit to creating the object that owns the collection property.</source>
          <target state="translated">Un scénario classique où cela se produit est lorsque <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> écrit des nœuds de membres pour une propriété de collection et l’initialisation de la collection est implicite à la création de l’objet qui possède la propriété de collection.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>The namespace declaration to write.</source>
          <target state="translated">Déclaration d'espace de noms à écrire.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Defines a namespace declaration that applies to the next object scope or member scope.</source>
          <target state="translated">Définit une déclaration d'espace de noms qui s'applique à la portée d'objets ou de membres suivante.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A namespace declaration can be written if the current scope is a root scope, object scope, or member scope.</source>
          <target state="translated">Une déclaration d’espace de noms peut être écrite si la portée actuelle est une portée racine, étendue de l’objet ou membre.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> can only be called immediately before a call to one of the following: <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>.</source>
          <target state="translated">Toutefois, <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> peut uniquement être appelée immédiatement avant un appel à une des valeurs suivantes : <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph>, ou <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>The consecutive <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> case is for writing multiple namespace declarations to the same node.</source>
          <target state="translated">Le consécutifs <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> cas est pour l’écriture de plusieurs déclarations d’espace de noms dans le même nœud.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Eventually, either <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> must be called.</source>
          <target state="translated">Enfin, <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A&gt;</ph> ou <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A&gt;</ph> doit être appelée.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> does not use a <ph id="ph2">`Start`</ph><ph id="ph3">/</ph><ph id="ph4">`End`</ph> metaphor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A&gt;</ph> n’utilisez pas un <ph id="ph2">`Start`</ph> <ph id="ph3">/</ph> <ph id="ph4">`End`</ph> métaphore.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Although a XAML namespace has members in the CLR representation sense, the members are known and do not need to be represented as a special type of <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> for extensibility.</source>
          <target state="translated">Bien qu’un espace de noms XAML ait des membres dans le sens de la représentation CLR, les membres sont connus et n’avez pas besoin d’être représentées comme un type spécial de <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> pour l’extensibilité.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>To access the values of a <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>, you access its <ph id="ph2">&lt;xref:System.Xaml.NamespaceDeclaration.Namespace%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xaml.NamespaceDeclaration.Prefix%2A&gt;</ph> properties.</source>
          <target state="translated">Pour accéder aux valeurs d’une <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>, vous accédez à son <ph id="ph2">&lt;xref:System.Xaml.NamespaceDeclaration.Namespace%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Xaml.NamespaceDeclaration.Prefix%2A&gt;</ph> propriétés.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A namespace declaration may have a <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> value for the prefix.</source>
          <target state="translated">Une déclaration d’espace de noms peut avoir un <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> valeur pour le préfixe.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> prefix represents a declaration of the default XAML namespace.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> préfixe représente une déclaration d’espace de noms XAML par défaut.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Do not attempt to use null to represent the default prefix;  it throws an exception in this API.</source>
          <target state="translated">N’essayez pas d’utiliser null pour représenter le préfixe par défaut ;  elle lève une exception dans cette API.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>.</source>
          <target state="translated">Pour plus d'informations, consultez <ph id="ph1">&lt;xref:System.Xaml.NamespaceDeclaration&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>The <ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>A component of <ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un composant de <ph id="ph1">&lt;paramref name="namespaceDeclaration" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
          <source>Tried to write a XAML namespace node in an invalid scope.</source>
          <target state="translated">Tentative d'écriture d'un nœud d'espaces de noms XAML dans une portée non valide.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>The XAML property to write.</source>
          <target state="translated">Propriété XAML à écrire.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Typically you obtain this value from a XAML reader through the XAML node stream intermediate.</source>
          <target state="translated">En général, vous obtenez cette valeur d'un lecteur XAML via le flux de nœud XAML intermédiaire.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Writes a new member node into the current object scope, and the scope becomes a new member scope.</source>
          <target state="translated">Écrit un nouveau nœud membre dans la portée d'objets actuelle, et la portée devient une nouvelle portée de membres.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Watch for a <ph id="ph1">&lt;xref:System.Xaml.XamlDuplicateMemberException&gt;</ph>, which occurs when the same XAML property is set twice in the XAML input.</source>
          <target state="translated">Surveiller un <ph id="ph1">&lt;xref:System.Xaml.XamlDuplicateMemberException&gt;</ph>, qui se produit lorsque la même propriété XAML est définie deux fois dans l’entrée XAML.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>In simple cases, such as when the same property is set in both attribute syntax and property element syntax, you can easily see this exception in the input markup.</source>
          <target state="translated">Dans les cas simples, par exemple lorsque la même propriété est définie dans la syntaxe d’attribut et de syntaxe d’élément de propriété, vous pouvez facilement voir cette exception dans la balise d’entrée.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>However, more subtle cases can occur that are more difficult to spot.</source>
          <target state="translated">Toutefois, des cas peuvent se produire plus difficiles à détecter.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>For example, this exception might occur if you set a XAML content property, if you involve XAML ambient properties, and if a property enables both an attachable usage and an instance usage.</source>
          <target state="translated">Par exemple, cette exception peut se produire si vous définissez une propriété de contenu XAML, si vous impliquez des propriétés ambiantes XAML, et si une propriété permet à la fois une utilisation pouvant être attachée et une utilisation de l’instance.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>In the debugging phases of development, you can often locate this exception by viewing the intermediate XAML node representation that connects the markup read and the object graph write.</source>
          <target state="translated">Dans les phases de développement de débogage, vous pouvez souvent trouver cette exception en consultant la représentation sous forme de nœud XAML intermédiaire qui connecte la lecture de balise et l’écriture de graphique d’objet.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;paramref name="property" /&gt;</ph> has <ph id="ph2">&lt;see cref="P:System.Xaml.XamlMember.IsUnknown" /&gt;</ph> set to <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="property" /&gt;</ph> a <ph id="ph2">&lt;see cref="P:System.Xaml.XamlMember.IsUnknown" /&gt;</ph> défini à <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see cref="P:System.Xaml.XamlLanguage.UnknownContent" /&gt;</ph> passed, which indicates that the XAML node stream contained content for an object that does not support content.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xaml.XamlLanguage.UnknownContent" /&gt;</ph> passé, ce qui indique que le contenu du flux de nœud XAML pour un objet ne prend pas en charge le contenu.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source>Attempted to write a start member in an invalid scope.</source>
          <target state="translated">Tentative d'écriture d'un membre de démarrage dans une portée non valide.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;paramref name="property" /&gt;</ph> specifies a property that is already explicitly set in the parent object scope.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="property" /&gt;</ph> spécifie une propriété qui est déjà définie explicitement dans la portée d'objet parent.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;paramref name="property" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="property" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>The type to write.</source>
          <target state="translated">Type à écrire.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Typically you obtain this value from a XAML reader.</source>
          <target state="translated">En général, vous obtenez cette valeur d'un lecteur XAML.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Writes an object node into the current scope, and sets the scope to a new object scope.</source>
          <target state="translated">Écrit un nouveau nœud objet dans la portée actuelle et définit la portée sur une nouvelle portée d'objets.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Processing an <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsUnknown" /&gt;</ph> type and cannot create an object.</source>
          <target state="translated">Traitement d'un type <ph id="ph1">&lt;see cref="P:System.Xaml.XamlType.IsUnknown" /&gt;</ph>, et impossible de créer un objet.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Attempted to write a start object in an invalid scope.</source>
          <target state="translated">Tentative d'écriture d'un objet de démarrage dans une portée non valide.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Attempted to write a root object when the root object was already provided in the settings.</source>
          <target state="translated">Tentative d'écriture d'un objet racine lorsque l'objet racine a déjà été fourni dans les paramètres.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source><ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="xamlType" /&gt;</ph> est <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>If the current scope is inside a collection, dictionary, or array, the new instance should be added to the collection, dictionary, or array by using the <ph id="ph1">&lt;see langword="Add" /&gt;</ph> method of the relevant type.</source>
          <target state="translated">Si la portée actuelle est à l’intérieur d’une collection, un dictionnaire ou un tableau, la nouvelle instance doit être ajoutée à la collection, un dictionnaire ou un tableau à l’aide de la <ph id="ph1">&lt;see langword="Add" /&gt;</ph> méthode du type approprié.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
          <source>Otherwise, the member should be assigned to the new instance.</source>
          <target state="translated">Dans le cas contraire, le membre doit être assigné à la nouvelle instance.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>The value to write.</source>
          <target state="translated">Valeur à écrire.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>Writes a value to the current member scope.</source>
          <target state="translated">Écrit une valeur dans la portée de membres actuelle.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.</source>
          <target state="translated">Si la portée actuelle est à l'intérieur d'une collection, d'un dictionnaire ou d'un objet tableau, la valeur doit être ajoutée à la collection, au dictionnaire ou au tableau.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
          <source>Attempted to write a value in an invalid scope.</source>
          <target state="translated">Tentative d'écriture d'une valeur dans une portée non valide.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>