<Type Name="IDestinationTypeProvider" FullName="System.Xaml.IDestinationTypeProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9c0902f060cf70a990455e9cd7000558331b3fac" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36444928" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDestinationTypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDestinationTypeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.IDestinationTypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDestinationTypeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDestinationTypeProvider" />
  <TypeSignature Language="F#" Value="type IDestinationTypeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Représente un service qui peut retourner un identificateur de système de type CLR pour le type de destination. Le type de destination est pertinent lorsque celui défini pour une opération de définition de propriétés est indirectement signalé par une réflexion ou d'autres mécanismes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le type qui est retourné par <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> est résolu à partir de la position actuelle du flux de nœud XAML à l’aide du contexte de schéma XAML actif.  
  
 Si vous utilisez le système de type XAML tel qu’implémenté par les Services XAML .NET Framework et le contexte de service sous ces conditions, l’accès <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> retourne le <xref:System.Xaml.XamlType.UnderlyingType%2A> selon les informations de système de type XAML disponibles et le contexte de schéma XAML basé sur CLR.  
  
 Ce service s’applique aux situations où réflexion pure CLR ou autres mécanismes peut ne pas fournissent suffisamment d’informations sur un type de destination. Voici une liste de quelques scénarios pertinents pour <xref:System.Xaml.IDestinationTypeProvider>:  
  
-   Le système de type CLR signale un type indirect en raison de la façon dont le CLR définit et utilise des types, et vous souhaitez un type de destination vrai. Par exemple, les API dans les Services XAML .NET Framework utilisent ce service en interne lorsqu’ils traitent des membres de l’événement. Les événements sont signalés par réflexion pure CLR comme un <xref:System.Delegate>.  
  
-   Vous souhaitez vous assurer que le type de destination de l’utilisation d’un convertisseur de type correspond au type attendu que le convertisseur de type peut produire. Ce scénario est utile lorsque le type de destination est paramétré ou générique.  
  
-   Votre convertisseur de valeurs est appelée à partir d’une utilisation imbriquée dans un autre convertisseur de valeurs. Dans ce cas, <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> se déroule l’imbrication et retourne le type de destination de la propriété réelle qui est définie, au lieu de retourner le type de sortie de tous les convertisseurs de valeur intermédiaire.  
  
 Convertisseurs de type et extensions de balisage peuvent interroger pour <xref:System.Xaml.IDestinationTypeProvider> en tant que service sur le contexte de service qui est fourni par un writer d’objet XAML, lorsque le writer d’objet XAML appelle le comportement de conversion de valeur. Pour plus d’informations, consultez [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md) et [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectWriter" />
  </Docs>
  <Members>
    <Member MemberName="GetDestinationType">
      <MemberSignature Language="C#" Value="public Type GetDestinationType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDestinationType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IDestinationTypeProvider.GetDestinationType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDestinationType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDestinationType();" />
      <MemberSignature Language="F#" Value="abstract member GetDestinationType : unit -&gt; Type" Usage="iDestinationTypeProvider.GetDestinationType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le CLR <see cref="T:System.Type" /> qui identifie le type de destination pour le convertisseur de type pertinent ou l'extension de balisage.</summary>
        <returns>Valeur <see cref="T:System.Type" /> CLR pour le type de destination.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode n’a aucun paramètre d’entrée. Les éléments à retourner (et s’il faut retourner une valeur autre que `null`) est déterminé par la position du nœud actuel dans le flux de nœud XAML.  
  
## <a name="service-implementers"></a>Implémenteurs de service  
 Si vous réimplémentez ce service, le <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> méthode doit retourner le type qu’un convertisseur de type ou d’extension de balisage s’attend à vérifier par rapport à son type de sortie ou de conversion plus spécifique.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>