<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XamlMember.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5284b342cd8ec18017e3ac4ac33597d46dbc3c75f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">284b342cd8ec18017e3ac4ac33597d46dbc3c75f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Provides the XAML type system identifier for members of XAML types.</source>
          <target state="translated">Fournit l'identificateur du système de type XAML pour les membres de types XAML.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph>) and also for general XAML type system logic.</source>
          <target state="translated">L'identificateur est utilisé par les lecteurs et les writers XAML lors du traitement des nœuds membres (lorsque le lecteur XAML est positionné sur un <ph id="ph1">&lt;see cref="F:System.Xaml.XamlNodeType.StartMember" /&gt;</ph>) de même que pour la logique du système de type XAML général.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> can use three methodologies for returning information about a XAML member: standard common language runtime (CLR) reflection; a reference-only reflection technique calling internal APIs that use optimized bit flags; or calling into virtual overrides of the <ph id="ph2">`Lookup*`</ph> API that is provided by possible <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> subclasses.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> peut utiliser trois méthodes pour retourner des informations sur un membre XAML : standard commun réflexion language runtime (CLR) ; une technique de réflexion de référence uniquement appel interne API ce bit utilisation optimisée indicateurs ; ou appel virtuel substitue de la <ph id="ph2">`Lookup*`</ph> API fournie par possible <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> sous-classes.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For most uses of .NET Framework XAML Services APIs and the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, you use the default XAML schema context.</source>
          <target state="translated">Pour la plupart des utilisations de l’API des Services XAML .NET Framework et le <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, vous utilisez le contexte de schéma XAML par défaut.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The default XAML schema context for .NET Framework XAML Services uses CLR backing for the type system.</source>
          <target state="translated">Le contexte de schéma XAML par défaut pour les Services XAML .NET Framework utilise le stockage pour le système de type CLR.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>This enables the XAML readers and XAML writers to work with any type or member that is defined in, or otherwise available to, the CLR and its reflection techniques.</source>
          <target state="translated">Ainsi, les lecteurs XAML et les writers XAML fonctionner avec n’importe quel type ou membre qui est défini ou disponible pour le CLR et ses techniques de réflexion.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Lookup* APIs and XamlMember Derived Classes</source>
          <target state="translated">Les Classes dérivées XamlMember et API de recherche</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> defines several virtual members that derived classes might override.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> définit plusieurs membres virtuels que les classes dérivées peuvent remplacer.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>These members have names that always start with the string <ph id="ph1">`Lookup`</ph>.</source>
          <target state="translated">Ces membres ont des noms qui commencent toujours par la chaîne <ph id="ph1">`Lookup`</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The remainder of the API name then references the property that the virtual method influences.</source>
          <target state="translated">Le reste de l’API de nommer les références à la propriété qui l’influence de la méthode virtuelle.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For example, a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class might override <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> to influence what the base-defined property <ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> returns in a derived class.</source>
          <target state="translated">Par exemple, un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> une classe dérivée peut substituer <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> pour influencer ce que la propriété définie par la base de <ph id="ph3">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> retourne dans une classe dérivée.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You can predict return values for such properties in <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> or existing derived classes by reading the documentation for the relevant <ph id="ph2">`Lookup*`</ph> methods.</source>
          <target state="translated">Vous pouvez prévoir des valeurs de retour de ces propriétés dans <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> ou les classes dérivées existantes en lisant la documentation relative à la <ph id="ph2">`Lookup*`</ph> méthodes.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The purpose of the <ph id="ph1">`Lookup*`</ph> methods is to provide a XAML type system extension technique that incorporates the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> base class.</source>
          <target state="translated">L’objectif de la <ph id="ph1">`Lookup*`</ph> méthodes consiste à fournir une technique extension système type XAML qui incorpore la <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe de base.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>By deriving from <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> and overriding the <ph id="ph2">`Lookup`</ph> virtual members, you can define the concept of a XAML member for a XAML schema in a XAML type system without being tied to the specifics of a backing type system or technology.</source>
          <target state="translated">En dérivant de <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> et en remplaçant le <ph id="ph2">`Lookup`</ph> membres virtuels, vous pouvez définir le concept d’un membre XAML pour un schéma XAML dans un système de type XAML sans être lié aux caractéristiques d’un système de type de stockage ou une technologie.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You can also use a provided XAML schema context under this scheme and still return the results you want.</source>
          <target state="translated">Vous pouvez également utiliser un contexte de schéma XAML fourni sous ce schéma et toujours retourner les résultats souhaités.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>As an example, consider the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> property <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">Par exemple, considérez la <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> propriété <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>This property informs callers that operations such as using a <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> for serialization can write a value for this member on a target object.</source>
          <target state="translated">Cette propriété informe les appelants que les opérations comme l’utilisation d’un <ph id="ph1">&lt;xref:System.Xaml.XamlWriter&gt;</ph> pour la sérialisation peut écrire une valeur pour ce membre sur un objet cible.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>In the default implementation, the determination of whether the member is writable is made by using reflection techniques against the backing CLR <ph id="ph1">&lt;xref:System.Type&gt;</ph> and its members (the <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>).</source>
          <target state="translated">Dans l’implémentation par défaut, la détermination de si le membre est accessible en écriture est effectuée à l’aide de techniques de réflexion par rapport à CLR de sauvegarde <ph id="ph1">&lt;xref:System.Type&gt;</ph> et ses membres (la <ph id="ph2">&lt;xref:System.Reflection.MemberInfo&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Therefore, by default, the XAML type system depends on the CLR type system.</source>
          <target state="translated">Par conséquent, par défaut, le système de type XAML dépend du système de type CLR.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>However, you can remove this dependency for your XAML type system reporting of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> by overriding the API <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">Toutefois, vous pouvez supprimer cette dépendance pour votre système de type XAML signalant de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> en remplaçant l’API <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Within your override, you can use other determinations, such as metadata that is specific to your technology, a master lookup table that is optimized for a fixed XAML vocabulary, or a variety of other strategies for determining whether a XAML member is writable in your XAML vocabulary.</source>
          <target state="translated">Au sein de votre remplacement, vous pouvez utiliser d’autres analyses, tels que les métadonnées spécifiques à votre technologie, une table de correspondance maître optimisée pour un vocabulaire XAML fixe, ou d’autres stratégies pour déterminer si un membre XAML est accessible en écriture dans votre Vocabulaire XAML.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Constructing XamlMember Without XAML Schema Context</source>
          <target state="translated">Construction de XamlMember sans contexte de schéma XAML</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Most constructors of <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> require a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> as part of their initialization.</source>
          <target state="translated">La plupart des constructeurs de <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> nécessitent un <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> dans le cadre de leur initialisation.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> is also necessary for many internal <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> operations, such as obtaining information that is being forwarded from the backing type.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> est également nécessaire pour de nombreuses interne <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> opérations, telles que l’obtention d’informations sont transférées à partir du type de stockage.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>When you are working with the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, you typically have a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> that is available from a surrounding construct such as a <ph id="ph3">&lt;xref:System.Xaml.XamlWriter&gt;</ph>.</source>
          <target state="translated">Lorsque vous travaillez avec le <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> API, vous devez en général un <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> qui est disponible à partir d’une construction environnante comme un <ph id="ph3">&lt;xref:System.Xaml.XamlWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>In this case, you can pass the <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> reference through to all XAML type system calls that require a XAML schema context.</source>
          <target state="translated">Dans ce cas, vous pouvez passer le <ph id="ph1">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph> font référence à tous les appels de système de type XAML qui requièrent un contexte de schéma XAML.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>One specific constructor, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>, does not require a <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>.</source>
          <target state="translated">Un constructeur spécifique, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph>, ne nécessite pas un <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>However, a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">Toutefois, un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> qui est construit avec les <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature retourne <ph id="ph3">`true`</ph> pour <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, such a member cannot be written into an object graph.</source>
          <target state="translated">Pour un chemin de chargement qui implique <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, ce membre ne peut pas être écrit dans un graphique d’objet.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>Using the .NET Framework XAML services implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">À l’aide de l’implémentation des services XAML .NET Framework, le <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> appeler lève une <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> lorsque les <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> rapports <ph id="ph4">`true`</ph> pour <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that has a value of <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">Vous ne devez pas construire un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> qui a la valeur <ph id="ph2">`true`</ph> pour <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> , sauf si votre implémentation peut gérer les exceptions de <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, ou vous avez d’autres moyens pour ajuster le <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> comportement.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>For example, one or more of the  following might be true of your implementation:</source>
          <target state="translated">Par exemple, un ou plusieurs des éléments suivants peuvent être vrai pour votre implémentation :</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>The XAML schema context is available later.</source>
          <target state="translated">Le contexte de schéma XAML est disponible plus tard.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You use a member invoker pattern.</source>
          <target state="translated">Vous utilisez un modèle de demandeur de membre.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xaml.XamlMember">
          <source>You deliberately override <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> in a custom XAML writer.</source>
          <target state="translated">Vous substituez délibérément <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> dans un writer XAML personnalisé.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> that represents the event member.</source>
          <target state="translated">Système de type CLR <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> qui représente le membre d'événement.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">Contexte <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> qui qualifie le membre.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> avec le système de type CLR <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> et un <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an event (event handler connection-point property).</source>
          <target state="translated">Utilisez ce constructeur si le membre représente un événement (propriété point de connexion de gestionnaire d’événements).</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property member.</source>
          <target state="translated">Système de type CLR <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> qui représente le membre de propriété.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">Contexte <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> qui qualifie le membre.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> avec le système de type CLR <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> et un <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents a property (and specifically is not an event handler connection).</source>
          <target state="translated">Utilisez ce constructeur si le membre représente une propriété (et en particulier n’est pas une connexion de gestionnaire d’événements).</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> that represents the event member.</source>
          <target state="translated">Système de type CLR <ph id="ph1">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> qui représente le membre d'événement.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">Contexte <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> qui qualifie le membre.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time reflection calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> qui gère les appels de réflexion au moment de l'exécution en fonction du <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using CLR type system <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, including <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> avec le système de type CLR <ph id="ph2">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph> et un <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, notamment les informations sur <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an event (or an event handler connection-point property).</source>
          <target state="translated">Utilisez ce constructeur si le membre représente un événement (ou une point de connexion de propriété de gestionnaire d’événements).</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> that represents the property member.</source>
          <target state="translated">Système de type CLR <ph id="ph1">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> qui représente le membre de propriété.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">Contexte <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> qui qualifie le membre.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> qui gère les appels de réflexion au moment de l'exécution en fonction du <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using reflection <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> and a <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, including <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> avec la réflexion <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph> et un <ph id="ph3">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph>, notamment les informations sur <ph id="ph4">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor only if the member represents a property and if it is not an event handler connection.</source>
          <target state="translated">Utilisez ce constructeur uniquement si le membre représente une propriété et si elle n’est pas une connexion de gestionnaire d’événements.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The string name of the attachable event.</source>
          <target state="translated">Nom sous forme de chaîne de l'événement pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the handler <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method of the attachable member's backing implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> du système de type CLR pour la méthode <ph id="ph2">&lt;see langword="Add" /&gt;</ph> du gestionnaire de l'implémentation de stockage du membre pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">Contexte <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> qui qualifie le membre.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable event.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> pour un <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> qui représente un événement pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an attachable event member.</source>
          <target state="translated">Utilisez ce constructeur si le membre représente un membre d’événement pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The string name of the member.</source>
          <target state="translated">Nom sous forme de chaîne du membre.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> information for the declaring type.</source>
          <target state="translated">Informations <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> pour le type déclarant.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the member is attachable; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que le membre peut être attaché ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class using a string name and declaring <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> information.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, en utilisant un nom de chaîne et des informations sur le <ph id="ph2">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> déclarant.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that is constructed with this signature has significant limitations.</source>
          <target state="translated">Un <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> construit avec cette signature présente des limitations importantes.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> qui est construit avec les <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature retourne <ph id="ph3">`true`</ph> pour <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, such a member cannot be written into an object graph.</source>
          <target state="translated">Pour un chemin de chargement qui implique <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, ce membre ne peut pas être écrit dans un graphique d’objet.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>Using the .NET Framework XAML Services implementation, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">À l’aide de l’implémentation de Services XAML .NET Framework, le <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> appeler lève une <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> lorsque les <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> rapports <ph id="ph4">`true`</ph> pour <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> with <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph><ph id="ph3">`true`</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">Vous ne devez pas construire un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> avec <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> <ph id="ph3">`true`</ph> , sauf si votre implémentation peut gérer les exceptions de <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, ou vous avez d’autres moyens pour ajuster le <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> comportement.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>For example, one or more of the following might be true of your implementation:</source>
          <target state="translated">Par exemple, un ou plusieurs des éléments suivants peuvent être vrai pour votre implémentation :</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>The XAML schema context is available later.</source>
          <target state="translated">Le contexte de schéma XAML est disponible plus tard.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You use a member invoker pattern.</source>
          <target state="translated">Vous utilisez un modèle de demandeur de membre.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source>You deliberately override <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> in a custom XAML writer.</source>
          <target state="translated">Vous substituez délibérément <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> dans un writer XAML personnalisé.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> or <ph id="ph2">&lt;paramref name="declaringType" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> ou <ph id="ph2">&lt;paramref name="declaringType" /&gt;</ph> a la valeur <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The string name of the attachable property.</source>
          <target state="translated">Nom sous forme de chaîne de la propriété pouvant être attachée.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> du système de type CLR pour l'accesseur <ph id="ph2">&lt;see langword="get" /&gt;</ph> de l'implémentation de stockage du membre pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> du système de type CLR pour l'accesseur <ph id="ph2">&lt;see langword="set" /&gt;</ph> de l'implémentation de stockage du membre pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">Contexte <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> qui qualifie le membre.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable property.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> pour un <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> qui représente une propriété pouvant être jointe.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
          <source>Use this constructor if the member represents an attachable property.</source>
          <target state="translated">Utilisez ce constructeur si le membre représente une propriété pouvant être attachée.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The string name of the attachable event.</source>
          <target state="translated">Nom sous forme de chaîne de l'événement pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the handler <ph id="ph2">&lt;see langword="Add" /&gt;</ph> method of the attachable member's backing implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> du système de type CLR pour la méthode <ph id="ph2">&lt;see langword="Add" /&gt;</ph> du gestionnaire de l'implémentation de stockage du membre pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">Contexte <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> qui qualifie le membre.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> qui gère les appels de réflexion au moment de l'exécution en fonction du <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable event, including <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> pour un <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> qui représente un événement pouvant être attaché, notamment des informations sur <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an attachable event member.</source>
          <target state="translated">Utilisez ce constructeur si le membre représente un membre d’événement pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The string name of the attachable property.</source>
          <target state="translated">Nom sous forme de chaîne de la propriété pouvant être attachée.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> du système de type CLR pour l'accesseur <ph id="ph2">&lt;see langword="get" /&gt;</ph> de l'implémentation de stockage du membre pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor of the attachable member's backing implementation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> du système de type CLR pour l'accesseur <ph id="ph2">&lt;see langword="set" /&gt;</ph> de l'implémentation de stockage du membre pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> context that qualifies the member.</source>
          <target state="translated">Contexte <ph id="ph1">&lt;see cref="T:System.Xaml.XamlSchemaContext" /&gt;</ph> qui qualifie le membre.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that handles run-time invocation calls against the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> qui gère les appels de réflexion au moment de l'exécution en fonction du <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> class for a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that represents an attachable property, including <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> pour un <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> qui représente une propriété pouvant être jointe, notamment les informations sur <ph id="ph3">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
          <source>Use this constructor if the member represents an attachable property member.</source>
          <target state="translated">Utilisez ce constructeur si le membre représente un membre de propriété pouvant être attachée.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the type that declares the member that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Obtient le <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> du type qui déclare le membre associé à ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> for the type that declares the member that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> du type qui déclare le membre associé à ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>This value is typically set during initialization and is usually not <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Cette valeur est généralement définie lors de l’initialisation et n’est généralement pas <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> information can be passed in by constructors for initialization.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> informations peuvent être passées par les constructeurs pour l’initialisation.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>By calling directly into base constructors, initialization for <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived classes can omit some of the value-checks that are made in the base class.</source>
          <target state="translated">En appelant directement les constructeurs de base, l’initialisation de <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classes dérivées peuvent omettre certaines les vérifications de valeur qui sont effectuées dans la classe de base.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>Therefore, the derived initialization can change the reported type-member relationship information of a XAML member so that it no longer aligns in an expected way with the type system information of its underlying CLR declaration.</source>
          <target state="translated">Par conséquent, l’initialisation dérivée peut modifier les informations de relation de membre de type signalées d’un membre XAML afin qu’il ne s’aligne plus comme prévu avec les informations de système de type de sa déclaration CLR sous-jacente.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeclaringType">
          <source>For any security-critical checks of declaring type information, use the underlying CLR type instead.</source>
          <target state="translated">Pour toutes les vérifications critiques de sécurité de la déclaration des informations de type, utilisez à la place le type CLR sous-jacent.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
          <target state="translated">Obtient un objet <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> utilisé pour le chargement différé des objets XAML déclarés.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint on the generic.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> avec la contrainte <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> sur le générique.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDeferringLoader%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DeferringLoader">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">Ce comportement se produit dans les cas où la logique de réflexion interne initiale n’a pas déjà défini les informations.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Gets a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated">Obtient une liste d'objets <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>These report the members where dependency relationships for initialization order exist relative to this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Cette liste répertorie les membres pour lesquels il existe des relations de dépendance pour l'ordre d'initialisation concernant ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated">Liste d'objets <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupDependsOn%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>This behavior occurs in cases where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">Ce comportement se produit dans les cas où la logique de réflexion interne initiale n’a pas déjà défini les informations.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern can be applied to object model cases that deliberately contradict a general XAML rule.</source>
          <target state="translated">Le <ph id="ph1">`DependsOn`</ph> modèle peut être appliqué aux cas de modèle objet délibérément contredisent une règle XAML générale.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The general XAML rule is that members of a type that are not passed as initialization text (or by a factory method in XAML 2009) must be able to be assigned in any order.</source>
          <target state="translated">La règle XAML générale est que les membres d’un type qui ne sont pas transmis en tant que texte d’initialisation (ou par une méthode de fabrique dans XAML 2009) doivent pouvoir être assigné dans n’importe quel ordre.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>By applying a <ph id="ph1">`DependsOn`</ph> pattern to a member, you can instruct XAML writers to always process the referenced member before this member.</source>
          <target state="translated">En appliquant un <ph id="ph1">`DependsOn`</ph> de modèle à un membre, vous pouvez indiquer les writers XAML à traiter toujours le membre référencé avant ce membre.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>You can apply this pattern in situations where the value of the current member requires context or other information that is only available after the other member is set.</source>
          <target state="translated">Vous pouvez appliquer ce modèle dans les situations où la valeur du membre actuel requiert le contexte ou autres informations qui ne sont plus disponibles après que l’autre membre est défini.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>The <ph id="ph1">`DependsOn`</ph> pattern should be applied judiciously and reserved for property scenarios where it serves an architectural purpose.</source>
          <target state="translated">Le <ph id="ph1">`DependsOn`</ph> modèle doit être appliqué judicieusement et réservé pour les scénarios de propriété où il sert un but architectural.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Large numbers of dependencies have the potential to slow down XAML processing.</source>
          <target state="translated">Grand nombre de dépendances est susceptibles de ralentir le traitement XAML.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Also, it is possible to produce circular dependencies, in which case the XAML processing behavior is undefined.</source>
          <target state="translated">En outre, il est possible de produire des dépendances circulaires, auquel cas le comportement de traitement XAML n’est pas défini.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.DependsOn">
          <source>Example <ph id="ph1">`DependsOn`</ph> scenarios from WPF include certain properties on <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>, on <ph id="ph4">&lt;xref:System.Windows.Trigger&gt;</ph>, and on <ph id="ph5">&lt;xref:System.Windows.Setter&gt;</ph>.</source>
          <target state="translated">Exemple <ph id="ph1">`DependsOn`</ph> scénarios de WPF incluent certaines propriétés sur <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> et <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>, dans <ph id="ph4">&lt;xref:System.Windows.Trigger&gt;</ph>et <ph id="ph5">&lt;xref:System.Windows.Setter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="T:System.Xaml.XamlMember">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">Indique si l'objet actif est égal à un autre objet.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source>The object to compare with this object.</source>
          <target state="translated">Objet à comparer à cet objet.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source>Indicates whether the current object is equal to another object.</source>
          <target state="translated">Indique si l'objet actif est égal à un autre objet.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'objet actuel est égal au paramètre <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source>An object to compare with this object.</source>
          <target state="translated">Objet à comparer à cet objet.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">Indique si l'objet actuel est égal à un autre objet du même type.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si l'objet actuel est égal au paramètre <ph id="ph2">&lt;paramref name="other" /&gt;</ph> ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetHashCode">
          <source>Returns the hash code for this object.</source>
          <target state="translated">Retourne le code de hachage de cet objet.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetHashCode">
          <source>An integer hash code.</source>
          <target state="translated">Code de hachage entier.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>Returns a list of XAML namespaces where this XAML member can exist.</source>
          <target state="translated">Retourne une liste d'espaces de noms XAML dans lesquels ce membre XAML peut exister.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>A list of XAML namespace identifiers as strings.</source>
          <target state="translated">Liste d'identificateurs d'espace de noms XAML sous forme de chaînes.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.GetXamlNamespaces">
          <source>The default implementation returns the <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType&gt;</ph> call result from the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> that is associated with this <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated">L’implémentation par défaut retourne la <ph id="ph1">&lt;xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType&gt;</ph> résultat d’appel du <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> qui est associé à ce <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Invoker">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Obtient l'implémentation de <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> associée à ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> implementation that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> associée à ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">`Invoker`</ph> pattern is an advanced XAML type system extension technique.</source>
          <target state="translated">Le <ph id="ph1">`Invoker`</ph> modèle est une technique d’extension de système de type XAML avancée.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>The <ph id="ph1">`Invoker`</ph> pattern provides a way to inject different schema type mapping behavior, while still using XAML type system definitions from .NET Framework XAML Services.</source>
          <target state="translated">Le <ph id="ph1">`Invoker`</ph> modèle permet d’injecter du comportement de mappage de type de schéma différent, tout en utilisant les définitions de système de type XAML à partir des Services XAML .NET Framework.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>If a <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> override returns <ph id="ph2">`null`</ph>, or if the default implementation returns <ph id="ph3">`null`</ph> because it lacks the <ph id="ph4">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> for this <ph id="ph5">&lt;xref:System.Xaml.XamlMember&gt;</ph>, the <ph id="ph6">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> property returns <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si un <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> supplante <ph id="ph2">`null`</ph>, ou si l’implémentation par défaut retourne <ph id="ph3">`null`</ph> , car il lui manque le <ph id="ph4">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> pour ce <ph id="ph5">&lt;xref:System.Xaml.XamlMember&gt;</ph>, le <ph id="ph6">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> propriété renvoie <ph id="ph7">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> is the default.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> est la valeur par défaut.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>This is true for most operations that use .NET Framework XAML Services and the default XAML schema context, and where no specific override <ph id="ph1">`Invoker`</ph> patterns are passed for construction of XAML type system entities.</source>
          <target state="translated">Cela est vrai pour la plupart des opérations qui utilisent les Services XAML .NET Framework et le contexte de schéma XAML par défaut, et qui ne remplacer <ph id="ph1">`Invoker`</ph> modèles sont passés pour la construction des entités de système de type XAML.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Invoker">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupInvoker%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property.</source>
          <target state="translated">Obtient une valeur qui indique si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> est signalé comme étant une propriété ambiante.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> est signalé comme étant une propriété ambiante ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAmbient%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>This behavior occurs in implementations where the initial internal reflection logic has not already set the information.</source>
          <target state="translated">Ce comportement se produit dans les implémentations où la logique de réflexion interne initiale n’a pas déjà défini les informations.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>Checking for ambient properties is are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
          <target state="translated">Vérifier les propriétés ambiantes est sont généralement partie d’une logique de traitement XAML pour vous assurer que les objets et valeurs qui reposent sur l’utilisation de la qualification de type peuvent fonctionner correctement.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>The .NET Framework XAML Services APIs and the default XAML schema context populates this value based on attribution with <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>.</source>
          <target state="translated">L’API des Services XAML .NET Framework et le contexte de schéma XAML par défaut remplissent cette valeur selon attribution avec <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> uses this existing <ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> technique, and it returns <ph id="ph3">`true`</ph> if <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> exists on a member declaration.</source>
          <target state="translated">L’implémentation par défaut de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> utilise cette existant <ph id="ph2">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> technique et il retourne <ph id="ph3">`true`</ph> si <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> existe sur une déclaration de membre.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> is found on members of several WPF types, which include <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Setter&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> se trouve sur les membres de plusieurs types WPF, qui incluent <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Setter&gt;</ph>, et <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAmbient">
          <source>It is also found on the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> type, which connotes that any member that uses <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> as its type should be considered ambient even if the member is not specifically attributed.</source>
          <target state="translated">Il se trouve également sur le <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> type, ce qui signifie que tout membre qui utilise <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> comme son type doit être considéré comme ambiant même si le membre n’est pas attribué spécifiquement.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is an attachable member.</source>
          <target state="translated">Obtient une valeur qui indique si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> est un membre pouvant être attaché.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is an attachable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> est un membre pouvant être attaché ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsAttachable">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph> value is initialized based on which constructor was used to construct a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsAttachable%2A&gt;</ph> la valeur est initialisée selon le constructeur utilisé pour construire un <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is a XAML directive.</source>
          <target state="translated">Obtient une valeur qui indique si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> est une directive XAML.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is a XAML directive; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> est une directive XAML ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> value is initialized based on which constructor was used to construct a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> la valeur est initialisée selon le constructeur utilisé pour construire un <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>The base <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> constructors initialize so that <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> is <ph id="ph3">`false`</ph>.</source>
          <target state="translated">La base de <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> constructeurs initialisent afin que <ph id="ph2">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> est <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>However, the <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> class (a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class) initializes so that <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Toutefois, le <ph id="ph1">&lt;xref:System.Xaml.XamlDirective&gt;</ph> classe (un <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée) initialise afin que <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> est <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsDirective">
          <source>If you want to report <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> as <ph id="ph2">`true`</ph> to callers of a custom XAML schema class for XAML members, make sure you derive from <ph id="ph3">&lt;xref:System.Xaml.XamlDirective&gt;</ph> because that is the only way to enable that behavior.</source>
          <target state="translated">Si vous souhaitez signaler <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsDirective%2A&gt;</ph> en tant que <ph id="ph2">`true`</ph> aux appelants d’une classe de schéma XAML personnalisée pour les membres XAML, assurez-vous que vous dérivez de <ph id="ph3">&lt;xref:System.Xaml.XamlDirective&gt;</ph> car il s’agit de la seule façon d’activer ce comportement.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsEvent">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event member.</source>
          <target state="translated">Obtient une valeur qui indique si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre d'événement.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un événement ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsEvent">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsEvent%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsNameValid">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is initialized with a valid <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> string as its <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.Name" /&gt;</ph>.</source>
          <target state="translated">Obtient une valeur qui indique si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> est initialisé avec une chaîne <ph id="ph2">&lt;see langword="xamlName" /&gt;</ph> valide en tant que <ph id="ph3">&lt;see cref="P:System.Xaml.XamlMember.Name" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsNameValid">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is initialized with a valid <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph> string; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> est initialisé avec une chaîne <ph id="ph3">&lt;see langword="xamlName" /&gt;</ph> valide ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a read-only member.</source>
          <target state="translated">Obtient une valeur qui indique si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre en lecture seule.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a read-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre en lecture seule ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadOnly">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadOnly%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member with a callable public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">Obtient une valeur qui indique si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre avec un accesseur <ph id="ph2">&lt;see langword="get" /&gt;</ph> public pouvant être appelé.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a callable public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un accesseur <ph id="ph3">&lt;see langword="get" /&gt;</ph> public pouvant être appelé ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> value checks whether the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is public.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> valeur vérifie si le <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> est public.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is nonpublic, the <ph id="ph2">`get`</ph> accessor is not callable in a practical way, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> est non public, le <ph id="ph2">`get`</ph> accesseur ne peut être appelé de façon pratique, et <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> retourne <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> méthode est virtuelle et par conséquent, peut être remplacée.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">La substitution a la possibilité de modifier (à des fins malveillantes ou autre) les informations d’accès signalées d’un membre XAML afin qu’il ne s’aligne plus comme prévu avec les informations de l’accès de système de type de sa déclaration CLR sous-jacente.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsReadPublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">Pour toutes les vérifications critiques de sécurité des niveaux d’accès, utilisez à la place le type CLR sous-jacent.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">Obtient une valeur qui indique si le membre ne peut pas être résolu par le système de stockage utilisé pour la résolution du type et du membre.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the member is not resolvable; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the member is resolvable.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le membre ne peut pas être résolu ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si le membre peut être résolu.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that is constructed with the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature returns <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> qui est construit avec les <ph id="ph2">&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;</ph> signature retourne <ph id="ph3">`true`</ph> pour <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>For a load path that involves <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, a <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> with <ph id="ph3">`true`</ph> for <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> cannot be written into an object graph.</source>
          <target state="translated">Pour un chemin de chargement qui implique <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, un <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> avec <ph id="ph3">`true`</ph> pour <ph id="ph4">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> ne peut pas être écrit dans un graphique d’objet.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Under the default implementations in .NET Framework XAML Services APIs, the <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> call throws a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> when the relevant <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> reports <ph id="ph4">`true`</ph> for <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">Sous les implémentations par défaut dans l’API des Services XAML .NET Framework, le <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType&gt;</ph> appeler lève une <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriterException&gt;</ph> lorsque les <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> rapports <ph id="ph4">`true`</ph> pour <ph id="ph5">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>You should not construct a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> that has a value of <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> unless your implementation can handle the exceptions from <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, or you have other ways to adjust the <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> behavior.</source>
          <target state="translated">Vous ne devez pas construire un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> qui a la valeur <ph id="ph2">`true`</ph> pour <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> , sauf si votre implémentation peut gérer les exceptions de <ph id="ph4">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph>, ou vous avez d’autres moyens pour ajuster le <ph id="ph5">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> comportement.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsUnknown">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsUnknown%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member.</source>
          <target state="translated">Obtient une valeur qui indique si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre en écriture seule.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre en écriture seule ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWriteOnly">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>Gets a value that indicates whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a callable public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">Obtient une valeur qui indique si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre comportant un accesseur <ph id="ph2">&lt;see langword="set" /&gt;</ph> public pouvant être appelé.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a callable public <ph id="ph3">&lt;see langword="set" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un accesseur <ph id="ph3">&lt;see langword="set" /&gt;</ph> public pouvant être appelé ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> value considers whether the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is public as part of the determination.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> valeur considère que si la <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> est public dans le cadre de la détermination.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> is nonpublic, the <ph id="ph2">`set`</ph> accessor is not callable in a practical way, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph> est non public, le <ph id="ph2">`set`</ph> accesseur ne peut être appelé de façon pratique, et <ph id="ph3">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> retourne <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> méthode est virtuelle et par conséquent, peut être remplacée.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">La substitution a la possibilité de modifier (à des fins malveillantes ou autre) les informations d’accès signalées d’un membre XAML afin qu’il ne s’aligne plus comme prévu avec les informations de l’accès de système de type de sa déclaration CLR sous-jacente.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.IsWritePublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">Pour toutes les vérifications critiques de sécurité des niveaux d’accès, utilisez à la place le type CLR sous-jacent.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>When implemented in a derived class, returns an <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated">En cas d'implémentation dans une classe dérivée, retourne une implémentation de <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> implementation.</source>
          <target state="translated">Implémentation de <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</source>
          <target state="translated">Substituez cette méthode pour fournir la réflexion interne avec une autre façon d’obtenir les valeurs d’attribut CLR.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>In the absence of an override, the internal reflector uses typical CLR reflection logic such as calls to <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>.</source>
          <target state="translated">En l’absence d’une substitution, le réflecteur interne utilise la logique de réflexion CLR typique tels que les appels à <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
          <source>The default implementation returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">L'implémentation par défaut retourne la valeur <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for deferred loading of XAML declared objects.</source>
          <target state="translated">Retourne un objet <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>, lequel est utilisé pour le chargement différé des objets XAML déclarés.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> that has a <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> constraint on the generic.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> qui a une contrainte <ph id="ph2">&lt;see cref="T:System.Xaml.XamlDeferringLoader" /&gt;</ph> sur le générique.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> property.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de la <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DeferringLoader%2A&gt;</ph> pour retourner une valeur différente de celle qui est activée par la réflexion interne de la valeur par défaut, et si vous fournissez également personnalisé <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> plus d’informations.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>The default implementation returns an object either by reading <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph> or using a <ph id="ph2">&lt;xref:System.Xaml.XamlDeferringLoader&gt;</ph> from the declaring type.</source>
          <target state="translated">L’implémentation par défaut retourne un objet en lisant <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph> ou en utilisant un <ph id="ph2">&lt;xref:System.Xaml.XamlDeferringLoader&gt;</ph> à partir du type déclarant.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDeferringLoader">
          <source>If neither object is available, this method might return <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Si aucun objet n’est disponible, cette méthode peut retourner <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Returns a list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated">Retourne une liste d'objets <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Items in the list report the members where dependency relationships for initialization order exist relative to this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Cette liste répertorie les membres pour lesquels il existe des relations de dépendance pour l'ordre d'initialisation concernant ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>A list of <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects.</source>
          <target state="translated">Liste d'objets <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> property.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de la <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez <ph id="ph1">&lt;xref:System.Xaml.XamlMember.DependsOn%2A&gt;</ph> pour retourner une valeur différente de celle qui est activée par la réflexion interne de la valeur par défaut, et si vous fournissez également personnalisé <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> plus d’informations.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The WPF XAML reader and writer implementations attribute this case with <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>.</source>
          <target state="translated">Les implémentations de lecteur et un writer XAML WPF ce cas avec l’attribut <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The default implementation uses this existing <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> technique.</source>
          <target state="translated">L’implémentation par défaut utilise cette existant <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> technique.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>Override this method if you are not using <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> for this purpose and intend to replace that technique for indicating property processing order with your own technique.</source>
          <target state="translated">Substituez cette méthode si vous n’utilisez pas <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> pour cet objectif et prévoyez de remplacer cette technique d’indication de l’ordre de traitement des propriétés par votre propre technique.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>If you do not intend to support a property processing order, you can use the default implementation because it returns no results, which is appropriate.</source>
          <target state="translated">Si vous ne souhaitez pas prendre en charge un ordre de traitement de propriété, vous pouvez utiliser l’implémentation par défaut, car il ne retourne aucun résultat, ce qui convient.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupDependsOn">
          <source>The list is read-only.</source>
          <target state="translated">La liste est en lecture seule.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> associé à ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> information for this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Informations <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlMemberInvoker" /&gt;</ph> pour ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, ou <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>This method is invoked by calls to <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée par les appels à <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>The default implementation does not require that a <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> be constructed by using one of the constructors that pass an initial <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</source>
          <target state="translated">L’implémentation par défaut n’exige pas un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> être construite à l’aide d’un des constructeurs qui passent un initial <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>However, an <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> value must exist for the <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>; otherwise, the default implementation returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Toutefois, un <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> valeur doit exister pour que la <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph>; sinon, l’implémentation par défaut retourne <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>Override this method if you also derive from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> and intend to return the derived class.</source>
          <target state="translated">Substituez cette méthode si vous dérivez également <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> et souhaitez retourner la classe dérivée.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupInvoker">
          <source>If you return <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> returns <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> to callers.</source>
          <target state="translated">Si vous retournez <ph id="ph1">`null`</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Invoker%2A&gt;</ph> retourne <ph id="ph3">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType&gt;</ph> aux appelants.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> is reported as an ambient property.</source>
          <target state="translated">Retourne une valeur indiquant si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> est signalé comme étant une propriété ambiante.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> as an ambient property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour signaler ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> comme une propriété ambiante ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>This method is invoked by internal calls that check for ambient XAML property information.</source>
          <target state="translated">Cette méthode est appelée par les appels internes qui recherchent les informations de propriété ambiantes XAML.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Ambient property behavior is accounted for in the public API behavior of XAML readers and XAML writers.</source>
          <target state="translated">Comportement de la propriété ambiante est comptabilisée dans le comportement de l’API publique de lecteurs et writers XAML.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>The internal calls that reference <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</source>
          <target state="translated">Les appels internes qui référencent <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> font généralement partie d’une logique de traitement XAML pour vous assurer que les objets et valeurs qui reposent sur l’utilisation de la qualification de type peuvent fonctionner correctement.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>The default .NET Framework XAML Services implementation uses CLR attributing to obtain this information from reflection over backing types.</source>
          <target state="translated">L’implémentation de Services XAML .NET Framework par défaut utilise l’attribution CLR pour obtenir ces informations à partir de la réflexion sur les types de stockage.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Specifically, the default implementation checks for <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> and returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> if <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> exists on a member definition.</source>
          <target state="translated">Plus précisément, l’implémentation par défaut vérifie <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> et retourne <ph id="ph2">`true`</ph> pour <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupIsAmbient%2A&gt;</ph> si <ph id="ph4">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> existe sur une définition de membre.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Override this method if you are not using <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> for this purpose and intend to replace that technique for indicating ambient XAML properties with your own technique.</source>
          <target state="translated">Substituez cette méthode si vous n’utilisez pas <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> pour cet objectif et prévoyez de remplacer cette technique d’indication des propriétés XAML ambiantes par votre propre technique.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsAmbient">
          <source>Example APIs from WPF that attribute with <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> are <ph id="ph2">&lt;xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Exemples d’API de WPF cet attribut avec <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> sont <ph id="ph2">&lt;xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType&gt;</ph> et <ph id="ph3">&lt;xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event.</source>
          <target state="translated">Retourne une valeur indiquant si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un événement.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report that this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an event; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour signaler que ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un événement ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>The default implementation checks whether <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> is of type <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph>, and if it is, returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">L’implémentation par défaut vérifie si <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> est de type <ph id="ph2">&lt;xref:System.Reflection.EventInfo&gt;</ph>et si tel est le cas, renvoie <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsEvent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsEvent">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pouvant être interprétée pour déterminer le XAML des représentations de système de type au cas par cas.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents an intended read-only property.</source>
          <target state="translated">Retourne une valeur indiquant si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente une propriété en lecture seule escomptée.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to report this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> as an intended read-only property; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente une propriété prévue en lecture seule ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> exists, but a public <ph id="ph3">`set`</ph> accessor does not exist for it, as determined by internal reflection.</source>
          <target state="translated">L’implémentation par défaut retourne <ph id="ph1">`true`</ph> si <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> existe, mais publique <ph id="ph3">`set`</ph> accesseur n’existe pas, comme déterminé par la réflexion interne.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadOnly">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pouvant être interprétée pour déterminer le XAML des représentations de système de type au cas par cas.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a property that has a public <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">Retourne une valeur indiquant si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente une propriété qui a un accesseur <ph id="ph2">&lt;see langword="get" /&gt;</ph> public.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a property that has a public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente une propriété comportant un accesseur <ph id="ph3">&lt;see langword="get" /&gt;</ph> public ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The default implementation returns results based either on internal reflection or the negation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">L’implémentation par défaut retourne des résultats basés sur une réflexion interne ou la négation de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>, dans cet ordre.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> returns whether the member itself is public; it returns <ph id="ph2">`true`</ph> for a public member on a nonpublic declaring type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> Indique si le membre lui-même est public ; elle retourne <ph id="ph2">`true`</ph> pour un membre public sur un type déclarant de nonpublic.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Use <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> instead, if you also want to consider the visibility of the declaring type.</source>
          <target state="translated">Utilisez <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph> à la place, si vous souhaitez également la visibilité du type déclarant.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadPublic%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pour le déterminer au cas par cas.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsReadPublic%2A&gt;</ph> méthode est virtuelle et par conséquent, peut être remplacée.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">La substitution a la possibilité de modifier (à des fins malveillantes ou autre) les informations d’accès signalées d’un membre XAML afin qu’il ne s’aligne plus comme prévu avec les informations de l’accès de système de type de sa déclaration CLR sous-jacente.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsReadPublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">Pour toutes les vérifications critiques de sécurité des niveaux d’accès, utilisez à la place le type CLR sous-jacent.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that is not resolvable by the backing system that is used for type and member resolution.</source>
          <target state="translated">Retourne une valeur indiquant si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre qui ne peut pas être résolu par le système de stockage utilisé pour la résolution du type et du membre.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a non-resolvable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre qui ne peut pas être résolu ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>This method may be invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode peut être appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>The default implementation returns results that are based on either internal reflection or checking for a <ph id="ph1">`null`</ph> value of <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">L’implémentation par défaut retourne des résultats qui sont basés sur la réflexion interne ou sur la recherche pour un <ph id="ph1">`null`</ph> valeur <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>, dans cet ordre.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsUnknown">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pour le déterminer au cas par cas.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor but not a public <ph id="ph3">&lt;see langword="get" /&gt;</ph> accessor.</source>
          <target state="translated">Retourne une valeur indiquant si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre comportant un accesseur <ph id="ph2">&lt;see langword="set" /&gt;</ph> public mais pas d'accesseur <ph id="ph3">&lt;see langword="get" /&gt;</ph> public.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a write-only member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre en écriture seule ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>The default implementation returns <ph id="ph1">`true`</ph> if an <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> exists that has a public <ph id="ph3">`set`</ph> accessor and a nonpublic <ph id="ph4">`get`</ph> accessor, as determined by internal reflection.</source>
          <target state="translated">L’implémentation par défaut retourne <ph id="ph1">`true`</ph> si un <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> existe qui a un public <ph id="ph3">`set`</ph> accesseur et un nonpublic <ph id="ph4">`get`</ph> accesseur, comme déterminé par la réflexion interne.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWriteOnly%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWriteOnly">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pour le déterminer au cas par cas.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>Returns whether this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a member that has a public <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor.</source>
          <target state="translated">Retourne une valeur indiquant si ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre comportant un accesseur <ph id="ph2">&lt;see langword="set" /&gt;</ph> public.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> represents a writable member; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> représente un membre accessible en écriture ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The default implementation returns results based  either internal reflection or the negation of <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>, processing in that order.</source>
          <target state="translated">L’implémentation par défaut retourne des résultats basés sur la réflexion interne ou la négation de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A&gt;</ph>, dans cet ordre.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsWritePublic%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pour le déterminer au cas par cas.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> method is virtual and therefore, can be overridden.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupIsWritePublic%2A&gt;</ph> méthode est virtuelle et par conséquent, peut être remplacée.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</source>
          <target state="translated">La substitution a la possibilité de modifier (à des fins malveillantes ou autre) les informations d’accès signalées d’un membre XAML afin qu’il ne s’aligne plus comme prévu avec les informations de l’accès de système de type de sa déclaration CLR sous-jacente.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupIsWritePublic">
          <source>For any security-critical checks of access levels, use the underlying CLR type instead.</source>
          <target state="translated">Pour toutes les vérifications critiques de sécurité des niveaux d’accès, utilisez à la place le type CLR sous-jacent.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
          <source>Returns the opening and closing bracket characters for a markup extension.</source>
          <target state="translated">Retourne le crochet ouvrant et le crochet fermant d’une extension de balisage.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
          <source>A collection containing the opening and closing bracket characters.</source>
          <target state="translated">Collection contenant le crochet ouvrant et le crochet fermant.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type where the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated">Retourne le <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> du type dans lequel le <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> peut exister.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>The type where the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated">Type dans lequel le <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> peut exister.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>The default implementation distinguishes between attachable and non-attachable members.</source>
          <target state="translated">L’implémentation par défaut fait la distinction entre les membres pouvant être attachés et non-pouvant être attachée.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>For non-attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> always returns <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</source>
          <target state="translated">Pour les membres non attachables, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> retourne toujours <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>For attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> returns a result based on examining the <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> accessor parameter type and interprets that type based on XAML schema context.</source>
          <target state="translated">Pour les membres pouvant être attachés, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> retourne un résultat basé sur l’examen de la <ph id="ph2">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> type de paramètre d’accesseur et interprète ce type basé sur le contexte de schéma XAML.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTargetType">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pour le déterminer au cas par cas.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">Retourne le <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> du type qui est utilisé par le membre.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> du type qui est utilisé par le membre.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Override this method if you want <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> information.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> pour retourner une valeur différente de celle qui est activée par la réflexion interne de la valeur par défaut, et si vous fournissez également personnalisé <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph> plus d’informations.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>The default implementation uses different code paths and conceptual meanings for the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that is based on whether this <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> represents a property, method, or event.</source>
          <target state="translated">L’implémentation par défaut utilise différents chemins de code et concepts pour retourné <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> qui repose sur le fait que cela <ph id="ph2">&lt;xref:System.Xaml.XamlMember&gt;</ph> représente une propriété, une méthode ou un événement.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For a property, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type that sets the property or is returned by the property.</source>
          <target state="translated">Pour une propriété, retournée <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> est le type qui définit la propriété ou est retourné par la propriété.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For an event, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the required event handler type (a delegate in a CLR implementation).</source>
          <target state="translated">Pour un événement, retourné <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> est le type de gestionnaire d’événements requis (délégué dans une implémentation CLR).</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>For a method, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the return type.</source>
          <target state="translated">Pour une méthode, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> est le type de retour.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>In each case, XAML schema context is used to evaluate the XAML type from the underlying system type.</source>
          <target state="translated">Dans chaque cas, le contexte de schéma XAML est utilisé pour évaluer le type XAML à partir du type de système sous-jacent.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupType">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pour le déterminer au cas par cas.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>Returns a type converter implementation that is associated with this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Retourne une implémentation de convertisseur de type qui est associée à ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> instance with <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Instance de <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> avec une contrainte <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>, ou <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>The default implementation uses the following logic and processing order:</source>
          <target state="translated">L’implémentation par défaut utilise la logique suivante et l’ordre de traitement :</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If attributing exists at the member level (<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>), the attribute information is used for a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> against the XAML schema context.</source>
          <target state="translated">Si l’attribution existe au niveau du membre (<ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>), les informations d’attribut sont utilisées pour un appel à <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> par rapport au contexte de schéma XAML.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> is valid, a type converter that is associated with the type is returned.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> est valide, un convertisseur de type qui est associé au type est retourné.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>If the member is an event, an event-specific type converter is returned.</source>
          <target state="translated">Si le membre est un événement, un convertisseur de type spécifique à l’événement est retourné.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupTypeConverter">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pour le déterminer au cas par cas.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Returns a <ph id="ph1">&lt;see langword="get" /&gt;</ph> accessor that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Retourne un accesseur <ph id="ph1">&lt;see langword="get" /&gt;</ph> associé à ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the associated <ph id="ph2">&lt;see langword="get" /&gt;</ph> accessor; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> pour l'accesseur <ph id="ph2">&lt;see langword="get" /&gt;</ph> associé , sinon <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>The default implementation interprets the <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> property as <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> and returns the value of <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType&gt;</ph> (with the parameter set to <ph id="ph4">`true`</ph>), which means that the returned method can be nonpublic.</source>
          <target state="translated">L’implémentation par défaut interprète la <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> propriété en tant que <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> et retourne la valeur de <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType&gt;</ph> (avec le paramètre défini sur <ph id="ph4">`true`</ph>), ce qui signifie que la méthode retournée peut être non publique.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>This behavior can result in <ph id="ph1">`null`</ph> for certain cases.</source>
          <target state="translated">Ce comportement peut provoquer des <ph id="ph1">`null`</ph> dans certains cas.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>including cases where no associated accessor exists or the member is not a property.</source>
          <target state="translated">y compris les cas où aucun accesseur associé n’existe ou le membre n’est pas une propriété.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>This method is invoked when a caller gets a value from the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;</ph> property on an associated <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de la <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A&gt;</ph> propriété associé à un <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pour le déterminer au cas par cas.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">Veillez à implémenter <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> afin que tous les retournent des résultats mis en corrélation.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Returns a CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Retourne un <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> de système de type CLR associé à ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>A CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> object that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> de système de type CLR associé à ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> ; sinon <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>The default implementation returns the underlying member information, which is based on construction.</source>
          <target state="translated">L’implémentation par défaut retourne les informations de membre sous-jacent, qui sont basées sur la construction.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>If the <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> object is constructed with a signature that does not provide enough information to set the underlying member, this method returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Reflection.MemberInfo&gt;</ph> objet est construit avec une signature qui ne fournit pas suffisamment d’informations pour définir le membre sous-jacent, cette méthode retourne <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>If an underlying member was set during construction, you should not need to call this method.</source>
          <target state="translated">Si un membre sous-jacent a été défini pendant la construction, vous ne devez pas appeler cette méthode.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pour le déterminer au cas par cas.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingMember">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">Veillez à implémenter <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> afin que tous les retournent des résultats mis en corrélation.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>Returns a <ph id="ph1">&lt;see langword="set" /&gt;</ph> accessor that is associated with this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Retourne un accesseur <ph id="ph1">&lt;see langword="set" /&gt;</ph> associé à ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> for the associated <ph id="ph2">&lt;see langword="set" /&gt;</ph> accessor; or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> pour l'accesseur <ph id="ph2">&lt;see langword="set" /&gt;</ph> associé , sinon <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>The default implementation interprets <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> as <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> and returns the value of <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType&gt;</ph> (with the parameter set to <ph id="ph4">`true`</ph>), which means that the returned method can be nonpublic.</source>
          <target state="translated">L’implémentation par défaut interprète <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> en tant que <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> et retourne la valeur de <ph id="ph3">&lt;xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType&gt;</ph> (avec le paramètre défini sur <ph id="ph4">`true`</ph>), ce qui signifie que la méthode retournée peut être non publique.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>This can result in <ph id="ph1">`null`</ph> for certain cases, including cases where there is no such accessor, or the member is not a property.</source>
          <target state="translated">Cela peut entraîner de <ph id="ph1">`null`</ph> pour certains cas, notamment s’il n’existe pas d’accesseur, ou le membre n’est pas une propriété.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;</ph> on an associated <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>.Override this method if you want to report uniform results for an entire <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A&gt;</ph> sur associé à un <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlMemberInvoker&gt;</ph>. Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pour le déterminer au cas par cas.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
          <source>Make sure to implement <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> so that they all return correlated results.</source>
          <target state="translated">Veillez à implémenter <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A&gt;</ph>, et <ph id="ph3">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> afin que tous les retournent des résultats mis en corrélation.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>Returns a value serializer implementation that is associated with this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Retourne une implémentation du sérialiseur de valeur associée à ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> instance with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint, or <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Instance de <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> avec une contrainte <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>, ou <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>The default implementation uses the following logic and processing order:</source>
          <target state="translated">L’implémentation par défaut utilise la logique suivante et l’ordre de traitement :</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If attributing exists at the member level (<ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>), the attribute information is used for a call to <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> against the XAML schema context.</source>
          <target state="translated">Si l’attribution existe au niveau du membre (<ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>), les informations d’attribut sont utilisées pour un appel à <ph id="ph2">&lt;xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A&gt;</ph> par rapport au contexte de schéma XAML.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> is valid, a value converter that is associated with the type is returned.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> est valide, un convertisseur de valeur qui est associé au type est retourné.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>If the previous conditions do not apply, <ph id="ph1">`null`</ph> is returned.</source>
          <target state="translated">Si les conditions précédentes ne s’appliquent pas, <ph id="ph1">`null`</ph> est retourné.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>This method is invoked when a caller gets a value from <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</source>
          <target state="translated">Cette méthode est appelée lorsqu’un appelant obtient une valeur à partir de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.LookupValueSerializer">
          <source>Override this method if you want to report uniform results for an entire <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> derived class, or if you have specialized metadata available to determine this on a per-case basis.</source>
          <target state="translated">Substituez cette méthode si vous souhaitez signaler des résultats uniformes pour l’intégralité d’un <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> classe dérivée, ou si vous avez spécialisé des métadonnées disponibles pour le déterminer au cas par cas.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
          <source>Defines the opening and closing bracket characters for a markup extension.</source>
          <target state="translated">Définit le crochet ouvrant et le crochet fermant d’une extension de balisage.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
          <source>A collection containing the opening and closing bracket characters.</source>
          <target state="translated">Collection contenant le crochet ouvrant et le crochet fermant.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Name">
          <source>Gets the <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> name string that declares this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Obtient la chaîne de nom <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> qui déclare ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>The <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> name string that declares this <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Chaîne de nom <ph id="ph1">&lt;see langword="xamlName" /&gt;</ph> qui déclare ce <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>This value is always set during construction.</source>
          <target state="translated">Cette valeur est toujours définie pendant la construction.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>The constructors that are implemented by <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> typically throw an exception if an initial name is not specified; therefore, do not expect this property to be <ph id="ph2">`null`</ph> or an empty string, if you are using default .NET Framework XAML Services implementations.</source>
          <target state="translated">Les constructeurs sont implémentées par <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> généralement lève une exception si un nom initial n’est pas spécifié ; par conséquent, attendez-vous à cette propriété doit être <ph id="ph2">`null`</ph> ou une chaîne vide, si vous utilisez des Services XAML .NET Framework par défaut implémentations.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source><bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept> and naming rules for CLR type and members are not an exact intersect.</source>
          <target state="translated"><bpt id="p1">[</bpt>XamlName, grammaire<ept id="p1">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept> et des règles d’affectation de noms pour le type CLR et les membres ne sont pas des intersections exactes.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>It is possible to declare a member name that is legal under CLR but not valid under XAML naming.</source>
          <target state="translated">Il est possible de déclarer un nom de membre qui est valide sous le CLR mais pas valide sous désignation XAML.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Name">
          <source>You should avoid this situation if possible.</source>
          <target state="translated">Vous devez éviter cette situation si possible.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects have the same value.</source>
          <target state="translated">Détermine si deux objets <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> spécifiés ont la même valeur.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> is the same as the value of <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la valeur de <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> est égale à la valeur de <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph> ; sinon <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> ou <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source>Determines whether two specified <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> objects have different values.</source>
          <target state="translated">Détermine si deux objets <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> spécifiés ont des valeurs différentes.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> differs from the value of <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la valeur de <ph id="ph2">&lt;paramref name="xamlMember1" /&gt;</ph> est différente de la valeur de <ph id="ph3">&lt;paramref name="xamlMember2" /&gt;</ph> ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>Gets the single XAML namespace URI that identifies the primary XAML namespace for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Obtient l'URI d'espace de noms XAML qui identifie l'espace de noms XAML principal de ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The identifier for the primary XAML namespace for this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, as a string.</source>
          <target state="translated">Identificateur pour l'espace de noms XAML principal de ce <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>, sous forme de chaîne.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;</ph> property provides the same value as calling <ph id="ph2">&lt;xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt;</ph> and then getting the first value string from the returned list.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A&gt;</ph> propriété fournit la même valeur que l’appel <ph id="ph2">&lt;xref:System.Xaml.XamlMember.GetXamlNamespaces%2A&gt;</ph> et l’obtention de la première chaîne de valeur de la liste retournée.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.PreferredXamlNamespace">
          <source>The preferred XAML namespace should be used when writing the member back to text or other representations that preserve XAML namespace information.</source>
          <target state="translated">L’espace de noms XAML par défaut doit être utilisé lors de l’écriture du membre dans le texte ou autres représentations qui conservent les informations d’espace de noms XAML.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> value, which indicates how a visual designer should process the member.</source>
          <target state="translated">Obtient une valeur <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> qui indique comment un concepteur visuel doit traiter le membre.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>A value of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph> enumeration.</source>
          <target state="translated">Valeur de l'énumération <ph id="ph1">&lt;see cref="T:System.ComponentModel.DesignerSerializationVisibility" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.SerializationVisibility">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" /&gt;</ph>.</source>
          <target state="translated">La valeur par défaut est <ph id="ph1">&lt;see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.TargetType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type where the <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated">Obtient le <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> du type dans lequel le <ph id="ph2">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> peut exister.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The type where the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> can exist.</source>
          <target state="translated">Type dans lequel le <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> peut exister.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The returned value is different for attachable and non-attachable members.</source>
          <target state="translated">La valeur retournée est différente pour les membres pouvant être attachés et non-pouvant être attachée.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>For non-attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> returns <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</source>
          <target state="translated">Pour les membres non attachables, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TargetType%2A&gt;</ph> retourne <ph id="ph2">&lt;xref:System.Xaml.XamlMember.DeclaringType%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>For attachable members, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> returns a result that is based on this logic:</source>
          <target state="translated">Pour les membres pouvant être attachés, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> retourne un résultat qui est basé sur cette logique :</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>If reflection cannot resolve a backing (<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> <ph id="ph2">`true`</ph>), this method returns an internal constant that represents a generic object type.</source>
          <target state="translated">Si la réflexion ne peut pas résoudre un stockage (<ph id="ph1">&lt;xref:System.Xaml.XamlMember.IsUnknown%2A&gt;</ph> <ph id="ph2">`true`</ph>), cette méthode retourne une constante interne qui représente un type d’objet générique.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>If the previous condition does not apply, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> is called.</source>
          <target state="translated">Si la condition précédente ne s’applique pas, <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> est appelée.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>The default implementation returns a <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> that is based on examining the methods that implement the <ph id="ph2">`get`</ph> and <ph id="ph3">`set`</ph> accessors.</source>
          <target state="translated">L’implémentation par défaut retourne un <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> basé sur l’examen des méthodes qui implémentent le <ph id="ph2">`get`</ph> et <ph id="ph3">`set`</ph> accesseurs.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TargetType">
          <source>A class might override <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> to use a different behavior such as other metadata forms that might report target types for attachable members.</source>
          <target state="translated">Une classe peut substituer <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupTargetType%2A&gt;</ph> à utiliser un comportement différent tel que d’autres formes de métadonnées qui peut-être signaler des types de cibles pour les membres pouvant être attachés.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.ToString">
          <source>Returns a string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Retourne une représentation sous forme de chaîne de <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="M:System.Xaml.XamlMember.ToString">
          <source>A string representation of this <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</source>
          <target state="translated">Représentation sous forme de chaîne de <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xaml.XamlMember.ToString">
          <source>This implementation returns <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>.</source>
          <target state="translated">Cette implémentation retourne <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Name%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.Type">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated">Obtient le <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> du type qui est utilisé par le membre.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> of the type that is used by the member.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.XamlType" /&gt;</ph> du type qui est utilisé par le membre.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>This occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">Cela se produit lorsque la logique de réflexion interne initiale n’a pas déjà défini les informations.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>In the default behavior (no <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> override), the returned <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> can have different conceptual meanings.</source>
          <target state="translated">Dans le comportement par défaut (aucun <ph id="ph1">&lt;xref:System.Xaml.XamlMember.LookupType%2A&gt;</ph> remplacer), retourné <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> peut avoir des significations conceptuelles différentes.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>Which meaning applies depends on whether this <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> represents a property, method, or event, as the following list shows:</source>
          <target state="translated">Signification dépend de si cela <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> représente une propriété, une méthode ou un événement, comme le montre la liste suivante :</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For a property, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the type that sets the property or is returned by the property.</source>
          <target state="translated">Pour une propriété, retournée <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> est le type qui définit la propriété ou est retourné par la propriété.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For an event, the returned <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the required event handler type (a delegate in a CLR implementation).</source>
          <target state="translated">Pour un événement, retourné <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> est le type de gestionnaire d’événements requis (délégué dans une implémentation CLR).</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>For a method, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> is the return type of that method, which may be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Pour une méthode, <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> est le type de retour de cette méthode, qui peut être <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.Type">
          <source>In each case, the XAML schema context is used to evaluate the XAML type from the backing type.</source>
          <target state="translated">Dans chaque cas, le contexte de schéma XAML est utilisé pour évaluer le type XAML à partir du type de stockage.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which can be used for type conversion construction of XAML declared objects.</source>
          <target state="translated">Obtient un objet <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph>, qui peut être utilisé pour la construction de conversion de type des objets XAML déclarés.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> value, with a <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> constraint on the generic.</source>
          <target state="translated">Valeur <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> avec une contrainte <ph id="ph2">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> sur le générique.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupTypeConverter%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">Ce comportement se produit lorsque la logique de réflexion interne initiale n’a pas déjà défini les informations.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Implementations that return a non-null property value for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> are not necessarily a working <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
          <target state="translated">La valeur pour les implémentations qui retournent une propriété non null <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> ne sont pas nécessairement un <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The following is a list of possible non-null return values for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> and what these values represent:</source>
          <target state="translated">Voici une liste de valeurs de retour non null possibles pour <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph> et ce que ces valeurs représentent :</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports a type converter that is attributed specifically to that member or more generally to the target type of the converter.</source>
          <target state="translated">La valeur de retour signale un convertisseur de type qui est attribué spécifiquement à ce membre, ou plus généralement au type cible du convertisseur.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>This behavior is typically what most XAML type systems and XAML processors look for in order to instantiate a type converter and invoke its methods.</source>
          <target state="translated">Ce comportement est généralement quelles la plupart des systèmes de type XAML et les processeurs XAML recherchent pour instancier un convertisseur de type et appeler ses méthodes.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports a built-in value converter.</source>
          <target state="translated">La valeur de retour signale un convertisseur de valeurs intégrés.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>These converters exist for certain internal operations that are performed by a XAML writer.</source>
          <target state="translated">Ces convertisseurs existent pour certaines opérations internes qui sont effectuées par un writer XAML.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>In particular, these built-in value converters convert the raw attribute string values to the XAML language-level primitives.</source>
          <target state="translated">En particulier, ces convertisseurs de valeurs intégrés convertissent les valeurs de chaîne brute d’attribut pour les primitives de langage XAML.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>For the .NET Framework XAML Services implementation, these built-in type conversions often forward to a type converter that is defined in the System assembly.</source>
          <target state="translated">Pour l’implémentation de Services XAML .NET Framework, ces conversions de type intégré renvoient souvent à un convertisseur de type qui est défini dans l’assembly système.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>For example, a conversion for an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> value has built-in forwarded conversion, and therefore, the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt;</ph> value references <ph id="ph3">&lt;xref:System.ComponentModel.Int32Converter&gt;</ph>.</source>
          <target state="translated">Par exemple, une conversion pour un <ph id="ph1">&lt;xref:System.Int32&gt;</ph> valeur intègre transféré de conversion et par conséquent, le <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A&gt;</ph> valeur références <ph id="ph3">&lt;xref:System.ComponentModel.Int32Converter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>The return value reports the special case of an unconstrained object model; that is, the <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> has a <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> value of <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">La valeur de retour signale le cas spécial d’un modèle d’objet sans contrainte ; Autrement dit, le <ph id="ph1">&lt;xref:System.Xaml.XamlMember&gt;</ph> a un <ph id="ph2">&lt;xref:System.Xaml.XamlMember.Type%2A&gt;</ph> valeur <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> reports that the <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType&gt;</ph> is {<ph id="ph3">`Object}`</ph>.</source>
          <target state="translated">Dans ce cas, le <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;</ph> indique que le <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType&gt;</ph> est {<ph id="ph3">`Object}`</ph>.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>However, <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> is <ph id="ph2">`null`</ph> because no actual type or instance is available to perform this conversion.</source>
          <target state="translated">Toutefois, <ph id="ph1">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph> est <ph id="ph2">`null`</ph> , car aucun type ou une instance n’est disponible pour effectuer cette conversion.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>Instead, the object model behavior cannot be determined until run time, when the runtime of the specific technology determines the handling of its object graph.</source>
          <target state="translated">Au lieu de cela, le comportement du modèle objet ne peut pas être déterminé jusqu'à l’exécution, lorsque l’exécution de la technologie spécifique détermine la gestion de son graphique d’objet.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>If you can access a working <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> from <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>, you can invoke its conversion methods.</source>
          <target state="translated">Si vous pouvez accéder à une travail <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> de <ph id="ph2">&lt;xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A&gt;</ph>, vous pouvez appeler ses méthodes de conversion.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>However, many conversion methods rely on service context.</source>
          <target state="translated">Toutefois, de nombreuses méthodes de conversion s’appuient sur le contexte de service.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.TypeConverter">
          <source>If you do not have the same service context available that the type converter expects for its typical role of writing objects for object graphs, the converter methods can throw exceptions.</source>
          <target state="translated">Si vous n’avez pas le même contexte de service disponible que le convertisseur de type attend pour son rôle typique d’écriture d’objets pour les graphiques d’objets, les méthodes du convertisseur peuvent lever des exceptions.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>Gets the CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> that is available for a member that is constructed by <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph>, or <ph id="ph4">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>.</source>
          <target state="translated">Obtient le <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> du système de type CLR qui est disponible pour un membre construit par <ph id="ph2">&lt;see cref="T:System.Reflection.PropertyInfo" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Reflection.MethodInfo" /&gt;</ph> ou <ph id="ph4">&lt;see cref="T:System.Reflection.EventInfo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>CLR type system <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> information, as cast from the initial constructor parameters.</source>
          <target state="translated">Informations <ph id="ph1">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> du système de type CLR utilisées pour le transtypage à partir des paramètres du constructeur initial.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> that is constructed with the <ph id="ph2">&lt;see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /&gt;</ph> signature returns <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Un<ph id="ph1">&lt;see cref="T:System.Xaml.XamlMember" /&gt;</ph> construit avec la signature <ph id="ph2">&lt;see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /&gt;</ph> retourne <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.UnderlyingMember">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.UnderlyingMember%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> object, which is used for value serialization of XAML declared objects.</source>
          <target state="translated">Obtient un objet <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> utilisé pour la sérialisation de valeur des objets XAML déclarés.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> with <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> constraint on the generic.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xaml.Schema.XamlValueConverter`1" /&gt;</ph> avec la contrainte <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> sur le générique.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Calling <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt;</ph> or a specific override of that method.</source>
          <target state="translated">Appel de <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> appelle <ph id="ph2">&lt;xref:System.Xaml.XamlMember.LookupValueSerializer%2A&gt;</ph> ou une substitution spécifique de cette méthode.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>This behavior occurs when the initial internal reflection logic has not already set the information.</source>
          <target state="translated">Ce comportement se produit lorsque la logique de réflexion interne initiale n’a pas déjà défini les informations.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>Not all cases that return a non-null property value for <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> are necessarily a working <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</source>
          <target state="translated">Valeur de pas tous les cas qui retournent une propriété non null pour <ph id="ph1">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph> sont nécessairement un <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xaml.XamlMember.ValueSerializer">
          <source>See <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>; the same considerations apply to <ph id="ph2">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</source>
          <target state="translated">Consultez <ph id="ph1">&lt;xref:System.Xaml.XamlMember.TypeConverter%2A&gt;</ph>; les mêmes considérations s’appliquent à <ph id="ph2">&lt;xref:System.Xaml.XamlMember.ValueSerializer%2A&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>