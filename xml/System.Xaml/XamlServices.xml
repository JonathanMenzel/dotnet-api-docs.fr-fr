<Type Name="XamlServices" FullName="System.Xaml.XamlServices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9e1f1d48af20e3873a75e26dc3e1e7ba760293b7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720593" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class XamlServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit XamlServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlServices" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlServices abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fournit des services de niveau supérieur (méthodes statiques) pour les tâches XAML communes de lecture XAML et d'écriture d'un graphique d'objet, ou la lecture d'un graphique d'objet et l'écriture de la sortie de fichier XAML à des fins de sérialisation.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les modes de la <xref:System.Xaml.XamlServices> classe qui sont utilisés dans le code XAML courants lire et écrire des scénarios qui s’appuient sur la création d’instances de lecteurs et writers XAML. Ces lecteurs et writers sont des implémentations internes spécialisées de classes publiques, telles que <xref:System.Xml.XmlReader>, <xref:System.Xaml.XamlXmlReader>, et <xref:System.Xaml.XamlObjectWriter>. Pour utiliser <xref:System.Xaml.XamlServices> pour la plupart des scénarios, vous pouvez compter sur les implémentations internes par défaut pour obtenir les résultats que vous souhaitez. Pour des scénarios plus spécialisés, vous pouvez définir des lecteurs et writers vous-même et puis les passer comme arguments pour les surcharges de la <xref:System.Xaml.XamlServices> méthodes.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> pas le recommandée lors de la lecture ou XAML écrit API si vous traitez des types définis par WPF, ou des types basés sur WPF. Pour [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] utilisation, utilisez <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> pour la lecture ou de chargement XAML (ou BAML) ; et <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> pour l’écriture du XAML. Ces classes utilisent les API des Services XAML .NET Framework et les lecteurs XAML et les writers XAML en interne dans leur implémentation ; Toutefois, elles fournissent également prise en charge et le contexte de schéma XAML spécialisé pour les concepts propres à WPF, tels que des optimisations pour les propriétés de dépendance et les types connus WPF.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Charge la source pour un lecteur XAML et écrit sa sortie sous la forme d'un graphique d'objet.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Flux de données à charger en tant qu'entrée.</param>
        <summary>Charge une source <see cref="T:System.IO.Stream" /> pour un lecteur XAML et écrit sa sortie sous la forme d'un graphique d'objet.</summary>
        <returns>Graphique d'objet écrit en tant que sortie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Signatures différentes de celles de la <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> méthode spécifier différents types d’entrées de la source XAML. Le <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> implémentation interne crée d’abord un <xref:System.Xml.XmlReader> en appelant <xref:System.Xml.XmlReader.Create%28System.IO.Stream%29> , puis crée une nouvelle instance de spécialisé <xref:System.Xaml.XamlReader> qui traite l’entrée.  
  
 Dans l’ordre pour la <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> appeler pour créer un graphique d’objet, les éléments suivants doivent être remplies :  
  
-   La source est bien formée et XML valid.  
  
-   La source est XAML valide au niveau du langage.  
  
-   Les types XAML qui sont spécifiées dans la source XAML doit correspondre à des types de stockage dans les espaces de noms XAML appropriés. Par exemple, les types XAML pour les espaces de noms WPF peuvent être résolus à un espace de noms XAML WPF comme spécifié dans le code XAML ; les assemblys pour WPF doivent être inclus dans le projet ou disponibles dans le temps d’exécution ; et ainsi de suite.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> n’est pas la lecture de XAML recommandée ou écriture API si vous traitez [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] types, ou des types basés sur [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Pour [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] utilisation, utilisez <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> pour la lecture ou de chargement de XAML ; et <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> pour l’écriture du XAML. Ces classes utilisent <xref:System.Xaml> API en interne dans leur implémentation ; Toutefois, ils prennent également en charge des concepts WPF qui influencent la nature de la lecture et d’écriture, telles que des optimisations pour les propriétés de dépendance XAML.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <see cref="T:System.IO.TextReader" /> à utiliser en tant que base pour le <see cref="T:System.Xml.XmlReader" /> créé.</param>
        <summary>Crée un lecteur XAML à partir d'un <see cref="T:System.IO.TextReader" />, et retourne un graphique d'objet.</summary>
        <returns>Graphique d'objet retourné.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Afin de retourner le graphique d’objets, la `textReader` entrée doit être construite à l’aide de son entrée pertinente. Par exemple, il doit passer un <xref:System.IO.StringReader> qui est construit à l’aide d’une entrée de chaîne XAML valide pour le <xref:System.IO.StringReader.%23ctor%28System.String%29> constructeur.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textReader" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (fileName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nom de fichier à charger et à utiliser en tant que source.</param>
        <summary>Charge une source <see cref="T:System.IO.Stream" /> pour un lecteur XAML et retourne un graphique d'objet.</summary>
        <returns>Graphique d'objet retourné.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Signatures différentes de celles de la <xref:System.Xaml.XamlServices.Load%2A> méthode spécifier différents types d’entrées de la source XAML. Le <xref:System.Xaml.XamlServices.Load%2A> implémentation interne crée d’abord un <xref:System.Xml.XmlReader> en appelant <xref:System.Xml.XmlReader.Create%28System.String%29> , puis crée une nouvelle instance de spécialisé <xref:System.Xaml.XamlReader> qui traite l’entrée.  
  
 Dans l’ordre pour la <xref:System.Xaml.XamlServices.Load%28System.String%29> appeler pour créer un graphique d’objet, les éléments suivants doivent être remplies :  
  
-   La source est bien formée et XML valid.  
  
-   La source est XAML valide au niveau du langage.  
  
-   Les types XAML qui sont spécifiées dans la source XAML doit correspondre à des types de stockage dans les espaces de noms XAML appropriés. Par exemple, les types XAML pour les espaces de noms WPF peuvent être résolus à un espace de noms XAML WPF comme spécifié dans le code XAML ; les assemblys pour WPF doivent être inclus dans le projet ou être disponibles dans le temps d’exécution ; et ainsi de suite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          L'entrée <paramref name="fileName" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader xamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader xamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ xamlReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="xamlReader">Implémentation du lecteur XAML à utiliser comme lecteur pour cette opération <see langword="Load" />.</param>
        <summary>Charge une implémentation de lecteur XAML spécifique et retourne un graphique d'objet.</summary>
        <returns>Graphique d'objet retourné.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez généralement utiliser cette signature uniquement dans les cas suivants :  
  
-   Vous avez défini votre propre implémentation d’un <xref:System.Xaml.XamlReader>.  
  
-   Vous avez spécifié des paramètres pour un <xref:System.Xaml.XamlReader> qui diffèrent des paramètres par défaut.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          L'entrée <paramref name="xamlReader" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ xmlReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader">Implémentation de <see cref="T:System.Xml.XmlReader" /> à utiliser comme lecteur pour cette opération <see langword="Load" />.</param>
        <summary>Charge une implémentation de lecteur XML spécifique et retourne un graphique d'objet.</summary>
        <returns>Graphique d'objet de sortie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez généralement utiliser cette signature uniquement si vous avez défini votre propre implémentation d’un <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          L'entrée <paramref name="xamlReader" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xaml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xaml) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xaml As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xaml);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xaml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xaml">Entrée de chaîne XAML à analyser.</param>
        <summary>Lit le code XAML comme sortie de chaîne et retourne un graphique d'objet.</summary>
        <returns>Graphique d'objet retourné.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans l’ordre pour la <xref:System.Xaml.XamlServices.Parse%2A> appeler pour créer une arborescence d’objets, les éléments suivants doivent être remplies :  
  
-   Le `xaml` entrée est bien formée et XML valid.  
  
-   Le `xaml` entrée est XAML valide au niveau du langage.  
  
-   Les types XAML qui sont spécifiés dans la `xaml` entrée doit correspondre à la sauvegarde des types dans les espaces de noms XAML appropriés. Par exemple, les types XAML pour un espace de noms WPF peuvent être résolus à un espace de noms XAML WPF comme spécifié dans le code XAML ; les assemblys pour WPF doivent être inclus dans le projet ou être disponibles dans le temps d’exécution ; et ainsi de suite.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> n’est pas la lecture de XAML recommandée ou écriture API si vous traitez [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] types, ou des types basés sur [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Pour [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] utilisation, utilisez <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> pour la lecture ou de chargement XAML, et <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> pour l’écriture du XAML. Ces classes utilisent <xref:System.Xaml> API en interne dans leur implémentation ; Toutefois, ils prennent également en charge des concepts WPF qui influencent la nature de la lecture et d’écriture, telles que des optimisations pour les propriétés de dépendance XAML.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          L'entrée <paramref name="xaml" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Traite un graphique d'objet fourni pour en faire une représentation de nœud XAML, puis un format de sortie pour la sérialisation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static string Save (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Save(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Save (instance As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Save(System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Racine du graphique d'objet à traiter.</param>
        <summary>Traite une arborescence d'objets fournie pour en faire une représentation de nœud XAML, puis retourne une représentation sous forme de chaîne du code XAML de sortie.</summary>
        <returns>Sortie de balisage XAML sous forme de chaîne.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La sortie de cette méthode est la `ToString` résultat d’une <xref:System.Xml.XmlWriter> qui est créé par l’appel de méthode. Que <xref:System.Xml.XmlWriter> est créé en utilisant les paramètres suivants : <xref:System.Xml.XmlWriterSettings.Indent%2A?displayProperty=nameWithType> est `true`; et <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A?displayProperty=nameWithType> est `true`.  
  
 La chaîne retournée peut être chargée en tant que code XML valide via la <xref:System.Xml.XmlReader.Create%2A> méthode si vous avez traité la chaîne dans un flux de données, ou dans un lecteur plus spécifiquement dédié pour le code XAML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.Stream stream, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.Stream stream, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::Stream ^ stream, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream">Flux de données de destination.</param>
        <param name="instance">Racine du graphique d'objet à traiter.</param>
        <summary>Traite un graphique d'objet pour en faire une représentation de nœud XAML, puis un flux de sortie pour la sérialisation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> n’est pas la lecture de XAML recommandée ou écriture API si vous traitez [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] types, ou des types basés sur [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Pour [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] utilisation, utilisez <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> pour la lecture ou de chargement de XAML ; et <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> pour l’écriture du XAML. Ces classes utilisent <xref:System.Xaml> API en interne dans leur implémentation ; Toutefois, ils prennent également en charge des concepts WPF qui influencent la nature de la lecture et d’écriture, telles que des optimisations pour les propriétés de dépendance XAML.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          L'entrée <paramref name="stream" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.TextWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.TextWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As TextWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::TextWriter ^ writer, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">
          <see cref="T:System.IO.TextWriter" /> qui écrit la sortie.</param>
        <param name="instance">Racine du graphique d'objet à traiter.</param>
        <summary>Traite un graphique d'objet fourni pour en faire une représentation de nœud XAML, puis une sortie transmise au <see cref="T:System.IO.TextWriter" /> fourni.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          L'entrée <paramref name="writer" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (string fileName, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(string fileName, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (fileName As String, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::String ^ fileName, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName">Nom et emplacement du fichier dans lequel écrire la sortie.</param>
        <param name="instance">Racine du graphique d'objet à traiter.</param>
        <summary>Traite un graphique d'objet fourni pour en faire une représentation de nœud XAML, puis l'écrit dans un fichier de sortie à un emplacement fourni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `fileName` la valeur du paramètre est utilisée comme le `outputFileName` d’entrée pour un appel à <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>, ce qui crée un <xref:System.Xml.XmlWriter> dans le cadre de l’appel de méthode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fileName" /> est une chaîne vide.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xaml.XamlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xaml.XamlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XamlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xaml::XamlWriter ^ writer, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xaml.XamlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">Implémentation de <see cref="T:System.Xaml.XamlWriter" /> à utiliser.</param>
        <param name="instance">Racine du graphique d'objet à traiter.</param>
        <summary>Traite un graphique d'objet fourni dans une représentation de nœud XAML, puis l'écrit dans le writer XAML fourni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez généralement utiliser cette signature uniquement dans les cas suivants :  
  
-   Vous avez défini votre propre implémentation d’un <xref:System.Xaml.XamlWriter>.  
  
-   Vous avez spécifié des paramètres pour le <xref:System.Xaml.XamlWriter> qui diffèrent des paramètres par défaut.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          L'entrée <paramref name="writer" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xml.XmlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xml.XmlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XmlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xml::XmlWriter ^ writer, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">Implémentation de <see cref="T:System.Xml.XmlWriter" /> à utiliser.</param>
        <param name="instance">Racine du graphique d'objet à traiter.</param>
        <summary>Traite un graphique d'objet fourni pour en faire une représentation de nœud XAML, puis l'écrit dans le <see cref="T:System.Xml.XmlWriter" /> fourni.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          L'entrée <paramref name="writer" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Connecte un <see cref="T:System.Xaml.XamlReader" /> et un <see cref="T:System.Xaml.XamlWriter" /> afin d'utiliser un intermédiaire de jeu de nœuds XAML commun. Transforme potentiellement le contenu, en fonction des types de lecteurs et de writers fournis.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
      </Parameters>
      <Docs>
        <param name="xamlReader">Implémentation de <see cref="T:System.Xaml.XamlReader" /> à utiliser.</param>
        <param name="xamlWriter">
          <see cref="T:System.Xaml.XamlWriter" /> à utiliser.</param>
        <summary>Connecte un <see cref="T:System.Xaml.XamlReader" /> et un <see cref="T:System.Xaml.XamlWriter" /> pour utiliser un intermédiaire de jeu de nœuds XAML commun. Transforme potentiellement le contenu, en fonction des types de lecteurs et de writers fournis.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est un wrapper autour de <xref:System.Xaml.XamlServices.Transform%28System.Xaml.XamlReader%2CSystem.Xaml.XamlWriter%2CSystem.Boolean%29>, où `closeWriter` est spécifié en tant que `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          L'entrée de <paramref name="xamlReader" /> ou <paramref name="xamlWriter" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlException">Le contexte de schéma XAML ne correspond pas entre le <paramref name="xamlReader" /> fourni et <paramref name="xamlWriter" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter, bool closeWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter, bool closeWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter, bool closeWriter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
        <Parameter Name="closeWriter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="xamlReader">Implémentation de <see cref="T:System.Xaml.XamlReader" /> à utiliser.</param>
        <param name="xamlWriter">
          <see cref="T:System.Xaml.XamlWriter" /> à utiliser.</param>
        <param name="closeWriter">
          <see langword="true" /> pour fermer le writer une fois l'appel terminé ; <see langword="false" /> pour laisser le writer actif à la dernière position écrite.</param>
        <summary>Connecte un <see cref="T:System.Xaml.XamlReader" /> et un <see cref="T:System.Xaml.XamlWriter" /> pour utiliser un intermédiaire de jeu de nœuds XAML commun. Transforme potentiellement le contenu, en fonction des types de lecteurs et de writers fournis. Fournit un paramètre pour spécifier s'il faut fermer le writer une fois l'appel terminé.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          L'entrée de <paramref name="xamlReader" /> ou <paramref name="xamlWriter" /> est <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlException">Le contexte de schéma XAML ne correspond pas entre le <paramref name="xamlReader" /> fourni et <paramref name="xamlWriter" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>