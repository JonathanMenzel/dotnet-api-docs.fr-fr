<Type Name="ActivityDesigner" FullName="System.Workflow.ComponentModel.Design.ActivityDesigner">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a908643a34ba9006ed2d4c2792c6c3f8f54688c3" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55359211" /></Metadata><TypeSignature Language="C#" Value="public class ActivityDesigner : IDisposable, System.ComponentModel.Design.IDesignerFilter, System.ComponentModel.Design.IRootDesigner, System.Drawing.Design.IToolboxUser, System.Workflow.ComponentModel.Design.IPersistUIState, System.Workflow.ComponentModel.Design.IWorkflowRootDesigner" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ActivityDesigner extends System.Object implements class System.ComponentModel.Design.IDesigner, class System.ComponentModel.Design.IDesignerFilter, class System.ComponentModel.Design.IRootDesigner, class System.Drawing.Design.IToolboxUser, class System.IDisposable, class System.Workflow.ComponentModel.Design.IPersistUIState, class System.Workflow.ComponentModel.Design.IWorkflowRootDesigner" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />
  <TypeSignature Language="VB.NET" Value="Public Class ActivityDesigner&#xA;Implements IDesignerFilter, IDisposable, IPersistUIState, IRootDesigner, IToolboxUser, IWorkflowRootDesigner" />
  <TypeSignature Language="C++ CLI" Value="public ref class ActivityDesigner : IDisposable, System::ComponentModel::Design::IDesignerFilter, System::ComponentModel::Design::IRootDesigner, System::Drawing::Design::IToolboxUser, System::Workflow::ComponentModel::Design::IPersistUIState, System::Workflow::ComponentModel::Design::IWorkflowRootDesigner" />
  <TypeSignature Language="F#" Value="type ActivityDesigner = class&#xA;    interface IDisposable&#xA;    interface IDesignerFilter&#xA;    interface IDesigner&#xA;    interface IToolboxUser&#xA;    interface IPersistUIState&#xA;    interface IWorkflowRootDesigner&#xA;    interface IRootDesigner" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IDesigner</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IDesignerFilter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.Design.IRootDesigner</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Drawing.Design.IToolboxUser</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Workflow.ComponentModel.Design.IPersistUIState</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Workflow.ComponentModel.Design.IWorkflowRootDesigner</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer(typeof(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer), typeof(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Workflow.ComponentModel.Design.ActivityDesignerTheme(typeof(System.Workflow.ComponentModel.Design.ActivityDesignerTheme))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("Microsoft.Workflow.VSDesigner", System.ComponentModel.ToolboxItemFilterType.Require)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Workflow.ComponentModel.Design.ActivitySet", System.ComponentModel.ToolboxItemFilterType.Custom)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit une classe de base obligatoire pour tous les composants de concepteur d'activités.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Tous les composants de concepteur d'activités dérivent de <xref:System.Workflow.ComponentModel.Design.ActivityDesigner>. Le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> fournit un concepteur simple qui permet à l'utilisateur de concevoir visuellement des activités en mode Création.  
  
 <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> fournit un mécanisme simple pour les activités de sorte qu'elles puissent participer à la restitution du workflow sur l'aire de conception.  
  
 <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> permet à l'utilisateur de personnaliser la disposition et le dessin associés à l'activité.  
  
 <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> permet à l'utilisateur d'étendre les métadonnées associées à l'activité.  
  
   
  
## Examples  
 L'exemple suivant illustre une implémentation complète d'un <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> pour une activité personnalisée. Le concepteur a un indicateur qui peut être activé/désactivé pour permettre à la classe de base <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> de contrôler la peinture ou d'utiliser les diverses méthodes de la classe <xref:System.Workflow.ComponentModel.Design.ActivityDesignerPaint> pour dessiner l'activité.  
  
 [!code-csharp[WF_Samples#72](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#72)]
 [!code-vb[WF_Samples#72](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#72)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ActivityDesigner ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ActivityDesigner();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityObject">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.AccessibleObject AccessibilityObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AccessibleObject AccessibilityObject" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.AccessibilityObject" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AccessibilityObject As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::AccessibleObject ^ AccessibilityObject { System::Windows::Forms::AccessibleObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessibilityObject : System.Windows.Forms.AccessibleObject" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.AccessibilityObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Windows.Forms.AccessibleObject" /> que les applications d'accessibilité utilisent afin d'adapter l'interface utilisateur des applications pour les personnes présentant un handicap.</summary>
        <value><see cref="T:System.Windows.Forms.AccessibleObject" /> associé au contrôle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si aucun <xref:System.Windows.Forms.AccessibleObject> n'est actuellement assigné au contrôle, une nouvelle instance est créée.  
  
> [!NOTE]
>  Pour obtenir ou définir la propriété <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.AccessibilityObject%2A>, vous devez ajouter une référence à l'assembly d'accessibilité installé avec le .NET Framework.  
  
 Pour plus d'informations sur les objets accessibles, consultez la section Active Accessibility de MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activity">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Activity Activity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.Activity Activity" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Activity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Activity As Activity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::ComponentModel::Activity ^ Activity { System::Workflow::ComponentModel::Activity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Activity : System.Workflow.ComponentModel.Activity" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.Activity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Workflow.ComponentModel.Activity" /> associé au concepteur.</summary>
        <value><see cref="T:System.Workflow.ComponentModel.Activity" /> associé au concepteur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Workflow.ComponentModel.Activity> pour accéder aux propriétés et événements de l'activité.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un <see cref="T:System.Drawing.Rectangle" /> qui contient la valeur pour le rectangle englobant du concepteur en coordonnées logiques.</summary>
        <value><see cref="T:System.Drawing.Rectangle" /> qui englobe le concepteur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le rectangle retourné par la méthode de limites pour déterminer la zone englobée par le concepteur plus la zone de sélection.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser la propriété <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.Bounds%2A> pour déterminer le nouveau rectangle englobant pour un glyphe affiché sur un <xref:System.Workflow.ComponentModel.Design.ActivityDesigner>.  
  
 Cet exemple de code fait partie de l'exemple du Kit de développement logiciel Workflow Monitor (SDK) et provient du fichier DesignerGlyphProvider.cs. Pour plus d’informations, consultez [Workflow Monitor](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741706(v=vs.90)).  
  
 [!code-csharp[WF_Samples#133](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#133)]
 [!code-vb[WF_Samples#133](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#133)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms741706(v=vs.90)">Analyse de flux de travail</related>
      </Docs>
    </Member>
    <Member MemberName="CanBeParentedTo">
      <MemberSignature Language="C#" Value="public virtual bool CanBeParentedTo (System.Workflow.ComponentModel.Design.CompositeActivityDesigner parentActivityDesigner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanBeParentedTo(class System.Workflow.ComponentModel.Design.CompositeActivityDesigner parentActivityDesigner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.CanBeParentedTo(System.Workflow.ComponentModel.Design.CompositeActivityDesigner)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanBeParentedTo (parentActivityDesigner As CompositeActivityDesigner) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanBeParentedTo(System::Workflow::ComponentModel::Design::CompositeActivityDesigner ^ parentActivityDesigner);" />
      <MemberSignature Language="F#" Value="abstract member CanBeParentedTo : System.Workflow.ComponentModel.Design.CompositeActivityDesigner -&gt; bool&#xA;override this.CanBeParentedTo : System.Workflow.ComponentModel.Design.CompositeActivityDesigner -&gt; bool" Usage="activityDesigner.CanBeParentedTo parentActivityDesigner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentActivityDesigner" Type="System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />
      </Parameters>
      <Docs>
        <param name="parentActivityDesigner"><see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> qui peut être défini potentiellement comme parent.</param>
        <summary>Retourne une valeur qui indique si une <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> peut être définie comme le parent de l'activité associée au concepteur.</summary>
        <returns><see langword="true" /> si un <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> peut être défini comme le parent de l'activité associée au concepteur ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est utile pour vérifier si un concepteur peut être apparenté à un <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> spécifique.  
  
 Cette méthode est appelée lorsqu'un utilisateur initie une opération d'insertion, telle qu'un glisser-déplacer ou un collage.  
  
   
  
## Examples  
 L'exemple suivant montre comment s'assurer qu'une activité personnalisée est apparentée à des types d'activités spécifiques. Dans ce cas, l'activité personnalisée peut être apparentée uniquement à un `ParallelIfActivity`.  
  
 [!code-csharp[WF_Samples#23](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#23)]
 [!code-vb[WF_Samples#23](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConnect">
      <MemberSignature Language="C#" Value="protected virtual bool CanConnect (System.Workflow.ComponentModel.Design.ConnectionPoint source, System.Workflow.ComponentModel.Design.ConnectionPoint target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CanConnect(class System.Workflow.ComponentModel.Design.ConnectionPoint source, class System.Workflow.ComponentModel.Design.ConnectionPoint target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.CanConnect(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CanConnect (source As ConnectionPoint, target As ConnectionPoint) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool CanConnect(System::Workflow::ComponentModel::Design::ConnectionPoint ^ source, System::Workflow::ComponentModel::Design::ConnectionPoint ^ target);" />
      <MemberSignature Language="F#" Value="abstract member CanConnect : System.Workflow.ComponentModel.Design.ConnectionPoint * System.Workflow.ComponentModel.Design.ConnectionPoint -&gt; bool&#xA;override this.CanConnect : System.Workflow.ComponentModel.Design.ConnectionPoint * System.Workflow.ComponentModel.Design.ConnectionPoint -&gt; bool" Usage="activityDesigner.CanConnect (source, target)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Design.IConnectableDesigner.CanConnect(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Workflow.ComponentModel.Design.ConnectionPoint" />
        <Parameter Name="target" Type="System.Workflow.ComponentModel.Design.ConnectionPoint" />
      </Parameters>
      <Docs>
        <param name="source"><see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> à vérifier sur le concepteur d'activité actuel.</param>
        <param name="target"><see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> à vérifier sur le concepteur d'activité cible.</param>
        <summary>Retourne une valeur qui indique si une connexion peut être créée entre le point de connexion spécifié sur le concepteur d'activités actuel et le point de connexion spécifié sur un concepteur d'activités cible.</summary>
        <returns><see langword="true" /> pour indiquer qu'une connexion peut être créée entre la source et la cible ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À moins d'être substitué dans une classe dérivée, <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.CanConnect%2A> retourne toujours `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Workflow.ComponentModel.Design.WorkflowView CreateView (System.ComponentModel.Design.ViewTechnology viewTechnology);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Workflow.ComponentModel.Design.WorkflowView CreateView(valuetype System.ComponentModel.Design.ViewTechnology viewTechnology) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.CreateView(System.ComponentModel.Design.ViewTechnology)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Workflow::ComponentModel::Design::WorkflowView ^ CreateView(System::ComponentModel::Design::ViewTechnology viewTechnology);" />
      <MemberSignature Language="F#" Value="abstract member CreateView : System.ComponentModel.Design.ViewTechnology -&gt; System.Workflow.ComponentModel.Design.WorkflowView&#xA;override this.CreateView : System.ComponentModel.Design.ViewTechnology -&gt; System.Workflow.ComponentModel.Design.WorkflowView" Usage="activityDesigner.CreateView viewTechnology" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.WorkflowView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewTechnology" Type="System.ComponentModel.Design.ViewTechnology" />
      </Parameters>
      <Docs>
        <param name="viewTechnology">Le ViewTechnology à utiliser pour créer la vue de workflow.</param>
        <summary>Crée une vue de workflow pour le concepteur d'activité actuel à l'aide du ViewTechnology spécifié.</summary>
        <returns><see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> qui contient le concepteur d'activités actuel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À moins d’être substitué dans une classe dérivée, <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.CreateView%2A> affiche la disposition au moment du design par défaut pour l’activité.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DesignerActions">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.DesignerAction&gt; DesignerActions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Design.DesignerAction&gt; DesignerActions" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.DesignerActions" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property DesignerActions As ReadOnlyCollection(Of DesignerAction)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::ComponentModel::Design::DesignerAction ^&gt; ^ DesignerActions { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::ComponentModel::Design::DesignerAction ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DesignerActions : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.DesignerAction&gt;" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.DesignerActions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.DesignerAction&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le tableau d'actions associées aux erreurs de configuration.</summary>
        <value>Tableau en lecture seule de <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode retourne un tableau en lecture seule d'actions associées aux erreurs de configuration. Cette liste contient toutes les erreurs de configuration et de validation pour l’Activité qui peuvent être présentées à l’utilisateur final ou peuvent être utilisées par programme par le système qui héberge le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DesignerTheme">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Design.ActivityDesignerTheme DesignerTheme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.Design.ActivityDesignerTheme DesignerTheme" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.DesignerTheme" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesignerTheme As ActivityDesignerTheme" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::ComponentModel::Design::ActivityDesignerTheme ^ DesignerTheme { System::Workflow::ComponentModel::Design::ActivityDesignerTheme ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DesignerTheme : System.Workflow.ComponentModel.Design.ActivityDesignerTheme" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.DesignerTheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.ActivityDesignerTheme</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le thème de concepteur actuel pour le concepteur d'activités.</summary>
        <value><see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> qui contient des paramètres de thème pour le concepteur d'activités.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Libère les ressources non managées utilisées par <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> et libère éventuellement les ressources managées.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="activityDesigner.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libère les ressources non managées utilisées par <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> et libère éventuellement les ressources managées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="activityDesigner.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> si le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> est éliminé ; <see langword="false" /> si le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> est finalisé.</param>
        <summary>Libère les ressources utilisées par la classe <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoDefaultAction">
      <MemberSignature Language="C#" Value="protected virtual void DoDefaultAction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DoDefaultAction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.DoDefaultAction" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DoDefaultAction ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DoDefaultAction();" />
      <MemberSignature Language="F#" Value="abstract member DoDefaultAction : unit -&gt; unit&#xA;override this.DoDefaultAction : unit -&gt; unit" Usage="activityDesigner.DoDefaultAction " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesigner.DoDefaultAction</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Effectue l'action d'interface utilisateur par défaut associée au concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour exécuter l'action d'interface utilisateur par défaut associée au concepteur. Les actions d'interface utilisateur par défaut peuvent inclure l'émission de la méthode associée à l'événement par défaut dans le fichier code-beside lorsqu'un utilisateur double-clique sur l'aire du concepteur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableVisualResizing">
      <MemberSignature Language="C#" Value="protected internal virtual bool EnableVisualResizing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableVisualResizing" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.EnableVisualResizing" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property EnableVisualResizing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool EnableVisualResizing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnableVisualResizing : bool" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.EnableVisualResizing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si le concepteur d'activité peut être redimensionné dans un concepteur de formes libres.</summary>
        <value><see langword="true" /> si le concepteur d'activité peut être redimensionné dans un <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À moins d'être substitué dans une classe dérivée, <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.EnableVisualResizing%2A> retourne toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureVisible() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.EnsureVisible" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureVisible ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnsureVisible();" />
      <MemberSignature Language="F#" Value="member this.EnsureVisible : unit -&gt; unit" Usage="activityDesigner.EnsureVisible " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Déplace la zone visible de l'écran afin de garantir que le concepteur spécifié est visible.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette méthode pour déplacer la zone visible de l'aire du concepteur pour afficher le concepteur d'intérêt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ActivityDesigner ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!ActivityDesigner ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="activityDesigner.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, permet à un objet de nettoyer toutes les ressources de façon déterministe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode nettoie les ressources en appelant <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.Dispose%2A>(`false`). Substitue <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.Dispose%2A> pour personnaliser le nettoyage.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConnectionPoints">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.ConnectionPoint&gt; GetConnectionPoints (System.Workflow.ComponentModel.Design.DesignerEdges edges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Design.ConnectionPoint&gt; GetConnectionPoints(valuetype System.Workflow.ComponentModel.Design.DesignerEdges edges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetConnectionPoints(System.Workflow.ComponentModel.Design.DesignerEdges)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConnectionPoints (edges As DesignerEdges) As ReadOnlyCollection(Of ConnectionPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::ComponentModel::Design::ConnectionPoint ^&gt; ^ GetConnectionPoints(System::Workflow::ComponentModel::Design::DesignerEdges edges);" />
      <MemberSignature Language="F#" Value="abstract member GetConnectionPoints : System.Workflow.ComponentModel.Design.DesignerEdges -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.ConnectionPoint&gt;&#xA;override this.GetConnectionPoints : System.Workflow.ComponentModel.Design.DesignerEdges -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.ConnectionPoint&gt;" Usage="activityDesigner.GetConnectionPoints edges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.ConnectionPoint&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="edges" Type="System.Workflow.ComponentModel.Design.DesignerEdges" />
      </Parameters>
      <Docs>
        <param name="edges"><see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> avec lequel rassembler les points de connexion.</param>
        <summary>Retourne une collection en lecture seule de points de connexion pour le concepteur d'activités avec le <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> spécifié.</summary>
        <returns>Collection générique en lecture seule <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> utilisée comme points auxquels le concepteur d'activités peut se connecter à d'autres concepteurs d'activités.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tous les points de connexion sont en coordonnées logiques.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConnections">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Drawing.Point&gt; GetConnections (System.Workflow.ComponentModel.Design.DesignerEdges edges);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;valuetype System.Drawing.Point&gt; GetConnections(valuetype System.Workflow.ComponentModel.Design.DesignerEdges edges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetConnections(System.Workflow.ComponentModel.Design.DesignerEdges)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetConnections (edges As DesignerEdges) As ReadOnlyCollection(Of Point)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Drawing::Point&gt; ^ GetConnections(System::Workflow::ComponentModel::Design::DesignerEdges edges);" />
      <MemberSignature Language="F#" Value="abstract member GetConnections : System.Workflow.ComponentModel.Design.DesignerEdges -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Drawing.Point&gt;&#xA;override this.GetConnections : System.Workflow.ComponentModel.Design.DesignerEdges -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Drawing.Point&gt;" Usage="activityDesigner.GetConnections edges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Drawing.Point&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="edges" Type="System.Workflow.ComponentModel.Design.DesignerEdges" />
      </Parameters>
      <Docs>
        <param name="edges"><see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> sur lequel effectuer une interrogation relative aux points.</param>
        <summary>Retourne une collection en lecture seule de points que le concepteur utilise pour les connexions.</summary>
        <returns>Collection de points en lecture seule qui contient les connexions à utiliser pour le concepteur d'activités.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreviewImage">
      <MemberSignature Language="C#" Value="public System.Drawing.Image GetPreviewImage (System.Drawing.Graphics compatibleGraphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Image GetPreviewImage(class System.Drawing.Graphics compatibleGraphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetPreviewImage(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreviewImage (compatibleGraphics As Graphics) As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Image ^ GetPreviewImage(System::Drawing::Graphics ^ compatibleGraphics);" />
      <MemberSignature Language="F#" Value="member this.GetPreviewImage : System.Drawing.Graphics -&gt; System.Drawing.Image" Usage="activityDesigner.GetPreviewImage compatibleGraphics" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compatibleGraphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="compatibleGraphics">Objet <see cref="T:System.Drawing.Graphics" /> utilisé pour dessiner l'image.</param>
        <summary>Obtient l'image du concepteur d'activité sur le <see cref="T:System.Drawing.Graphics" /> spécifié.</summary>
        <returns>Objet <see cref="T:System.Drawing.Image" /> qui contient une bitmap utilisée comme image d’aperçu dans les opérations de glisser-déposer et dans le volet d’aperçu <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRootDesigner">
      <MemberSignature Language="C#" Value="public static System.Workflow.ComponentModel.Design.ActivityDesigner GetRootDesigner (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Workflow.ComponentModel.Design.ActivityDesigner GetRootDesigner(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetRootDesigner(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRootDesigner (serviceProvider As IServiceProvider) As ActivityDesigner" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Workflow::ComponentModel::Design::ActivityDesigner ^ GetRootDesigner(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetRootDesigner : IServiceProvider -&gt; System.Workflow.ComponentModel.Design.ActivityDesigner" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.GetRootDesigner serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.ActivityDesigner</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Objet qui implémente le <see cref="T:System.IServiceProvider" />.</param>
        <summary>Retourne le concepteur associé à l'aire de conception du workflow.</summary>
        <returns><see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> qui est le <see cref="P:System.ComponentModel.Design.IDesignerHost.RootComponent" /> de l'hôte de concepteur.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="protected object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ GetService(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="member this.GetService : Type -&gt; obj" Usage="activityDesigner.GetService serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Type de service à demander.</param>
        <summary>Tente de récupérer le type de service spécifié du site en mode Création pour l'activité associée au concepteur.</summary>
        <returns>Objet implémentant le service demandé ou référence null (<see langword="Nothing" /> en Visual Basic) si le service ne peut pas être résolu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Glyphs">
      <MemberSignature Language="C#" Value="protected internal virtual System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection Glyphs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection Glyphs" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Glyphs" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property Glyphs As ActivityDesignerGlyphCollection" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Workflow::ComponentModel::Design::ActivityDesignerGlyphCollection ^ Glyphs { System::Workflow::ComponentModel::Design::ActivityDesignerGlyphCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Glyphs : System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.Glyphs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection de glyphes avec lesquels orner le concepteur.</summary>
        <value><see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> qui contient les glyphes à afficher sur le concepteur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.Glyphs%2A> pour accéder à une liste en lecture seule de glyphes de concepteur. Ces glyphes peuvent être utilisés pour représenter graphiquement des composants du <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> dans un environnement graphique.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public virtual System.Workflow.ComponentModel.Design.HitTestInfo HitTest (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Workflow.ComponentModel.Design.HitTestInfo HitTest(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.HitTest(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Workflow::ComponentModel::Design::HitTestInfo ^ HitTest(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="abstract member HitTest : System.Drawing.Point -&gt; System.Workflow.ComponentModel.Design.HitTestInfo&#xA;override this.HitTest : System.Drawing.Point -&gt; System.Workflow.ComponentModel.Design.HitTestInfo" Usage="activityDesigner.HitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.HitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point"><see cref="T:System.Drawing.Point" /> qui représente une coordonnée x et y unique.</param>
        <summary>Obtient les informations concernant l'ActivityDesigner à un point spécifié sur l'écran.</summary>
        <returns><see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> qui contient des informations sur le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> à un point spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Workflow.ComponentModel.Design.HitTestInfo>, conjointement à la méthode <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.HitTest%2A> du contrôle <xref:System.Workflow.ComponentModel.Design.ActivityDesigner>, est utilisé pour déterminer la partie d'un contrôle <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> sur laquelle l'utilisateur a cliqué. Le <xref:System.Workflow.ComponentModel.Design.HitTestInfo> contient les coordonnées logiques du point sur le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> où le clic de souris a été effectué.  
  
 La méthode <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.HitTest%2A> reçoit un <xref:System.Drawing.Point> qui contient une coordonnée x et y.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Image">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Image Image { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image Image" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Image" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Image As Image" />
      <MemberSignature Language="C++ CLI" Value="public:  virtual property System::Drawing::Image ^ Image {  public:&#xA;System::Drawing::Image ^ get(); protected:&#xA; void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Image : System.Drawing.Image with get, set" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.Image" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Drawing.Image" /> associé au concepteur.</summary>
        <value><see cref="T:System.Drawing.Image" /> associé au concepteur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propriété <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.Image%2A> a pour valeur l'objet <xref:System.Drawing.Image> à afficher. Vous pouvez la définir au moment de la conception ou de l'exécution.  
  
   
  
## Examples  
 L'exemple suivant illustre le chargement d'un objet <xref:System.Drawing.Bitmap> à partir d'une ressource incorporée. Dans ce cas, le `ToolboxImage` est la même Image que celle utilisée lorsque la classe <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> de base dessine le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> personnalisé.  
  
 [!code-csharp[WF_Samples#76](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#76)]
 [!code-vb[WF_Samples#76](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#76)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageRectangle">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle ImageRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ImageRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ImageRectangle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ImageRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Rectangle ImageRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ImageRectangle : System.Drawing.Rectangle" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.ImageRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur pour les limites englobantes de l'image associée au concepteur en coordonnées logiques.</summary>
        <value>Image de <see cref="T:System.Drawing.Rectangle" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.ImageRectangle%2A> pour récupérer les coordonnées du rectangle qui englobe l'image associée au concepteur. Vous pouvez utiliser ces coordonnées pour dessiner des connecteurs ou recouvrir des graphiques.  
  
   
  
## Examples  
 L'exemple qui suit montre comment substituer la propriété <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.ImageRectangle%2A>. Dans cet exemple, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.ImageRectangle%2A> est calculé à l'aide des limites du <xref:System.Workflow.ComponentModel.Design.ActivityDesigner>.  
  
 [!code-csharp[WF_Samples#74](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#74)]
 [!code-vb[WF_Samples#74](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#74)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Initialize(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Initialize(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : System.Workflow.ComponentModel.Activity -&gt; unit&#xA;override this.Initialize : System.Workflow.ComponentModel.Activity -&gt; unit" Usage="activityDesigner.Initialize activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><see cref="T:System.Workflow.ComponentModel.Activity" /> avec lequel le concepteur doit être initialisé.</param>
        <summary>Initialise le concepteur avec le <see cref="T:System.Workflow.ComponentModel.Activity" /> associé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La méthode Initialize charge le concepteur avec l'Activité spécifiée. Le concepteur charge le service Activité, met à jour les verbes associés à l'activité et assigne le texte et l'image par défaut au concepteur.  
  
   
  
## Examples  
 L'exemple suivant montre comment substituer l'implémentation de classe de base de la méthode Initialize. La méthode <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.Initialize%2A> dans cet exemple charge un objet <xref:System.Drawing.Bitmap> à partir d'une ressource incorporée. La ressource `ToolboxImage` est le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.Image%2A> utilisé lorsque la classe <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> de base dessine le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> personnalisé.  
  
 [!code-csharp[WF_Samples#76](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#76)]
 [!code-vb[WF_Samples#76](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#76)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invalidate">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Invalide le concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez Invalidate pour faire en sorte que le concepteur soit redessiné.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberSignature Language="F#" Value="member this.Invalidate : unit -&gt; unit" Usage="activityDesigner.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalide le concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez Invalidate pour faire en sorte que le concepteur soit redessiné.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Invalidate(System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Rectangle rectangle);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Rectangle -&gt; unit" Usage="activityDesigner.Invalidate rectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rectangle"><see cref="T:System.Drawing.Rectangle" /> qui spécifie la zone sur le workflow à invalider.</param>
        <summary>Invalide le rectangle spécifié sur le concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez Invalidate pour faire en sorte que le rectangle spécifié sur le concepteur soit redessiné.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokingDesigner">
      <MemberSignature Language="C#" Value="protected virtual System.Workflow.ComponentModel.Design.CompositeActivityDesigner InvokingDesigner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.Design.CompositeActivityDesigner InvokingDesigner" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.InvokingDesigner" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property InvokingDesigner As CompositeActivityDesigner" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Workflow::ComponentModel::Design::CompositeActivityDesigner ^ InvokingDesigner { System::Workflow::ComponentModel::Design::CompositeActivityDesigner ^ get(); void set(System::Workflow::ComponentModel::Design::CompositeActivityDesigner ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InvokingDesigner : System.Workflow.ComponentModel.Design.CompositeActivityDesigner with get, set" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.InvokingDesigner" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.InvokingDesigner</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.CompositeActivityDesigner</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le concepteur de l'activité qui appelle l'activité associée au concepteur d'activité actuel.</summary>
        <value>Le <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> pour appeler le concepteur d'activités actuel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À moins d'être substitué dans une classe dérivée, l'opération d'obtention <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.InvokingDesigner%2A> retourne une référence null (`Nothing` en Visual Basic) et l'opération de définition lève une <xref:System.NotSupportedException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Une opération de définition a été tentée sur <see cref="P:System.Workflow.ComponentModel.Design.ActivityDesigner.InvokingDesigner" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsCommentedActivity">
      <MemberSignature Language="C#" Value="public static bool IsCommentedActivity (System.Workflow.ComponentModel.Activity activity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsCommentedActivity(class System.Workflow.ComponentModel.Activity activity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.IsCommentedActivity(System.Workflow.ComponentModel.Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsCommentedActivity(System::Workflow::ComponentModel::Activity ^ activity);" />
      <MemberSignature Language="F#" Value="static member IsCommentedActivity : System.Workflow.ComponentModel.Activity -&gt; bool" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.IsCommentedActivity activity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="activity"><see cref="T:System.Workflow.ComponentModel.Activity" /> dans le concepteur d'activités actuel.</param>
        <summary>Retourne une valeur qui indique si l'activité du concepteur actuel est commentée ou est à l'intérieur d'une activité commentée.</summary>
        <returns><see langword="true" /> si l'activité est commentée ou est à l'intérieur d'une activité commentée ; sinon <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLocked">
      <MemberSignature Language="C#" Value="public bool IsLocked { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLocked" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsLocked" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLocked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLocked { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLocked : bool" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.IsLocked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'activité associée au concepteur peut être modifiée.</summary>
        <value><see langword="true" /> si l'activité associée au concepteur peut être modifiée ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.IsLocked%2A> détermine si une activité peut être modifiée. Cela affecte les opérations glisser, les modifications de propriétés et les modifications de la position de l'activité dans la fenêtre du concepteur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimarySelection">
      <MemberSignature Language="C#" Value="public bool IsPrimarySelection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimarySelection" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsPrimarySelection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimarySelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimarySelection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimarySelection : bool" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.IsPrimarySelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'activité associée au concepteur est la sélection principale.</summary>
        <value><see langword="true" /> si l'activité associée au concepteur est la sélection principale ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.IsPrimarySelection%2A> pour affecter la mise en surbrillance ou mettre à jour les feuilles de propriétés dans votre représentation graphique du workflow. IsPrimarySelection est utile lorsque plusieurs activités sont sélectionnées car IsPrimarySelection indiquera le point de départ d'une sélection multiple.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRootDesigner">
      <MemberSignature Language="C#" Value="public bool IsRootDesigner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRootDesigner" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsRootDesigner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRootDesigner As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRootDesigner { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRootDesigner : bool" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.IsRootDesigner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si le concepteur est un concepteur racine.</summary>
        <value><see langword="true" /> si le concepteur est un concepteur racine ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le concepteur racine n'aura pas de concepteurs parents. Le concepteur racine agit comme concepteur pour le workflow complet, car tous les composants de workflow seront des enfants.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSelected">
      <MemberSignature Language="C#" Value="public bool IsSelected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSelected" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsSelected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSelected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSelected { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSelected : bool" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.IsSelected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'activité associée au concepteur est sélectionnée.</summary>
        <value><see langword="true" /> si l'activité associée au concepteur est sélectionnée ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la propriété <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.IsSelected%2A> pour les opérations telles que couper-coller, ou pour la mise à jour des propriétés d'une Activité lorsque des modifications sont apportées dans une fenêtre de propriété, par exemple.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedActivityType">
      <MemberSignature Language="C#" Value="protected virtual bool IsSupportedActivityType (Type activityType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsSupportedActivityType(class System.Type activityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.IsSupportedActivityType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsSupportedActivityType (activityType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsSupportedActivityType(Type ^ activityType);" />
      <MemberSignature Language="F#" Value="abstract member IsSupportedActivityType : Type -&gt; bool&#xA;override this.IsSupportedActivityType : Type -&gt; bool" Usage="activityDesigner.IsSupportedActivityType activityType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.IsSupportedActivityType(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="activityType">Type de l'activité qui a été prise en charge.</param>
        <summary>Retourne une valeur qui indique si le type d'activité spécifié est pris en charge si le concepteur d'activité est un concepteur racine.</summary>
        <returns><see langword="true" /> si le <paramref name="activityType" /> est pris en charge ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.IsSupportedActivityType%2A> est appelé uniquement si le concepteur d'activité est un concepteur racine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public virtual bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'activité associée au concepteur est visible sur le workflow.</summary>
        <value><see langword="true" /> si l'activité associée au concepteur est visible sur le workflow ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.IsVisible%2A> pour déterminer si une activité est visible sur le concepteur. Pour les grands workflows, vous pourriez fournir un mécanisme de recherche et localiser, sélectionner et déplacer dans la zone affichable une activité actuellement invisible trouvée par l'utilisateur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected virtual void LoadViewState (System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void LoadViewState(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.LoadViewState(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub LoadViewState (reader As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void LoadViewState(System::IO::BinaryReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member LoadViewState : System.IO.BinaryReader -&gt; unit&#xA;override this.LoadViewState : System.IO.BinaryReader -&gt; unit" Usage="activityDesigner.LoadViewState reader" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Design.IPersistUIState.LoadViewState(System.IO.BinaryReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.IO.BinaryReader" /> utilisé pour restaurer l'état du concepteur.</param>
        <summary>Charge l'état d'affichage du concepteur à partir d'un flux binaire.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Point Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Location" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Location As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Point Location { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.Location : System.Drawing.Point with get, set" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'emplacement du concepteur en coordonnées logiques.</summary>
        <value>Emplacement du concepteur en coordonnées logiques.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la propriété <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.Location%2A> pour positionner le concepteur sur l'aire de conception au moment de la conception ou de l'exécution.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MessageFilters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter&gt; MessageFilters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter&gt; MessageFilters" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.MessageFilters" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property MessageFilters As ReadOnlyCollection(Of WorkflowDesignerMessageFilter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::ComponentModel::Design::WorkflowDesignerMessageFilter ^&gt; ^ MessageFilters { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::ComponentModel::Design::WorkflowDesignerMessageFilter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MessageFilters : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter&gt;" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.MessageFilters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.MessageFilters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection en lecture seule de filtres de message associés au concepteur d’activité.</summary>
        <value>Collection en lecture seule <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> qui inclut tous les filtres de message standard à associer au concepteur d’activités.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MinimumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MinimumSize" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.MinimumSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MinimumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size MinimumSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSize : System.Drawing.Size" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.MinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la taille minimale pour le concepteur d'activités.</summary>
        <value>Taille minimale du concepteur d'activités.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.MinimumSize%2A> est déterminé par les paramètres de taille accessibles par le biais de la propriété <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.DesignerTheme%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnActivityChanged (System.Workflow.ComponentModel.Design.ActivityChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivityChanged(class System.Workflow.ComponentModel.Design.ActivityChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnActivityChanged(System.Workflow.ComponentModel.Design.ActivityChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnActivityChanged (e As ActivityChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnActivityChanged(System::Workflow::ComponentModel::Design::ActivityChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnActivityChanged : System.Workflow.ComponentModel.Design.ActivityChangedEventArgs -&gt; unit&#xA;override this.OnActivityChanged : System.Workflow.ComponentModel.Design.ActivityChangedEventArgs -&gt; unit" Usage="activityDesigner.OnActivityChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" /> qui contient les données d'événement.</param>
        <summary>Notifie le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> lorsque l'activité avec laquelle il est associé change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `e` contient des données relatives aux modifications apportées au <xref:System.Workflow.ComponentModel.Activity>. Vous pouvez utiliser cette méthode pour mettre à jour l'état du concepteur et l'interface utilisateur affichée sur le concepteur de workflow lorsqu'un utilisateur apporte des modifications à une activité au moment de la conception.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginResizing">
      <MemberSignature Language="C#" Value="protected virtual void OnBeginResizing (System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeginResizing(class System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnBeginResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeginResizing (e As ActivityDesignerResizeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeginResizing(System::Workflow::ComponentModel::Design::ActivityDesignerResizeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBeginResizing : System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs -&gt; unit&#xA;override this.OnBeginResizing : System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs -&gt; unit" Usage="activityDesigner.OnBeginResizing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" /> qui contient les données d'événement.</param>
        <summary>Notifie le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> lorsqu'un utilisateur commence à redimensionner visuellement le concepteur d'activités lorsque le concepteur est dans un <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnBeginResizing%2A> pour exécuter tout traitement au moment du design du <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> lorsqu’un utilisateur commence à redimensionner le concepteur d’activités.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnConnected">
      <MemberSignature Language="C#" Value="protected virtual void OnConnected (System.Workflow.ComponentModel.Design.ConnectionPoint source, System.Workflow.ComponentModel.Design.ConnectionPoint target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnConnected(class System.Workflow.ComponentModel.Design.ConnectionPoint source, class System.Workflow.ComponentModel.Design.ConnectionPoint target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnConnected(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnConnected (source As ConnectionPoint, target As ConnectionPoint)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnConnected(System::Workflow::ComponentModel::Design::ConnectionPoint ^ source, System::Workflow::ComponentModel::Design::ConnectionPoint ^ target);" />
      <MemberSignature Language="F#" Value="abstract member OnConnected : System.Workflow.ComponentModel.Design.ConnectionPoint * System.Workflow.ComponentModel.Design.ConnectionPoint -&gt; unit&#xA;override this.OnConnected : System.Workflow.ComponentModel.Design.ConnectionPoint * System.Workflow.ComponentModel.Design.ConnectionPoint -&gt; unit" Usage="activityDesigner.OnConnected (source, target)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Design.IConnectableDesigner.OnConnected(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Workflow.ComponentModel.Design.ConnectionPoint" />
        <Parameter Name="target" Type="System.Workflow.ComponentModel.Design.ConnectionPoint" />
      </Parameters>
      <Docs>
        <param name="source">Le ConnectionPoint source sur le concepteur d'activités actuel.</param>
        <param name="target">Le ConnectionPoint cible sur le concepteur d'activités auquel se connecter.</param>
        <summary>Notifie le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> lorsqu'une connexion est établie entre deux points de connexion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnConnected%2A> n'a pas de comportement par défaut. Vous devez substituer cette méthode dans une classe qui dérive de <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> pour fournir le traitement lorsqu'une connexion est établie entre deux concepteurs.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDragDrop (System.Workflow.ComponentModel.Design.ActivityDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragDrop(class System.Workflow.ComponentModel.Design.ActivityDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragDrop(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragDrop (e As ActivityDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragDrop(System::Workflow::ComponentModel::Design::ActivityDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragDrop : System.Workflow.ComponentModel.Design.ActivityDragEventArgs -&gt; unit&#xA;override this.OnDragDrop : System.Workflow.ComponentModel.Design.ActivityDragEventArgs -&gt; unit" Usage="activityDesigner.OnDragDrop e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit lorsque l'opération glisser-déplacer est effectuée à l'intérieur des limites du concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cet événement se produit lorsqu’une opération de glisser-déplacer se termine dans les limites du concepteur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Workflow.ComponentModel.Design.ActivityDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Workflow.ComponentModel.Design.ActivityDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As ActivityDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Workflow::ComponentModel::Design::ActivityDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Workflow.ComponentModel.Design.ActivityDragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Workflow.ComponentModel.Design.ActivityDragEventArgs -&gt; unit" Usage="activityDesigner.OnDragEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit lorsque l'opération glisser-déplacer est en cours et que le pointeur pénètre dans les limites du concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> est déclenché lorsque le pointeur de souris est glissé dans le concepteur.  
  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
 Les modifications de la position du pointeur, de l'état du clavier et de l'état de commentaire de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de déplacement, l'utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, commenter les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave();" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : unit -&gt; unit&#xA;override this.OnDragLeave : unit -&gt; unit" Usage="activityDesigner.OnDragLeave " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se produit lorsque l'opération glisser-déplacer est en cours et que le pointeur quitte les limites du concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche lorsque l'utilisateur fait glisser le pointeur hors du concepteur ou lorsqu'il annule l'opération de glisser-déplacer.  
  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
 Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Workflow.ComponentModel.Design.ActivityDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Workflow.ComponentModel.Design.ActivityDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As ActivityDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Workflow::ComponentModel::Design::ActivityDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Workflow.ComponentModel.Design.ActivityDragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Workflow.ComponentModel.Design.ActivityDragEventArgs -&gt; unit" Usage="activityDesigner.OnDragOver e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit lorsque l'opération glisser-déplacer est en cours et que le pointeur se trouve dans les limites du concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché lorsque l'utilisateur fait glisser le pointeur sur le concepteur.  
  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndResizing">
      <MemberSignature Language="C#" Value="protected virtual void OnEndResizing ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEndResizing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnEndResizing" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEndResizing ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEndResizing();" />
      <MemberSignature Language="F#" Value="abstract member OnEndResizing : unit -&gt; unit&#xA;override this.OnEndResizing : unit -&gt; unit" Usage="activityDesigner.OnEndResizing " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Design.IWorkflowDesignerMessageSink.OnEndResizing</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifie le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> lorsqu'un utilisateur à terminer de redimensionner visuellement le concepteur d'activités lorsque le concepteur est dans un <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExecuteDesignerAction">
      <MemberSignature Language="C#" Value="protected internal virtual void OnExecuteDesignerAction (System.Workflow.ComponentModel.Design.DesignerAction designerAction);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnExecuteDesignerAction(class System.Workflow.ComponentModel.Design.DesignerAction designerAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnExecuteDesignerAction(System.Workflow.ComponentModel.Design.DesignerAction)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnExecuteDesignerAction(System::Workflow::ComponentModel::Design::DesignerAction ^ designerAction);" />
      <MemberSignature Language="F#" Value="abstract member OnExecuteDesignerAction : System.Workflow.ComponentModel.Design.DesignerAction -&gt; unit&#xA;override this.OnExecuteDesignerAction : System.Workflow.ComponentModel.Design.DesignerAction -&gt; unit" Usage="activityDesigner.OnExecuteDesignerAction designerAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="designerAction" Type="System.Workflow.ComponentModel.Design.DesignerAction" />
      </Parameters>
      <Docs>
        <param name="designerAction"><see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> associé à l'erreur de configuration.</param>
        <summary>Notifie le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> lorsque l'utilisateur clique sur les erreurs de configuration associées au concepteur.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="designerAction" /> contient une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.Forms.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.Forms.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::Forms::GiveFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit" Usage="activityDesigner.OnGiveFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> qui contient les données d'événement.</param>
        <summary>Met à jour les signaux visuels pour les commentaires fournis à l'utilisateur lors de l'exécution d'une opération glisser.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="activityDesigner.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit quand une touche est enfoncée lorsque le concepteur a le focus clavier.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="activityDesigner.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.KeyEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit lorsqu’une touche est relâchée lorsque le concepteur a le focus clavier.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLayoutPosition">
      <MemberSignature Language="C#" Value="protected virtual void OnLayoutPosition (System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLayoutPosition(class System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLayoutPosition (e As ActivityDesignerLayoutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLayoutPosition(System::Workflow::ComponentModel::Design::ActivityDesignerLayoutEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLayoutPosition : System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs -&gt; unit&#xA;override this.OnLayoutPosition : System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs -&gt; unit" Usage="activityDesigner.OnLayoutPosition e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> qui contient les données d'événement.</param>
        <summary>Notifie le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> lorsqu'un utilisateur repositionne ses signaux visuels ou concepteurs d'activités enfants.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous devez substituer cette méthode pour exécuter tout traitement de disposition requis lorsqu'un utilisateur repositionne des éléments sur l'aire du concepteur d'activité au moment de la conception.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="e" /> contient une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="OnLayoutSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size OnLayoutSize (System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Size OnLayoutSize(class System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnLayoutSize (e As ActivityDesignerLayoutEventArgs) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Size OnLayoutSize(System::Workflow::ComponentModel::Design::ActivityDesignerLayoutEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLayoutSize : System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs -&gt; System.Drawing.Size&#xA;override this.OnLayoutSize : System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs -&gt; System.Drawing.Size" Usage="activityDesigner.OnLayoutSize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> qui contient les données d'événement.</param>
        <summary>Retourne la taille des signaux visuels ou des concepteurs d'activités enfants sur <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
        <returns>Nouveaux paramètres de taille pour les signaux visuels ou concepteurs d'activités enfants.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant montre comment substituer la méthode <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnLayoutSize%2A>. Pour cet exemple, la taille du `Activity` reste statique avec une hauteur et une largeur de 64.  
  
 [!code-csharp[WF_Samples#77](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#77)]
 [!code-vb[WF_Samples#77](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="e" /> contient une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="OnMouseCaptureChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseCaptureChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseCaptureChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseCaptureChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseCaptureChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseCaptureChanged();" />
      <MemberSignature Language="F#" Value="abstract member OnMouseCaptureChanged : unit -&gt; unit&#xA;override this.OnMouseCaptureChanged : unit -&gt; unit" Usage="activityDesigner.OnMouseCaptureChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se produit lorsque la capture de la souris change.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 OnMouseCaptureChanged se produit lorsque l'utilisateur sélectionne plusieurs objets sur le concepteur en faisant glisser le pointeur de la souris.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDoubleClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDoubleClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDoubleClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="activityDesigner.OnMouseDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit lorsque vous cliquez à plusieurs reprises sur le bouton de la souris sur le concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 OnMouseDoubleClick se produit lorsque vous cliquez deux fois de suite sur le bouton de la souris sur un concepteur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="activityDesigner.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit lorsque vous appuyez sur le bouton de souris alors que le pointeur se trouve dans les limites du concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDragBegin">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDragBegin (System.Drawing.Point initialDragPoint, System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDragBegin(valuetype System.Drawing.Point initialDragPoint, class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDragBegin(System.Drawing.Point,System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDragBegin (initialDragPoint As Point, e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDragBegin(System::Drawing::Point initialDragPoint, System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDragBegin : System.Drawing.Point * System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDragBegin : System.Drawing.Point * System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="activityDesigner.OnMouseDragBegin (initialDragPoint, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialDragPoint" Type="System.Drawing.Point" />
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="initialDragPoint"><see cref="T:System.Drawing.Point" /> qui représente une coordonnée x et y unique.</param>
        <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit lorsque l'utilisateur commence à faire glisser la souris sur le concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDragEnd">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDragEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDragEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDragEnd" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDragEnd ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDragEnd();" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDragEnd : unit -&gt; unit&#xA;override this.OnMouseDragEnd : unit -&gt; unit" Usage="activityDesigner.OnMouseDragEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se produit lorsque l'utilisateur cesse de faire glisser la souris sur le concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDragMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDragMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDragMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDragMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDragMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDragMove(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDragMove : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDragMove : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="activityDesigner.OnMouseDragMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit à chaque déplacement de la souris lorsque l'utilisateur fait glisser le pointeur sur le concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseEnter(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseEnter : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="activityDesigner.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit lorsque la souris pénètre pour la première fois dans les limites du concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseHover (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseHover(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseHover(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseHover (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseHover(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseHover : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseHover : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="activityDesigner.OnMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit lorsque le pointeur se trouve dans les limites du concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseLeave" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave();" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : unit -&gt; unit&#xA;override this.OnMouseLeave : unit -&gt; unit" Usage="activityDesigner.OnMouseLeave " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se produit lorsque le pointeur quitte les limites du concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="activityDesigner.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit lorsque le pointeur se déplace dans les limites du concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="activityDesigner.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs" /> qui contient les données d'événement.</param>
        <summary>Se produit lorsque vous relâchez le bouton de souris alors que le pointeur se trouve dans les limites du concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected virtual void OnPaint (System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaint(class System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaint (e As ActivityDesignerPaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaint(System::Workflow::ComponentModel::Design::ActivityDesignerPaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPaint : System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs -&gt; unit&#xA;override this.OnPaint : System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs -&gt; unit" Usage="activityDesigner.OnPaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> qui contient les données d'événement.</param>
        <summary>Dessine la représentation visuelle de l'activité au moment de la conception.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant illustre un <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> personnalisé qui délègue la responsabilité de peinture à la classe de base ou qui se dessine lui-même en fonction d'une valeur booléenne. Si `useBasePaint` est faux, l'activité personnalisée se dessinera à l'aide des différentes méthodes de la classe <xref:System.Workflow.ComponentModel.Design.ActivityDesignerPaint>.  
  
 [!code-csharp[WF_Samples#78](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#78)]
 [!code-vb[WF_Samples#78](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="e" /> contient une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="OnProcessMessage">
      <MemberSignature Language="C#" Value="protected virtual void OnProcessMessage (System.Windows.Forms.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProcessMessage(valuetype System.Windows.Forms.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnProcessMessage(System.Windows.Forms.Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnProcessMessage(System::Windows::Forms::Message message);" />
      <MemberSignature Language="F#" Value="abstract member OnProcessMessage : System.Windows.Forms.Message -&gt; unit&#xA;override this.OnProcessMessage : System.Windows.Forms.Message -&gt; unit" Usage="activityDesigner.OnProcessMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Windows.Forms.Message" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.Windows.Forms.Message" /> Win32 qui contient les données d'événement.</param>
        <summary>Permet au concepteur de traiter les messages Win32 bruts.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.Forms.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.Forms.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::Forms::QueryContinueDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit" Usage="activityDesigner.OnQueryContinueDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> qui contient les données d'événement.</param>
        <summary>Contrôle si l'opération glisser doit continuer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les lignes suivantes décrivent de quelle façon et à quel moment se déclenchent les événements liés aux opérations de glisser-déposer.  
  
 Si le concepteur est une cible de dépôt valide, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec l’effet de glisser-déposer spécifié. Pour obtenir la liste des effets de glisser-déposer, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
-   Les modifications de la position du pointeur, de l'état du clavier et de l'état du bouton de souris sont suivies.  
  
-   Si l'utilisateur se déplace hors des limites du concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> se déclenche.  
  
-   Si la souris entre dans un autre concepteur, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter%2A> de ce concepteur se déclenche.  
  
-   Si la souris se déplace uniquement dans les limites du même concepteur, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché.  
  
-   Si une modification de l’état du clavier ou du bouton de la souris se produit, l’événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag%2A> se déclenche et détermine s’il faut continuer l’opération glisser, déposer les données ou annuler l’opération en fonction de la valeur de la propriété Action de l’événement <xref:System.Windows.Forms.QueryContinueDragEventArgs>.  
  
 Si la valeur est `DragAction.Continue`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> est déclenché pour poursuivre l'opération et l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> est déclenché avec le nouvel effet, pour fournir une rétroaction visuelle appropriée. Pour obtenir la liste des effets de dépôt valides, consultez l’énumération <xref:System.Windows.Forms.DragDropEffects>.  
  
> [!NOTE]
>  Les événements <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback%2A> sont associés de telle sorte que lorsque la souris se trouve sur la cible de dépôt, l’utilisateur reçoit les commentaires les plus actuels sur la position de la souris.  
  
 Si la valeur est `DragAction.Drop`, la valeur de l'effet de déplacement est retournée à la source. Ainsi, l'application source peut effectuer l'opération appropriée sur les données sources ; par exemple, couper les données si l'opération était un déplacement.  
  
 Si la valeur est `DragAction.Cancel`, l'événement <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave%2A> est déclenché.  
  
 Pour plus d’informations sur la façon de gérer les événements, consultez [gestion et déclenchement d’événements](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResizing">
      <MemberSignature Language="C#" Value="protected virtual void OnResizing (System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResizing(class System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResizing (e As ActivityDesignerResizeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResizing(System::Workflow::ComponentModel::Design::ActivityDesignerResizeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResizing : System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs -&gt; unit&#xA;override this.OnResizing : System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs -&gt; unit" Usage="activityDesigner.OnResizing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" /> qui contient les données d'événement.</param>
        <summary>Notifie le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> lorsqu'un utilisateur le redimensionne visuellement au moment de la conception. La méthode est appelée uniquement si le concepteur d'activités est un enfant d'un <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `e` spécifie le <xref:System.Workflow.ComponentModel.Design.DesignerEdges> et les nouvelles limites utilisées pour le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> redimensionné.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnScroll">
      <MemberSignature Language="C#" Value="protected virtual void OnScroll (System.Windows.Forms.ScrollBar sender, int value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnScroll(class System.Windows.Forms.ScrollBar sender, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnScroll(System.Windows.Forms.ScrollBar,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnScroll (sender As ScrollBar, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnScroll(System::Windows::Forms::ScrollBar ^ sender, int value);" />
      <MemberSignature Language="F#" Value="abstract member OnScroll : System.Windows.Forms.ScrollBar * int -&gt; unit&#xA;override this.OnScroll : System.Windows.Forms.ScrollBar * int -&gt; unit" Usage="activityDesigner.OnScroll (sender, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Windows.Forms.ScrollBar" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sender"><see cref="T:System.Windows.Forms.ScrollBar" /> sur lequel l'utilisateur a modifié la position.</param>
        <param name="value">La nouvelle valeur de position de défilement.</param>
        <summary>Notifie le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> lorsqu'un utilisateur modifie la position de défilement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.OnScroll%2A> ne fournit pas de comportement par défaut. Vous devez la substituer dans une classe qui dérive de <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> pour fournir la logique de traitement lorsqu'une position de défilement change.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShowSmartTagVerbs">
      <MemberSignature Language="C#" Value="protected virtual void OnShowSmartTagVerbs (System.Drawing.Point smartTagPoint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShowSmartTagVerbs(valuetype System.Drawing.Point smartTagPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnShowSmartTagVerbs(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShowSmartTagVerbs (smartTagPoint As Point)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShowSmartTagVerbs(System::Drawing::Point smartTagPoint);" />
      <MemberSignature Language="F#" Value="abstract member OnShowSmartTagVerbs : System.Drawing.Point -&gt; unit&#xA;override this.OnShowSmartTagVerbs : System.Drawing.Point -&gt; unit" Usage="activityDesigner.OnShowSmartTagVerbs smartTagPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smartTagPoint" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="smartTagPoint"><see cref="T:System.Drawing.Point" /> qui désigne l'emplacement auquel afficher la balise active.</param>
        <summary>Affiche les verbes de concepteur associés à une étiquette active au point spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSmartTagVisibilityChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSmartTagVisibilityChanged (bool visible);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSmartTagVisibilityChanged(bool visible) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnSmartTagVisibilityChanged(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSmartTagVisibilityChanged (visible As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSmartTagVisibilityChanged(bool visible);" />
      <MemberSignature Language="F#" Value="abstract member OnSmartTagVisibilityChanged : bool -&gt; unit&#xA;override this.OnSmartTagVisibilityChanged : bool -&gt; unit" Usage="activityDesigner.OnSmartTagVisibilityChanged visible" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visible" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="visible"><see langword="true" /> pour indiquer que la balise active doit être affichée ; <see langword="false" /> pour indiquer que la balise active doit être masquée.</param>
        <summary>Notifie le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> si une balise active doit être affichée ou masquée.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnThemeChange">
      <MemberSignature Language="C#" Value="protected virtual void OnThemeChange (System.Workflow.ComponentModel.Design.ActivityDesignerTheme newTheme);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThemeChange(class System.Workflow.ComponentModel.Design.ActivityDesignerTheme newTheme) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnThemeChange(System.Workflow.ComponentModel.Design.ActivityDesignerTheme)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThemeChange (newTheme As ActivityDesignerTheme)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThemeChange(System::Workflow::ComponentModel::Design::ActivityDesignerTheme ^ newTheme);" />
      <MemberSignature Language="F#" Value="abstract member OnThemeChange : System.Workflow.ComponentModel.Design.ActivityDesignerTheme -&gt; unit&#xA;override this.OnThemeChange : System.Workflow.ComponentModel.Design.ActivityDesignerTheme -&gt; unit" Usage="activityDesigner.OnThemeChange newTheme" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newTheme" Type="System.Workflow.ComponentModel.Design.ActivityDesignerTheme" />
      </Parameters>
      <Docs>
        <param name="newTheme"><see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> qui contient les données d'événement.</param>
        <summary>Signale au concepteur que le thème associé a changé.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentDesigner">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Design.CompositeActivityDesigner ParentDesigner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.Design.CompositeActivityDesigner ParentDesigner" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ParentDesigner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParentDesigner As CompositeActivityDesigner" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Workflow::ComponentModel::Design::CompositeActivityDesigner ^ ParentDesigner { System::Workflow::ComponentModel::Design::CompositeActivityDesigner ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParentDesigner : System.Workflow.ComponentModel.Design.CompositeActivityDesigner" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.ParentDesigner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.CompositeActivityDesigner</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le concepteur parent du concepteur existant.</summary>
        <value>Concepteur parent du concepteur existant. Si le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> est un concepteur racine, le <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> retourné sera le <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" /> ; sinon, le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> sera le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />parent.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.ParentDesigner%2A> pour parcourir vers le haut l’arborescence d’objets <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> imbriqués ou pour rechercher le concepteur racine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentView">
      <MemberSignature Language="C#" Value="protected internal System.Workflow.ComponentModel.Design.WorkflowView ParentView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.Design.WorkflowView ParentView" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ParentView" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property ParentView As WorkflowView" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Workflow::ComponentModel::Design::WorkflowView ^ ParentView { System::Workflow::ComponentModel::Design::WorkflowView ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParentView : System.Workflow.ComponentModel.Design.WorkflowView" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.ParentView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.WorkflowView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la vue de workflow qui contient le concepteur d'activités actuel.</summary>
        <value><see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> qui contient le concepteur d'activités actuel.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="protected void PerformLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PerformLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PerformLayout" />
      <MemberSignature Language="VB.NET" Value="Protected Sub PerformLayout ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void PerformLayout();" />
      <MemberSignature Language="F#" Value="member this.PerformLayout : unit -&gt; unit" Usage="activityDesigner.PerformLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Met à jour la disposition du concepteur.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PointToLogical">
      <MemberSignature Language="C#" Value="protected System.Drawing.Point PointToLogical (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.Point PointToLogical(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PointToLogical(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Drawing::Point PointToLogical(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.PointToLogical : System.Drawing.Point -&gt; System.Drawing.Point" Usage="activityDesigner.PointToLogical point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point"><see cref="T:System.Drawing.Point" /> qui contient les coordonnées à transformer.</param>
        <summary>Transforme un point du système de coordonnées d'écran au système de coordonnées de concepteur d'activités.</summary>
        <returns><see cref="T:System.Drawing.Point" /> qui contient les coordonnées x et y transformées.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PointToScreen">
      <MemberSignature Language="C#" Value="protected System.Drawing.Point PointToScreen (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.Point PointToScreen(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PointToScreen(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Drawing::Point PointToScreen(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.PointToScreen : System.Drawing.Point -&gt; System.Drawing.Point" Usage="activityDesigner.PointToScreen point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point"><see cref="T:System.Drawing.Point" /> qui contient les coordonnées à transformer.</param>
        <summary>Transforme un point du système de coordonnées de concepteur d'activités au système de coordonnées d'écran.</summary>
        <returns><see cref="T:System.Drawing.Point" /> qui contient les coordonnées x et y transformées.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostFilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void PostFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PostFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PostFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PostFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PostFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterAttributes : System.Collections.IDictionary -&gt; unit&#xA;override this.PostFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="activityDesigner.PostFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes"><see cref="T:System.Collections.IDictionary" /> qui contient les valeurs TypeID des attributs.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments du jeu d'attributs qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostFilterEvents">
      <MemberSignature Language="C#" Value="protected virtual void PostFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PostFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PostFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PostFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PostFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterEvents : System.Collections.IDictionary -&gt; unit&#xA;override this.PostFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="activityDesigner.PostFilterEvents events" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events"><see cref="T:System.Collections.IDictionary" /> qui contient les noms d'événements de la classe.</param>
        <summary>En cas de substitution dans une classe dérivée, permet au concepteur de modifier ou de supprimer des éléments du jeu d'événements qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostFilterProperties">
      <MemberSignature Language="C#" Value="protected virtual void PostFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PostFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PostFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PostFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PostFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PostFilterProperties : System.Collections.IDictionary -&gt; unit&#xA;override this.PostFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="activityDesigner.PostFilterProperties properties" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties"><see cref="T:System.Collections.IDictionary" /> qui contient les noms de propriétés de la classe.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments au jeu de propriétés qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreFilterAttributes">
      <MemberSignature Language="C#" Value="protected virtual void PreFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PreFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PreFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PreFilterAttributes (attributes As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PreFilterAttributes(System::Collections::IDictionary ^ attributes);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterAttributes : System.Collections.IDictionary -&gt; unit&#xA;override this.PreFilterAttributes : System.Collections.IDictionary -&gt; unit" Usage="activityDesigner.PreFilterAttributes attributes" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes"><see cref="T:System.Collections.IDictionary" /> qui contient les valeurs TypeID des attributs.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à un concepteur d'ajouter des éléments au jeu d'attributs qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreFilterEvents">
      <MemberSignature Language="C#" Value="protected virtual void PreFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PreFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PreFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PreFilterEvents (events As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PreFilterEvents(System::Collections::IDictionary ^ events);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterEvents : System.Collections.IDictionary -&gt; unit&#xA;override this.PreFilterEvents : System.Collections.IDictionary -&gt; unit" Usage="activityDesigner.PreFilterEvents events" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events"><see cref="T:System.Collections.IDictionary" /> qui contient les noms d'événements de la classe.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à un concepteur d'ajouter des éléments au jeu d'événements qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreFilterProperties">
      <MemberSignature Language="C#" Value="protected virtual void PreFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PreFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PreFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PreFilterProperties (properties As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PreFilterProperties(System::Collections::IDictionary ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member PreFilterProperties : System.Collections.IDictionary -&gt; unit&#xA;override this.PreFilterProperties : System.Collections.IDictionary -&gt; unit" Usage="activityDesigner.PreFilterProperties properties" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties"><see cref="T:System.Collections.IDictionary" /> qui contient les noms de propriétés de la classe.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à un concepteur d'ajouter des éléments au jeu de propriétés qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RectangleToLogical">
      <MemberSignature Language="C#" Value="protected System.Drawing.Rectangle RectangleToLogical (System.Drawing.Rectangle rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.Rectangle RectangleToLogical(valuetype System.Drawing.Rectangle rectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RectangleToLogical(System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Drawing::Rectangle RectangleToLogical(System::Drawing::Rectangle rectangle);" />
      <MemberSignature Language="F#" Value="member this.RectangleToLogical : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="activityDesigner.RectangleToLogical rectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rectangle"><see cref="T:System.Drawing.Rectangle" /> qui décrit les coordonnées à transformer.</param>
        <summary>Transforme un rectangle du système de coordonnées d'écran au système de coordonnées de concepteur d'activités.</summary>
        <returns><see cref="T:System.Drawing.Rectangle" /> qui décrit les coordonnées transformées.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RectangleToScreen">
      <MemberSignature Language="C#" Value="protected System.Drawing.Rectangle RectangleToScreen (System.Drawing.Rectangle rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.Rectangle RectangleToScreen(valuetype System.Drawing.Rectangle rectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RectangleToScreen(System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Drawing::Rectangle RectangleToScreen(System::Drawing::Rectangle rectangle);" />
      <MemberSignature Language="F#" Value="member this.RectangleToScreen : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="activityDesigner.RectangleToScreen rectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rectangle"><see cref="T:System.Drawing.Rectangle" /> qui décrit les coordonnées à transformer.</param>
        <summary>Transforme un rectangle du système de coordonnées de concepteur d'activités au système de coordonnées d'écran.</summary>
        <returns><see cref="T:System.Drawing.Rectangle" /> qui décrit les coordonnées transformées.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshDesignerActions">
      <MemberSignature Language="C#" Value="protected internal virtual void RefreshDesignerActions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void RefreshDesignerActions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RefreshDesignerActions" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub RefreshDesignerActions ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void RefreshDesignerActions();" />
      <MemberSignature Language="F#" Value="abstract member RefreshDesignerActions : unit -&gt; unit&#xA;override this.RefreshDesignerActions : unit -&gt; unit" Usage="activityDesigner.RefreshDesignerActions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Actualise les erreurs de configuration associées au concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les actions de concepteur représentent les erreurs de configuration possibles associées à un concepteur. L'appel à <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.RefreshDesignerActions%2A> met à jour ces erreurs avec les modifications récentes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshDesignerVerbs">
      <MemberSignature Language="C#" Value="protected void RefreshDesignerVerbs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RefreshDesignerVerbs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RefreshDesignerVerbs" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RefreshDesignerVerbs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RefreshDesignerVerbs();" />
      <MemberSignature Language="F#" Value="member this.RefreshDesignerVerbs : unit -&gt; unit" Usage="activityDesigner.RefreshDesignerVerbs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Actualise les verbes de concepteur d'activités associés au concepteur en appelant le gestionnaire d'état.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les verbes de concepteur sont affichés dans les menus contextuels et les barres de menus. L'appel à <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.RefreshDesignerVerbs%2A> actualisera les menus de façon à afficher les modifications récentes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected virtual void SaveViewState (System.IO.BinaryWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SaveViewState(class System.IO.BinaryWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.SaveViewState(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SaveViewState (writer As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SaveViewState(System::IO::BinaryWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member SaveViewState : System.IO.BinaryWriter -&gt; unit&#xA;override this.SaveViewState : System.IO.BinaryWriter -&gt; unit" Usage="activityDesigner.SaveViewState writer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Design.IPersistUIState.SaveViewState(System.IO.BinaryWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.BinaryWriter" /> dans lequel l'état d'affichage est stocké.</param>
        <summary>Stocke l'état d'affichage du concepteur dans un flux binaire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'état d'affichage est l'accumulation des valeurs des propriétés du concepteur. Lorsque l'état d'affichage est enregistré dans un flux de données, les valeurs et paramètres du concepteur peuvent être restaurés à l'aide de <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.LoadViewState%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ShowInfoTip">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Affiche l'info-bulle spécifiée pour le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À moins d'être substitué dans une classe dérivée, <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowInfoTip%2A> utilise la logique <xref:System.Workflow.ComponentModel.Design.WorkflowView.ShowInfoTip%2A?displayProperty=nameWithType> pour afficher des info-bulles.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ShowInfoTip">
      <MemberSignature Language="C#" Value="protected void ShowInfoTip (string infoTip);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ShowInfoTip(string infoTip) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowInfoTip(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ShowInfoTip (infoTip As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ShowInfoTip(System::String ^ infoTip);" />
      <MemberSignature Language="F#" Value="member this.ShowInfoTip : string -&gt; unit" Usage="activityDesigner.ShowInfoTip infoTip" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="infoTip" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="infoTip">Texte à afficher dans l'InfoTip.</param>
        <summary>Affiche l'info-bulle spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowInfoTip%2A> pour afficher un rectangle de texte qui peut être utilisé pour afficher des informations détaillées à propos du concepteur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInfoTip">
      <MemberSignature Language="C#" Value="protected void ShowInfoTip (string title, string infoTip);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ShowInfoTip(string title, string infoTip) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowInfoTip(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ShowInfoTip (title As String, infoTip As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ShowInfoTip(System::String ^ title, System::String ^ infoTip);" />
      <MemberSignature Language="F#" Value="member this.ShowInfoTip : string * string -&gt; unit" Usage="activityDesigner.ShowInfoTip (title, infoTip)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="infoTip" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="title">Chaîne qui contient le titre de l'info-bulle.</param>
        <param name="infoTip">Chaîne qui contient le texte de l'info-bulle à afficher.</param>
        <summary>Affiche l'info-bulle pour le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> avec le titre et le texte spécifiés.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInPlaceTip">
      <MemberSignature Language="C#" Value="protected void ShowInPlaceTip (string infoTip, System.Drawing.Rectangle rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ShowInPlaceTip(string infoTip, valuetype System.Drawing.Rectangle rectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowInPlaceTip(System.String,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ShowInPlaceTip(System::String ^ infoTip, System::Drawing::Rectangle rectangle);" />
      <MemberSignature Language="F#" Value="member this.ShowInPlaceTip : string * System.Drawing.Rectangle -&gt; unit" Usage="activityDesigner.ShowInPlaceTip (infoTip, rectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="infoTip" Type="System.String" />
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="infoTip">Chaîne qui contient l'info-bulle à afficher.</param>
        <param name="rectangle"><see cref="T:System.Drawing.Rectangle" /> qui définit l'emplacement auquel afficher l'info-bulle.</param>
        <summary>Affiche l'info-bulle spécifiée à l'emplacement de rectangle spécifié.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowSmartTag">
      <MemberSignature Language="C#" Value="protected virtual bool ShowSmartTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowSmartTag" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowSmartTag" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ShowSmartTag As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool ShowSmartTag { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShowSmartTag : bool" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.ShowSmartTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'activité doit afficher une balise active.</summary>
        <value><see langword="true" /> si l'activité doit afficher un SmartTag ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowSmartTag%2A> pour déterminer s'il faut afficher une balise active lorsqu'une activité a le focus dans le concepteur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Size" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la taille du <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
        <value><see cref="T:System.Drawing.Size" /> qui représente la zone du <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la taille pour ajuster la hauteur et la largeur du concepteur d'activités.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartTagRectangle">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle SmartTagRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle SmartTagRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.SmartTagRectangle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property SmartTagRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Rectangle SmartTagRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.SmartTagRectangle : System.Drawing.Rectangle" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.SmartTagRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le rectangle où doit être affichée la balise active.</summary>
        <value>Rectangle où doit être affichée la balise active.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À utiliser avec <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowSmartTag%2A> et <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.SmartTagVerbs%2A> pour afficher une étiquette active d’actions de concepteur disponibles à l’emplacement spécifié par <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.SmartTagRectangle%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartTagVerbs">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.ActivityDesignerVerb&gt; SmartTagVerbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Design.ActivityDesignerVerb&gt; SmartTagVerbs" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.SmartTagVerbs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property SmartTagVerbs As ReadOnlyCollection(Of ActivityDesignerVerb)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::ComponentModel::Design::ActivityDesignerVerb ^&gt; ^ SmartTagVerbs { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::ComponentModel::Design::ActivityDesignerVerb ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SmartTagVerbs : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.ActivityDesignerVerb&gt;" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.SmartTagVerbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.ActivityDesignerVerb&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une collection en lecture seule d’actions de concepteur à associer à une étiquette active sur le concepteur d’activités.</summary>
        <value>Collection en lecture seule <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> à associer à l’étiquette active du concepteur d’activités.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IDesigner.Component">
      <MemberSignature Language="C#" Value="System.ComponentModel.IComponent System.ComponentModel.Design.IDesigner.Component { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.IComponent System.ComponentModel.Design.IDesigner.Component" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#Component" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Component As IComponent Implements IDesigner.Component" />
      <MemberSignature Language="C++ CLI" Value="property System::ComponentModel::IComponent ^ System::ComponentModel::Design::IDesigner::Component { System::ComponentModel::IComponent ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.Design.IDesigner.Component" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.Design.IDesigner.Component</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le composant de base avec lequel le concepteur d'activités est associé.</summary>
        <value><see cref="T:System.ComponentModel.IComponent" /> avec lequel le concepteur d'activités est associé.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.System%23ComponentModel%23Design%23IDesigner%23Component> représente l'activité que le concepteur d'activités conçoit sur l'aire de conception de workflow.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <MemberSignature Language="C#" Value="void IDesigner.DoDefaultAction ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.IDesigner.DoDefaultAction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#DoDefaultAction" />
      <MemberSignature Language="VB.NET" Value="Sub DoDefaultAction () Implements IDesigner.DoDefaultAction" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.IDesigner.DoDefaultAction() = System::ComponentModel::Design::IDesigner::DoDefaultAction;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesigner.DoDefaultAction</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Effectue l'action par défaut associée au concepteur.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.DoDefaultAction%2A> provoque l'exécution de l'action par défaut associée au concepteur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IDesigner.Initialize">
      <MemberSignature Language="C#" Value="void IDesigner.Initialize (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.IDesigner.Initialize(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#Initialize(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Sub Initialize (component As IComponent) Implements IDesigner.Initialize" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.IDesigner.Initialize(System::ComponentModel::IComponent ^ component) = System::ComponentModel::Design::IDesigner::Initialize;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">L'IComponent avec lequel initialiser le concepteur.</param>
        <summary>Initialise le concepteur avec l'activité associée.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IDesigner.Verbs">
      <MemberSignature Language="C#" Value="System.ComponentModel.Design.DesignerVerbCollection System.ComponentModel.Design.IDesigner.Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Design.DesignerVerbCollection System.ComponentModel.Design.IDesigner.Verbs" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#Verbs" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Verbs As DesignerVerbCollection Implements IDesigner.Verbs" />
      <MemberSignature Language="C++ CLI" Value="property System::ComponentModel::Design::DesignerVerbCollection ^ System::ComponentModel::Design::IDesigner::Verbs { System::ComponentModel::Design::DesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.Design.IDesigner.Verbs" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.Design.IDesigner.Verbs</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.DesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les verbes au moment du design associés au concepteur d’activités.</summary>
        <value>Verbes au moment de la conception associés au concepteur d'activités.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes">
      <MemberSignature Language="C#" Value="void IDesignerFilter.PostFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub PostFilterAttributes (attributes As IDictionary) Implements IDesignerFilter.PostFilterAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System::Collections::IDictionary ^ attributes) = System::ComponentModel::Design::IDesignerFilter::PostFilterAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes"><see cref="T:System.Collections.IDictionary" /> qui contient les TypeID des attributs de la classe.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments du jeu d'attributs qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IDesignerFilter.PostFilterEvents">
      <MemberSignature Language="C#" Value="void IDesignerFilter.PostFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub PostFilterEvents (events As IDictionary) Implements IDesignerFilter.PostFilterEvents" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System::Collections::IDictionary ^ events) = System::ComponentModel::Design::IDesignerFilter::PostFilterEvents;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events"><see cref="T:System.Collections.IDictionary" /> qui contient les noms d'événements de la classe.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments au jeu d'événements qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IDesignerFilter.PostFilterProperties">
      <MemberSignature Language="C#" Value="void IDesignerFilter.PostFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub PostFilterProperties (properties As IDictionary) Implements IDesignerFilter.PostFilterProperties" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System::Collections::IDictionary ^ properties) = System::ComponentModel::Design::IDesignerFilter::PostFilterProperties;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties"><see cref="T:System.Collections.IDictionary" /> qui contient les noms de propriétés de la classe.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à un concepteur de modifier ou de supprimer des éléments au jeu de propriétés qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes">
      <MemberSignature Language="C#" Value="void IDesignerFilter.PreFilterAttributes (System.Collections.IDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(class System.Collections.IDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterAttributes(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub PreFilterAttributes (attributes As IDictionary) Implements IDesignerFilter.PreFilterAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System::Collections::IDictionary ^ attributes) = System::ComponentModel::Design::IDesignerFilter::PreFilterAttributes;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes"><see cref="T:System.Collections.IDictionary" /> qui contient les TypeID des attributs de la classe.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à un concepteur d'ajouter des éléments au jeu d'attributs qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IDesignerFilter.PreFilterEvents">
      <MemberSignature Language="C#" Value="void IDesignerFilter.PreFilterEvents (System.Collections.IDictionary events);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(class System.Collections.IDictionary events) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterEvents(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub PreFilterEvents (events As IDictionary) Implements IDesignerFilter.PreFilterEvents" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System::Collections::IDictionary ^ events) = System::ComponentModel::Design::IDesignerFilter::PreFilterEvents;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="events"><see cref="T:System.Collections.IDictionary" /> qui contient les noms d'événements de la classe.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à un concepteur d'ajouter des éléments au jeu d'événements qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IDesignerFilter.PreFilterProperties">
      <MemberSignature Language="C#" Value="void IDesignerFilter.PreFilterProperties (System.Collections.IDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(class System.Collections.IDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterProperties(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Sub PreFilterProperties (properties As IDictionary) Implements IDesignerFilter.PreFilterProperties" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System::Collections::IDictionary ^ properties) = System::ComponentModel::Design::IDesignerFilter::PreFilterProperties;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="properties"><see cref="T:System.Collections.IDictionary" /> qui contient les noms de propriétés de la classe.</param>
        <summary>En cas de substitution dans une classe dérivée, permet à un concepteur d'ajouter des éléments au jeu de propriétés qu'il expose par le biais d'un TypeDescriptor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IRootDesigner.GetView">
      <MemberSignature Language="C#" Value="object IRootDesigner.GetView (System.ComponentModel.Design.ViewTechnology technology);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ComponentModel.Design.IRootDesigner.GetView(valuetype System.ComponentModel.Design.ViewTechnology technology) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IRootDesigner#GetView(System.ComponentModel.Design.ViewTechnology)" />
      <MemberSignature Language="VB.NET" Value="Function GetView (technology As ViewTechnology) As Object Implements IRootDesigner.GetView" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ComponentModel.Design.IRootDesigner.GetView(System::ComponentModel::Design::ViewTechnology technology) = System::ComponentModel::Design::IRootDesigner::GetView;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="technology" Type="System.ComponentModel.Design.ViewTechnology" />
      </Parameters>
      <Docs>
        <param name="technology"><see cref="T:System.ComponentModel.Design.ViewTechnology" /> pour lequel retourner l'objet d'affichage. </param>
        <summary>Retourne un objet d'affichage pour la technologie d'affichage spécifiée.</summary>
        <returns>Objet représentant l'affichage de ce concepteur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce membre est une implémentation d'un membre d'interface explicite. Il peut être utilisé uniquement lorsque le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> est casté en une interface <xref:System.ComponentModel.Design.IRootDesigner>.  
  
 Pour plus d'informations, consultez <xref:System.ComponentModel.Design.IRootDesigner.GetView%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <MemberSignature Language="C#" Value="System.ComponentModel.Design.ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.Design.ViewTechnology[] System.ComponentModel.Design.IRootDesigner.SupportedTechnologies" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IRootDesigner#SupportedTechnologies" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SupportedTechnologies As ViewTechnology() Implements IRootDesigner.SupportedTechnologies" />
      <MemberSignature Language="C++ CLI" Value="property cli::array &lt;System::ComponentModel::Design::ViewTechnology&gt; ^ System::ComponentModel::Design::IRootDesigner::SupportedTechnologies { cli::array &lt;System::ComponentModel::Design::ViewTechnology&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.ComponentModel.Design.IRootDesigner.SupportedTechnologies" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Design.ViewTechnology[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le tableau des technologies prises en charge par le concepteur d'activités pour son affichage.</summary>
        <value>Un tableau d'objets <see cref="T:System.ComponentModel.Design.ViewTechnology" /> pris en charge.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À moins d'être substitué dans une classe dérivée, <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.System%23ComponentModel%23Design%23IRootDesigner%23SupportedTechnologies> retourne un tableau à membre unique qui contient <xref:System.ComponentModel.Design.ViewTechnology.Default?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Drawing.Design.IToolboxUser.GetToolSupported">
      <MemberSignature Language="C#" Value="bool IToolboxUser.GetToolSupported (System.Drawing.Design.ToolboxItem toolboxItem);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Drawing.Design.IToolboxUser.GetToolSupported(class System.Drawing.Design.ToolboxItem toolboxItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Drawing#Design#IToolboxUser#GetToolSupported(System.Drawing.Design.ToolboxItem)" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Drawing.Design.IToolboxUser.GetToolSupported(System::Drawing::Design::ToolboxItem ^ toolboxItem) = System::Drawing::Design::IToolboxUser::GetToolSupported;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toolboxItem" Type="System.Drawing.Design.ToolboxItem" />
      </Parameters>
      <Docs>
        <param name="toolboxItem"><see cref="T:System.Drawing.Design.ToolboxItem" /> pour lequel vérifier la prise en charge.</param>
        <summary>Détermine une valeur indiquant si l'élément de boîte à outils spécifié est pris en charge par le concepteur d'activités actuel.</summary>
        <returns><see langword="true" /> si l'outil est pris en charge par la boîte à outils et peut être activé ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d'informations, consultez <xref:System.Drawing.Design.IToolboxUser.GetToolSupported%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Drawing.Design.IToolboxUser.ToolPicked">
      <MemberSignature Language="C#" Value="void IToolboxUser.ToolPicked (System.Drawing.Design.ToolboxItem toolboxItem);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Drawing.Design.IToolboxUser.ToolPicked(class System.Drawing.Design.ToolboxItem toolboxItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Drawing#Design#IToolboxUser#ToolPicked(System.Drawing.Design.ToolboxItem)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Drawing.Design.IToolboxUser.ToolPicked(System::Drawing::Design::ToolboxItem ^ toolboxItem) = System::Drawing::Design::IToolboxUser::ToolPicked;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.Design.IToolboxUser.ToolPicked(System.Drawing.Design.ToolboxItem)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toolboxItem" Type="System.Drawing.Design.ToolboxItem" />
      </Parameters>
      <Docs>
        <param name="toolboxItem"><see cref="T:System.Drawing.Design.ToolboxItem" /> à sélectionner.</param>
        <summary>Sélectionne l'élément de boîte à outils spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pour plus d'informations, consultez <xref:System.Drawing.Design.IToolboxUser.ToolPicked%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Workflow.ComponentModel.Design.IPersistUIState.LoadViewState">
      <MemberSignature Language="C#" Value="void IPersistUIState.LoadViewState (System.IO.BinaryReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Workflow.ComponentModel.Design.IPersistUIState.LoadViewState(class System.IO.BinaryReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IPersistUIState#LoadViewState(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Sub LoadViewState (reader As BinaryReader) Implements IPersistUIState.LoadViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Workflow.ComponentModel.Design.IPersistUIState.LoadViewState(System::IO::BinaryReader ^ reader) = System::Workflow::ComponentModel::Design::IPersistUIState::LoadViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Design.IPersistUIState.LoadViewState(System.IO.BinaryReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.IO.BinaryReader" /> à partir duquel charger l'état d'affichage. </param>
        <summary>Restaure l'état d'affichage à partir d'un flux binaire.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Workflow.ComponentModel.Design.IPersistUIState.SaveViewState">
      <MemberSignature Language="C#" Value="void IPersistUIState.SaveViewState (System.IO.BinaryWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Workflow.ComponentModel.Design.IPersistUIState.SaveViewState(class System.IO.BinaryWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IPersistUIState#SaveViewState(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub SaveViewState (writer As BinaryWriter) Implements IPersistUIState.SaveViewState" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Workflow.ComponentModel.Design.IPersistUIState.SaveViewState(System::IO::BinaryWriter ^ writer) = System::Workflow::ComponentModel::Design::IPersistUIState::SaveViewState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Design.IPersistUIState.SaveViewState(System.IO.BinaryWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.BinaryWriter" /> dans lequel enregistrer l'état d'affichage.</param>
        <summary>Enregistre l'état d'affichage dans un flux binaire.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.InvokingDesigner">
      <MemberSignature Language="C#" Value="System.Workflow.ComponentModel.Design.CompositeActivityDesigner System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.InvokingDesigner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.Design.CompositeActivityDesigner System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.InvokingDesigner" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#InvokingDesigner" />
      <MemberSignature Language="VB.NET" Value=" Property InvokingDesigner As CompositeActivityDesigner Implements IWorkflowRootDesigner.InvokingDesigner" />
      <MemberSignature Language="C++ CLI" Value="property System::Workflow::ComponentModel::Design::CompositeActivityDesigner ^ System::Workflow::ComponentModel::Design::IWorkflowRootDesigner::InvokingDesigner { System::Workflow::ComponentModel::Design::CompositeActivityDesigner ^ get(); void set(System::Workflow::ComponentModel::Design::CompositeActivityDesigner ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.InvokingDesigner" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.InvokingDesigner</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.CompositeActivityDesigner</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> qui a demandé l'initialisation du concepteur d'activités.</summary>
        <value><see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> qui a demandé l'initialisation du concepteur d'activités.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.IsSupportedActivityType">
      <MemberSignature Language="C#" Value="bool IWorkflowRootDesigner.IsSupportedActivityType (Type activityType);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.IsSupportedActivityType(class System.Type activityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#IsSupportedActivityType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Function IsSupportedActivityType (activityType As Type) As Boolean Implements IWorkflowRootDesigner.IsSupportedActivityType" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.IsSupportedActivityType(Type ^ activityType) = System::Workflow::ComponentModel::Design::IWorkflowRootDesigner::IsSupportedActivityType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.IsSupportedActivityType(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="activityType"><see cref="T:System.Type" /> de l'activité pour lequel vérifier la prise en charge sur le concepteur d'activité.</param>
        <summary>Retourne une valeur qui indique si le type spécifié est pris en charge sur le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> actuel.</summary>
        <returns><see langword="true" /> si le type est pris en charge sur le concepteur de flux de travail actuel ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 IsSupportedActivityType est appelé uniquement si le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner> est un concepteur racine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.MessageFilters">
      <MemberSignature Language="C#" Value="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter&gt; System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.MessageFilters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter&gt; System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.MessageFilters" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#MessageFilters" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property MessageFilters As ReadOnlyCollection(Of WorkflowDesignerMessageFilter) Implements IWorkflowRootDesigner.MessageFilters" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::ComponentModel::Design::WorkflowDesignerMessageFilter ^&gt; ^ System::Workflow::ComponentModel::Design::IWorkflowRootDesigner::MessageFilters { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::ComponentModel::Design::WorkflowDesignerMessageFilter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.MessageFilters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.MessageFilters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient les filtres de message associés au concepteur d'activités.</summary>
        <value>Collection en lecture seule <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> qui contient les filtres de message associés au concepteur racine de workflow.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.SupportsLayoutPersistence">
      <MemberSignature Language="C#" Value="bool System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.SupportsLayoutPersistence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.SupportsLayoutPersistence" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#SupportsLayoutPersistence" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SupportsLayoutPersistence As Boolean Implements IWorkflowRootDesigner.SupportsLayoutPersistence" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Workflow::ComponentModel::Design::IWorkflowRootDesigner::SupportsLayoutPersistence { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.SupportsLayoutPersistence" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.SupportsLayoutPersistence</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur qui indique si le concepteur racine de workflow réel prend en charge la persistance de disposition.</summary>
        <value><see langword="true" /> si le concepteur prend en charge la persistance de disposition, sinon <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:  virtual property System::String ^ Text {  public:&#xA;System::String ^ get(); protected:&#xA; void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le texte à associer au concepteur.</summary>
        <value>Texte à associer au concepteur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À utiliser pour associer une chaîne de texte au concepteur.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRectangle">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle TextRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle TextRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.TextRectangle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property TextRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Rectangle TextRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.TextRectangle : System.Drawing.Rectangle" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.TextRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la valeur du rectangle de texte en coordonnées logiques.</summary>
        <value><see cref="T:System.Drawing.Rectangle" /> qui contient le texte associé au concepteur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À utiliser pour déterminer l'emplacement sur le concepteur où <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.Text%2A> sera affiché.  
  
   
  
## Examples  
 L'exemple qui suit montre comment substituer la propriété <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.TextRectangle%2A>. Dans cet exemple, le <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.TextRectangle%2A> est calculé à l'aide des limites du <xref:System.Workflow.ComponentModel.Design.ActivityDesigner>, ainsi que de l'emplacement et de la taille du <xref:System.Workflow.ComponentModel.Design.ActivityDesigner.ImageRectangle%2A>.  
  
 [!code-csharp[WF_Samples#75](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#75)]
 [!code-vb[WF_Samples#75](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#75)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Verbs">
      <MemberSignature Language="C#" Value="protected virtual System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection Verbs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection Verbs" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Verbs" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Verbs As ActivityDesignerVerbCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Workflow::ComponentModel::Design::ActivityDesignerVerbCollection ^ Verbs { System::Workflow::ComponentModel::Design::ActivityDesignerVerbCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Verbs : System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" Usage="System.Workflow.ComponentModel.Design.ActivityDesigner.Verbs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient la collection de verbes à associer au concepteur.</summary>
        <value>Collection de verbes à associer au concepteur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez la méthode Verbs pour déterminer les verbes à afficher dans le menu contextuel.  
  
   
  
## Examples  
 L'exemple suivant montre comment substituer la propriété <xref:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.Verbs%2A> pour insérer des actions de verbe personnalisées pour un <xref:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner>. Le `CreateActivityVerbs` crée un nouveau <xref:System.Workflow.ComponentModel.Design.ActivityDesignerVerb> nommé `"Add New Parallel Branch"` et associe un gestionnaire d'événements nommé `OnAddParallelBranch`. Lorsque l'utilisateur clique sur le verbe dans le concepteur de workflow, le gestionnaire d'événements est appelé.  
  
 [!code-csharp[WF_Samples#73](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#73)]
 [!code-vb[WF_Samples#73](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#73)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>