<Type Name="CompositeDesignerTheme" FullName="System.Workflow.ComponentModel.Design.CompositeDesignerTheme">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="16ee469cb9d273206b495ae5a8df5652d011361d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36451021" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompositeDesignerTheme : System.Workflow.ComponentModel.Design.ActivityDesignerTheme" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositeDesignerTheme extends System.Workflow.ComponentModel.Design.ActivityDesignerTheme" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositeDesignerTheme&#xA;Inherits ActivityDesignerTheme" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositeDesignerTheme : System::Workflow::ComponentModel::Design::ActivityDesignerTheme" />
  <TypeSignature Language="F#" Value="type CompositeDesignerTheme = class&#xA;    inherit ActivityDesignerTheme" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.ComponentModel.Design.ActivityDesignerTheme</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit des paramètres de thème aux objets <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 La classe <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> contrôle l'apparence et la convivialité d'un objet <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner> sur une aire de conception de workflow.  
  
   
  
## Examples  
 L'exemple suivant montre comment créer un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personnalisé en dérivant de la classe <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> et en définissant les propriétés appropriées pour le nouveau thème.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Pour utiliser le thème sur un <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, appliquez le <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> à la classe <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositeDesignerTheme (System.Workflow.ComponentModel.Design.WorkflowTheme theme);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.ComponentModel.Design.WorkflowTheme theme) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (theme As WorkflowTheme)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositeDesignerTheme(System::Workflow::ComponentModel::Design::WorkflowTheme ^ theme);" />
      <MemberSignature Language="F#" Value="new System.Workflow.ComponentModel.Design.CompositeDesignerTheme : System.Workflow.ComponentModel.Design.WorkflowTheme -&gt; System.Workflow.ComponentModel.Design.CompositeDesignerTheme" Usage="new System.Workflow.ComponentModel.Design.CompositeDesignerTheme theme" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="theme" Type="System.Workflow.ComponentModel.Design.WorkflowTheme" />
      </Parameters>
      <Docs>
        <param name="theme">
          <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> à associer au thème de concepteur composite.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant montre comment créer un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personnalisé en dérivant de la classe <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> et en définissant les propriétés appropriées pour le nouveau thème.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Pour utiliser le thème sur un <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, appliquez le <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> à la classe <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectorEndCap">
      <MemberSignature Language="C#" Value="public virtual System.Workflow.ComponentModel.Design.LineAnchor ConnectorEndCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.ComponentModel.Design.LineAnchor ConnectorEndCap" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorEndCap" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectorEndCap As LineAnchor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Workflow::ComponentModel::Design::LineAnchor ConnectorEndCap { System::Workflow::ComponentModel::Design::LineAnchor get(); void set(System::Workflow::ComponentModel::Design::LineAnchor value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectorEndCap : System.Workflow.ComponentModel.Design.LineAnchor with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorEndCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(12)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.LineAnchor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine la forme qui apparaît à l'extrémité d'un connecteur.</summary>
        <value>Valeur d'énumération <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> qui définit la forme qui apparaît à l'extrémité du connecteur. La valeur par défaut est <see cref="F:System.Workflow.ComponentModel.Design.LineAnchor.ArrowAnchor" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant montre comment créer un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personnalisé en dérivant de la classe <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> et en définissant les propriétés appropriées pour le nouveau thème.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Pour utiliser le thème sur un <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, appliquez le <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> à la classe <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectorSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size ConnectorSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ConnectorSize" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConnectorSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size ConnectorSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.ConnectorSize : System.Drawing.Size" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Drawing.Size" /> du connecteur.</summary>
        <value>Objet <see cref="T:System.Drawing.Size" /> qui contient des informations relatives à la hauteur et la largeur du connecteur.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectorStartCap">
      <MemberSignature Language="C#" Value="public virtual System.Workflow.ComponentModel.Design.LineAnchor ConnectorStartCap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.ComponentModel.Design.LineAnchor ConnectorStartCap" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorStartCap" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ConnectorStartCap As LineAnchor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Workflow::ComponentModel::Design::LineAnchor ConnectorStartCap { System::Workflow::ComponentModel::Design::LineAnchor get(); void set(System::Workflow::ComponentModel::Design::LineAnchor value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectorStartCap : System.Workflow.ComponentModel.Design.LineAnchor with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorStartCap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.LineAnchor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui détermine la forme qui apparaît au début d'un connecteur.</summary>
        <value>Valeur d'énumération <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> qui définit la forme qui apparaît au début du connecteur. La valeur par défaut est <see cref="F:System.Workflow.ComponentModel.Design.LineAnchor.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant montre comment créer un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personnalisé en dérivant de la classe <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> et en définissant les propriétés appropriées pour le nouveau thème.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Pour utiliser le thème sur un <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, appliquez le <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> à la classe <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="compositeDesignerTheme.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
        <summary>Libère les ressources non managées utilisées par <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> et libère éventuellement les ressources managées.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandButtonSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size ExpandButtonSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ExpandButtonSize" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ExpandButtonSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExpandButtonSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size ExpandButtonSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpandButtonSize : System.Drawing.Size" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ExpandButtonSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Drawing.Size" /> du bouton de développement sur le concepteur d'activités composite.</summary>
        <value>Objet <see cref="T:System.Drawing.Size" /> qui contient des informations relatives à la hauteur et la largeur du bouton de développement sur le <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExpandButtonBackgroundBrush">
      <MemberSignature Language="C#" Value="public System.Drawing.Brush GetExpandButtonBackgroundBrush (System.Drawing.Rectangle rectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Brush GetExpandButtonBackgroundBrush(valuetype System.Drawing.Rectangle rectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.GetExpandButtonBackgroundBrush(System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Brush ^ GetExpandButtonBackgroundBrush(System::Drawing::Rectangle rectangle);" />
      <MemberSignature Language="F#" Value="member this.GetExpandButtonBackgroundBrush : System.Drawing.Rectangle -&gt; System.Drawing.Brush" Usage="compositeDesignerTheme.GetExpandButtonBackgroundBrush rectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Brush</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rectangle">
          <see cref="T:System.Drawing.Rectangle" /> qui définit les limites du bouton de développement sur le <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</param>
        <summary>Récupère un pinceau qui définit les propriétés d’affichage d’arrière-plan du bouton de développement sur le concepteur d’activités composite.</summary>
        <returns>Objet <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> qui utilise le paramètre <paramref name="rectangle" /> pour définir la zone de bouton dans laquelle le pinceau applique deux couleurs dans un dégradé linéaire du coin supérieur gauche au coin inférieur droit du bouton de développement.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le pinceau d'arrière-plan du bouton de développement n'a pas la valeur `null` (`Nothing` en Visual Basic) avant que <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.GetExpandButtonBackgroundBrush%2A> ne soit appelé, la méthode supprime le pinceau précédent et en crée un nouveau.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize();" />
      <MemberSignature Language="F#" Value="override this.Initialize : unit -&gt; unit" Usage="compositeDesignerTheme.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Effectue des tâches d'initialisation supplémentaires au-delà de celles fournies par le constructeur <see cref="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la propriété <xref:System.Workflow.ComponentModel.Design.AmbientTheme.UseOperatingSystemSettings%2A> a la valeur `true`, la méthode <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Initialize%2A> obtient des paramètres pour l'objet <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> à partir du système d'exploitation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAmbientPropertyChanged">
      <MemberSignature Language="C#" Value="public override void OnAmbientPropertyChanged (System.Workflow.ComponentModel.Design.AmbientProperty ambientProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnAmbientPropertyChanged(valuetype System.Workflow.ComponentModel.Design.AmbientProperty ambientProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void OnAmbientPropertyChanged(System::Workflow::ComponentModel::Design::AmbientProperty ambientProperty);" />
      <MemberSignature Language="F#" Value="override this.OnAmbientPropertyChanged : System.Workflow.ComponentModel.Design.AmbientProperty -&gt; unit" Usage="compositeDesignerTheme.OnAmbientPropertyChanged ambientProperty" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ambientProperty" Type="System.Workflow.ComponentModel.Design.AmbientProperty" />
      </Parameters>
      <Docs>
        <param name="ambientProperty">Valeur d'énumération <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> que le thème de concepteur composite doit maintenant utiliser.</param>
        <summary>Indique à l'objet <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> que les paramètres de propriété ambiante pour le concepteur ont changé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lorsque cette méthode est appelée, elle affecte la valeur <xref:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackColorStart%2A> aux propriétés <xref:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackColorEnd%2A> et <xref:System.Drawing.Color.Empty>.  
  
 L'énumération <xref:System.Workflow.ComponentModel.Design.AmbientProperty> détermine où un thème de concepteur obtient ses paramètres de propriété ambiante. Si la valeur <xref:System.Workflow.ComponentModel.Design.AmbientProperty.DesignerSize> est définie, la classe de thème de concepteur obtient ses paramètres ambiants de la propriété <xref:System.Workflow.ComponentModel.Design.WorkflowTheme.AmbientTheme%2A>. Si la valeur <xref:System.Workflow.ComponentModel.Design.AmbientProperty.DesignerSize> est définie, la classe de thème de concepteur obtient ses paramètres ambiants du système d'exploitation sur lequel le concepteur est installé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDropShadow">
      <MemberSignature Language="C#" Value="public virtual bool ShowDropShadow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowDropShadow" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ShowDropShadow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShowDropShadow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ShowDropShadow { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowDropShadow : bool with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ShowDropShadow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(10)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si le thème de concepteur composite affichera des ombres portées autour du concepteur d’activité composite.</summary>
        <value>
          <see langword="true" /> si le <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> affiche des ombres portées autour du <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant montre comment créer un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personnalisé en dérivant de la classe <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> et en définissant les propriétés appropriées pour le nouveau thème.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Pour utiliser le thème sur un <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, appliquez le <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> à la classe <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WatermarkAlignment">
      <MemberSignature Language="C#" Value="public virtual System.Workflow.ComponentModel.Design.DesignerContentAlignment WatermarkAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.ComponentModel.Design.DesignerContentAlignment WatermarkAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property WatermarkAlignment As DesignerContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Workflow::ComponentModel::Design::DesignerContentAlignment WatermarkAlignment { System::Workflow::ComponentModel::Design::DesignerContentAlignment get(); void set(System::Workflow::ComponentModel::Design::DesignerContentAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.WatermarkAlignment : System.Workflow.ComponentModel.Design.DesignerContentAlignment with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(9)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Design.DesignerContentAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit l'alignement de l'image en filigrane dans le <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
        <value>Valeur d'énumération <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" /> qui indique où sera placée l'image en filigrane dans le <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />. La valeur par défaut est <see cref="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomRight" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant montre comment créer un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personnalisé en dérivant de la classe <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> et en définissant les propriétés appropriées pour le nouveau thème.  
  
 [!code-csharp[WF_Samples#30](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#30)]
 [!code-vb[WF_Samples#30](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#30)]  
  
 Pour utiliser le thème sur un <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, appliquez le <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> à la classe <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WatermarkImage">
      <MemberSignature Language="C#" Value="public System.Drawing.Image WatermarkImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image WatermarkImage" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WatermarkImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Image ^ WatermarkImage { System::Drawing::Image ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WatermarkImage : System.Drawing.Image" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient l'image en filigrane à utiliser sur le concepteur d'activités composite.</summary>
        <value>Objet <see cref="T:System.Drawing.Image" /> à utiliser comme filigrane pour le <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la valeur de propriété <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath%2A> est `null` (`Nothing` en Visual Basic), cette propriété fournira l'image pour le filigrane. Si la propriété <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath%2A> a une valeur valide, cette propriété a la valeur `null` (`Nothing`).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WatermarkImagePath">
      <MemberSignature Language="C#" Value="public virtual string WatermarkImagePath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WatermarkImagePath" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property WatermarkImagePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ WatermarkImagePath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WatermarkImagePath : string with get, set" Usage="System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Workflow.ComponentModel.Design.ImageBrowserEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le chemin d'accès relatif à l'image en filigrane à utiliser sur le concepteur d'activité composite.</summary>
        <value>Valeur de chaîne qui représente le chemin d'accès relatif à l'image en filigrane à utiliser sur le <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant montre comment créer un <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> personnalisé en dérivant de la classe <xref:System.Workflow.ComponentModel.Design.CompositeDesignerTheme> et en définissant les propriétés appropriées pour le nouveau thème.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 Pour utiliser le thème sur un <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>, appliquez le <xref:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute> à la classe <xref:System.Workflow.ComponentModel.Design.CompositeActivityDesigner>.  
  
 [!code-csharp[WF_Samples#24](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#24)]
 [!code-vb[WF_Samples#24](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>