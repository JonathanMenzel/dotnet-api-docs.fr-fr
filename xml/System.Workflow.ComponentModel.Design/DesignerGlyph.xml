<Type Name="DesignerGlyph" FullName="System.Workflow.ComponentModel.Design.DesignerGlyph">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2a735b9d304d529f2f2643b60b728081d4e00250" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37738246" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DesignerGlyph" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DesignerGlyph extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DesignerGlyph" />
  <TypeSignature Language="C++ CLI" Value="public ref class DesignerGlyph abstract" />
  <TypeSignature Language="F#" Value="type DesignerGlyph = class" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dessine un glyphe à la position d'ordre Z supérieure sur un concepteur d'activités.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 La classe <xref:System.Workflow.ComponentModel.Design.DesignerGlyph> est la classe de base pour tous les glyphes concepteur utilisés sur une aire de conception de workflow.  
  
 Les développeurs de concepteur d'activités peuvent utiliser les classes qui héritent de <xref:System.Workflow.ComponentModel.Design.DesignerGlyph> pour dessiner des glyphes personnalisés sur l'aire d'un <xref:System.Workflow.ComponentModel.Design.ActivityDesigner>. Les classes <xref:System.Workflow.ComponentModel.Design.DesignerGlyph> dessinent de tels glyphes à la position d'ordre Z supérieure, ce qui place visuellement le glyphe personnalisé par-dessus tous les autres glyphes sur le concepteur en fonction de la valeur <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.Priority%2A> du glyphe personnalisé. Une valeur inférieure pour la propriété <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.Priority%2A> indique une priorité plus élevée et dessine par conséquent le glyphe à la position d'ordre Z supérieure sur un concepteur d'activités.  
  
   
  
## Examples  
 L'exemple de code suivant illustre une classe de glyphes qui dérive de la classe <xref:System.Workflow.ComponentModel.Design.DesignerGlyph>.  Le code substitue les méthodes <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.GetBounds%2A> et <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.OnPaint%2A>.  
  
 Cet exemple de code fait partie de l'exemple du Kit de développement logiciel Workflow Monitor (SDK) et provient du fichier DesignerGlyphProvider.cs. Pour plus d’informations, consultez [Workflow Monitor](http://msdn.microsoft.com/library/4f70c1c5-f82d-4d5f-8b7d-943b9f99f8e2).  
  
 [!code-csharp[WF_Samples#132](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#132)]
 [!code-vb[WF_Samples#132](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#132)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Lorsque vous héritez de <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />, vous devez substituer les membres suivants : <see cref="M:System.Workflow.ComponentModel.Design.DesignerGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)" />.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DesignerGlyph ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.DesignerGlyph.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DesignerGlyph();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Lors de l'implémentation dans une classe dérivée, initialise une nouvelle instance de la classe <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBeActivated">
      <MemberSignature Language="C#" Value="public virtual bool CanBeActivated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBeActivated" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.DesignerGlyph.CanBeActivated" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanBeActivated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanBeActivated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanBeActivated : bool" Usage="System.Workflow.ComponentModel.Design.DesignerGlyph.CanBeActivated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si le <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> peut obtenir le focus sur le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> auquel il est associé.</summary>
        <value>
          <see langword="true" /> si le glyphe concepteur peut être activé ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple suivant illustre une implémentation de la propriété CanBeActivated.  Cet exemple provient de l'exemple du Kit de développement logiciel Tracking Profile Designer (SDK).  Pour plus d’informations, consultez [exemple de Concepteur de profil de suivi](http://msdn.microsoft.com/library/a280199c-3000-4148-ac63-cb5aaeac07c8).  
  
 [!code-csharp[WF_Samples#119](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#119)]
 [!code-vb[WF_Samples#119](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#119)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBounds">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle GetBounds (System.Workflow.ComponentModel.Design.ActivityDesigner designer, bool activated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.Rectangle GetBounds(class System.Workflow.ComponentModel.Design.ActivityDesigner designer, bool activated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.DesignerGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBounds (designer As ActivityDesigner, activated As Boolean) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Drawing::Rectangle GetBounds(System::Workflow::ComponentModel::Design::ActivityDesigner ^ designer, bool activated);" />
      <MemberSignature Language="F#" Value="abstract member GetBounds : System.Workflow.ComponentModel.Design.ActivityDesigner * bool -&gt; System.Drawing.Rectangle&#xA;override this.GetBounds : System.Workflow.ComponentModel.Design.ActivityDesigner * bool -&gt; System.Drawing.Rectangle" Usage="designerGlyph.GetBounds (designer, activated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="designer" Type="System.Workflow.ComponentModel.Design.ActivityDesigner" />
        <Parameter Name="activated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="designer">
          <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> auquel le glyphe est associé.</param>
        <param name="activated">
          <see langword="true" /> pour indiquer si le glyphe apparaît sur l'aire du concepteur d'activité ; sinon, <see langword="false" />.</param>
        <summary>Retourne les limites pour le glyphe sur le <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> spécifié.</summary>
        <returns>
          <see cref="T:System.Drawing.Rectangle" /> qui représente les limites du glyphe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 À moins d'être substitué dans une classe dérivée, <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.GetBounds%2A> retourne les limites du concepteur d'activité auquel le glyphe est associé.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment substituer la méthode <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.GetBounds%2A>. Le code définit la taille et l'emplacement de l'objet de glyphe personnalisé.  
  
 Cet exemple de code fait partie de l'exemple du Kit de développement logiciel Workflow Monitor (SDK) et provient du fichier DesignerGlyphProvider.cs. Pour plus d’informations, consultez [Workflow Monitor](http://msdn.microsoft.com/library/4f70c1c5-f82d-4d5f-8b7d-943b9f99f8e2).  
  
 [!code-csharp[WF_Samples#133](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#133)]
 [!code-vb[WF_Samples#133](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#133)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="designer" /> contient une référence Null (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="HighestPriority">
      <MemberSignature Language="C#" Value="public const int HighestPriority = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 HighestPriority = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.ComponentModel.Design.DesignerGlyph.HighestPriority" />
      <MemberSignature Language="VB.NET" Value="Public Const HighestPriority As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int HighestPriority = 0;" />
      <MemberSignature Language="F#" Value="val mutable HighestPriority : int" Usage="System.Workflow.ComponentModel.Design.DesignerGlyph.HighestPriority" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Représente la priorité la plus élevée possible pour un <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />. Cette valeur est une constante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une valeur inférieure pour la propriété <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.Priority%2A> indique une priorité plus élevée et dessine par conséquent le glyphe à la position d'ordre Z supérieure sur un concepteur d'activités. La valeur de la <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.HighestPriority> est de 0.  
  
> [!NOTE]
>  Cette valeur constante sert d'indication lors de la création de glyphes personnalisés. Vous êtes libre d'utiliser des valeurs différentes pour la propriété <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.Priority%2A> lors de la conception de votre glyphe personnalisé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestPriority">
      <MemberSignature Language="C#" Value="public const int LowestPriority = 1000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 LowestPriority = (1000000)" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.ComponentModel.Design.DesignerGlyph.LowestPriority" />
      <MemberSignature Language="VB.NET" Value="Public Const LowestPriority As Integer  = 1000000" />
      <MemberSignature Language="C++ CLI" Value="public: int LowestPriority = 1000000;" />
      <MemberSignature Language="F#" Value="val mutable LowestPriority : int" Usage="System.Workflow.ComponentModel.Design.DesignerGlyph.LowestPriority" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1000000</MemberValue>
      <Docs>
        <summary>Représente la priorité la plus faible possible pour un <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />. Cette valeur est une constante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une valeur élevée pour la propriété <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.Priority%2A> indique une priorité moins élevée et dessine par conséquent le glyphe à la position d'ordre Z inférieure sur un concepteur d'activités. La valeur de la <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.LowestPriority> champ est 1000000.  
  
> [!NOTE]
>  Cette valeur constante sert d'indication lors de la création de glyphes personnalisés. Vous êtes libre d'utiliser des valeurs différentes pour la propriété <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.Priority%2A> lors de la conception de votre glyphe personnalisé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalPriority">
      <MemberSignature Language="C#" Value="public const int NormalPriority = 10000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NormalPriority = (10000)" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.ComponentModel.Design.DesignerGlyph.NormalPriority" />
      <MemberSignature Language="VB.NET" Value="Public Const NormalPriority As Integer  = 10000" />
      <MemberSignature Language="C++ CLI" Value="public: int NormalPriority = 10000;" />
      <MemberSignature Language="F#" Value="val mutable NormalPriority : int" Usage="System.Workflow.ComponentModel.Design.DesignerGlyph.NormalPriority" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>10000</MemberValue>
      <Docs>
        <summary>Représente la priorité normale pour un <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />. Cette valeur est une constante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une valeur inférieure pour la propriété <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.Priority%2A> indique une priorité plus élevée, alors qu'une valeur plus élevée indique une priorité plus faible. La valeur du champ <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.NormalPriority> est 10000.  
  
> [!NOTE]
>  Cette valeur constante sert d'indication lors de la création de glyphes personnalisés. Vous êtes libre d'utiliser des valeurs différentes pour la propriété <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.Priority%2A> lors de la conception de votre glyphe personnalisé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnActivate (System.Workflow.ComponentModel.Design.ActivityDesigner designer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivate(class System.Workflow.ComponentModel.Design.ActivityDesigner designer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.DesignerGlyph.OnActivate(System.Workflow.ComponentModel.Design.ActivityDesigner)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnActivate (designer As ActivityDesigner)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnActivate(System::Workflow::ComponentModel::Design::ActivityDesigner ^ designer);" />
      <MemberSignature Language="F#" Value="abstract member OnActivate : System.Workflow.ComponentModel.Design.ActivityDesigner -&gt; unit&#xA;override this.OnActivate : System.Workflow.ComponentModel.Design.ActivityDesigner -&gt; unit" Usage="designerGlyph.OnActivate designer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="designer" Type="System.Workflow.ComponentModel.Design.ActivityDesigner" />
      </Parameters>
      <Docs>
        <param name="designer">
          <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> sur lequel le glyphe est dessiné.</param>
        <summary>Indique au glyphe qu'une action exécutée a activé le glyphe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple de code suivant illustre une implémentation de la méthode OnActivate.  Cet exemple provient de l'exemple du Kit de développement logiciel Tracking Profile Designer (SDK).  Pour plus d’informations, consultez [exemple de Concepteur de profil de suivi](http://msdn.microsoft.com/library/a280199c-3000-4148-ac63-cb5aaeac07c8).  
  
 [!code-csharp[WF_Samples#119](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#119)]
 [!code-vb[WF_Samples#119](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#119)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected abstract void OnPaint (System.Drawing.Graphics graphics, bool activated, System.Workflow.ComponentModel.Design.AmbientTheme ambientTheme, System.Workflow.ComponentModel.Design.ActivityDesigner designer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaint(class System.Drawing.Graphics graphics, bool activated, class System.Workflow.ComponentModel.Design.AmbientTheme ambientTheme, class System.Workflow.ComponentModel.Design.ActivityDesigner designer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Design.DesignerGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void OnPaint(System::Drawing::Graphics ^ graphics, bool activated, System::Workflow::ComponentModel::Design::AmbientTheme ^ ambientTheme, System::Workflow::ComponentModel::Design::ActivityDesigner ^ designer);" />
      <MemberSignature Language="F#" Value="abstract member OnPaint : System.Drawing.Graphics * bool * System.Workflow.ComponentModel.Design.AmbientTheme * System.Workflow.ComponentModel.Design.ActivityDesigner -&gt; unit" Usage="designerGlyph.OnPaint (graphics, activated, ambientTheme, designer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="activated" Type="System.Boolean" />
        <Parameter Name="ambientTheme" Type="System.Workflow.ComponentModel.Design.AmbientTheme" />
        <Parameter Name="designer" Type="System.Workflow.ComponentModel.Design.ActivityDesigner" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" /> pour exécuter les tâches de remplissage et de dessin.</param>
        <param name="activated">
          <see langword="true" /> pour indiquer que le glyphe apparaît sur l'aire de conception ; sinon, <see langword="false" />.</param>
        <param name="ambientTheme">
          <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> à utiliser pour accéder aux paramètres de propriété ambiante.</param>
        <param name="designer">
          <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> duquel obtenir des informations à propos des actions de l'utilisateur.</param>
        <summary>En cas de substitution dans une classe dérivée, exécute toutes les tâches nécessaires pour restituer le glyphe sur l’aire du concepteur d’activité.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.OnPaint%2A> utilise <xref:System.Workflow.ComponentModel.Design.AmbientTheme.CommentIndicatorPen%2A> pour dessiner les limites du glyphe de commentaire et <xref:System.Workflow.ComponentModel.Design.AmbientTheme.CommentIndicatorBrush%2A> pour le remplir.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment substituer la méthode <xref:System.Workflow.ComponentModel.Design.DesignerGlyph.OnPaint%2A>. Le code personnalise comment dessiner l'objet de glyphe sur le concepteur d'activités auquel le glyphe est associé.  
  
 Cet exemple de code fait partie de l'exemple du Kit de développement logiciel Workflow Monitor (SDK) et provient du fichier DesignerGlyphProvider.cs. Pour plus d’informations, consultez [Workflow Monitor](http://msdn.microsoft.com/library/4f70c1c5-f82d-4d5f-8b7d-943b9f99f8e2).  
  
 [!code-csharp[WF_Samples#134](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#134)]
 [!code-vb[WF_Samples#134](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public virtual int Priority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Design.DesignerGlyph.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Priority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Priority : int" Usage="System.Workflow.ComponentModel.Design.DesignerGlyph.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le paramètre de priorité pour le glyphe concepteur sur l'aire de conception d'activité.</summary>
        <value>Valeur entière qui représente le paramètre de priorité pour <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> sur l'aire du concepteur d'activités. Une valeur inférieure indique une priorité plus élevée et dessine par conséquent le glyphe à la position d'ordre Z supérieure sur un concepteur d'activités.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>