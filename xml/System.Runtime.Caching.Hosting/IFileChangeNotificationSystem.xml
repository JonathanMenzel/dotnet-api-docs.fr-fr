<Type Name="IFileChangeNotificationSystem" FullName="System.Runtime.Caching.Hosting.IFileChangeNotificationSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2f270d6c869694f6ff5c0f626983536906989917" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36638443" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFileChangeNotificationSystem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFileChangeNotificationSystem" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFileChangeNotificationSystem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFileChangeNotificationSystem" />
  <TypeSignature Language="F#" Value="type IFileChangeNotificationSystem = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Définit une manière d'exposer un objet <see cref="T:System.Runtime.Caching.FileChangeMonitor" /> personnalisé à une implémentation de cache.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dans ASP.NET, le <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> interface fournit l’accès à la gestion des notifications de modification de fichier interne.  
  
 Le <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> interface est utilisée en interne par la <xref:System.Runtime.Caching.HostFileChangeMonitor> classe.  
  
 Lorsqu’une implémentation de cache s’exécute dans un domaine d’application ASP.NET, ASP.NET implémente une <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> interface via le <xref:System.Runtime.Caching.ObjectCache.Host%2A> propriété. La <xref:System.Runtime.Caching.HostFileChangeMonitor> classe détecte cette propriété et utilise le système de notification de modification de fichier ASP.NET pour supprimer les entrées du cache en fonction de la notification de modification de fichier.  
  
 Dans les applications non-ASP.NET, il n’existe aucun environnement d’hôte qui implémente un personnalisé <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> interface. Par conséquent, le <xref:System.Runtime.Caching.HostFileChangeMonitor> classe utilise le <xref:System.IO.FileSystemWatcher> classe du CLR.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="StartMonitoring">
      <MemberSignature Language="C#" Value="public void StartMonitoring (string filePath, System.Runtime.Caching.OnChangedCallback onChangedCallback, out object state, out DateTimeOffset lastWriteTime, out long fileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartMonitoring(string filePath, class System.Runtime.Caching.OnChangedCallback onChangedCallback, [out] object&amp; state, [out] valuetype System.DateTimeOffset&amp; lastWriteTime, [out] int64&amp; fileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartMonitoring(System::String ^ filePath, System::Runtime::Caching::OnChangedCallback ^ onChangedCallback, [Runtime::InteropServices::Out] System::Object ^ % state, [Runtime::InteropServices::Out] DateTimeOffset % lastWriteTime, [Runtime::InteropServices::Out] long % fileSize);" />
      <MemberSignature Language="F#" Value="abstract member StartMonitoring : string * System.Runtime.Caching.OnChangedCallback *  *  *  -&gt; unit" Usage="iFileChangeNotificationSystem.StartMonitoring (filePath, onChangedCallback, state, lastWriteTime, fileSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
        <Parameter Name="state" Type="System.Object&amp;" RefType="out" />
        <Parameter Name="lastWriteTime" Type="System.DateTimeOffset&amp;" RefType="out" />
        <Parameter Name="fileSize" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filePath">Chemin d'accès physique qualifié complet d'un répertoire ou d'un fichier pour lequel surveiller les modifications.</param>
        <param name="onChangedCallback">Référence à une méthode qui implémente le délégué <see cref="T:System.Runtime.Caching.OnChangedCallback" />. Lorsque le fichier ou le répertoire surveillé est modifié, l'implémentation de l'environnement d'hôte de l'interface <see cref="T:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem" /> déclenche un événement en appelant la classe <see cref="T:System.Runtime.Caching.OnChangedCallback" />.</param>
        <param name="state">État fourni par l'environnement d'hôte. Les implémentations de cache et les analyseurs de modification personnalisés doivent considérer la valeur d'état comme étant opaque. Toutefois, l'état doit être stocké de manière à pouvoir être envoyé à l'environnement d'hôte lorsque l'implémentation de cache appelle la méthode <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(System.String,System.Object)" />.</param>
        <param name="lastWriteTime">Cette méthode retourne la date et l’heure de la dernière opération d’écriture exécutée sur <c>filePath</c>. Ce paramètre est passé sans être initialisé. Ce paramètre est retourné de l'environnement d'hôte.</param>
        <param name="fileSize">Cette méthode retourne la taille totale du <c>filePath</c> surveillé. Ce paramètre est passé sans être initialisé. Ce paramètre est retourné de l'environnement d'hôte.</param>
        <summary>Inscrit un chemin d'accès de fichier à surveiller avec l'environnement d'hôte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode est utilisée par les objets cache personnalisés et les analyses qui implémentent l’environnement hôte personnalisée des modifications <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> interface afin d’enregistrer les chemins d’accès pour l’analyse avec l’environnement hôte. Le <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring%2A> méthode est appelée par les implémenteurs de le <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> interface afin d’enregistrer un fichier ou répertoire pour la surveillance des modifications.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopMonitoring">
      <MemberSignature Language="C#" Value="public void StopMonitoring (string filePath, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopMonitoring(string filePath, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopMonitoring (filePath As String, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopMonitoring(System::String ^ filePath, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member StopMonitoring : string * obj -&gt; unit" Usage="iFileChangeNotificationSystem.StopMonitoring (filePath, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filePath">Chemin d'accès du fichier ou du répertoire pour lequel arrêter la surveillance. Ce chemin doit correspondre à une valeur de chemin d'accès de fichier qui a été passée dans un appel antérieur à la méthode <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)" />.</param>
        <param name="state">Informations d'état initialement fournies par l'environnement d'hôte pendant un appel antérieur à la méthode <see cref="M:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)" />.</param>
        <summary>Termine la surveillance des modifications.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring%2A> méthode doit être appelée par les caches personnalisés et analyses qui sont en cours de suppression par l’environnement d’hôte afin d’arrêter l’analyse des chemins d’accès de fichier et les répertoires de modifications personnalisés.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>