<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bb1b0a12225c49cd06302a4822210d08cda2957f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="4bc76-101">Fournit une interface interne pour accéder aux arguments de plusieurs nœuds d’arborescence (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression et InexExpression).</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-101">Provides an internal interface for accessing the arguments of multiple tree nodes (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression, and InexExpression).</span>
      </span>
      <span data-ttu-id="4bc76-102">Vous ne devez pas utiliser cette API.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-102">You should not use this API.</span>
      </span>
      <span data-ttu-id="4bc76-103">Elle est publique uniquement en raison de la refactorisation de la DLL et existe seulement pour optimiser les performances internes.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-103">It is only public due to DLL refactoring and exists only for internal performance optimizations.</span>
      </span>
      <span data-ttu-id="4bc76-104">Ceci permet deux optimisations qui réduisent la taille des arborescences d’expressions.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-104">This enables two optimizations which reduce the size of expression trees.</span>
      </span>
      <span data-ttu-id="4bc76-105">La première permet aux nœuds de l’arborescence de conserver un IList&lt;T&gt; au lieu d’un ReadOnlyCollection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-105">The first enables the tree nodes to hold onto an IList&lt;T&gt; instead of a ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="4bc76-106">IList&lt;T&gt; évite d’allouer ReadOnlyCollection pour chaque nœud.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-106">IList&lt;T&gt; saves the cost of allocating the ReadOnlyCollection for each node.</span>
      </span>
      <span data-ttu-id="4bc76-107">La deuxième permet la création de sous-classes spécialisées contenant un nombre spécifique d’arguments (par exemple, Block2, Block3, Block4).</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-107">The second enables creating specialized subclasses that hold onto a specific number of arguments (for example, Block2, Block3, Block4).</span>
      </span>
      <span data-ttu-id="4bc76-108">Ces nœuds évitent donc l’allocation à la fois d’une ReadOnlyCollection et d’un tableau pour stocker leurs éléments, économisant ainsi 32 octets par nœud.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-108">Therefore, these nodes avoid allocating both a ReadOnlyCollection and an array for storing their elements, saving 32 bytes per node.</span>
      </span>
      <span data-ttu-id="4bc76-109">Les nœuds d’arborescence d’expression continuent d’exposer les propriétés LINQ d’origine de ReadOnlyCollections.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-109">The expression tree nodes continue to expose the original LINQ properties of ReadOnlyCollections.</span>
      </span>
      <span data-ttu-id="4bc76-110">Pour cela, les nœuds réutilisent un champ pour stocker le tableau ou un élément qui serait normalement stocké dans le tableau.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-110">The nodes do this by re-using a field for storing both the array or an element that would normally be stored in the array.</span>
      </span>
      <span data-ttu-id="4bc76-111">Dans le cas du tableau, la collection est de type IList&lt;T&gt; au lieu de ReadOnlyCollection&lt;T&gt;.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-111">For the array case, the collection is typed to IList&lt;T&gt; instead of ReadOnlyCollection&lt;T&gt;.</span>
      </span>
      <span data-ttu-id="4bc76-112">Quand le nœud est initialement créé, c’est un tableau.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-112">When the node is initially constructed it is an array.</span>
      </span>
      <span data-ttu-id="4bc76-113">Quand le compilateur accède aux membres, il utilise cette interface.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-113">When the compiler accesses the members it uses this interface.</span>
      </span>
      <span data-ttu-id="4bc76-114">L’accès aux éléments du tableau promeut le tableau en ReadOnlyCollection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-114">Accessing array elements promotes the array to a ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="4bc76-115">Dans le cas de l’objet, nous stockons le premier argument dans un champ de type objet.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-115">For the object case we store the first argument in a field typed to object.</span>
      </span>
      <span data-ttu-id="4bc76-116">Quand le nœud est initialement créé, le champ contient l’expression.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-116">When the node is initially constructed, the field holds the Expression.</span>
      </span>
      <span data-ttu-id="4bc76-117">Le compilateur accède aux arguments via cette interface, et l’accesseur pour le premier argument utilise Expression.ReturnObject pour retourner l’objet qui gère le cas Expression ou ReadOnlyCollection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-117">The compiler accesses arguments through this interface, and the accessor for the first argument uses Expression.ReturnObject to return the object that handles the Expression or ReadOnlyCollection case.</span>
      </span>
      <span data-ttu-id="4bc76-118">Quand l’utilisateur accède à la ReadOnlyCollection, le champ de l’objet est mis à jour pour conserver directement la ReadOnlyCollection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-118">When the user accesses the ReadOnlyCollection, then the object field is updated to hold directly onto the ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="4bc76-119">Il est important que les expressions retournent toujours la même ReadOnlyCollection.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-119">It is important that the Expressions consistently return the same ReadOnlyCollection.</span>
      </span>
      <span data-ttu-id="4bc76-120">Sinon, l’analyseur d’arborescence de réécriture s’arrêtera.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-120">Otherwise, the re-writer tree walker will break.</span>
      </span>
      <span data-ttu-id="4bc76-121">Il s’agit d’une modification en rupture avec LINQ v1, qui retournait des ReadOnlyCollections différentes à partir du même nœud Expression.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-121">It is a breaking change from LINQ v1 to return different ReadOnlyCollections form the same Expression node.</span>
      </span>
      <span data-ttu-id="4bc76-122">Les utilisateurs peuvent actuellement s’appuyer sur l’identité de l’objet pour indiquer si le nœud a changé.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-122">Currently users can rely on object identity to tell if the node has changed.</span>
      </span>
      <span data-ttu-id="4bc76-123">Le stockage de la ReadOnlyCollection dans un champ surchargé à la fois réduit l’utilisation de la mémoire et maintient la compatibilité pour l’API publique.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4bc76-123">Storing the ReadOnlyCollection in an overloaded field both reduces memory usage and maintains compatibility for the public API.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4bc76-124">Retourne le nombre d’arguments du nœud d’arborescence d’expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bc76-124">Returns the number of arguments to the expression tree node.</span>
          </span>
          <span data-ttu-id="4bc76-125">Vous ne devez pas utiliser ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bc76-125">You should not use this type.</span>
          </span>
          <span data-ttu-id="4bc76-126">Il est public uniquement en raison de la refactorisation de l’assembly, et il est utilisé en interne pour optimiser les performances.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bc76-126">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4bc76-127">Nombre d’arguments du nœud d’arborescence d’expression, au format <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bc76-127">The number of arguments to the expression tree node as <see cref="T:System.Int32" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="4bc76-128">Index de l’argument.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bc76-128">The index of the argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4bc76-129">Retourne l’argument à l’index, en levant une exception si l’index est hors limites.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bc76-129">Returns the argument at index, throwing if index is out of bounds.</span>
          </span>
          <span data-ttu-id="4bc76-130">Vous ne devez pas utiliser ce type.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bc76-130">You should not use this type.</span>
          </span>
          <span data-ttu-id="4bc76-131">Il est public uniquement en raison de la refactorisation de l’assembly, et il est utilisé en interne pour optimiser les performances.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bc76-131">It is only public due to assembly refactoring, and it is used internally for performance optimizations.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="4bc76-132">Argument à l’index, avec une exception levée si l’index est hors limites comme <see cref="T:System.Linq.Expressions.Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4bc76-132">The argument at index, throwing if index is out of bounds as <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>