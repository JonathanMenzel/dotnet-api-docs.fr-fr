<Type Name="BinaryExpression" FullName="System.Linq.Expressions.BinaryExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="737f460f015994d2fd5390d8bfcdcdce8f529847" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55410802" /></Metadata><TypeSignature Language="C#" Value="public class BinaryExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryExpression extends System.Linq.Expressions.Expression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.BinaryExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryExpression&#xA;Inherits Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryExpression : System::Linq::Expressions::Expression" />
  <TypeSignature Language="F#" Value="type BinaryExpression = class&#xA;    inherit Expression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/BinaryExpressionProxy))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="eb42e-101">Représente une expression qui comporte un opérateur binaire.</span><span class="sxs-lookup"><span data-stu-id="eb42e-101">Represents an expression that has a binary operator.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb42e-102">Les tableaux suivants récapitulent les méthodes de fabrique qui peuvent être utilisées pour créer un <xref:System.Linq.Expressions.BinaryExpression> qui a un type de nœud spécifique, représenté par le <xref:System.Linq.Expressions.Expression.NodeType%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="eb42e-102">The following tables summarize the factory methods that can be used to create a <xref:System.Linq.Expressions.BinaryExpression> that has a specific node type, represented by the <xref:System.Linq.Expressions.Expression.NodeType%2A> property.</span></span> <span data-ttu-id="eb42e-103">Chaque table contient des informations pour une classe spécifique d’opérations telles que les opérations arithmétiques ou au niveau du bit.</span><span class="sxs-lookup"><span data-stu-id="eb42e-103">Each table contains information for a specific class of operations such as arithmetic or bitwise.</span></span>  
  
## <a name="binary-arithmetic-operations"></a><span data-ttu-id="eb42e-104">Opérations arithmétiques binaires</span><span class="sxs-lookup"><span data-stu-id="eb42e-104">Binary Arithmetic Operations</span></span>  
  
|<span data-ttu-id="eb42e-105">Type de nœud</span><span class="sxs-lookup"><span data-stu-id="eb42e-105">Node Type</span></span>|<span data-ttu-id="eb42e-106">Méthode de fabrique</span><span class="sxs-lookup"><span data-stu-id="eb42e-106">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Add>|<xref:System.Linq.Expressions.Expression.Add%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.AddChecked>|<xref:System.Linq.Expressions.Expression.AddChecked%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Divide>|<xref:System.Linq.Expressions.Expression.Divide%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Modulo>|<xref:System.Linq.Expressions.Expression.Modulo%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Multiply>|<xref:System.Linq.Expressions.Expression.Multiply%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.MultiplyChecked>|<xref:System.Linq.Expressions.Expression.MultiplyChecked%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Power>|<xref:System.Linq.Expressions.Expression.Power%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Subtract>|<xref:System.Linq.Expressions.Expression.Subtract%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.SubtractChecked>|<xref:System.Linq.Expressions.Expression.SubtractChecked%2A>|  
  
## <a name="bitwise-operations"></a><span data-ttu-id="eb42e-107">Opérations au niveau du bit</span><span class="sxs-lookup"><span data-stu-id="eb42e-107">Bitwise Operations</span></span>  
  
|<span data-ttu-id="eb42e-108">Type de nœud</span><span class="sxs-lookup"><span data-stu-id="eb42e-108">Node Type</span></span>|<span data-ttu-id="eb42e-109">Méthode de fabrique</span><span class="sxs-lookup"><span data-stu-id="eb42e-109">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.And>|<xref:System.Linq.Expressions.Expression.And%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.Or>|<xref:System.Linq.Expressions.Expression.Or%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.ExclusiveOr>|<xref:System.Linq.Expressions.Expression.ExclusiveOr%2A>|  
  
## <a name="shift-operations"></a><span data-ttu-id="eb42e-110">Opérations de décalage</span><span class="sxs-lookup"><span data-stu-id="eb42e-110">Shift Operations</span></span>  
  
|<span data-ttu-id="eb42e-111">Type de nœud</span><span class="sxs-lookup"><span data-stu-id="eb42e-111">Node Type</span></span>|<span data-ttu-id="eb42e-112">Méthode de fabrique</span><span class="sxs-lookup"><span data-stu-id="eb42e-112">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.LeftShift>|<xref:System.Linq.Expressions.Expression.LeftShift%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.RightShift>|<xref:System.Linq.Expressions.Expression.RightShift%2A>|  
  
## <a name="conditional-boolean-operations"></a><span data-ttu-id="eb42e-113">Opérations booléennes conditionnelles</span><span class="sxs-lookup"><span data-stu-id="eb42e-113">Conditional Boolean Operations</span></span>  
  
|<span data-ttu-id="eb42e-114">Type de nœud</span><span class="sxs-lookup"><span data-stu-id="eb42e-114">Node Type</span></span>|<span data-ttu-id="eb42e-115">Méthode de fabrique</span><span class="sxs-lookup"><span data-stu-id="eb42e-115">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.AndAlso>|<xref:System.Linq.Expressions.Expression.AndAlso%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.OrElse>|<xref:System.Linq.Expressions.Expression.OrElse%2A>|  
  
## <a name="comparison-operations"></a><span data-ttu-id="eb42e-116">Opérations de comparaison</span><span class="sxs-lookup"><span data-stu-id="eb42e-116">Comparison Operations</span></span>  
  
|<span data-ttu-id="eb42e-117">Type de nœud</span><span class="sxs-lookup"><span data-stu-id="eb42e-117">Node Type</span></span>|<span data-ttu-id="eb42e-118">Méthode de fabrique</span><span class="sxs-lookup"><span data-stu-id="eb42e-118">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Equal>|<xref:System.Linq.Expressions.Expression.Equal%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.NotEqual>|<xref:System.Linq.Expressions.Expression.NotEqual%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual>|<xref:System.Linq.Expressions.Expression.GreaterThanOrEqual%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.GreaterThan>|<xref:System.Linq.Expressions.Expression.GreaterThan%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.LessThan>|<xref:System.Linq.Expressions.Expression.LessThan%2A>|  
|<xref:System.Linq.Expressions.ExpressionType.LessThanOrEqual>|<xref:System.Linq.Expressions.Expression.LessThanOrEqual%2A>|  
  
## <a name="coalescing-operations"></a><span data-ttu-id="eb42e-119">Opérations de fusion</span><span class="sxs-lookup"><span data-stu-id="eb42e-119">Coalescing Operations</span></span>  
  
|<span data-ttu-id="eb42e-120">Type de nœud</span><span class="sxs-lookup"><span data-stu-id="eb42e-120">Node Type</span></span>|<span data-ttu-id="eb42e-121">Méthode de fabrique</span><span class="sxs-lookup"><span data-stu-id="eb42e-121">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.Coalesce>|<xref:System.Linq.Expressions.Expression.Coalesce%2A>|  
  
## <a name="array-indexing-operations"></a><span data-ttu-id="eb42e-122">Opérations d’indexation de tableau</span><span class="sxs-lookup"><span data-stu-id="eb42e-122">Array Indexing Operations</span></span>  
  
|<span data-ttu-id="eb42e-123">Type de nœud</span><span class="sxs-lookup"><span data-stu-id="eb42e-123">Node Type</span></span>|<span data-ttu-id="eb42e-124">Méthode de fabrique</span><span class="sxs-lookup"><span data-stu-id="eb42e-124">Factory Method</span></span>|  
|---------------|--------------------|  
|<xref:System.Linq.Expressions.ExpressionType.ArrayIndex>|<xref:System.Linq.Expressions.Expression.ArrayIndex%2A>|  
  
 <span data-ttu-id="eb42e-125">En outre, le <xref:System.Linq.Expressions.Expression.MakeBinary%2A> méthodes peuvent également être utilisées pour créer un <xref:System.Linq.Expressions.BinaryExpression>.</span><span class="sxs-lookup"><span data-stu-id="eb42e-125">In addition, the <xref:System.Linq.Expressions.Expression.MakeBinary%2A> methods can also be used to create a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="eb42e-126">Ces méthodes de fabrique peuvent être utilisés pour créer un <xref:System.Linq.Expressions.BinaryExpression> de n’importe quel type de nœud qui représente une opération binaire.</span><span class="sxs-lookup"><span data-stu-id="eb42e-126">These factory methods can be used to create a <xref:System.Linq.Expressions.BinaryExpression> of any node type that represents a binary operation.</span></span> <span data-ttu-id="eb42e-127">Le paramètre de ces méthodes est de type <xref:System.Linq.Expressions.Expression.NodeType%2A> Spécifie le type de nœud de votre choix.</span><span class="sxs-lookup"><span data-stu-id="eb42e-127">The parameter of these methods that is of type <xref:System.Linq.Expressions.Expression.NodeType%2A> specifies the desired node type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eb42e-128">L’exemple suivant crée un <xref:System.Linq.Expressions.BinaryExpression> objet qui représente la soustraction d’un nombre à partir d’un autre.</span><span class="sxs-lookup"><span data-stu-id="eb42e-128">The following example creates a <xref:System.Linq.Expressions.BinaryExpression> object that represents the subtraction of one number from another.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberSignature Language="F#" Value="override this.Accept : System.Linq.Expressions.ExpressionVisitor -&gt; System.Linq.Expressions.Expression" Usage="binaryExpression.Accept visitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor"><span data-ttu-id="eb42e-129">Visiteur avec lequel visiter ce nœud.</span><span class="sxs-lookup"><span data-stu-id="eb42e-129">The visitor to visit this node with.</span></span></param>
        <summary><span data-ttu-id="eb42e-130">Distribue à la méthode de visite spécifique à ce type de nœud.</span><span class="sxs-lookup"><span data-stu-id="eb42e-130">Dispatches to the specific visit method for this node type.</span></span> <span data-ttu-id="eb42e-131">Par exemple, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> appelle <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span><span class="sxs-lookup"><span data-stu-id="eb42e-131">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span></span></summary>
        <returns><span data-ttu-id="eb42e-132">Résultat de la visite de ce nœud.</span><span class="sxs-lookup"><span data-stu-id="eb42e-132">The result of visiting this node.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb42e-133">Cette implémentation par défaut pour <xref:System.Linq.Expressions.ExpressionType.Extension> les appels de nœuds <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span><span class="sxs-lookup"><span data-stu-id="eb42e-133">This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span> <span data-ttu-id="eb42e-134">Substituez cette méthode pour appeler une méthode plus spécifique sur une classe dérivée de visiteur de la <xref:System.Linq.Expressions.ExpressionVisitor> classe.</span><span class="sxs-lookup"><span data-stu-id="eb42e-134">Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class.</span></span> <span data-ttu-id="eb42e-135">Toutefois, il doit toujours prendre en charge les visiteurs inconnus en appelant <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span><span class="sxs-lookup"><span data-stu-id="eb42e-135">However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public override bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReduce : bool" Usage="System.Linq.Expressions.BinaryExpression.CanReduce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb42e-136">Obtient une valeur qui indique si le nœud d’arborescence de l’expression peut être réduit.</span><span class="sxs-lookup"><span data-stu-id="eb42e-136">Gets a value that indicates whether the expression tree node can be reduced.</span></span></summary>
        <value><span data-ttu-id="eb42e-137"><see langword="true" /> Si le nœud d’arbre expression peut être réduit ; Sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="eb42e-137"><see langword="true" /> if the expression tree node can be reduced; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Conversion">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.LambdaExpression Conversion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.LambdaExpression Conversion" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Conversion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Conversion As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::LambdaExpression ^ Conversion { System::Linq::Expressions::LambdaExpression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Conversion : System.Linq.Expressions.LambdaExpression" Usage="System.Linq.Expressions.BinaryExpression.Conversion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb42e-138">Obtient la fonction de conversion de type utilisée par une opération de fusion ou d’assignation composée.</span><span class="sxs-lookup"><span data-stu-id="eb42e-138">Gets the type conversion function that is used by a coalescing or compound assignment operation.</span></span></summary>
        <value><span data-ttu-id="eb42e-139"><see cref="T:System.Linq.Expressions.LambdaExpression" /> qui représente une fonction de conversion de type.</span><span class="sxs-lookup"><span data-stu-id="eb42e-139">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb42e-140">Le <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> propriété est `null` pour toute <xref:System.Linq.Expressions.BinaryExpression> dont <xref:System.Linq.Expressions.Expression.NodeType%2A> propriété n’est pas <xref:System.Linq.Expressions.ExpressionType.Coalesce>.</span><span class="sxs-lookup"><span data-stu-id="eb42e-140">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null` for any <xref:System.Linq.Expressions.BinaryExpression> whose <xref:System.Linq.Expressions.Expression.NodeType%2A> property is not <xref:System.Linq.Expressions.ExpressionType.Coalesce>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLifted">
      <MemberSignature Language="C#" Value="public bool IsLifted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLifted" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.IsLifted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLifted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLifted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLifted : bool" Usage="System.Linq.Expressions.BinaryExpression.IsLifted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb42e-141">Obtient une valeur qui indique si le nœud d’arborescence de l’expression représente un appel *levé* vers un opérateur.</span><span class="sxs-lookup"><span data-stu-id="eb42e-141">Gets a value that indicates whether the expression tree node represents a *lifted* call to an operator.</span></span></summary>
        <value><span data-ttu-id="eb42e-142"><see langword="true" /> si le nœud représente un appel levé ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="eb42e-142"><see langword="true" /> if the node represents a lifted call; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb42e-143">Un appel d’opérateur est levé si l’opérateur attend des opérandes non nullables mais opérandes nullables sont passés.</span><span class="sxs-lookup"><span data-stu-id="eb42e-143">An operator call is lifted if the operator expects non-nullable operands but nullable operands are passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLiftedToNull">
      <MemberSignature Language="C#" Value="public bool IsLiftedToNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLiftedToNull" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLiftedToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLiftedToNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLiftedToNull : bool" Usage="System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb42e-144">Obtient une valeur qui indique si le nœud d’arborescence de l’expression représente un appel *levé* vers un opérateur dont le type de retour est levé vers un type nullable.</span><span class="sxs-lookup"><span data-stu-id="eb42e-144">Gets a value that indicates whether the expression tree node represents a *lifted* call to an operator whose return type is lifted to a nullable type.</span></span></summary>
        <value><span data-ttu-id="eb42e-145"><see langword="true" /> si le type de retour de l'opérateur est levé vers un type nullable ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="eb42e-145"><see langword="true" /> if the operator's return type is lifted to a nullable type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb42e-146">Un appel d’opérateur est levé si l’opérateur attend des opérandes non nullables mais opérandes nullables sont passés.</span><span class="sxs-lookup"><span data-stu-id="eb42e-146">An operator call is lifted if the operator expects non-nullable operands but nullable operands are passed to it.</span></span> <span data-ttu-id="eb42e-147">Si la valeur de <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> est `true`, l’opérateur retourne un type nullable, et si un opérande nullable a la valeur `null`, l’opérateur retourne `null`.</span><span class="sxs-lookup"><span data-stu-id="eb42e-147">If the value of <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> is `true`, the operator returns a nullable type, and if a nullable operand evaluates to `null`, the operator returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Left" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Left { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Left : System.Linq.Expressions.Expression" Usage="System.Linq.Expressions.BinaryExpression.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb42e-148">Obtient l’opérande gauche de l’opération binaire.</span><span class="sxs-lookup"><span data-stu-id="eb42e-148">Gets the left operand of the binary operation.</span></span></summary>
        <value><span data-ttu-id="eb42e-149"><see cref="T:System.Linq.Expressions.Expression" /> qui représente l'opérande gauche de l'opération binaire.</span><span class="sxs-lookup"><span data-stu-id="eb42e-149">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand of the binary operation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Linq.Expressions.BinaryExpression.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb42e-150">Obtient la méthode d’implémentation pour l’opération binaire.</span><span class="sxs-lookup"><span data-stu-id="eb42e-150">Gets the implementing method for the binary operation.</span></span></summary>
        <value><span data-ttu-id="eb42e-151"><see cref="T:System.Reflection.MethodInfo" /> qui représente la méthode d'implémentation.</span><span class="sxs-lookup"><span data-stu-id="eb42e-151">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb42e-152">Si un <xref:System.Linq.Expressions.BinaryExpression> représente une opération qui utilise un opérateur prédéfini, le <xref:System.Linq.Expressions.BinaryExpression.Method%2A> propriété est `null`.</span><span class="sxs-lookup"><span data-stu-id="eb42e-152">If a <xref:System.Linq.Expressions.BinaryExpression> represents an operation that uses a predefined operator, the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberSignature Language="F#" Value="override this.Reduce : unit -&gt; System.Linq.Expressions.Expression" Usage="binaryExpression.Reduce " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eb42e-153">Réduit le nœud d’expression binaire en une expression plus simple.</span><span class="sxs-lookup"><span data-stu-id="eb42e-153">Reduces the binary expression node to a simpler expression.</span></span></summary>
        <returns><span data-ttu-id="eb42e-154">Expression réduite.</span><span class="sxs-lookup"><span data-stu-id="eb42e-154">The reduced expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eb42e-155">Si CanReduce retourne la valeur true, cela doit retourner une expression valide.</span><span class="sxs-lookup"><span data-stu-id="eb42e-155">If CanReduce returns true, this should return a valid expression.</span></span>  
  
 <span data-ttu-id="eb42e-156">Cette méthode peut retourner un autre nœud qui doit lui-même être réduit.</span><span class="sxs-lookup"><span data-stu-id="eb42e-156">This method can return another node which itself must be reduced.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Right" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.BinaryExpression.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Right { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : System.Linq.Expressions.Expression" Usage="System.Linq.Expressions.BinaryExpression.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="eb42e-157">Obtient l’opérande droit de l’opération binaire.</span><span class="sxs-lookup"><span data-stu-id="eb42e-157">Gets the right operand of the binary operation.</span></span></summary>
        <value><span data-ttu-id="eb42e-158"><see cref="T:System.Linq.Expressions.Expression" /> qui représente l'opérande droit de l'opération binaire.</span><span class="sxs-lookup"><span data-stu-id="eb42e-158">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand of the binary operation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.BinaryExpression Update (System.Linq.Expressions.Expression left, System.Linq.Expressions.LambdaExpression conversion, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.BinaryExpression Update(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.LambdaExpression conversion, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (left As Expression, conversion As LambdaExpression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::BinaryExpression ^ Update(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::LambdaExpression ^ conversion, System::Linq::Expressions::Expression ^ right);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Linq.Expressions.Expression * System.Linq.Expressions.LambdaExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.BinaryExpression" Usage="binaryExpression.Update (left, conversion, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="eb42e-159">Propriété <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> du résultat.</span><span class="sxs-lookup"><span data-stu-id="eb42e-159">The <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property of the result.</span></span></param>
        <param name="conversion"><span data-ttu-id="eb42e-160">Propriété <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> du résultat.</span><span class="sxs-lookup"><span data-stu-id="eb42e-160">The <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property of the result.</span></span></param>
        <param name="right"><span data-ttu-id="eb42e-161">Propriété <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> du résultat.</span><span class="sxs-lookup"><span data-stu-id="eb42e-161">The <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property of the result.</span></span></param>
        <summary><span data-ttu-id="eb42e-162">Crée une expression qui est semblable à celle-ci, mais en utilisant les enfants fournis.</span><span class="sxs-lookup"><span data-stu-id="eb42e-162">Creates a new expression that is like this one, but using the supplied children.</span></span> <span data-ttu-id="eb42e-163">Si tous les enfants sont identiques, cette expression est retournée.</span><span class="sxs-lookup"><span data-stu-id="eb42e-163">If all of the children are the same, it will return this expression.</span></span></summary>
        <returns><span data-ttu-id="eb42e-164">Cette expression si aucun enfant n’est modifié, ou une expression avec les enfants mis à jour.</span><span class="sxs-lookup"><span data-stu-id="eb42e-164">This expression if no children are changed or an expression with the updated children.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>