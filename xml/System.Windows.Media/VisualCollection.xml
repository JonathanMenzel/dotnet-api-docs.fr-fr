<Type Name="VisualCollection" FullName="System.Windows.Media.VisualCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="19eeb062536a84069070c205aaddc936c33cd61d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30669493" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VisualCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit VisualCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.VisualCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VisualCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualCollection sealed : System::Collections::ICollection" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Représente une collection ordonnée d’objets <see cref="T:System.Windows.Media.Visual" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Media.VisualCollection> a impliqué l’affinité de contexte. Si une procédure tente d’accéder à la <xref:System.Windows.Media.VisualCollection> à partir d’un contexte différent du contexte du propriétaire <xref:System.Windows.Media.ContainerVisual>, une exception est levée.  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un <xref:System.Windows.Media.VisualCollection> et ajouter des membres.  
  
 [!code-csharp[DrawingVisualSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingVisualSample/CSharp/Window1.xaml.cs#100)]
 [!code-vb[DrawingVisualSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingVisualSample/visualbasic/window1.xaml.vb#100)]  
  
> [!NOTE]
>  Pour obtenir un exemple complet, consultez [Test de positionnement à l’aide de DrawingVisuals, exemple](http://go.microsoft.com/fwlink/?LinkID=159994).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualCollection (System.Windows.Media.Visual parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.Visual parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.#ctor(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualCollection(System::Windows::Media::Visual ^ parent);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="parent">Objet visuel parent dont la <see cref="T:System.Windows.Media.VisualCollection" /> est retournée.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Add(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::Windows::Media::Visual ^ visual);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">
          <see cref="T:System.Windows.Media.Visual" /> à ajouter à <see cref="T:System.Windows.Media.VisualCollection" />.</param>
        <summary>Ajoute le <see cref="T:System.Windows.Media.Visual" /> à la fin de la <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <returns>Index dans la collection auquel <paramref name="visual" /> a été ajouté.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ajout d’un <xref:System.Windows.Media.Visual> dont la valeur est `null` est autorisée et ne lève pas d’exception.  
  
 Le <xref:System.Windows.Media.VisualCollection.Add%2A> méthode affecte également la relation parent-enfant entre le parent visuel qui est le propriétaire de la <xref:System.Windows.Media.VisualCollection>et l’enfant `visual`.  
  
 Si vous avez besoin d’un contrôle de bas niveau supérieur sur l’implémentation de stockage sous-jacente des objets enfants visuels d’une classe personnalisée, envisagez d’utiliser le <xref:System.Windows.Media.Visual.AddVisualChild%2A> et <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> méthodes. Lorsque vous utilisez ces méthodes, vous devez définir votre propre implémentation de stockage et que vous n’utilisez pas <xref:System.Windows.Media.VisualCollection>.  
  
   
  
## Examples  
 L’exemple suivant montre comment créer un <xref:System.Windows.Media.VisualCollection> et ajouter des membres.  
  
 [!code-csharp[DrawingVisualSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingVisualSample/CSharp/Window1.xaml.cs#100)]
 [!code-vb[DrawingVisualSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingVisualSample/visualbasic/window1.xaml.vb#100)]  
  
> [!NOTE]
>  Pour obtenir un exemple complet, consultez [Test de positionnement à l’aide de DrawingVisuals, exemple](http://go.microsoft.com/fwlink/?LinkID=159994).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Une <see cref="T:System.ArgumentException" /> est levée si le <see cref="T:System.Windows.Media.Visual" /> est un élément racine.</exception>
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit le nombre d'éléments que <see cref="T:System.Windows.Media.VisualCollection" /> peut contenir.</summary>
        <value>Nombre initial d'éléments que <see cref="T:System.Windows.Media.VisualCollection" /> peut contenir.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La valeur de <xref:System.Windows.Media.VisualCollection.Capacity%2A> est le nombre d’éléments qui le <xref:System.Windows.Media.VisualCollection> est capable de stocker. <xref:System.Windows.Media.VisualCollection.Count%2A> est le nombre d’éléments visuels réellement contenus dans le <xref:System.Windows.Media.VisualCollection>. <xref:System.Windows.Media.VisualCollection.Capacity%2A> est toujours supérieur ou égal à <xref:System.Windows.Media.VisualCollection.Count%2A>. Si <xref:System.Windows.Media.VisualCollection.Count%2A> dépasse <xref:System.Windows.Media.VisualCollection.Capacity%2A> lors de l’ajout d’éléments, la capacité de le <xref:System.Windows.Media.VisualCollection> est augmentée. Par défaut <xref:System.Windows.Media.VisualCollection.Capacity%2A> est égal à zéro.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          La valeur affectée à <see cref="P:System.Windows.Media.VisualCollection.Capacity" /> est inférieure à <see cref="P:System.Windows.Media.VisualCollection.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Supprime tous les éléments de <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Media.VisualCollection.Count%2A> est remis à zéro. La valeur de la <xref:System.Windows.Media.VisualCollection.Capacity%2A> demeure inchangée. Pour rétablir la capacité de la <xref:System.Windows.Media.VisualCollection>, définissez le <xref:System.Windows.Media.VisualCollection.Capacity%2A> propriété à la taille souhaitée.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Contains(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Media::Visual ^ visual);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">
          <see cref="T:System.Windows.Media.Visual" /> à rechercher dans la collection.</param>
        <summary>Retourne une valeur <see cref="T:System.Boolean" /> qui indique si le <see cref="T:System.Windows.Media.Visual" /> spécifié est contenu dans la collection.</summary>
        <returns>
          <see langword="true" /> si <paramref name="visual" /> se trouve dans la collection ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le pire scénario d’exécution de cette fonction est `O(n)`, où `n` est le nombre d’éléments dans le <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Copie la collection actuelle dans le tableau passé.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <see cref="T:System.Array" /> unidimensionnel constituant la destination des éléments qui sont copiés à partir de la <see cref="T:System.Windows.Media.VisualCollection" />.</param>
        <param name="index">Index de base zéro dans un <c>tableau</c> auquel commencer la copie.</param>
        <summary>Copie les éléments de la collection dans un tableau, en commençant par un index de tableau spécifique.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Windows.Media.Visual[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Windows.Media.Visual[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.CopyTo(System.Windows.Media.Visual[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Visual(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Windows::Media::Visual ^&gt; ^ array, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Windows.Media.Visual[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Tableau d'objets <see cref="T:System.Windows.Media.Visual" /> (dont l'indexation doit commencer par un).</param>
        <param name="index">Index auquel commencer la copie à partir de <c>array</c>.</param>
        <summary>Copie la collection actuelle dans le tableau <see cref="T:System.Windows.Media.Visual" /> passé.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre d’éléments de la collection.</summary>
        <value>Nombre d'éléments que <see cref="T:System.Windows.Media.VisualCollection" /> contient.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.VisualCollection.Count%2A> est le nombre d’éléments réellement contenus dans le <xref:System.Windows.Media.VisualCollection>. <xref:System.Windows.Media.VisualCollection.Capacity%2A> est le nombre d’éléments qui le <xref:System.Windows.Media.VisualCollection> est capable de stocker.  
  
 <xref:System.Windows.Media.VisualCollection.Count%2A> est toujours inférieure ou égale à <xref:System.Windows.Media.VisualCollection.Capacity%2A>. Si <xref:System.Windows.Media.VisualCollection.Count%2A> dépasse <xref:System.Windows.Media.VisualCollection.Capacity%2A> lors de l’ajout d’éléments, la capacité de la liste est doublée en réallouant automatiquement le tableau interne avant de copier les anciens éléments et d’ajouter les nouveaux éléments.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.Media.VisualCollection.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.VisualCollection/Enumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As VisualCollection.Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::VisualCollection::Enumerator GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.VisualCollection+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Récupère un énumérateur qui peut parcourir la <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.IndexOf(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Media::Visual ^ visual);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">
          <see cref="T:System.Windows.Media.Visual" /> à rechercher dans <see cref="T:System.Windows.Media.VisualCollection" />.</param>
        <summary>Retourne l'index de base zéro de <see cref="T:System.Windows.Media.Visual" />.</summary>
        <returns>Index de <see cref="T:System.Windows.Media.Visual" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si le <xref:System.Windows.Media.Visual> ne figure pas dans le <xref:System.Windows.Media.VisualCollection>, -1 est retourné. Si `null` est passé à la méthode, l’index de la première entrée qui a `null` est retourné. S’il n’existe aucune entrée null, -1 est retourné.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Insert(System.Int32,System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::Windows::Media::Visual ^ visual);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="index">Index de base zéro auquel la valeur doit être insérée.</param>
        <param name="visual">
          <see cref="T:System.Windows.Media.Visual" /> à insérer dans <see cref="T:System.Windows.Media.VisualCollection" />.</param>
        <summary>Insère un élément dans la classe <see cref="T:System.Windows.Media.VisualCollection" /> au niveau de l'index spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Windows.Media.VisualCollection.Count%2A> est déjà égale à <xref:System.Windows.Media.VisualCollection.Capacity%2A>, la capacité de la <xref:System.Windows.Media.VisualCollection> est augmentée avant que le nouveau <xref:System.Windows.Media.Visual> est inséré. Si `index` est égal à <xref:System.Windows.Media.VisualCollection.Count%2A>, `visual` est ajouté à la fin de <xref:System.Windows.Media.VisualCollection>. Tous objets visuels existants qui sont supérieure ou égale à `index` sont déplacés pour s’adapter au nouveau <xref:System.Windows.Media.Visual>, et leurs valeurs d’index sont mises à jour.  
  
 Le <xref:System.Windows.Media.VisualCollection.Insert%2A> méthode affecte également la relation parent-enfant entre le parent visuel qui est le propriétaire de la <xref:System.Windows.Media.VisualCollection>et l’enfant `visual`.  
  
 Si vous avez besoin d’un contrôle de bas niveau supérieur sur l’implémentation de stockage sous-jacente des objets enfants visuels, envisagez d’utiliser le <xref:System.Windows.Media.Visual.AddVisualChild%2A> et <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> méthodes. Lorsque vous utilisez ces méthodes, vous définir votre propre implémentation de stockage et que vous n’utilisez pas <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> est inférieur à zéro ou supérieur à <see cref="P:System.Windows.Media.VisualCollection.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'objet <see cref="T:System.Windows.Media.VisualCollection" /> est en lecture seule.</summary>
        <value>Valeur qui indique si <see cref="T:System.Windows.Media.VisualCollection" /> est en lecture seule.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est toujours `false` pour toutes les <xref:System.Windows.Media.VisualCollection> objets.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient une valeur qui indique si l'accès à <see cref="T:System.Windows.Media.VisualCollection" /> est synchronisé (thread-safe).</summary>
        <value>Valeur qui indique si la <see cref="T:System.Windows.Media.VisualCollection" /> est synchronisée (thread-safe).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété est toujours `false` pour toutes les <xref:System.Windows.Media.VisualCollection> objets.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Visual this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Visual Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Visual ^ default[int] { System::Windows::Media::Visual ^ get(int index); void set(int index, System::Windows::Media::Visual ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index de base zéro de <see cref="T:System.Windows.Media.VisualCollection" /> à partir duquel obtenir ou définir <see cref="T:System.Windows.Media.Visual" />.</param>
        <summary>Obtient ou définit le <see cref="T:System.Windows.Media.Visual" /> stocké à l'index de base zéro de <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <value>
          <see cref="T:System.Windows.Media.Visual" /> stocké à <paramref name="index" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette propriété fournit la possibilité d’accéder à un spécifique <xref:System.Windows.Media.Visual> dans les <xref:System.Windows.Media.VisualCollection> à l’aide d’un index.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> est inférieur à zéro, ou <paramref name="index" /> est égal ou supérieur à <see cref="P:System.Windows.Media.VisualCollection.Count" />.</exception>
        <exception cref="T:System.ArgumentException">Le nouvel élément enfant a déjà un parent, ou la valeur à l'index spécifié n'est pas <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Remove(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Media::Visual ^ visual);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">
          <see cref="T:System.Windows.Media.Visual" /> à supprimer de <see cref="T:System.Windows.Media.VisualCollection" />.</param>
        <summary>Supprime l'objet <see cref="T:System.Windows.Media.Visual" /> spécifié de la <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les objets visuels qui suivent l’objet supprimé sont déplacés pour occuper la position libérée et leurs valeurs d’index sont mises à jour. Si `visual` est `null`, le premier `null` entrée est supprimée. Notez que la suppression un `null` entrée est linéaire avec la taille de la collection.  
  
 Le <xref:System.Windows.Media.VisualCollection.Remove%2A> méthode supprime également la relation parent-enfant entre le parent visuel qui est le propriétaire de la <xref:System.Windows.Media.VisualCollection>et l’enfant `visual`.  
  
 Si vous avez besoin d’un contrôle de bas niveau supérieur sur l’implémentation de stockage sous-jacente des objets enfants visuels, envisagez d’utiliser le <xref:System.Windows.Media.Visual.AddVisualChild%2A> et <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> méthodes. Lorsque vous utilisez ces méthodes, vous définir votre propre implémentation de stockage et que vous n’utilisez pas <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index de base zéro de l'objet visuel à supprimer.</param>
        <summary>Supprime l'objet visuel à l'index spécifié dans la <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les objets visuels qui suivent l’objet supprimé sont déplacés pour occuper la position libérée et leurs valeurs d’index sont mises à jour.  
  
 Le <xref:System.Windows.Media.VisualCollection.RemoveAt%2A> méthode supprime également la relation parent-enfant entre le parent visuel qui est le propriétaire de la <xref:System.Windows.Media.VisualCollection>et l’enfant `visual`.  
  
 Si vous avez besoin d’un contrôle de bas niveau supérieur sur l’implémentation de stockage sous-jacente des objets enfants visuels, envisagez d’utiliser le <xref:System.Windows.Media.Visual.AddVisualChild%2A> et <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> méthodes. Lorsque vous utilisez ces méthodes, vous définir votre propre implémentation de stockage et que vous n’utilisez pas <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> est inférieur à zéro, ou <paramref name="index" /> est égal ou supérieur à <see cref="P:System.Windows.Media.VisualCollection.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index de base zéro de la plage d'éléments à supprimer.</param>
        <param name="count">Nombre d'éléments à supprimer.</param>
        <summary>Supprime une plage d'objets visuels de la <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les objets visuels qui suivent les objets supprimés sont déplacés pour occuper les positions libérées, et leurs valeurs d’index sont mises à jour.  
  
 Le <xref:System.Windows.Media.VisualCollection.RemoveRange%2A> méthode supprime également les relations parent-enfant entre le parent visuel qui est le propriétaire de la <xref:System.Windows.Media.VisualCollection>et la plage de visuels enfants.  
  
 Si vous avez besoin d’un contrôle de bas niveau supérieur sur l’implémentation de stockage sous-jacente des objets enfants visuels, envisagez d’utiliser le <xref:System.Windows.Media.Visual.AddVisualChild%2A> et <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> méthodes. Lorsque vous utilisez ces méthodes, vous définir votre propre implémentation de stockage et que vous n’utilisez pas <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> est inférieur à zéro ou <paramref name="count" /> est inférieur à zéro.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> et <paramref name="count" /> ne désignent pas une plage valide d'éléments dans <see cref="T:System.Windows.Media.VisualCollection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <value>Valeur de type <see cref="T:System.Object" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ce membre prend en charge l’infrastructure [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] et n’est pas destiné à être directement utilisé à partir de votre code. Pour obtenir une description de ce membre, consultez <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
        <returns>Objet pouvant être utilisé pour itérer au sein de la collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>