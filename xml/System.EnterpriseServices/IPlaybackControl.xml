<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="54fcf7590327e9d2356fc883bfae633d190f6a78" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30408883" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fonctionne dans Queued Components dans le cadre du traitement anormal des erreurs de lecture côté serveur et des échecs côté client du mécanisme de distribution Message Queuing.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe d’exception définie pour le composant dans le catalogue COM + implémente à la fois <xref:System.EnterpriseServices.IPlaybackControl> et l’interface de la classe d’origine. Les implémentations de méthode de l’interface de classe d’origine sont utilisées pour effectuer la gestion des exceptions pour les méthodes ayant échouées dans la classe elle-même. Elles seront appelées après <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> ou <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> pour traiter les exceptions pour la méthode appelée à l’origine.  
  
 Le Lecteur Queued Components appelle les méthodes de <xref:System.EnterpriseServices.IPlaybackControl> pour informer l’objet de gestionnaire d’exceptions qu’un message est sur le point d’être placé sur la file d’attente finale de repos ou de lettres mortes. Le Lecteur Queued Components appelle ensuite la même méthode dans l’objet de gestionnaire d’exceptions ayant échoué dans l’appel de méthode d’origine. L’objet gestionnaire d’exceptions peut implémenter alternative, par exemple, par la collecte des informations de diagnostic de problème ou de génération d’un objet ou un message qui informe le client du problème. Si l’application n’implémente pas <xref:System.EnterpriseServices.IPlaybackControl>, le message incohérent est placé sur la file d’attente de repos ou de lettres mortes final lorsque le lecteur de composants en file d’attente a effectué toutes les nouvelles tentatives.  
  
 Un message incohérent est un message qui ne peut pas être traité pour une raison quelconque, peut-être en raison d’un problème avec le serveur ou le système de file d’attente. La transaction est annulée et le message incohérent est placé en haut de la file d’attente. Lorsque le message est dépilé là encore, la même condition se produit. Ce message peut continuer indéfiniment tant que rien n’est fait pour corriger le problème. Le service de composants de la file d’attente gère le message incohérent à l’aide d’une série de nouvelles tentatives. Après plusieurs tentatives infructueuses, le message est déplacé vers une file d’attente de repos final. Messages incohérents restent dans la file d’attente terminale jusqu'à ce que déplacés manuellement à l’aide de l’outil utilitaire composants en file d’attente.  
  
 Le cas du message poison peut être résolu par programme, à l’aide de la <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> (méthode), qui informe l’auteur du composant côté serveur que toutes les tentatives de lecture de l’activation différée ont échoué.  
  
 Si vous découvrez un message incohérent, vous pourrez peut-être résoudre la cause sous-jacente du problème rapidement. Par exemple, si le serveur est hors connexion pour une raison quelconque, vous pouvez mettre en ligne. Si vous ne pouvez pas résoudre le problème rapidement, vous pouvez générer automatiquement une autre transaction qui notifie au demandeur que la transaction ne se produisait. Le demandeur peut effectuer une transaction de compensation qui inverse l’effet d’une transaction qui a déjà été validée.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informe le composant de gestion des exceptions côté client que toutes les tentatives effectuées par l'utilitaire Message Queuing pour livrer le message au serveur ont été rejetées et que le message s'est retrouvé dans la file d'attente des lettres mortes Xact côté client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Réception de messages dans la file d’attente de lettres mortes Xact, COM + tente d’appeler un gestionnaire d’exception côté client associée à la classe serveur pour livrer cette notification. Il le fait en appelant d’abord <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, puis la version de la gestion des exceptions de la méthode ayant échouée dans l’objet de gestionnaire d’exceptions. Cette méthode d’exception peut effectuer une action d’exception, telles que l’enregistrement de l’échec, envoyer un message électronique à l’administrateur ou effectuer l’action de compensation côté client (en annulant l’effet d’une transaction précédente). Si la méthode d’exception n’a pas réussie, le message reste dans la file d’attente de lettres mortes Xact.  
  
 La file d’attente de lettres mortes Xact peut être affiché dans l’Explorateur Microsoft Message Queue (MSMQ).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informe l'implémentation de la classe d'exception côté serveur que toutes les tentatives de lecture de l'activation différée vers le serveur ont échoué et que le message va être placé dans sa file d'attente de repos finale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Réception de messages sur la file d’attente de lettres mortes Xact, COM + tente d’appeler un gestionnaire d’exceptions côté serveur associée à la classe serveur pour livrer cette notification. Il le fait en appelant d’abord <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, puis appeler la version de la méthode ayant échouée dans l’objet de gestionnaire d’exceptions d’exceptions. Cette méthode d’exception peut effectuer une action d’exception, telles que l’enregistrement de l’échec, envoyer un message électronique à l’administrateur ou effectuer l’action de compensation côté client (en annulant l’effet d’une transaction précédente). L’objet serveur doit faire le maximum pour compléter cette transaction. Sinon, une intervention manuelle est requise pour retraiter le message. Si la méthode d’exception n’a pas réussie, le message est déplacé vers la file d’attente de repos final.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>