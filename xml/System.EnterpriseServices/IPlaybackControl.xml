<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a2fa35f21d501233854b1e609716c45f5c69687" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36563488" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1f2ec-101">Fonctionne dans Queued Components dans le cadre du traitement anormal des erreurs de lecture côté serveur et des échecs côté client du mécanisme de distribution Message Queuing.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1f2ec-101">Functions in Queued Components in the abnormal handling of server-side playback errors and client-side failures of the Message Queuing delivery mechanism.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f2ec-102">La classe d’exception définie pour le composant dans le catalogue COM + implémente à la fois <xref:System.EnterpriseServices.IPlaybackControl> et l’interface de la classe d’origine.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-102">The exception class defined for the component in the COM+ catalog implements both <xref:System.EnterpriseServices.IPlaybackControl> and the interface for the original class.</span></span> <span data-ttu-id="1f2ec-103">Les implémentations de méthode de l’interface de classe d’origine sont utilisées pour effectuer la gestion des exceptions pour les méthodes ayant échouées dans la classe elle-même.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-103">The method implementations of the original class interface are used to perform the exception handling for the failed methods in the class itself.</span></span> <span data-ttu-id="1f2ec-104">Elles seront appelées après <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> ou <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> pour traiter les exceptions pour la méthode appelée à l’origine.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-104">They will be called after <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> or <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> to process exceptions for the method originally called.</span></span>  
  
 <span data-ttu-id="1f2ec-105">Le Lecteur Queued Components appelle les méthodes de <xref:System.EnterpriseServices.IPlaybackControl> pour informer l’objet de gestionnaire d’exceptions qu’un message est sur le point d’être placé sur la file d’attente finale de repos ou de lettres mortes.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-105">The Queued Components Player calls the methods of <xref:System.EnterpriseServices.IPlaybackControl> to inform the exception-handler object that a message is about to be placed on the final resting or dead letter queue.</span></span> <span data-ttu-id="1f2ec-106">Le Lecteur Queued Components appelle ensuite la même méthode dans l’objet de gestionnaire d’exceptions ayant échoué dans l’appel de méthode d’origine.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-106">The Queued Components Player then calls the same method in the exception-handler object that had failed in the original method call.</span></span> <span data-ttu-id="1f2ec-107">L’objet gestionnaire d’exceptions peut implémenter alternative, par exemple, par la collecte des informations de diagnostic de problème ou de génération d’un objet ou un message qui informe le client du problème.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-107">The exception-handler object can implement an alternative, for example, by gathering problem diagnosis information or generating an object or message that informs the client of the problem.</span></span> <span data-ttu-id="1f2ec-108">Si l’application n’implémente pas <xref:System.EnterpriseServices.IPlaybackControl>, le message incohérent est placé sur la file d’attente de repos ou de lettres mortes final lorsque le lecteur de composants en file d’attente a effectué toutes les nouvelles tentatives.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-108">If the application does not implement <xref:System.EnterpriseServices.IPlaybackControl>, the poison message is placed on the final resting or dead letter queue when the Queued Components Player exhausts all retries.</span></span>  
  
 <span data-ttu-id="1f2ec-109">Un message incohérent est un message qui ne peut pas être traité pour une raison quelconque, peut-être en raison d’un problème avec le serveur ou le système de file d’attente.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-109">A poison message is a message that cannot be processed for some reason, perhaps because of a problem with the server or queuing system.</span></span> <span data-ttu-id="1f2ec-110">La transaction est annulée et le message incohérent est placé en haut de la file d’attente.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-110">The transaction is rolled back, and the poison message goes to the top of the queue.</span></span> <span data-ttu-id="1f2ec-111">Lorsque le message est dépilé là encore, la même condition se produit.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-111">When the message is dequeued again, the same condition occurs.</span></span> <span data-ttu-id="1f2ec-112">Ce message peut continuer indéfiniment tant que rien n’est fait pour corriger le problème.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-112">This message can continue looping indefinitely until something is done to correct the problem.</span></span> <span data-ttu-id="1f2ec-113">Le service de composants de la file d’attente gère le message incohérent à l’aide d’une série de nouvelles tentatives.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-113">The Queued Components service handles the poison message by using a series of retries.</span></span> <span data-ttu-id="1f2ec-114">Après plusieurs tentatives infructueuses, le message est déplacé vers une file d’attente de repos final.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-114">After several unsuccessful retries, the message is moved to a final resting queue.</span></span> <span data-ttu-id="1f2ec-115">Messages incohérents restent dans la file d’attente terminale jusqu'à ce que déplacés manuellement à l’aide de l’outil utilitaire composants en file d’attente.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-115">Poison messages remain in the resting queue until manually moved by using the Queued Components Message Mover tool.</span></span>  
  
 <span data-ttu-id="1f2ec-116">Le cas du message poison peut être résolu par programme, à l’aide de la <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> (méthode), qui informe l’auteur du composant côté serveur que toutes les tentatives de lecture de l’activation différée ont échoué.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-116">The poison message situation can also be resolved programmatically, using the <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> method, which informs the server-side component author that all attempts to play back the deferred activation have failed.</span></span>  
  
 <span data-ttu-id="1f2ec-117">Si vous découvrez un message incohérent, vous pourrez peut-être résoudre la cause sous-jacente du problème rapidement.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-117">If you discover a poison message, you might be able to solve the underlying cause of the problem quickly.</span></span> <span data-ttu-id="1f2ec-118">Par exemple, si le serveur est hors connexion pour une raison quelconque, vous pouvez mettre en ligne.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-118">For example, if the server was offline for some reason, you can bring the server back online.</span></span> <span data-ttu-id="1f2ec-119">Si vous ne pouvez pas résoudre le problème rapidement, vous pouvez générer automatiquement une autre transaction qui notifie au demandeur que la transaction ne se produisait.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-119">If you cannot solve the problem quickly, you can automatically generate another transaction that notifies the requestor that the transaction did not occur.</span></span> <span data-ttu-id="1f2ec-120">Le demandeur peut effectuer une transaction de compensation qui inverse l’effet d’une transaction qui a déjà été validée.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-120">The requestor can then make a compensating transaction that reverses the effect of a transaction that has already committed.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1f2ec-121">Informe le composant de gestion des exceptions côté client que toutes les tentatives effectuées par l'utilitaire Message Queuing pour livrer le message au serveur ont été rejetées et que le message s'est retrouvé dans la file d'attente des lettres mortes Xact côté client.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f2ec-121">Informs the client-side exception-handling component that all Message Queuing attempts to deliver the message to the server were rejected, and the message ended up on the client-side Xact Dead Letter queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f2ec-122">Réception de messages dans la file d’attente de lettres mortes Xact, COM + tente d’appeler un gestionnaire d’exception côté client associée à la classe serveur pour livrer cette notification.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-122">As messages arrive in the Xact Dead Letter queue, COM+ attempts to invoke a client-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="1f2ec-123">Il le fait en appelant d’abord <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, puis la version de la gestion des exceptions de la méthode ayant échouée dans l’objet de gestionnaire d’exceptions.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-123">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, then calling the exception-handling version of the failed method in the exception-handler object.</span></span> <span data-ttu-id="1f2ec-124">Cette méthode d’exception peut effectuer une action d’exception, telles que l’enregistrement de l’échec, envoyer un message électronique à l’administrateur ou effectuer l’action de compensation côté client (en annulant l’effet d’une transaction précédente).</span><span class="sxs-lookup"><span data-stu-id="1f2ec-124">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="1f2ec-125">Si la méthode d’exception n’a pas réussie, le message reste dans la file d’attente de lettres mortes Xact.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-125">If the exception method is not successful, the message is left on the Xact Dead Letter queue.</span></span>  
  
 <span data-ttu-id="1f2ec-126">La file d’attente de lettres mortes Xact peut être affiché dans l’Explorateur Microsoft Message Queue (MSMQ).</span><span class="sxs-lookup"><span data-stu-id="1f2ec-126">The Xact Dead Letter queue can be viewed in the Microsoft Message Queue (MSMQ) Explorer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1f2ec-127">Informe l'implémentation de la classe d'exception côté serveur que toutes les tentatives de lecture de l'activation différée vers le serveur ont échoué et que le message va être placé dans sa file d'attente de repos finale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1f2ec-127">Informs the server-side exception class implementation that all attempts to play back the deferred activation to the server have failed, and the message is about to be moved to its final resting queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f2ec-128">Réception de messages sur la file d’attente de lettres mortes Xact, COM + tente d’appeler un gestionnaire d’exceptions côté serveur associée à la classe serveur pour livrer cette notification.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-128">As messages arrive on the Xact Dead Letter queue, COM+ attempts to invoke a server-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="1f2ec-129">Il le fait en appelant d’abord <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, puis appeler la version de la méthode ayant échouée dans l’objet de gestionnaire d’exceptions d’exceptions.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-129">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, then calling the exception handling version of the failed method in the exception handler object.</span></span> <span data-ttu-id="1f2ec-130">Cette méthode d’exception peut effectuer une action d’exception, telles que l’enregistrement de l’échec, envoyer un message électronique à l’administrateur ou effectuer l’action de compensation côté client (en annulant l’effet d’une transaction précédente).</span><span class="sxs-lookup"><span data-stu-id="1f2ec-130">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="1f2ec-131">L’objet serveur doit faire le maximum pour compléter cette transaction.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-131">The server object should make every effort to complete this transaction successfully.</span></span> <span data-ttu-id="1f2ec-132">Sinon, une intervention manuelle est requise pour retraiter le message.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-132">Otherwise, manual intervention is required to reprocess the message.</span></span> <span data-ttu-id="1f2ec-133">Si la méthode d’exception n’a pas réussie, le message est déplacé vers la file d’attente de repos final.</span><span class="sxs-lookup"><span data-stu-id="1f2ec-133">If the exception method is not successful, the message is moved to the final resting queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>