<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71de6c95b5ac06ee9ff4c5ad83a05ad3542abd35" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30408233" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Prend en charge les méthodes pouvant être appelées lors du démarrage ou de l’arrêt d’un composant COM.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implémentez la <xref:System.EnterpriseServices.IProcessInitializer> méthodes d’interface sur les composants de service si vous souhaitez exécuter l’initialisation ou le code d’arrêt sur un processus serveur (Dllhost.exe) démarre ou s’arrête, respectivement.  
  
 COM + fournit `Startup` et `Shutdown` événements lorsque Dllhost.exe commence et se termine. Cette fonctionnalité permet à tous les composants COM + qui sont installés dans une application serveur COM + (appelée composants serveur ci-après) pour exécuter l’initialisation personnalisée et le code de nettoyage. Une instance de chaque composant qui implémente le <xref:System.EnterpriseServices.IProcessInitializer> interface est créée et stockée pour la durée du processus et appelée sur les méthodes d’interface au cours de démarrage et d’arrêt. En cas d’implémentation dans une <xref:System.EnterpriseServices.ServicedComponent>, lors de l’inscription du composant, le `InitializesServerApplication` paramètre dans le `COMAdminCatalogObject` dans les composants des collection est définie sur `true`.  
  
 À l’aide de la `Startup` et `Shutdown` événements, vous pouvez initialiser des ressources, créer des connexions, initialiser des données partagées et exécuter le code de nettoyage. Toutefois, vous ne devez pas accéder États qui sont spécifiques à COM + car les instances des composants serveur n’ont pas encore été créés. En outre, le code dans le `Startup` et `Shutdown` événements doivent retourner aussi rapidement que possible, car le système n'attend que 90 secondes pour se préparer à accepter les activations une fois que le système démarre le processus Dllhost.exe. Si Dllhost.exe ne signale pas qu’il est prêt dans les 90 secondes, le système met fin au processus ; Par conséquent, l’initialisation doit être terminé dans ce laps de temps de traitement. Chaque composant serveur qui participe à l’initialisation doit prendre en charge la <xref:System.EnterpriseServices.IProcessInitializer> interface. Lors du démarrage de DllHost.exe, COM + crée tous les composants de serveur qui a demandé à ce service, appelle `QueryInterface` pour le <xref:System.EnterpriseServices.IProcessInitializer> interface et appelle le <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> (fonction). De même, lorsque le processus DllHost.exe est arrêté, il appelle le <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> fonction sur celles précédemment stocké des pointeurs d’interface.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exécute des actions d’arrêt. Appelé lors de l’arrêt de Dllhost.exe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> n’est pas appelée lors d’un failfast ou d’autres événements d’arrêt catastrophique.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">Dans Microsoft Windows XP, pointeur de l’interface <see langword="IUnknown" /> du composant COM qui démarre. Dans Microsoft Windows 2000, cet argument est toujours <see langword="null" />.</param>
        <summary>Exécute l’initialisation au démarrage. Appelé lors du démarrage de Dllhost.exe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objet référencé par `punkProcessControl` implémente un <xref:System.EnterpriseServices.IProcessInitControl> interface. <xref:System.EnterpriseServices.IProcessInitControl> prend en charge la méthode unique <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.  
  
 Le code d’initialisation dans <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> peut appeler le <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, avec le délai d’attente défini comme égal au nombre de secondes restantes avant le démarrage de l’expiration du composant.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>