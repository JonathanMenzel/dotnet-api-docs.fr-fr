<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="925d2-101">Prend en charge les méthodes pouvant être appelées lors du démarrage ou de l’arrêt d’un composant COM.</span><span class="sxs-lookup"><span data-stu-id="925d2-101">Supports methods that can be called when a COM component starts up or shuts down.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="925d2-102">Implémentez la <xref:System.EnterpriseServices.IProcessInitializer> méthodes d’interface sur les composants de service si vous souhaitez exécuter l’initialisation ou le code d’arrêt sur un processus serveur (Dllhost.exe) démarre ou s’arrête, respectivement.</span><span class="sxs-lookup"><span data-stu-id="925d2-102">Implement the <xref:System.EnterpriseServices.IProcessInitializer> interface methods on serviced components if you want to run initialization or shutdown code when a server process (Dllhost.exe) starts up or shuts down, respectively.</span></span>  
  
 <span data-ttu-id="925d2-103">COM + fournit `Startup` et `Shutdown` événements lorsque Dllhost.exe commence et se termine.</span><span class="sxs-lookup"><span data-stu-id="925d2-103">COM+ provides `Startup` and `Shutdown` events when Dllhost.exe starts and ends.</span></span> <span data-ttu-id="925d2-104">Cette fonctionnalité permet à tous les composants COM + qui sont installés dans une application serveur COM + (appelée composants serveur ci-après) pour exécuter l’initialisation personnalisée et le code de nettoyage.</span><span class="sxs-lookup"><span data-stu-id="925d2-104">This feature enables any COM+ components that are installed in a COM+ server application (referred to as server components hereafter) to run custom initialization and clean up code.</span></span> <span data-ttu-id="925d2-105">Une instance de chaque composant qui implémente le <xref:System.EnterpriseServices.IProcessInitializer> interface est créée et stockée pour la durée du processus et appelée sur les méthodes d’interface au cours de démarrage et d’arrêt.</span><span class="sxs-lookup"><span data-stu-id="925d2-105">An instance of each component that implements the <xref:System.EnterpriseServices.IProcessInitializer> interface will be created and stored for the duration of the process, and called on the interface methods during startup and shutdown.</span></span> <span data-ttu-id="925d2-106">En cas d’implémentation dans une <xref:System.EnterpriseServices.ServicedComponent>, lors de l’inscription du composant, le `InitializesServerApplication` paramètre dans le `COMAdminCatalogObject` dans les composants des collection est définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="925d2-106">When implemented on a <xref:System.EnterpriseServices.ServicedComponent>, during registration of the component, the `InitializesServerApplication` parameter in the `COMAdminCatalogObject` within the Components collection is set to `true`.</span></span>  
  
 <span data-ttu-id="925d2-107">À l’aide de la `Startup` et `Shutdown` événements, vous pouvez initialiser des ressources, créer des connexions, initialiser des données partagées et exécuter le code de nettoyage.</span><span class="sxs-lookup"><span data-stu-id="925d2-107">Using the `Startup` and `Shutdown` events, you can initialize resources, create connections, initialize shared data, and run cleanup code.</span></span> <span data-ttu-id="925d2-108">Toutefois, vous ne devez pas accéder États qui sont spécifiques à COM + car les instances des composants serveur n’ont pas encore été créés.</span><span class="sxs-lookup"><span data-stu-id="925d2-108">However, you must not access states that are specific to COM+ because instances of server components have not yet been created.</span></span> <span data-ttu-id="925d2-109">En outre, le code dans le `Startup` et `Shutdown` événements doivent retourner aussi rapidement que possible, car le système n'attend que 90 secondes pour se préparer à accepter les activations une fois que le système démarre le processus Dllhost.exe.</span><span class="sxs-lookup"><span data-stu-id="925d2-109">In addition, the code in the `Startup` and `Shutdown` events should return as quickly as possible, because the system waits only 90 seconds for Dllhost.exe to prepare to accept activations after the system starts the process.</span></span> <span data-ttu-id="925d2-110">Si Dllhost.exe ne signale pas qu’il est prêt dans les 90 secondes, le système met fin au processus ; Par conséquent, l’initialisation doit être terminé dans ce laps de temps de traitement.</span><span class="sxs-lookup"><span data-stu-id="925d2-110">If Dllhost.exe does not signal that it is ready within 90 seconds, the system ends the process; thus, all initialization processing needs to be completed within this time frame.</span></span> <span data-ttu-id="925d2-111">Chaque composant serveur qui participe à l’initialisation doit prendre en charge la <xref:System.EnterpriseServices.IProcessInitializer> interface.</span><span class="sxs-lookup"><span data-stu-id="925d2-111">Each server component that participates in initialization must support the <xref:System.EnterpriseServices.IProcessInitializer> interface.</span></span> <span data-ttu-id="925d2-112">Lors du démarrage de DllHost.exe, COM + crée tous les composants de serveur qui a demandé à ce service, appelle `QueryInterface` pour le <xref:System.EnterpriseServices.IProcessInitializer> interface et appelle le <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> (fonction).</span><span class="sxs-lookup"><span data-stu-id="925d2-112">On DllHost.exe startup, COM+ creates all server components that requested this service, calls `QueryInterface` for the <xref:System.EnterpriseServices.IProcessInitializer> interface, and calls the <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> function.</span></span> <span data-ttu-id="925d2-113">De même, lorsque le processus DllHost.exe est arrêté, il appelle le <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> fonction sur celles précédemment stocké des pointeurs d’interface.</span><span class="sxs-lookup"><span data-stu-id="925d2-113">Similarly, when the DllHost.exe process is shut down, it calls the <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> function on those previously stored interface pointers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="925d2-114">Exécute des actions d’arrêt.</span><span class="sxs-lookup"><span data-stu-id="925d2-114">Performs shutdown actions.</span></span> <span data-ttu-id="925d2-115">Appelé lors de l’arrêt de Dllhost.exe.</span><span class="sxs-lookup"><span data-stu-id="925d2-115">Called when Dllhost.exe is shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="925d2-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> n’est pas appelée lors d’un failfast ou d’autres événements d’arrêt catastrophique.</span><span class="sxs-lookup"><span data-stu-id="925d2-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> is not called during a failfast or other catastrophic shutdown events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl"><span data-ttu-id="925d2-117">Dans Microsoft Windows XP, pointeur de l’interface <see langword="IUnknown" /> du composant COM qui démarre.</span><span class="sxs-lookup"><span data-stu-id="925d2-117">In Microsoft Windows XP, a pointer to the <see langword="IUnknown" /> interface of the COM component starting up.</span></span> <span data-ttu-id="925d2-118">Dans Microsoft Windows 2000, cet argument est toujours <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="925d2-118">In Microsoft Windows 2000, this argument is always <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="925d2-119">Exécute l’initialisation au démarrage.</span><span class="sxs-lookup"><span data-stu-id="925d2-119">Performs initialization at startup.</span></span> <span data-ttu-id="925d2-120">Appelé lors du démarrage de Dllhost.exe.</span><span class="sxs-lookup"><span data-stu-id="925d2-120">Called when Dllhost.exe is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="925d2-121">L’objet référencé par `punkProcessControl` implémente un <xref:System.EnterpriseServices.IProcessInitControl> interface.</span><span class="sxs-lookup"><span data-stu-id="925d2-121">The object referenced by `punkProcessControl` implements an <xref:System.EnterpriseServices.IProcessInitControl> interface.</span></span> <span data-ttu-id="925d2-122"><xref:System.EnterpriseServices.IProcessInitControl> prend en charge la méthode unique <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.</span><span class="sxs-lookup"><span data-stu-id="925d2-122"><xref:System.EnterpriseServices.IProcessInitControl> supports the single method <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.</span></span>  
  
 <span data-ttu-id="925d2-123">Le code d’initialisation dans <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> peut appeler le <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, avec le délai d’attente défini comme égal au nombre de secondes restantes avant le démarrage de l’expiration du composant.</span><span class="sxs-lookup"><span data-stu-id="925d2-123">The initialization code in <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> can call the <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, with the time-out set equal to the number of seconds remaining before the startup of the component times out.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>