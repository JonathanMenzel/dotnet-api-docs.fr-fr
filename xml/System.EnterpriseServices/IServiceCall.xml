<Type Name="IServiceCall" FullName="System.EnterpriseServices.IServiceCall">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="79c7206457f6f0c8c1c036c096a61a708f1d799b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37760307" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IServiceCall" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceCall" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IServiceCall" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceCall" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceCall" />
  <TypeSignature Language="F#" Value="type IServiceCall = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("BD3E2E12-42DD-40f4-A09A-95A50C58304B")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implémente le travail en traitement par lots qui est soumis par le biais de l'activité créée par <see cref="T:System.EnterpriseServices.Activity" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez <xref:System.EnterpriseServices.IServiceCall> pour effectuer le travail de traitement par lots qui utilise les services COM + sans créer un composant en particulier pour l’utilisation de ces services. Environnements de script telles que Internet Information Services (IIS) et ASP.NET peuvent utiliser cette interface à utiliser les services COM + sans avoir à créer un composant COM +.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnCall">
      <MemberSignature Language="C#" Value="public void OnCall ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCall() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IServiceCall.OnCall" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCall ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCall();" />
      <MemberSignature Language="F#" Value="abstract member OnCall : unit -&gt; unit" Usage="iServiceCall.OnCall " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lance l'exécution du travail en traitement par lots implémenté dans cette méthode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le travail de traitement par lots est exécuté dans cette méthode s’exécute dans le contexte et le thread cloisonné de l’activité créée par l’appel à <xref:System.EnterpriseServices.Activity>. Le travail de traitement par lots dans cette méthode est exécuté par un appel à <xref:System.EnterpriseServices.Activity.SynchronousCall%2A?displayProperty=nameWithType> ou <xref:System.EnterpriseServices.Activity.AsynchronousCall%2A?displayProperty=nameWithType>.  
  
> [!CAUTION]
>  Vous devez vous assurer que cette méthode est thread-safe dans les situations où l’objet d’activité créé par <xref:System.EnterpriseServices.Activity> n’est pas créé avec un contexte synchronisé, car dans ce cas, plusieurs appels à <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> peuvent s’exécuter en même temps.  
  
 Pour obtenir de meilleures performances du système, la configuration de contexte de l’activité créée par <xref:System.EnterpriseServices.Activity> doivent être mises en correspondance pour le travail de traitement par lots effectué par le <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> (méthode). Par exemple, si le lot de travail le <xref:System.EnterpriseServices.IServiceCall.OnCall%2A> méthode utilise des objets pouvant être regroupés, l’activité créée par <xref:System.EnterpriseServices.Activity> doivent être configurés pour utiliser le MTA (multithreaded apartment).  
  
 Pour plus d’informations sur les objets pouvant être regroupés, consultez la rubrique « Configuration requise pour les objets pouvant être regroupés » dans Platform SDK sur MSDN.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>