<Type Name="ServiceDomain" FullName="System.EnterpriseServices.ServiceDomain">
  <Metadata><Meta Name="ms.openlocfilehash" Value="81b5a3e89e9b3612a1c3455764f65be3243d8145" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48600201" /></Metadata><TypeSignature Language="C#" Value="public sealed class ServiceDomain" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ServiceDomain extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.ServiceDomain" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ServiceDomain" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceDomain sealed" />
  <TypeSignature Language="F#" Value="type ServiceDomain = class" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Autorise un segment de code identifié par <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> et <see cref="M:System.EnterpriseServices.ServiceDomain.Leave" /> à s'exécuter dans son propre contexte et à se comporter comme s'il s'agissait d'une méthode appelée sur un objet créé dans le contexte. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> et <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> méthodes sont utilisées dans les paires pour entourer du code qui peut alors utiliser les services COM +. Code placé entre les appels à <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> et <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> s’exécute dans son propre contexte et se comporte comme s’il s’agissait d’une méthode qui est appelée sur un objet créé dans le contexte. Le <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> et <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> paires peuvent être imbriqués. C’est à l’utilisateur pour vous assurer que les paires d’appels sont équilibrés afin que chaque appel à <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> correspond à un appel précédent à <xref:System.EnterpriseServices.ServiceDomain.Enter%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public static void Enter (System.EnterpriseServices.ServiceConfig cfg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enter(class System.EnterpriseServices.ServiceConfig cfg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enter (cfg As ServiceConfig)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Enter(System::EnterpriseServices::ServiceConfig ^ cfg);" />
      <MemberSignature Language="F#" Value="static member Enter : System.EnterpriseServices.ServiceConfig -&gt; unit" Usage="System.EnterpriseServices.ServiceDomain.Enter cfg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cfg" Type="System.EnterpriseServices.ServiceConfig" />
      </Parameters>
      <Docs>
        <param name="cfg"><see cref="T:System.EnterpriseServices.ServiceConfig" /> qui contient les informations de configuration pour les services à utiliser dans le code délimité.</param>
        <summary>Crée le contexte spécifié par l'objet <see cref="T:System.EnterpriseServices.ServiceConfig" /> et l'intègre à la pile de contexte pour en faire le contexte en cours.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> crée d’abord un contexte configuré comme spécifié par le <xref:System.EnterpriseServices.ServiceConfig> objet qui est passé en tant que le `cfg` paramètre. Stratégies des côtés client et serveur sont alors déclenchées comme si un appel de méthode s’est produite. Le nouveau contexte est ensuite transmis à une pile de contexte et devient le contexte actuel. En raison de l’efficacité de leur conception et comme aucun marshaling de thread n’est impliqué, à l’aide de <xref:System.EnterpriseServices.ServiceDomain.Enter%2A> et <xref:System.EnterpriseServices.ServiceDomain.Leave%2A> implique réduit considérablement la surcharge par rapport à un appel de méthode équivalente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><see cref="T:System.EnterpriseServices.ServiceConfig" /> n'est pas pris en charge sur la plateforme actuelle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static System.EnterpriseServices.TransactionStatus Leave ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.EnterpriseServices.TransactionStatus Leave() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.ServiceDomain.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Leave () As TransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::EnterpriseServices::TransactionStatus Leave();" />
      <MemberSignature Language="F#" Value="static member Leave : unit -&gt; System.EnterpriseServices.TransactionStatus" Usage="System.EnterpriseServices.ServiceDomain.Leave " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EnterpriseServices.TransactionStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Déclenche les stratégies d’abord côté serveur, puis côté client comme si un appel de méthode était retourné. Le contexte actuel est ensuite extrait de la pile de contexte, et le contexte qui était en cours d'exécution lors de l'appel de <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" /> devient le contexte actuel.</summary>
        <returns>Une des valeurs de <see cref="T:System.EnterpriseServices.TransactionStatus" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><see cref="T:System.EnterpriseServices.ServiceConfig" /> n'est pas pris en charge sur la plateforme actuelle.</exception>
      </Docs>
    </Member>
  </Members>
</Type>