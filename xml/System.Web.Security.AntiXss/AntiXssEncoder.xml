<Type Name="AntiXssEncoder" FullName="System.Web.Security.AntiXss.AntiXssEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b91ddd2c5b3a0e85bd53329c243386ca09aa7389" /><Meta Name="ms.sourcegitcommit" Value="303c57f737f11b89445bb845737721fee7ab8051" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="02/26/2019" /><Meta Name="ms.locfileid" Value="56834040" /></Metadata><TypeSignature Language="C#" Value="public class AntiXssEncoder : System.Web.Util.HttpEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AntiXssEncoder extends System.Web.Util.HttpEncoder" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.AntiXss.AntiXssEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Class AntiXssEncoder&#xA;Inherits HttpEncoder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AntiXssEncoder : System::Web::Util::HttpEncoder" />
  <TypeSignature Language="F#" Value="type AntiXssEncoder = class&#xA;    inherit HttpEncoder" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Util.HttpEncoder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Encode une chaîne à utiliser dans les chaînes HTML, XML, CSS et URL.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.Web.Security.AntiXss.AntiXssEncoder> classe pour remplacer le <xref:System.Web.Util.HttpEncoder> classe qui est utilisé par défaut pour encoder et décoder des chaînes dans les méthodes des classes telles que <xref:System.Web.HttpUtility>, <xref:System.Web.HttpServerUtility>, et <xref:System.Net.HttpResponseHeader>.  
  
 Dans le <xref:System.Web.Security.AntiXss.AntiXssEncoder> (classe), tous les caractères qui ne figurent pas dans la liste sont codées par le <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A> et <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A> méthodes.  
  
 Pour remplacer le <xref:System.Web.Util.HttpEncoder> classe avec le <xref:System.Web.Security.AntiXss.AntiXssEncoder> class, enregistrez-le à l’aide de la `encoderType` attribut de l’élément httpRuntime dans le fichier Web.config, comme indiqué dans l’exemple suivant :  
  
```  
<httpRuntime encoderType="System.Web.Security.AntiXss.AntiXssEncoder" />  
```  
  
 Vous trouverez une liste de caractères sécurisé par défaut pour les différentes méthodes de codage dans les notes relatives à la <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode%2A>, <xref:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode%2A>, <xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode%2A>, et <xref:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode%2A> méthodes. La liste par défaut peut être modifiée à l’aide de la <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> (méthode).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AntiXssEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AntiXssEncoder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Web.Security.AntiXss.AntiXssEncoder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CssEncode">
      <MemberSignature Language="C#" Value="public static string CssEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CssEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.CssEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CssEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CssEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member CssEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.CssEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne à encoder.</param>
        <summary>Encode la chaîne spécifiée pour une utilisation dans les feuilles de style (CSS) en cascade.</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste.  
  
> [!NOTE]
>  Insérer des guillemets ( » «) autour de la chaîne résultante avant de l’ajouter à une feuille de style en cascade.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Toutes sont à partir de la [Unicode C0 contrôles et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères.
  
|Caractère(s)|Description |  
|--------------------|-----------------|  
|A-Z|Caractères alphabétiques en majuscules|  
|a-z|Caractères alphabétiques en minuscules|  
|0-9|Numéros|  
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert\000028\000027XSS\000020Attack\000021\000027\000029\00003B`|  
|`user@contoso.com`|`user\000040contoso\00002Ecom`|  
|`Anti-Cross Site Scripting Namespace`|`Anti\00002DCross\000020Site\000020Scripting\000020Namespace`|  
  
 La séquence d’échappement de caractère CSS se compose d’un caractère de barre oblique inverse (\\) suivie jusqu'à six chiffres hexadécimaux représentant un code de caractère à partir de la norme ISO 10646. (La norme ISO 10646 équivaut au format Unicode.) Tout caractère autre qu’un chiffre hexadécimal met fin à la séquence d’échappement. Si un caractère qui suit la séquence d’échappement est également un chiffre hexadécimal valide, il doit inclure les six chiffres dans la séquence d’échappement ou utilisez un caractère espace blanc pour mettre fin à la séquence d’échappement. Par exemple, `\000020` désigne un espace.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlAttributeEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlAttributeEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlAttributeEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlAttributeEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlAttributeEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlAttributeEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlAttributeEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlAttributeEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à encoder.</param>
        <param name="output">Writer de texte à utiliser pour afficher la chaîne.</param>
        <summary>Encode et affiche la chaîne spécifiée pour une utilisation dans un attribut HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `&#DECIMAL;` notation.  
  
> [!NOTE]
>  Placez des guillemets ( » «) ou de guillemets simples (' ') autour de la chaîne résultante avant de l’ajouter à une page.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Toutes sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères, sauf indication dans la colonne Description.  
  
|Caractère(s)|Description |  
|--------------------|-----------------|  
|A-Z|Caractères alphabétiques Latin en majuscules|  
||a-z|Caractères alphabétiques latins minuscules|  
|0-9|Numéros|  
|!|Point d’exclamation|  
|#|Signe dièse, hachage|  
|$|Signe dollar|  
|%|Signe de pourcentage|  
|( )|Parenthèses|  
|*|Astérisque|  
|+|Signe plus|  
|,|Virgule|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|/|Barre oblique|  
|:|Colon|  
|;|Point-virgule|  
|=|Signe égal|  
|?|Point d'interrogation|  
|@|Commercial arobase|  
|[ ]|Des crochets|  
|&#92;|Barre oblique inverse|  
|^|Signe insertion|  
|_|Trait de soulignement|  
|\`| Accent grave|  
|{ }|Accolades, les accolades|  
|&#124;|Ligne verticale|  
|~|Tilde|  
|0x00A1 - 0x00AC|Les caractères spéciaux entre 0x00A1 (161 décimal) et 0x00AC (172 décimal) à partir de l’Unicode [contrôles C1 et Supplément Latin-1](https://www.unicode.org/charts/PDF/U0080.pdf) plage de caractères.|  
|0x00AE - 0x00FF|Les caractères spéciaux entre 0x00AE (174 décimal) et 0x00FF (255 décimal) à partir de l’Unicode [contrôles C1 et Supplément Latin-1](https://www.unicode.org/charts/PDF/U0080.pdf) plage de caractères.|  
|0x0100 - 0x017F|Caractères compris entre 0 x 0100 (256 décimal) et 0x017F (383 décimal). (L’Unicode [Latin étendu A](https://www.unicode.org/charts/PDF/U0100.pdf) plage de caractères.)|
|0x0180 - 0x024F|Caractères entre 0x0180 (384 décimal) et 0x024F (591 décimal). (L’Unicode [Latin étendu B](https://www.unicode.org/charts/PDF/U0180.pdf) plage de caractères.)|  
|0x0250 - 0x02AF|Caractères entre 0x0250 (592 décimal) et 0x02AF (687 décimal). (L’Unicode [les Extensions IPA](https://www.unicode.org/charts/PDF/U0250.pdf) plage de caractères.)| 
|0x02B0 - 0x02FF|Caractères entre 0x02B0 (688 décimal) et 0x02FF (767 décimal). (L’Unicode [lettres modificatives avec chasse](https://www.unicode.org/charts/PDF/U02B0.pdf) plage de caractères.)|
|0x0300 - 0x036F|Caractères entre 0x0300 (768 décimal) et 0x036F (879 décimal). (L’Unicode [COMBINATOIRES](https://www.unicode.org/charts/PDF/U0300.pdf) plage de caractères.)|  
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Pour personnaliser la liste, appelez le <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Encode la chaîne spécifiée pour une utilisation sous forme de texte dans la balise HTML.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlEncode (string input, bool useNamedEntities);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlEncode(string input, bool useNamedEntities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlEncode (input As String, useNamedEntities As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlEncode(System::String ^ input, bool useNamedEntities);" />
      <MemberSignature Language="F#" Value="static member HtmlEncode : string * bool -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode (input, useNamedEntities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="useNamedEntities" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne à encoder.</param>
        <param name="useNamedEntities"><see langword="true" /> pour utiliser les entités nommées HTML 4.0 pour certains encodages de caractères ; <see langword="false" /> pour effectuer l’encodage à l’aide de la notation <c>&amp;#DECIMAL;</c> uniquement.</param>
        <summary>Encode la chaîne spécifiée pour une utilisation sous forme de texte dans le balisage HTML et spécifie éventuellement l'utilisation d'entités nommées HTML 4.0.</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `&#DECIMAL;` notation.  
  
> [!NOTE]
>  Placez des guillemets ( » «) ou de guillemets simples (' ') autour de la chaîne résultante avant de l’ajouter à une page.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères, sauf indication dans la colonne Description.
  
|Caractère(s)|Description |  
|--------------------|-----------------|  
|A-Z|Caractères alphabétiques Latin en majuscules|  
|a-z|Caractères alphabétiques latins minuscules|  
|0-9|Numéros|  
|(Espace)|Espace|  
|!|Point d’exclamation|  
|#|Signe dièse, hachage|  
|$|Signe dollar|  
|%|Signe de pourcentage|  
|( )|Parenthèses|  
|*|Astérisque|  
|+|Signe plus|  
|,|Virgule|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|/|Barre oblique|  
|:|Colon|  
|;|Point-virgule|  
|=|Signe égal|  
|?|Point d'interrogation|  
|@|Arobase|  
|[ ]|Des crochets|  
|&#92;|Barre oblique inverse|  
|^|Signe insertion|  
|_|Trait de soulignement|  
|\`| Accent grave|  
|{ }|Accolades, les accolades|  
|&#124;|Ligne verticale|  
|~|Tilde|  
|0x00A1 - 0x00AC|Les caractères spéciaux entre 0x00A1 (161 décimal) et 0x00AC (172 décimal) à partir de l’Unicode [contrôles C1 et Supplément Latin-1](https://www.unicode.org/charts/PDF/U0080.pdf) plage de caractères. Dans cette plage, les caractères sont encodés lorsque `useNamedEntities` est `true`.|  
|0x00AE - 0x00FF|Les caractères spéciaux entre 0x00AE (174 décimal) et 0x00FF (255 décimal) à partir de l’Unicode [contrôles C1 et Supplément Latin-1](https://www.unicode.org/charts/PDF/U0080.pdf) plage de caractères. Dans cette plage, les caractères sont encodés lorsque `useNamedEntities` est `true`.|  
|0x0100 - 0x017F|Caractères compris entre 0 x 0100 (256 décimal) et 0x017F (383 décimal). (L’Unicode [Latin étendu A](https://www.unicode.org/charts/PDF/U0100.pdf) plage de caractères.)|
|0x0180 - 0x024F|Caractères entre 0x0180 (384 décimal) et 0x024F (591 décimal). (L’Unicode [Latin étendu B](https://www.unicode.org/charts/PDF/U0180.pdf) plage de caractères.)|  
|0x0250 - 0x02AF|Caractères entre 0x0250 (592 décimal) et 0x02AF (687 décimal). (L’Unicode [les Extensions IPA](https://www.unicode.org/charts/PDF/U0250.pdf) plage de caractères.)|  
|0x02B0 - 0x02FF|Caractères entre 0x02B0 (688 décimal) et 0x02FF (767 décimal). (L’Unicode [lettres modificatives avec chasse](https://www.unicode.org/charts/PDF/U02B0.pdf) plage de caractères.)|
|0x0300 - 0x036F|Caractères entre 0x0300 (768 décimal) et 0x036F (879 décimal). (L’Unicode [COMBINATOIRES](https://www.unicode.org/charts/PDF/U0300.pdf) plage de caractères.)| 
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Pour personnaliser la liste, appelez le <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="protected internal override void HtmlEncode (string value, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void HtmlEncode(string value, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub HtmlEncode (value As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void HtmlEncode(System::String ^ value, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="override this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="antiXssEncoder.HtmlEncode (value, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à encoder.</param>
        <param name="output">Writer de texte à utiliser pour afficher la chaîne.</param>
        <summary>Encode la chaîne spécifiée pour une utilisation sous forme de texte dans la balise HTML et affiche la chaîne à l'aide du writer de texte spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `&#DECIMAL;` notation.  
  
> [!NOTE]
>  Placez des guillemets ( » «) ou de guillemets simples (' ') autour de la chaîne résultante avant de l’ajouter à une page.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères, sauf indication dans la colonne Description.
  
|Caractère(s)|Description |  
|--------------------|-----------------|  
|A-Z|Caractères alphabétiques Latin en majuscules|  
|a-z|Caractères alphabétiques latins minuscules|  
|0-9|Numéros|  
|(Espace)|Espace|  
|!|Point d’exclamation|  
|#|Signe dièse, hachage|  
|$|Signe dollar|  
|%|Signe de pourcentage|  
|( )|Parenthèses|  
|*|Astérisque|  
|+|Signe plus|  
|,|Virgule|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|/|Barre oblique|  
|:|Colon|  
|;|Point-virgule|  
|=|Signe égal|  
|?|Point d'interrogation|  
|@|Arobase|  
|[ ]|Des crochets|  
|&#92;|Barre oblique inverse|  
|^|Signe insertion|  
|_|Trait de soulignement|  
|\`| Accent grave|  
|{ }|Accolades, les accolades|  
|&#124;|Ligne verticale|  
|~|Tilde|  
|0x00A1 - 0x00AC|Les caractères spéciaux entre 0x00A1 (161 décimal) et 0x00AC (172 décimal) à partir de l’Unicode [contrôles C1 et Supplément Latin-1](https://www.unicode.org/charts/PDF/U0080.pdf) plage de caractères. Dans cette plage, les caractères sont encodés lorsque `useNamedEntities` est `true`.|  
|0x00AE - 0x00FF|Les caractères spéciaux entre 0x00AE (174 décimal) et 0x00FF (255 décimal) à partir de l’Unicode [contrôles C1 et Supplément Latin-1](https://www.unicode.org/charts/PDF/U0080.pdf) plage de caractères. Dans cette plage, les caractères sont encodés lorsque `useNamedEntities` est `true`.|  
|0x0100 - 0x017F|Caractères compris entre 0 x 0100 (256 décimal) et 0x017F (383 décimal). (L’Unicode [Latin étendu A](https://www.unicode.org/charts/PDF/U0100.pdf) plage de caractères.)|
|0x0180 - 0x024F|Caractères entre 0x0180 (384 décimal) et 0x024F (591 décimal). (L’Unicode [Latin étendu B](https://www.unicode.org/charts/PDF/U0180.pdf) plage de caractères.)| 
|0x0250 - 0x02AF|Caractères entre 0x0250 (592 décimal) et 0x02AF (687 décimal). (L’Unicode [les Extensions IPA](https://www.unicode.org/charts/PDF/U0250.pdf) plage de caractères.)| 
|0x02B0 - 0x02FF|Caractères entre 0x02B0 (688 décimal) et 0x02FF (767 décimal). (L’Unicode [lettres modificatives avec chasse](https://www.unicode.org/charts/PDF/U02B0.pdf) plage de caractères.)|
|0x0300 - 0x036F|Caractères entre 0x0300 (768 décimal) et 0x036F (879 décimal). (L’Unicode [COMBINATOIRES](https://www.unicode.org/charts/PDF/U0300.pdf) plage de caractères.)| 
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&#39;XSS Attack!&#39;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&#39;XSS&#12354;Attack!&#39;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Pour personnaliser la liste, appelez le <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlFormUrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Encode la chaîne spécifiée pour une utilisation dans les envois de formulaire dont le type MIME est « application/x-www-form-urlencoded ».</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne à encoder.</param>
        <summary>Encode la chaîne spécifiée pour une utilisation dans les envois de formulaire dont le type MIME est « application/x-www-form-urlencoded ».</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `%SINGLE_BYTE_HEX` notation. 
  
> [!NOTE]
>  Placez des guillemets ( » «) ou de guillemets simples (' ') autour de la chaîne résultante avant de l’ajouter à une page.   

Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères. 
    
|Graphique de code Unicode|Caractère(s)|Description |  
|------------------------|--------------------|-----------------|  
|A-Z|Caractères alphabétiques en majuscules|  
|a-z|Caractères alphabétiques en minuscules|  
|0-9|Numéros|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|_|Trait de soulignement|  
|~|Tilde|  
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user@contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne à encoder.</param>
        <param name="codePage">Page de codes à utiliser pour encoder la chaîne <paramref name="input" />.</param>
        <summary>Encode la chaîne spécifiée pour une utilisation dans les envois de formulaire dont le type MIME est « application/x-www-form-urlencoded » à l'aide de la page de codes spécifiée.</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `%SINGLE_BYTE_HEX` notation.  
  
> [!NOTE]
>  Placez des guillemets ( » «) ou de guillemets simples (' ') autour de la chaîne résultante avant de l’ajouter à une page.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères. 
  
|Caractère(s)|Description |  
|--------------------|-----------------|  
|A-Z|Caractères alphabétiques en majuscules|  
|a-z|Caractères alphabétiques en minuscules|  
|0-9|Numéros|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|_|Trait de soulignement|  
|~|Tilde|  
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlFormUrlEncode">
      <MemberSignature Language="C#" Value="public static string HtmlFormUrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HtmlFormUrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HtmlFormUrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HtmlFormUrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member HtmlFormUrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.HtmlFormUrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne à encoder.</param>
        <param name="inputEncoding">Type d'encodage d'entrée.</param>
        <summary>Encode la chaîne spécifiée pour les envois de formulaire dont le type MIME est « application/x-www-form-urlencoded » à l'aide du type d'encodage de caractères spécifié.</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `%SINGLE_BYTE_HEX` notation.  
  
> [!NOTE]
>  Placez des guillemets ( » «) ou de guillemets simples (' ') autour de la chaîne résultante avant de l’ajouter à une page.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères. 
  
|Caractère(s)|Description |  
|--------------------|-----------------|  
|A-Z|Caractères alphabétiques en majuscules|  
|a-z|Caractères alphabétiques en minuscules|  
|0-9|Numéros|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|_|Trait de soulignement|  
|~|Tilde|  
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS+Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS+Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`Anti-Cross Site Scripting Namespace`|`Anti-Cross+Site+Scripting+Namespace`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkAsSafe">
      <MemberSignature Language="C#" Value="public static void MarkAsSafe (System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MarkAsSafe(valuetype System.Web.Security.AntiXss.LowerCodeCharts lowerCodeCharts, valuetype System.Web.Security.AntiXss.LowerMidCodeCharts lowerMidCodeCharts, valuetype System.Web.Security.AntiXss.MidCodeCharts midCodeCharts, valuetype System.Web.Security.AntiXss.UpperMidCodeCharts upperMidCodeCharts, valuetype System.Web.Security.AntiXss.UpperCodeCharts upperCodeCharts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MarkAsSafe(System::Web::Security::AntiXss::LowerCodeCharts lowerCodeCharts, System::Web::Security::AntiXss::LowerMidCodeCharts lowerMidCodeCharts, System::Web::Security::AntiXss::MidCodeCharts midCodeCharts, System::Web::Security::AntiXss::UpperMidCodeCharts upperMidCodeCharts, System::Web::Security::AntiXss::UpperCodeCharts upperCodeCharts);" />
      <MemberSignature Language="F#" Value="static member MarkAsSafe : System.Web.Security.AntiXss.LowerCodeCharts * System.Web.Security.AntiXss.LowerMidCodeCharts * System.Web.Security.AntiXss.MidCodeCharts * System.Web.Security.AntiXss.UpperMidCodeCharts * System.Web.Security.AntiXss.UpperCodeCharts -&gt; unit" Usage="System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe (lowerCodeCharts, lowerMidCodeCharts, midCodeCharts, upperMidCodeCharts, upperCodeCharts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerCodeCharts" Type="System.Web.Security.AntiXss.LowerCodeCharts" />
        <Parameter Name="lowerMidCodeCharts" Type="System.Web.Security.AntiXss.LowerMidCodeCharts" />
        <Parameter Name="midCodeCharts" Type="System.Web.Security.AntiXss.MidCodeCharts" />
        <Parameter Name="upperMidCodeCharts" Type="System.Web.Security.AntiXss.UpperMidCodeCharts" />
        <Parameter Name="upperCodeCharts" Type="System.Web.Security.AntiXss.UpperCodeCharts" />
      </Parameters>
      <Docs>
        <param name="lowerCodeCharts">Combinaison de tableaux de caractères inférieurs à marquer comme sécurisés.</param>
        <param name="lowerMidCodeCharts">Combinaison de tableaux de caractères inférieurs à intermédiaires à marquer comme sécurisés.</param>
        <param name="midCodeCharts">Combinaison de tableaux de caractères intermédiaires à marquer comme sécurisés.</param>
        <param name="upperMidCodeCharts">Combinaison de tableaux de caractères supérieurs à intermédiaires à marquer comme sécurisés.</param>
        <param name="upperCodeCharts">Combinaison de tableaux de caractères supérieurs à marquer comme sécurisés.</param>
        <summary>Marque les caractères des tableaux de caractères Unicode spécifiés comme sécurisés.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La liste affecte toutes les méthodes d’encodage XML de HTML, CSS et l’URL.  
  
 À quelques exceptions près, les tableaux de caractères Unicode ne correspondent pas directement aux langues écrites. Pour ajouter la prise en charge pour une langue spécifique ou un ensemble de langues souvent nécessite marquer plusieurs graphiques à base code comme sécurisé.  
  
 Pour ajouter la prise en charge de la langue japonaise tout en continuant à autoriser l’anglais, utilisez la syntaxe suivante :  
  
```  
  
MarkAsSafe(  
            LowerCodeCharts.Default,  
            LowerMidCodeCharts.HangulJamo,  
            MidCodeCharts.None,  
            UpperMidCodeCharts.CjkRadicalsSupplement |   
            UpperMidCodeCharts.CjkSymbolsAndPunctuation |   
            UpperMidCodeCharts.Hiragana |   
            UpperMidCodeCharts.Katakana |   
            UpperMidCodeCharts.KatakanaPhoneticExtensions |   
            UpperMidCodeCharts.LatinExtendedD |  
            UpperMidCodeCharts.CjkUnifiedIdeographs,  
            UpperCodeCharts.None);  
```  
  
> [!NOTE]
>  Le <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> méthode doit être appelée le `Application_Start` méthode dans le fichier Global.asax.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe(System.Web.Security.AntiXss.LowerCodeCharts,System.Web.Security.AntiXss.LowerMidCodeCharts,System.Web.Security.AntiXss.MidCodeCharts,System.Web.Security.AntiXss.UpperMidCodeCharts,System.Web.Security.AntiXss.UpperCodeCharts)" /> a été appelée en dehors de la méthode <see langword="Application_Start" /> dans le fichier Global.asax.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Encode les chaînes et les tableaux d'octets à utiliser dans une URL.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne à encoder.</param>
        <summary>Encode la chaîne spécifiée pour une utilisation dans une URL.</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `%SINGLE_BYTE_HEX` notation.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères. 
    
  
|Caractère(s)|Description |  
|--------------------|-----------------|  
|A-Z|Caractères alphabétiques en majuscules|  
|a-z|Caractères alphabétiques en minuscules|  
|0-9|Numéros|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|_|Trait de soulignement|  
|~|Tilde|  
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, int codePage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, int32 codePage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, codePage As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, int codePage);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * int -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, codePage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="codePage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne à encoder.</param>
        <param name="codePage">Page de codes à utiliser pour encoder la chaîne <paramref name="input" />.</param>
        <summary>Encode la chaîne spécifiée pour une utilisation dans une URL à l'aide de la page de codes spécifiée.</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `%SINGLE_BYTE_HEX` notation.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères. 
    
  
|Graphique de code Unicode|Caractère(s)|Description |  
|------------------------|--------------------|-----------------|  
|A-Z|Caractères alphabétiques en majuscules|  
|a-z|Caractères alphabétiques en minuscules|  
|0-9|Numéros|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|_|Trait de soulignement|  
|~|Tilde|  
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public static string UrlEncode (string input, System.Text.Encoding inputEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlEncode(string input, class System.Text.Encoding inputEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlEncode (input As String, inputEncoding As Encoding) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlEncode(System::String ^ input, System::Text::Encoding ^ inputEncoding);" />
      <MemberSignature Language="F#" Value="static member UrlEncode : string * System.Text.Encoding -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode (input, inputEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="inputEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne à encoder.</param>
        <param name="inputEncoding">Type d'encodage d'entrée.</param>
        <summary>Encode la chaîne spécifiée pour une utilisation dans une URL à l'aide du type d'encodage de caractères spécifié.</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `%SINGLE_BYTE_HEX` notation.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères. 
    
  
|Caractère(s)|Description |  
|--------------------|-----------------|  
|A-Z|Caractères alphabétiques en majuscules|  
|a-z|Caractères alphabétiques en minuscules|  
|0-9|Numéros|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|_|Trait de soulignement|  
|~|Tilde|  
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="protected internal override byte[] UrlEncode (byte[] bytes, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance unsigned int8[] UrlEncode(unsigned int8[] bytes, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlEncode(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlEncode (bytes As Byte(), offset As Integer, count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override cli::array &lt;System::Byte&gt; ^ UrlEncode(cli::array &lt;System::Byte&gt; ^ bytes, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.UrlEncode : byte[] * int * int -&gt; byte[]" Usage="antiXssEncoder.UrlEncode (bytes, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">Tableau d'octets à encoder.</param>
        <param name="offset">Index du premier octet à encoder.</param>
        <param name="count">Nombre d'octets à encoder.</param>
        <summary>Encode le tableau d'octets spécifié pour une utilisation dans une URL, en commençant au décalage spécifié dans le tableau d'octets et en encodant le nombre d'octets spécifié.</summary>
        <returns>Tableau d'octets encodé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `%SINGLE_BYTE_HEX` notation.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères. 
   
  
|Caractère(s)|Description |  
|--------------------|-----------------|  
|A-Z|Caractères alphabétiques en majuscules|  
|a-z|Caractères alphabétiques en minuscules|  
|0-9|Numéros|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|_|Trait de soulignement|  
|~|Tilde|  
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert%28%27XSS%20Attack%21%27%29%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert%28%27XSS%20Attack%21%27%29%3b%3c%2fscript%3e`|  
|`alert('XSSあAttack!');`|`alert%28%27XSS%e3%81%82Attack%21%27%29%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="protected internal override string UrlPathEncode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string UrlPathEncode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function UrlPathEncode (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ UrlPathEncode(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.UrlPathEncode : string -&gt; string" Usage="antiXssEncoder.UrlPathEncode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Chaîne à encoder.</param>
        <summary>Encode les chaînes de chemin d'accès à utiliser dans une URL.</summary>
        <returns>URL qui contient le chemin d'accès encodé.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `%SINGLE_BYTE_HEX` notation.  

Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères. 
    
|Caractère(s)|Description |  
|--------------------|-----------------|  
|A-Z|Caractères alphabétiques en majuscules|  
|a-z|Caractères alphabétiques en minuscules|  
|0-9|Numéros|  
|#|Signe dièse, hachage|  
|%|Signe de pourcentage|  
|( )|Parenthèses|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|/|Barre oblique|  
|&#92;|Barre oblique inverse|  
|_|Trait de soulignement|  
|{ }|Accolades, les accolades|  
|&#124;|Ligne verticale|  
|~|Tilde|  
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`http://www.contoso.com:8080/<en-us>/[page].htm?v={value1}#x=[amount]`|`http://www.contoso.com:8080/%3cen-us%3e/%5bpage%5d.htm?v={value1}#x=[amount]`|  
|`alert('XSS Attack!');`|`alert(%27XSS%20Attack%21%27)%3b`|  
|`<script>alert('XSS Attack!');</script>`|`%3cscript%3ealert(%27XSS%20Attack%21%27)%3b%3c/script%3e`|  
|`alert('XSSあAttack!');`|`alert(%27XSS%e3%81%82Attack%21%27)%3b`|  
|`user@contoso.com`|`user%40contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`%22Anti-Cross%20Site%20Scripting%20Namespace%22`|  
  
 Cette méthode encode uniquement le chemin d’accès d’une URL. Cette méthode n’encode pas le schéma (par exemple, `http:`, `ftp:`, ou `file:`), l’autorité (par exemple, `www.northwind.com` ou `www.contoso.com:8080`), ou la requête ou fragment (par exemple, `?v=s978dfs9#x=103`). S’il n’existe aucun schéma ou l’autorité dans la chaîne, la chaîne est supposée pour être un chemin d’accès relatif et le chemin d’accès est encodé. Dans l’URL suivante, uniquement la sous-chaîne `/default.htm` est codé :  
  
 `http://www.contoso.com:8080/default.htm?v=s978dfs9#x=103`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlAttributeEncode">
      <MemberSignature Language="C#" Value="public static string XmlAttributeEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlAttributeEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlAttributeEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlAttributeEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlAttributeEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlAttributeEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne à encoder.</param>
        <summary>Encode la chaîne spécifiée pour les attributs XML.</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `&#DECIMAL;` notation.  
  
> [!NOTE]
>  Placez des guillemets ( » «) ou de guillemets simples (' ') autour de la chaîne résultante avant de l’ajouter à une page.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage de caractères, sauf indication dans la colonne Description.  
   
  
|Graphique de code Unicode|Caractère(s)|Description |  
|------------------------|--------------------|-----------------|  
|A-Z|Caractères alphabétiques Latin en majuscules|  
|a-z|Caractères alphabétiques latins minuscules|  
|0-9|Numéros|  
|!|Point d’exclamation|  
|#|Signe dièse, hachage|  
|$|Signe dollar|  
|%|Signe de pourcentage|  
|( )|Parenthèses|  
|*|Astérisque|  
|+|Signe plus|  
|,|Virgule|  
|-|Trait d’union, moins|  
|.|Période, point, arrêt complet|  
|/|Barre oblique|  
|:|Colon|  
|;|Point-virgule|  
|=|Signe égal|  
|?|Point d'interrogation|  
|@|Commercial arobase|  
|[ ]|Des crochets|  
|&#92;|Barre oblique inverse|  
|^|Signe insertion|  
|_|Trait de soulignement|  
|\`| Accent grave|  
|{ }|Accolades, les accolades|  
|&#124;|Ligne verticale|  
|~|Tilde|  
|0x00A1 - 0x00AC|Les caractères spéciaux entre 0x00A1 (161 décimal) et 0x00AC (172 décimal) à partir de l’Unicode [contrôles C1 et Supplément Latin-1](https://www.unicode.org/charts/PDF/U0080.pdf) plage de caractères.|  
|Les caractères spéciaux entre 0x00AE (174 décimal) et 0x00FF (255 décimal) à partir de l’Unicode [contrôles C1 et Supplément Latin-1](https://www.unicode.org/charts/PDF/U0080.pdf) plage de caractères.|  
|0x0100 - 0x017F|Caractères compris entre 0 x 0100 (256 décimal) et 0x017F (383 décimal). (L’Unicode [Latin étendu A](https://www.unicode.org/charts/PDF/U0100.pdf) plage de caractères.)| 
|0x0180 - 0x024F|Caractères entre 0x0180 (384 décimal) et 0x024F (591 décimal). (L’Unicode [Latin étendu B](https://www.unicode.org/charts/PDF/U0180.pdf) plage de caractères.)| 
|0x0250 - 0x02AF|Caractères entre 0x0250 (592 décimal) et 0x02AF (687 décimal). (L’Unicode [les Extensions IPA](https://www.unicode.org/charts/PDF/U0250.pdf) plage de caractères.)| 
|0x02B0 - 0x02FF|Caractères entre 0x02B0 (688 décimal) et 0x02FF (767 décimal). (L’Unicode [lettres modificatives avec chasse](https://www.unicode.org/charts/PDF/U02B0.pdf) plage de caractères.)|
|0x0300 - 0x036F|Caractères entre 0x0300 (768 décimal) et 0x036F (879 décimal). (L’Unicode [COMBINATOIRES](https://www.unicode.org/charts/PDF/U0300.pdf) plage de caractères.)|  
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&apos;XSS&#32;Attack!&apos;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS&#32;Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Pour personnaliser la liste, appelez le <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlEncode">
      <MemberSignature Language="C#" Value="public static string XmlEncode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string XmlEncode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function XmlEncode (input As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ XmlEncode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member XmlEncode : string -&gt; string" Usage="System.Web.Security.AntiXss.AntiXssEncoder.XmlEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">Chaîne à encoder.</param>
        <summary>Encode la chaîne spécifiée pour les attributs XML.</summary>
        <returns>Chaîne encodée.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cette méthode encode tous les caractères, sauf ceux qui se trouvent dans la liste. Les caractères sont encodés à l’aide de `&#DECIMAL;` notation.  
  
> [!NOTE]
>  Placez des guillemets ( » «) ou de guillemets simples (' ') autour de la chaîne résultante avant de l’ajouter à une page.  
  
 Le tableau suivant répertorie les caractères sécurisés par défaut. Tous les caractères sont à partir de l’Unicode [les contrôles C0 et Latin de base](https://www.unicode.org/charts/PDF/U0000.pdf) plage sauf indication contraire dans la colonne Description de caractères.   
  
|Caractère(s)|Description |  
|--------------------|-----------------|  
|A-Z|Caractères alphabétiques Latin en majuscules|  
|a-z|Caractères alphabétiques latins minuscules|  
|0-9|Numéros|  
|(Espace)|Espace|  
|!|Point d’exclamation|  
|#|Signe dièse, hachage|  
|$|Signe dollar|  
|%|Signe de pourcentage|  
|( )|Parenthèses|  
|*|Astérisque|  
|+|Signe plus|  
|,|Virgule|  
|-|Trait d’union, moins|  
|.|Période|  
|/|Barre oblique|  
|:|Colon|  
|;|Point-virgule|  
|=|Signe égal|  
|?|Point d'interrogation|  
|@|Arobase|  
|[ ]|Des crochets|  
|&#92;|Barre oblique inverse|  
|^|Signe insertion|  
|_|Trait de soulignement|  
|\`| Accent grave|  
|{ }|Accolades, les accolades|  
|&#124;|Ligne verticale|  
|~|Tilde|  
|0x00A1 - 0x00AC|Les caractères spéciaux entre 0x00A1 (161 décimal) et 0x00AC (172 décimal) à partir de l’Unicode [contrôles C1 et Supplément Latin-1](https://www.unicode.org/charts/PDF/U0080.pdf) plage de caractères. Dans cette plage, les caractères sont encodés lorsque `useNamedEntities` est `true`.|  
|0x00AE - 0x00FF|Les caractères spéciaux entre 0x00AE (174 décimal) et 0x00FF (255 décimal) à partir de l’Unicode [contrôles C1 et Supplément Latin-1](https://www.unicode.org/charts/PDF/U0080.pdf) plage de caractères. Dans cette plage, les caractères sont encodés lorsque `useNamedEntities` est `true`.|  
|0x0100 - 0x017F|Caractères compris entre 0 x 0100 (256 décimal) et 0x017F (383 décimal). (L’Unicode [Latin étendu A](https://www.unicode.org/charts/PDF/U0100.pdf) plage de caractères.)| 
|0x0180 - 0x024F|Caractères entre 0x0180 (384 décimal) et 0x024F (591 décimal). (L’Unicode [Latin étendu B](https://www.unicode.org/charts/PDF/U0180.pdf) plage de caractères.)|
|0x0250 - 0x02AF|Caractères entre 0x0250 (592 décimal) et 0x02AF (687 décimal). (L’Unicode [les Extensions IPA](https://www.unicode.org/charts/PDF/U0250.pdf) plage de caractères.)| 
|0x02B0 - 0x02FF|Caractères entre 0x02B0 (688 décimal) et 0x02FF (767 décimal). (L’Unicode [lettres modificatives avec chasse](https://www.unicode.org/charts/PDF/U02B0.pdf) plage de caractères.)|
|0x0300 - 0x036F|Caractères entre 0x0300 (768 décimal) et 0x036F (879 décimal). (L’Unicode [COMBINATOIRES](https://www.unicode.org/charts/PDF/U0300.pdf) plage de caractères.)| 
  
 Le tableau suivant répertorie des exemples d’entrées et les sorties encodées correspondantes.  
  
|||  
|-|-|  
|`alert('XSS Attack!');`|`alert(&#39;XSS&#32;Attack!&#39;);`|  
|`<script>alert('XSS Attack!');</script>`|`&lt;script&gt;alert(&apos;XSS Attack!&apos;);&lt;/script&gt;`|  
|`alert('XSSあAttack!');`|`alert(&apos;XSS&#12354;Attack!&apos;);`|  
|`user@contoso.com`|`user@contoso.com`|  
|`"Anti-Cross Site Scripting Namespace"`|`&quot;Anti-Cross&#32;Site&#32;Scripting&#32;Namespace&quot;`|  
  
 Pour personnaliser la liste, appelez le <xref:System.Web.Security.AntiXss.AntiXssEncoder.MarkAsSafe%2A> (méthode).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>