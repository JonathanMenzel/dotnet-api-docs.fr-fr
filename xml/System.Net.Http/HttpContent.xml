<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="HttpContent.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5dbc2474e82bbf7313a8c6c6e37f60bd375518eea.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbc2474e82bbf7313a8c6c6e37f60bd375518eea</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Http.HttpContent">
          <source>A base class representing an HTTP entity body and content headers.</source>
          <target state="translated">Classe de base représentant un corps d'entité HTTP et des en-têtes de contenu.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Net.Http.HttpContent">
          <source>Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter.</source>
          <target state="translated">Sérialise le contenu HTTP en un flux d’octets et le copie sur l’objet de flux fourni en tant que paramètre <ph id="ph1">&lt;paramref name="stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpContent">
          <source>This operation does not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
          <source>The target stream.</source>
          <target state="translated">Le flux de données cible.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
          <source>Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter.</source>
          <target state="translated">Sérialise le contenu HTTP en un flux d’octets et le copie sur l’objet de flux fourni en tant que paramètre <ph id="ph1">&lt;paramref name="stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Objet de tâche représentant l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
          <source>This operation will not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been written to the stream object passed as the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet se termine une fois que tout le contenu a été écrit à l’objet de flux de données passé en tant que le <ph id="ph2">`stream`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The target stream.</source>
          <target state="translated">Le flux de données cible.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>Information about the transport (channel binding token, for example).</source>
          <target state="translated">Informations relatives au transport (jeton de liaison de canal, par exemple).</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>This parameter may be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ce paramètre peut avoir la valeur <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter.</source>
          <target state="translated">Sérialise le contenu HTTP en un flux d’octets et le copie sur l’objet de flux fourni en tant que paramètre <ph id="ph1">&lt;paramref name="stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Objet de tâche représentant l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>This operation will not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been written to the stream object passed as the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet se termine une fois que tout le contenu a été écrit à l’objet de flux de données passé en tant que le <ph id="ph2">`stream`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>Serialize the HTTP content to a memory stream as an asynchronous operation.</source>
          <target state="translated">Sérialise le contenu HTTP dans un flux de mémoire en tant qu’opération asynchrone.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Objet de tâche représentant l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>This operation will not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been written to the memory stream.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet se termine une fois que tout le contenu a été écrit dans le flux de mémoire.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>Once the operation completes, the  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property on the returned task object contains the memory stream that that represents the HTTP content.</source>
          <target state="translated">Une fois l’opération terminée, le <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> propriété sur l’objet de la tâche retournée contient le flux de mémoire qui représente le contenu HTTP.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>The returned stream can then be used to read the content using various stream APIs.</source>
          <target state="translated">Le flux retourné peut ensuite servir à lire le contenu à l’aide des API de flux différents.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>The <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CreateContentReadStreamAsync%2A&gt;</ph> method buffers the content to a memory stream.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CreateContentReadStreamAsync%2A&gt;</ph> méthode met en mémoire tampon le contenu à un flux de mémoire.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>Derived classes can override this behavior if there is a better way to retrieve the content as stream.</source>
          <target state="translated">Classes dérivées peuvent substituer ce comportement s’il existe un meilleur moyen de récupérer le contenu en tant que flux de données.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.CreateContentReadStreamAsync">
          <source>For example, a byte array or a string could use a more efficient method way such as wrapping a read-only <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> around the bytes or string.)</source>
          <target state="translated">Par exemple, un tableau d’octets ou une chaîne peut utiliser un moyen plus efficace de la méthode d’habillage en lecture seule <ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> autour de la chaîne ou d’octets.)</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Net.Http.HttpContent">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> and optionally disposes of the managed resources.</source>
          <target state="translated">Libère les ressources non managées utilisées par le <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> et supprime éventuellement les ressources managées.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.Dispose">
          <source>Releases the unmanaged resources and disposes of the managed resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph>.</source>
          <target state="translated">Libère les ressources non managées et supprime les ressources managées utilisées par le <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to releases only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour libérer les ressources managées et non managées ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour libérer uniquement les ressources non managées.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> and optionally disposes of the managed resources.</source>
          <target state="translated">Libère les ressources non managées utilisées par le <ph id="ph1">&lt;see cref="T:System.Net.Http.HttpContent" /&gt;</ph> et supprime éventuellement les ressources managées.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Cette méthode est appelée par le public <ph id="ph1">`Dispose()`</ph> (méthode) et le <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> appelle la méthode protégée <ph id="ph2">`Dispose(Boolean)`</ph> méthode avec la <ph id="ph3">`disposing`</ph> paramètre la valeur <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.When the <ph id="ph5">`disposing`</ph> parameter is <ph id="ph6">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph7">&lt;xref:System.Net.Http.HttpContent&gt;</ph> references.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> appelle <ph id="ph2">`Dispose`</ph> avec <ph id="ph3">`disposing`</ph> la valeur <ph id="ph4">`false`</ph>. Lorsque le <ph id="ph5">`disposing`</ph> paramètre est <ph id="ph6">`true`</ph>, cette méthode libère toutes les ressources détenues par les objets managés référencés par ce <ph id="ph7">&lt;xref:System.Net.Http.HttpContent&gt;</ph> références.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">Cette méthode appelle la méthode <ph id="ph1">`Dispose()`</ph> de chaque objet référencé.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Net.Http.HttpContent.Headers">
          <source>Gets the HTTP content headers as defined in RFC 2616.</source>
          <target state="translated">Obtient les en-têtes de contenu HTTP tels que définis dans RFC 2616.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Http.HttpContent.Headers">
          <source>The content headers as defined in RFC 2616.</source>
          <target state="translated">En-têtes de contenu tels que définis dans RFC 2616.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Net.Http.HttpContent">
          <source>Serialize the HTTP content to a memory buffer as an asynchronous operation.</source>
          <target state="translated">Sérialise le contenu HTTP dans une mémoire tampon en tant qu’opération asynchrone.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Http.HttpContent">
          <source>This operation will not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
          <source>Serialize the HTTP content to a memory buffer as an asynchronous operation.</source>
          <target state="translated">Sérialise le contenu HTTP dans une mémoire tampon en tant qu’opération asynchrone.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Objet de tâche représentant l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
          <source>This operation will not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after all of the content has been serialized to the memory buffer.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objet se termine une fois que tout le contenu a été sérialisé à la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync">
          <source>After content is serialized to a memory buffer, calls to one of the  <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;</ph> methods will copy the content of the memory buffer to the target stream.</source>
          <target state="translated">Une fois que le contenu est sérialisé dans une mémoire tampon, les appels à une de la <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;</ph> méthodes copiera le contenu de la mémoire tampon pour le flux de données cible.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>The maximum size, in bytes, of the buffer to use.</source>
          <target state="translated">Taille maximale, en octets, de la mémoire tampon à utiliser.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>Serialize the HTTP content to a memory buffer as an asynchronous operation.</source>
          <target state="translated">Sérialise le contenu HTTP dans une mémoire tampon en tant qu’opération asynchrone.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Objet de tâche représentant l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>This operation will not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after all of the content has been serialized to the memory buffer.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objet se termine une fois que tout le contenu a été sérialisé à la mémoire tampon.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>After content is serialized to a memory buffer, calls to one of the  <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;</ph> methods will copy the content of the memory buffer to the target stream.</source>
          <target state="translated">Une fois que le contenu est sérialisé dans une mémoire tampon, les appels à une de la <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.CopyToAsync%2A&gt;</ph> méthodes copiera le contenu de la mémoire tampon pour le flux de données cible.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)">
          <source>If the content exceeds the value  passed in the <ph id="ph1">`maxBufferSize`</ph> parameter , an exception is thrown.</source>
          <target state="translated">Si le contenu dépasse la valeur transmise dans le <ph id="ph1">`maxBufferSize`</ph> paramètre, une exception est levée.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
          <source>Serialize the HTTP content to a byte array as an asynchronous operation.</source>
          <target state="translated">Sérialise le contenu HTTP dans un tableau d’octets en tant qu’opération asynchrone.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Objet de tâche représentant l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
          <source>This operation will not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been written as a byte array.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet se termine une fois que tout le contenu a été écrit comme un tableau d’octets.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsByteArrayAsync">
          <source>Once the operation completes, the  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property on the returned task object contains the byte array with the HTTP content.</source>
          <target state="translated">Une fois l’opération terminée, le <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> propriété sur l’objet de la tâche retournée contient le tableau d’octets avec le contenu HTTP.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>Serialize the HTTP content and return a stream that represents the content as an asynchronous operation.</source>
          <target state="translated">Sérialiser le contenu HTTP et renvoyer un flux qui représente le contenu au cours d’une opération asynchrone.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Objet de tâche représentant l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>This operation will not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the stream that represents content has been read.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet s’achève après tous le flux de données que représente le contenu a été lu.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>Once the operation completes, the  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property on the returned task object contains the stream that that represents the HTTP content.</source>
          <target state="translated">Une fois l’opération terminée, le <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> propriété sur l’objet de la tâche retournée contient le flux de données qui représente le contenu HTTP.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStreamAsync">
          <source>The returned stream can then be used to read the content using various stream APIs.</source>
          <target state="translated">Le flux retourné peut ensuite servir à lire le contenu à l’aide des API de flux différents.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsStringAsync">
          <source>Serialize the HTTP content to a string as an asynchronous operation.</source>
          <target state="translated">Sérialise le contenu HTTP dans une chaîne en tant qu’opération asynchrone.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.ReadAsStringAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Objet de tâche représentant l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStringAsync">
          <source>This operation will not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStringAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been written as a string.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet se termine une fois que tout le contenu a été écrit en tant que chaîne.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.ReadAsStringAsync">
          <source>Once the operation completes, the  <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property on the returned task object contains the string with the HTTP content.</source>
          <target state="translated">Une fois l’opération terminée, le <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> propriété sur l’objet de la tâche retournée contient la chaîne avec le contenu HTTP.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The target stream.</source>
          <target state="translated">Le flux de données cible.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>Information about the transport (channel binding token, for example).</source>
          <target state="translated">Informations relatives au transport (jeton de liaison de canal, par exemple).</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>This parameter may be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Ce paramètre peut avoir la valeur <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>Serialize the HTTP content to a stream as an asynchronous operation.</source>
          <target state="translated">Sérialise le contenu HTTP dans un flux en tant qu’opération asynchrone.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Objet de tâche représentant l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>This operation will not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after all of the content has been serialized to the stream object passed in the <ph id="ph2">`stream`</ph> parameter.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objet se termine une fois que tout le contenu a été sérialisé à l’objet de flux de données passé dans le <ph id="ph2">`stream`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>The length in bytes of the HTTP content.</source>
          <target state="translated">La longueur en octets du contenu HTTP.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>Determines whether the HTTP content has a valid length in bytes.</source>
          <target state="translated">Détermine si le contenu HTTP a une longueur valide en octets.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is a valid length; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="length" /&gt;</ph> est une longueur valide ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.TryComputeLength%2A&gt;</ph> method gives a HTTP content the ability to calculate the content length.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Http.HttpContent.TryComputeLength%2A&gt;</ph> méthode permet un contenu HTTP pour calculer la longueur du contenu.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>This is useful for content types which are able to easily calculate the content length.</source>
          <target state="translated">Cela est utile pour les types de contenu qui sont en mesure de facilement calculer la longueur du contenu.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>If computing the content length is not possible or expensive (would require the system to buffer the whole content where the serialization would be expensive or require the system to allocate a lot of memory), this method can return <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Si la calcul de la longueur du contenu n’est pas possible ou coûteuse (nécessite le système à l’ensemble du contenu où la sérialisation est coûteuse ou nécessitent le système à allouer une grande quantité de mémoire de la mémoire tampon), cette méthode peut retourner <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)">
          <source>If this method returns <ph id="ph1">`false`</ph>, this implies that either chunked transfer is needed or the content must get buffered before being sent to the server.</source>
          <target state="translated">Si cette méthode retourne <ph id="ph1">`false`</ph>, cela implique que transfert mémorisé en bloc est nécessaire ou que le contenu doit obtenir mis en mémoire tampon avant d’être envoyées au serveur.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>