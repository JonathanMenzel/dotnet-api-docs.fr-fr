<Type Name="ReflectionModelServices" FullName="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0f29ac7762320289d5357a36173c8d0d6f60594a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36711669" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ReflectionModelServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ReflectionModelServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices" />
  <TypeSignature Language="VB.NET" Value="Public Class ReflectionModelServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReflectionModelServices abstract sealed" />
  <TypeSignature Language="F#" Value="type ReflectionModelServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="61023-101">Fournit des méthodes d'extension pour créer et récupérer des composants basés sur la réflexion.</span>
      <span class="sxs-lookup">
        <span data-stu-id="61023-101">Provides extension methods to create and retrieve reflection-based parts.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateExportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ExportDefinition CreateExportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo exportingMember, string contractName, Lazy&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;&gt; metadata, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ExportDefinition CreateExportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo exportingMember, string contractName, class System.Lazy`1&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&gt; metadata, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateExportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateExportDefinition (exportingMember As LazyMemberInfo, contractName As String, metadata As Lazy(Of IDictionary(Of String, Object)), origin As ICompositionElement) As ExportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ExportDefinition ^ CreateExportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo exportingMember, System::String ^ contractName, Lazy&lt;System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^&gt; ^ metadata, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateExportDefinition : System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo * string * Lazy&lt;System.Collections.Generic.IDictionary&lt;string, obj&gt;&gt; * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ExportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateExportDefinition (exportingMember, contractName, metadata, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ExportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="metadata" Type="System.Lazy&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&gt;" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="exportingMember">
          <span data-ttu-id="61023-102">Membre à exporter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-102">The member to export.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="61023-103">Nom de contrat à utiliser pour l'exportation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-103">The contract name to use for the export.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="61023-104">Métadonnées pour l'exportation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-104">The metadata for the export.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="61023-105">Objet duquel provient l'exportation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-105">The object that the export originates from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-106">Crée une définition d'exportation à partir du membre spécifié, avec le nom de contrat, les métadonnées et l'origine spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-106">Creates an export definition from the specified member, with the specified contract name, metadata, and origin.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-107">Définition d'exportation créée à partir des paramètres spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-107">An export definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateImportDefinition">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="61023-108">Crée une définition d'importation pour un membre ou un paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-108">Creates an import definition for a member or parameter.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (Lazy&lt;System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(class System.Lazy`1&lt;class System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (parameter As Lazy(Of ParameterInfo), contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, requiredCreationPolicy As CreationPolicy, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(Lazy&lt;System::Reflection::ParameterInfo ^&gt; ^ parameter, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateImportDefinition : Lazy&lt;System.Reflection.ParameterInfo&gt; * string * string * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt; * System.ComponentModel.Composition.Primitives.ImportCardinality * System.ComponentModel.Composition.CreationPolicy * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition (parameter, contractName, requiredTypeIdentity, requiredMetadata, cardinality, requiredCreationPolicy, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Lazy&lt;System.Reflection.ParameterInfo&gt;" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="61023-109">Le paramètre à importer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-109">The parameter to import.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="61023-110">Nom de contrat à utiliser pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-110">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="61023-111">Identité de type obligatoire pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-111">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="61023-112">Métadonnées obligatoires pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-112">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="61023-113">Cardinalité de l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-113">The cardinality of the import.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="61023-114">L'une des valeurs d'énumération qui spécifie la stratégie de création d'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-114">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="61023-115">Objet dans lequel effectuer l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-115">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-116">Crée une définition d'importation pour le paramètre spécifié à l'aide du nom de contrat, de l'identité de type, des métadonnées d'importation, de la cardinalité et de la stratégie de création spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-116">Creates an import definition for the specified parameter by using the specified contract name, type identity, import metadata, cardinality, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-117">Définition d'importation créée à partir des paramètres spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-117">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (importingMember As LazyMemberInfo, contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, isRecomposable As Boolean, requiredCreationPolicy As CreationPolicy, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo importingMember, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, bool isRecomposable, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateImportDefinition : System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo * string * string * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt; * System.ComponentModel.Composition.Primitives.ImportCardinality * bool * System.ComponentModel.Composition.CreationPolicy * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition (importingMember, contractName, requiredTypeIdentity, requiredMetadata, cardinality, isRecomposable, requiredCreationPolicy, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="isRecomposable" Type="System.Boolean" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="importingMember">
          <span data-ttu-id="61023-118">Membre dans lequel effectuer l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-118">The member to import into.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="61023-119">Nom de contrat à utiliser pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-119">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="61023-120">Identité de type obligatoire pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-120">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="61023-121">Métadonnées obligatoires pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-121">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="61023-122">Cardinalité de l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-122">The cardinality of the import.</span>
          </span>
        </param>
        <param name="isRecomposable">
          <span data-ttu-id="61023-123">
            <see langword="true" /> pour indiquer que l'importation est recomposable ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-123">
              <see langword="true" /> to indicate that the import is recomposable; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="61023-124">L'une des valeurs d'énumération qui spécifie la stratégie de création d'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-124">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="61023-125">Objet dans lequel effectuer l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-125">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-126">Crée une définition d'importation pour le membre spécifié à l'aide du nom de contrat, de l'identité de type, des métadonnées d'importation, de la cardinalité, ainsi que des stratégies de recomposition et de création spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-126">Creates an import definition for the specified member by using the specified contract name, type identity, import metadata, cardinality, recomposition policy, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-127">Définition d'importation créée à partir des paramètres spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-127">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (Lazy&lt;System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.Collections.Generic.IDictionary&lt;string,object&gt; metadata, bool isExportFactory, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(class System.Lazy`1&lt;class System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; metadata, bool isExportFactory, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (parameter As Lazy(Of ParameterInfo), contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, requiredCreationPolicy As CreationPolicy, metadata As IDictionary(Of String, Object), isExportFactory As Boolean, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(Lazy&lt;System::Reflection::ParameterInfo ^&gt; ^ parameter, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ metadata, bool isExportFactory, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateImportDefinition : Lazy&lt;System.Reflection.ParameterInfo&gt; * string * string * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt; * System.ComponentModel.Composition.Primitives.ImportCardinality * System.ComponentModel.Composition.CreationPolicy * System.Collections.Generic.IDictionary&lt;string, obj&gt; * bool * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition (parameter, contractName, requiredTypeIdentity, requiredMetadata, cardinality, requiredCreationPolicy, metadata, isExportFactory, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Lazy&lt;System.Reflection.ParameterInfo&gt;" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="isExportFactory" Type="System.Boolean" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="61023-128">Le paramètre à importer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-128">The parameter to import.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="61023-129">Nom de contrat à utiliser pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-129">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="61023-130">Identité de type obligatoire pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-130">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="61023-131">Métadonnées obligatoires pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-131">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="61023-132">Cardinalité de l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-132">The cardinality of the import.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="61023-133">L'une des valeurs d'énumération qui spécifie la stratégie de création d'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-133">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="61023-134">Métadonnées du contrat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-134">The contract metadata</span>
          </span>
        </param>
        <param name="isExportFactory">
          <span data-ttu-id="61023-135">
            <see langword="true" /> pour indiquer que l'importation représente un <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-135">
              <see langword="true" /> to indicate that the import represents an <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="61023-136">Objet dans lequel effectuer l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-136">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-137">Crée une définition d'importation pour le paramètre spécifié à l'aide du nom de contrat, de l'identité de type, des métadonnées d'importation et de contrat, de la cardinalité et de la stratégie de création spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-137">Creates an import definition for the specified parameter by using the specified contract name, type identity, import and contract metadata, cardinality, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-138">Définition d'importation créée à partir des paramètres spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-138">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.Collections.Generic.IDictionary&lt;string,object&gt; metadata, bool isExportFactory, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; metadata, bool isExportFactory, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (importingMember As LazyMemberInfo, contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, isRecomposable As Boolean, requiredCreationPolicy As CreationPolicy, metadata As IDictionary(Of String, Object), isExportFactory As Boolean, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo importingMember, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, bool isRecomposable, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ metadata, bool isExportFactory, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateImportDefinition : System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo * string * string * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt; * System.ComponentModel.Composition.Primitives.ImportCardinality * bool * System.ComponentModel.Composition.CreationPolicy * System.Collections.Generic.IDictionary&lt;string, obj&gt; * bool * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition (importingMember, contractName, requiredTypeIdentity, requiredMetadata, cardinality, isRecomposable, requiredCreationPolicy, metadata, isExportFactory, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="isRecomposable" Type="System.Boolean" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="isExportFactory" Type="System.Boolean" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="importingMember">
          <span data-ttu-id="61023-139">Membre dans lequel effectuer l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-139">The member to import into.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="61023-140">Nom de contrat à utiliser pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-140">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="61023-141">Identité de type obligatoire pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-141">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="61023-142">Métadonnées obligatoires pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-142">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="61023-143">Cardinalité de l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-143">The cardinality of the import.</span>
          </span>
        </param>
        <param name="isRecomposable">
          <span data-ttu-id="61023-144">
            <see langword="true" /> pour indiquer que l'importation est recomposable ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-144">
              <see langword="true" /> to indicate that the import is recomposable; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="61023-145">L'une des valeurs d'énumération qui spécifie la stratégie de création d'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-145">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="61023-146">Métadonnées du contrat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-146">The contract metadata.</span>
          </span>
        </param>
        <param name="isExportFactory">
          <span data-ttu-id="61023-147">
            <see langword="true" /> pour indiquer que l'importation représente un <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-147">
              <see langword="true" /> to indicate that the import represents an <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="61023-148">Objet dans lequel effectuer l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-148">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-149">Crée une définition d'importation pour le membre spécifié à l'aide du nom de contrat, de l'identité de type, des métadonnées d'importation et de contrat, de la cardinalité, ainsi que des stratégies de recomposition et de création spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-149">Creates an import definition for the specified member by using the specified contract name, type identity, import and contract metadata, cardinality, recomposition policy, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-150">Définition d'importation créée à partir des paramètres spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-150">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, bool isPreRequisite, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.Collections.Generic.IDictionary&lt;string,object&gt; metadata, bool isExportFactory, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, bool isPreRequisite, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; metadata, bool isExportFactory, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (importingMember As LazyMemberInfo, contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, isRecomposable As Boolean, isPreRequisite As Boolean, requiredCreationPolicy As CreationPolicy, metadata As IDictionary(Of String, Object), isExportFactory As Boolean, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo importingMember, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, bool isRecomposable, bool isPreRequisite, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ metadata, bool isExportFactory, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreateImportDefinition : System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo * string * string * seq&lt;System.Collections.Generic.KeyValuePair&lt;string, Type&gt;&gt; * System.ComponentModel.Composition.Primitives.ImportCardinality * bool * bool * System.ComponentModel.Composition.CreationPolicy * System.Collections.Generic.IDictionary&lt;string, obj&gt; * bool * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition (importingMember, contractName, requiredTypeIdentity, requiredMetadata, cardinality, isRecomposable, isPreRequisite, requiredCreationPolicy, metadata, isExportFactory, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="isRecomposable" Type="System.Boolean" />
        <Parameter Name="isPreRequisite" Type="System.Boolean" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="isExportFactory" Type="System.Boolean" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="importingMember">
          <span data-ttu-id="61023-151">Membre dans lequel effectuer l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-151">The member to import into.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="61023-152">Nom de contrat à utiliser pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-152">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="61023-153">Identité de type obligatoire pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-153">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="61023-154">Métadonnées obligatoires pour l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-154">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="61023-155">Cardinalité de l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-155">The cardinality of the import.</span>
          </span>
        </param>
        <param name="isRecomposable">
          <span data-ttu-id="61023-156">
            <see langword="true" /> pour indiquer que l'importation est recomposable ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-156">
              <see langword="true" /> to indicate that the import is recomposable; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="isPreRequisite">
          <span data-ttu-id="61023-157">
            <see langword="true" /> pour indiquer que l'importation est une condition préalable ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-157">
              <see langword="true" /> to indicate that the import is a prerequisite; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="61023-158">L'une des valeurs d'énumération qui spécifie la stratégie de création d'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-158">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="61023-159">Métadonnées du contrat.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-159">The contract metadata.</span>
          </span>
        </param>
        <param name="isExportFactory">
          <span data-ttu-id="61023-160">
            <see langword="true" /> pour indiquer que l'importation représente un <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-160">
              <see langword="true" /> to indicate that the import represents an <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="61023-161">Objet dans lequel effectuer l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-161">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-162">Crée une définition d'importation pour le membre spécifié à l'aide du nom de contrat, de l'identité de type, des métadonnées d'importation et de contrat, de la cardinalité, ainsi que des stratégies de recomposition et de création spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-162">Creates an import definition for the specified member by using the specified contract name, type identity, import and contract metadata, cardinality, recomposition policy, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-163">Définition d'importation créée à partir des paramètres spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-163">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePartDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ComposablePartDefinition CreatePartDefinition (Lazy&lt;Type&gt; partType, bool isDisposalRequired, Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ImportDefinition&gt;&gt; imports, Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; exports, Lazy&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;&gt; metadata, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ComposablePartDefinition CreatePartDefinition(class System.Lazy`1&lt;class System.Type&gt; partType, bool isDisposalRequired, class System.Lazy`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.ImportDefinition&gt;&gt; imports, class System.Lazy`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; exports, class System.Lazy`1&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&gt; metadata, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreatePartDefinition(System.Lazy{System.Type},System.Boolean,System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ImportDefinition}},System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition}},System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreatePartDefinition (partType As Lazy(Of Type), isDisposalRequired As Boolean, imports As Lazy(Of IEnumerable(Of ImportDefinition)), exports As Lazy(Of IEnumerable(Of ExportDefinition)), metadata As Lazy(Of IDictionary(Of String, Object)), origin As ICompositionElement) As ComposablePartDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ CreatePartDefinition(Lazy&lt;Type ^&gt; ^ partType, bool isDisposalRequired, Lazy&lt;System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::ImportDefinition ^&gt; ^&gt; ^ imports, Lazy&lt;System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::ExportDefinition ^&gt; ^&gt; ^ exports, Lazy&lt;System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^&gt; ^ metadata, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberSignature Language="F#" Value="static member CreatePartDefinition : Lazy&lt;Type&gt; * bool * Lazy&lt;seq&lt;System.ComponentModel.Composition.Primitives.ImportDefinition&gt;&gt; * Lazy&lt;seq&lt;System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; * Lazy&lt;System.Collections.Generic.IDictionary&lt;string, obj&gt;&gt; * System.ComponentModel.Composition.Primitives.ICompositionElement -&gt; System.ComponentModel.Composition.Primitives.ComposablePartDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreatePartDefinition (partType, isDisposalRequired, imports, exports, metadata, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ComposablePartDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partType" Type="System.Lazy&lt;System.Type&gt;" />
        <Parameter Name="isDisposalRequired" Type="System.Boolean" />
        <Parameter Name="imports" Type="System.Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ImportDefinition&gt;&gt;" />
        <Parameter Name="exports" Type="System.Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt;" />
        <Parameter Name="metadata" Type="System.Lazy&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&gt;" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="partType">
          <span data-ttu-id="61023-164">Type du composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-164">The type of the part.</span>
          </span>
        </param>
        <param name="isDisposalRequired">
          <span data-ttu-id="61023-165">
            <see langword="true" /> si le composant doit être supprimé ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-165">
              <see langword="true" /> if the part requires disposal; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="imports">
          <span data-ttu-id="61023-166">Collection des importations du composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-166">A collection of the part's imports.</span>
          </span>
        </param>
        <param name="exports">
          <span data-ttu-id="61023-167">Collection des exportations du composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-167">A collection of the part's exports.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="61023-168">Métadonnées du composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-168">The part's metadata.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="61023-169">Origine du composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-169">The part's origin.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-170">Crée une définition de composant avec le type de composant, les importations, les exportations, les métadonnées et l'origine spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-170">Creates a part definition with the specified part type, imports, exports, metadata, and origin.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-171">Définition de composant créée à partir des paramètres spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-171">A part definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportFactoryProductImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition GetExportFactoryProductImportDefinition (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition GetExportFactoryProductImportDefinition(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportFactoryProductImportDefinition(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ GetExportFactoryProductImportDefinition(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberSignature Language="F#" Value="static member GetExportFactoryProductImportDefinition : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportFactoryProductImportDefinition importDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="61023-172">Définition d'importation à représenter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-172">The import definition to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-173">Retourne une représentation d'une définition d'importation sous forme d'un produit de fabrique d'exportation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-173">Returns a representation of an import definition as an export factory product.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-174">Représentation de la définition d'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-174">The representation of the import definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportingMember">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetExportingMember (System.ComponentModel.Composition.Primitives.ExportDefinition exportDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetExportingMember(class System.ComponentModel.Composition.Primitives.ExportDefinition exportDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportingMember(System.ComponentModel.Composition.Primitives.ExportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo GetExportingMember(System::ComponentModel::Composition::Primitives::ExportDefinition ^ exportDefinition);" />
      <MemberSignature Language="F#" Value="static member GetExportingMember : System.ComponentModel.Composition.Primitives.ExportDefinition -&gt; System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportingMember exportDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportDefinition" Type="System.ComponentModel.Composition.Primitives.ExportDefinition" />
      </Parameters>
      <Docs>
        <param name="exportDefinition">
          <span data-ttu-id="61023-175">Définition d'exportation à examiner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-175">The export definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-176">Obtient le membre exportant à partir d'une définition d'exportation spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-176">Gets the exporting member from a specified export definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-177">Membre spécifié dans la définition d'exportation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-177">The member specified in the export definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61023-178">
            <paramref name="exportDefinition" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-178">
              <paramref name="exportDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportingMember">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetImportingMember (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetImportingMember(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingMember(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo GetImportingMember(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberSignature Language="F#" Value="static member GetImportingMember : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingMember importDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="61023-179">Définition d'importation à examiner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-179">The import definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-180">Obtient le membre important à partir d'une définition d'importation spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-180">Gets the importing member from a specified import definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-181">Membre spécifié dans la définition d'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-181">The member specified in the import definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61023-182">
            <paramref name="importDefinition" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-182">
              <paramref name="importDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportingParameter">
      <MemberSignature Language="C#" Value="public static Lazy&lt;System.Reflection.ParameterInfo&gt; GetImportingParameter (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Lazy`1&lt;class System.Reflection.ParameterInfo&gt; GetImportingParameter(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Lazy&lt;System::Reflection::ParameterInfo ^&gt; ^ GetImportingParameter(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberSignature Language="F#" Value="static member GetImportingParameter : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; Lazy&lt;System.Reflection.ParameterInfo&gt;" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingParameter importDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;System.Reflection.ParameterInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="61023-183">Définition d'importation à examiner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-183">The import definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-184">Obtient le paramètre d'importation à partir d'une définition d'importation spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-184">Gets the importing parameter from a specified import definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-185">Paramètre spécifié dans la définition de l'importation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-185">The parameter specified in the import definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61023-186">
            <paramref name="importDefinition" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-186">
              <paramref name="importDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartType">
      <MemberSignature Language="C#" Value="public static Lazy&lt;Type&gt; GetPartType (System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Lazy`1&lt;class System.Type&gt; GetPartType(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetPartType(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPartType (partDefinition As ComposablePartDefinition) As Lazy(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Lazy&lt;Type ^&gt; ^ GetPartType(System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ partDefinition);" />
      <MemberSignature Language="F#" Value="static member GetPartType : System.ComponentModel.Composition.Primitives.ComposablePartDefinition -&gt; Lazy&lt;Type&gt;" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetPartType partDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Parameters>
      <Docs>
        <param name="partDefinition">
          <span data-ttu-id="61023-187">Définition de composant à examiner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-187">The part definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-188">Obtient le type d'un composant à partir d'une définition de composant spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-188">Gets the type of a part from a specified part definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-189">Type du composant défini.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-189">The type of the defined part.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61023-190">
            <paramref name="partDefinition" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-190">
              <paramref name="partDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsDisposalRequired">
      <MemberSignature Language="C#" Value="public static bool IsDisposalRequired (System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDisposalRequired(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsDisposalRequired(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDisposalRequired (partDefinition As ComposablePartDefinition) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDisposalRequired(System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ partDefinition);" />
      <MemberSignature Language="F#" Value="static member IsDisposalRequired : System.ComponentModel.Composition.Primitives.ComposablePartDefinition -&gt; bool" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsDisposalRequired partDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Parameters>
      <Docs>
        <param name="partDefinition">
          <span data-ttu-id="61023-191">Composant à examiner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-191">The part to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-192">Détermine si le composant spécifié nécessite d'être supprimé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-192">Determines whether the specified part requires disposal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-193">
            <see langword="true" /> si le composant doit être supprimé ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-193">
              <see langword="true" /> if the part requires disposal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61023-194">
            <paramref name="partDefinition" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-194">
              <paramref name="partDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsExportFactoryImportDefinition">
      <MemberSignature Language="C#" Value="public static bool IsExportFactoryImportDefinition (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsExportFactoryImportDefinition(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsExportFactoryImportDefinition(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsExportFactoryImportDefinition(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberSignature Language="F#" Value="static member IsExportFactoryImportDefinition : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; bool" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsExportFactoryImportDefinition importDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="61023-195">Définition d'importation à vérifier.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-195">The import definition to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-196">Indique si une définition d'importation spécifiée représente une fabrique d'exportation (objet <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> ou <see cref="T:System.ComponentModel.Composition.ExportFactory`2" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-196">Indicates whether a specified import definition represents an export factory (<see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> or <see cref="T:System.ComponentModel.Composition.ExportFactory`2" /> object).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-197">
            <see langword="true" /> si la définition de l'importation spécifiée représente une fabrique d'exportation ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-197">
              <see langword="true" /> if the specified import definition represents an export factory; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImportingParameter">
      <MemberSignature Language="C#" Value="public static bool IsImportingParameter (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsImportingParameter(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsImportingParameter(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberSignature Language="F#" Value="static member IsImportingParameter : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; bool" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsImportingParameter importDefinition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="61023-198">Définition d'importation à examiner.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-198">The import definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-199">Détermine si une définition d'importation représente un membre ou un paramètre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-199">Determines whether an import definition represents a member or a parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-200">
            <see langword="true" /> si la définition d'importation représente un paramètre, sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-200">
              <see langword="true" /> if the import definition represents a parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="61023-201">
            <paramref name="importDefinition" /> est <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-201">
              <paramref name="importDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryMakeGenericPartDefinition">
      <MemberSignature Language="C#" Value="public static bool TryMakeGenericPartDefinition (System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition, System.Collections.Generic.IEnumerable&lt;Type&gt; genericParameters, out System.ComponentModel.Composition.Primitives.ComposablePartDefinition specialization);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryMakeGenericPartDefinition(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition, class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; genericParameters, [out] class System.ComponentModel.Composition.Primitives.ComposablePartDefinition&amp; specialization) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.TryMakeGenericPartDefinition(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Collections.Generic.IEnumerable{System.Type},System.ComponentModel.Composition.Primitives.ComposablePartDefinition@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryMakeGenericPartDefinition (partDefinition As ComposablePartDefinition, genericParameters As IEnumerable(Of Type), ByRef specialization As ComposablePartDefinition) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryMakeGenericPartDefinition(System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ partDefinition, System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ genericParameters, [Runtime::InteropServices::Out] System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ % specialization);" />
      <MemberSignature Language="F#" Value="static member TryMakeGenericPartDefinition : System.ComponentModel.Composition.Primitives.ComposablePartDefinition * seq&lt;Type&gt; *  -&gt; bool" Usage="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.TryMakeGenericPartDefinition (partDefinition, genericParameters, specialization)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
        <Parameter Name="genericParameters" Type="System.Collections.Generic.IEnumerable&lt;System.Type&gt;" />
        <Parameter Name="specialization" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="partDefinition">
          <span data-ttu-id="61023-202">Définition du composant.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-202">The part definition.</span>
          </span>
        </param>
        <param name="genericParameters">
          <span data-ttu-id="61023-203">Collection de types pour spécifier les paramètres génériques.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-203">A collection of types to specify the generic parameters.</span>
          </span>
        </param>
        <param name="specialization">
          <span data-ttu-id="61023-204">Lorsque cette méthode est retournée, contient la définition de l'élément spécialisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-204">When this method returns, contains the specialized part definition.</span>
          </span>
          <span data-ttu-id="61023-205">Ce paramètre est traité comme étant non initialisé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-205">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="61023-206">Indique si la définition de composant générique peut être spécialisée avec les paramètres fournis.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-206">Indicates whether a generic part definition can be specialized with the provided parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="61023-207">
            <see langword="true" /> en cas de succès de la spécialisation ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="61023-207">
              <see langword="true" /> if the specialization succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>