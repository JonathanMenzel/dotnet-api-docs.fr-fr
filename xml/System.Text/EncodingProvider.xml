<Type Name="EncodingProvider" FullName="System.Text.EncodingProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8fdc6fa71c0fa7206d777f069e5e4b2955171e81" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39811439" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class EncodingProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EncodingProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.EncodingProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EncodingProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class EncodingProvider abstract" />
  <TypeSignature Language="F#" Value="type EncodingProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fournit la classe de base pour un fournisseur d'encodage, qui fournit des encodages qui ne sont pas disponibles sur une plateforme donnée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un fournisseur d’encodage fournit des encodages qui ne sont pas disponibles sur une plateforme cible particulière.  
  
 Le .NET Framework sur le bureau Windows prend en charge un grand nombre de pages de codages et le code de caractère. Vous pouvez obtenir une liste complète des encodages disponibles dans le .NET Framework sur le bureau Windows en appelant le <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=nameWithType> (méthode). .NET core, quant à eux, par défaut prend en charge uniquement les encodages suivants :  
  
-   ASCII (page de codes 20127), qui est retourné par la <xref:System.Text.Encoding.ASCII%2A?displayProperty=nameWithType> propriété.  
  
-   ISO-8859-1 (page de codes 28591).  
  
-   UTF-7 (page de codes 65000), qui est retourné par la <xref:System.Text.Encoding.UTF7%2A?displayProperty=nameWithType> propriété.  
  
-   UTF-8 (page de codes 65001), qui est retourné par la <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> propriété.  
  
-   UTF-16 et UTF-16LE (page de codes 1200), qui est retourné par la <xref:System.Text.Encoding.Unicode%2A> propriété.  
  
-   UTF-16BE (page de codes 1201), qui est instancié en appelant le <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> ou <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> constructeur avec un `bigEndian` valeur `true`.  
  
-   UTF-32 et UTF-32LE (page de codes 12000), qui est retourné par la <xref:System.Text.Encoding.UTF32%2A?displayProperty=nameWithType> propriété.  
  
-   UTF-32be ne (page de codes 12001), qui est instancié en appelant un <xref:System.Text.UTF32Encoding> constructeur ayant un `bigEndian` paramètre et en fournissant une valeur de `true` dans l’appel de méthode.  
  
 En commençant par le .NET Framework 4.6, <xref:System.Text.EncodingProvider> est la classe de base qui sinon rend indisponible encodages disponibles pour le .NET Framework. Cela implique les étapes suivantes :  
  
1.  Définissez une sous-classe de <xref:System.Text.EncodingProvider> qui substitue l’abstraite deux <xref:System.Text.EncodingProvider.GetEncoding%2A> surcharges, <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> et <xref:System.Text.EncodingProvider.GetEncoding%28System.String%29>. Ces surcharges retournent que la non prise en charge le sinon encodage par identificateur de page de code et par nom. Notez que vous pouvez également choisir de retourner un codage par défaut si le <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%29> méthode est appelée avec un argument de 0.  
  
2.  Si vous le souhaitez, vous pouvez remplacer le virtuel <xref:System.Text.EncodingProvider.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> et <xref:System.Text.EncodingProvider.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> méthodes. Dans la plupart des cas, cela n’est pas nécessaire, étant donné que la classe de base fournit une implémentation par défaut.  
  
3.  Passer le <xref:System.Text.EncodingProvider> l’instance à la <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> méthode permettant d’apporter les encodages fournis par le <xref:System.Text.EncodingProvider> objet disponible pour le common language runtime.  
  
4.  Appeler un <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> surcharge pour récupérer l’encodage. Le <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=nameWithType> méthode appellera le correspondantes <xref:System.Text.EncodingProvider.GetEncoding%2A?displayProperty=nameWithType> pour déterminer si elle peut fournir l’encodage demandé.  
  
 La bibliothèque de classes .NET Framework fournit une propriété statique, <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>, qui retourne un <xref:System.Text.EncodingProvider> objet qui rend l’ensemble des encodages disponibles sur la bibliothèque de classes .NET Framework bureau disponibles à [!INCLUDE[net_core](~/includes/net-core-md.md)] applications. En outre, vous pouvez dériver de la <xref:System.Text.EncodingProvider> classe pour rendre vos propres encodages disponibles.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EncodingProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EncodingProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.EncodingProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEncoding">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retourne un encodage.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (int codepage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (codepage As Integer) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(int codepage);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding codepage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codepage">Identificateur de page de code de l'encodage demandé.</param>
        <summary>Retourne l'encodage associé à l'identificateur de page de codes spécifié.</summary>
        <returns>Encodage associé à la page de code spécifiée ou <see langword="null" /> si ce <see cref="T:System.Text.EncodingProvider" /> ne peut pas retourner d'encodage valide qui correspond à <paramref name="codepage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 

## Remarks

### <a name="notes-to-inheritors"></a>Notes pour les héritiers

Vous substituez le [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) méthode pour retourner l’encodage ou les encodages pris en charge par votre <xref:System.Text.EncodingProvider> sous-classe. Lorsque le code utilisateur tente de récupérer un encodage en appelant le [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) (méthode), la méthode passe le `codepage` identificateur à chaque fournisseur d’encodage inscrit jusqu'à ce qu’une retourne un encodage valide. Si aucune retourne un encodage valide, le [GetEncoding(Int32)](<xref:System.Text.EncodingProvider.GetEncoding(System.Int32)>) méthode tente de récupérer un encodage mis en cache dont l’identificateur de code page est `codepage`. Pour cette raison, si `codepage` n’est pas l’identificateur de page de code d’un codage que vous prenez en charge, la méthode doit retourner `null`; il ne doit jamais lever une exception.
        
Notez que vous pouvez aussi choisir de renvoyer une page de codes par défaut si la valeur de la `codepage` argument est 0.

## <a name="notes-to-callers"></a>Notes pour les appelants
        
Cette méthode est appelée par le [Encoding.GetEncoding (Int32)](<xref:System.Text.Encoding.GetEncoding(System.Int32)>) (méthode). Vous ne devez pas appeler directement à partir de code utilisateur.

        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Vous substituez le <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> méthode pour retourner l’encodage ou les encodages pris en charge par votre <see cref="T:System.Text.EncodingProvider" /> sous-classe. Lorsque le code utilisateur tente de récupérer un encodage en appelant le <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> (méthode), la méthode passe le <paramref name="codepage" /> identificateur à chaque fournisseur d’encodage inscrit jusqu'à ce qu’une retourne un encodage valide. Si aucune retourne un encodage valide, le <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> méthode tente de récupérer un encodage mis en cache dont l’identificateur de code page est <paramref name="codepage" />. Pour cette raison, si <paramref name="codepage" /> n’est pas l’identificateur de page de code d’un codage que vous prenez en charge, la méthode doit retourner <see langword="null" />; il ne doit jamais lever une exception.</para>
        </block>
        <block subset="none" type="usage">
          <para>Cette méthode est appelée par le <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> (méthode). Vous ne devez pas appeler directement à partir de code utilisateur.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding GetEncoding (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEncoding (name As String) As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Encoding ^ GetEncoding(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nom de l'encodage demandé.</param>
        <summary>Retourne l'encodage avec le nom spécifié.</summary>
        <returns>Encodage associé au nom spécifié ou <see langword="null" /> si ce <see cref="T:System.Text.EncodingProvider" /> ne peut pas retourner d'encodage valide qui correspond à <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[ 
      
## <a name="notes-to-inheritors"></a>Notes pour les héritiers 
                  
Vous substituez le [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) méthode pour retourner l’encodage ou les encodages pris en charge par votre <xref:System.Text.EncodingProvider> sous-classe. Lorsque le code utilisateur tente de récupérer un encodage en appelant le [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) (méthode), la méthode passe le `name` argument à chaque fournisseur d’encodage inscrit jusqu'à ce qu’une retourne un encodage valide. Si aucune retourne un encodage valide, le [GetEncoding(String)](<xref:System.Text.EncodingProvider.GetEncoding(System.String)>) méthode tente de récupérer un encodage mis en cache, dont le nom est `name`. Pour cette raison, si `name` n’est pas le nom d’un codage que vous prenez en charge, la méthode doit retourner `null`. Le seul cas dans lequel la méthode doit lever une exception est si `name` est `null`.

## <a name="notes-to-callers"></a>Notes pour les appelants

Cette méthode est appelée par le [Encoding.GetEncoding (String)](<xref:System.Text.Encoding.GetEncoding(System.String)>) (méthode). Vous ne devez pas appeler directement à partir de code utilisateur.
        ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Vous substituez le <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> méthode pour retourner l’encodage ou les encodages pris en charge par votre <see cref="T:System.Text.EncodingProvider" /> sous-classe. Lorsque le code utilisateur tente de récupérer un encodage en appelant le <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> (méthode), la méthode passe le <paramref name="name" /> argument à chaque fournisseur d’encodage inscrit jusqu'à ce qu’une retourne un encodage valide. Si aucune retourne un encodage valide, le <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> méthode tente de récupérer un encodage mis en cache, dont le nom est <paramref name="name" />. Pour cette raison, si <paramref name="name" /> n’est pas le nom d’un codage que vous prenez en charge, la méthode doit retourner <see langword="null" />. Le seul cas dans lequel la méthode doit lever une exception est si <paramref name="name" /> est <see langword="null" />.</para>
        </block>
        <block subset="none" type="usage">
          <para>Cette méthode est appelée par le <see cref="M:System.Text.Encoding.GetEncoding(System.String)" /> (méthode). Vous ne devez pas appeler directement à partir de code utilisateur.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(int codepage, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : int * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (codepage, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codepage" Type="System.Int32" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="codepage">Identificateur de page de code de l'encodage demandé.</param>
        <param name="encoderFallback">Objet qui fournit une procédure de gestion des erreurs quand un caractère ne peut pas être encodé avec cet encodage.</param>
        <param name="decoderFallback">Objet qui fournit une procédure de gestion des erreurs quand une séquence d’octets ne peut pas être décodée avec cet encodage.</param>
        <summary>Retourne l'encodage associé à l'identificateur de page de codes spécifié. Les paramètres spécifient un gestionnaire d'erreurs pour les caractères qui ne peuvent pas être encodés et pour les séquences d'octets qui ne peuvent pas être décodées.</summary>
        <returns>Encodage associé à la page de code spécifiée ou <see langword="null" /> si ce <see cref="T:System.Text.EncodingProvider" /> ne peut pas retourner d'encodage valide qui correspond à <paramref name="codepage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `encoderFallback` et `decoderFallback` paramètres sont des objets qui définissent la stratégie de secours utilisée dans le cas où un encodeur ne peut pas convertir un caractère en une séquence d’octets ou un décodeur ne peut pas convertir une séquence d’octets en un caractère. Le .NET Framework fournit les mécanismes de secours suivants :  
  
-   Exception de secours. Si le `encoderFallback` argument est une instance de <xref:System.Text.EncoderExceptionFallback>, ou le `decoderExceptionFallback` argument est une instance de <xref:System.Text.DecoderExceptionFallback>, la méthode de codage lève une exception si les caractères ne peuvent pas être encodés, et la méthode de décodage lève une exception si un octet séquence ne peut pas être décodée.  
  
-   Remplacement de secours. Si le `encoderFallback` argument est une instance de <xref:System.Text.EncoderReplacementFallback>, ou le `decoderExceptionFallback` argument est une instance de <xref:System.Text.DecoderReplacementFallback>, l’encodage et décodage des méthodes substituent une chaîne de remplacement pour les caractères qui ne peut pas être encodé et les séquences d’octets ne peut pas être décodé. Si vous instancié l’objet de secours de remplacement en appelant le constructeur par défaut, le caractère de remplacement est un « ? ». Si vous appelez le <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> ou <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> constructeur, vous pouvez spécifier la chaîne de remplacement.  
  
-   Secours la mieux adaptée. Vous pouvez dériver de la <xref:System.Text.EncoderFallback> ou <xref:System.Text.DecoderFallback> classe pour implémenter un mécanisme de remplacement de secours les mieux adaptées.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Étant donné que les appels à cette méthode utilisent votre implémentation de la <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32)" /> (méthode), vous n’avez pas à remplacer. Lorsque le code utilisateur tente de récupérer un encodage en appelant le <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> (méthode), la méthode passe le <paramref name="codepage" /> identificateur à chaque fournisseur d’encodage inscrit jusqu'à ce qu’une retourne un encodage valide. Si aucune retourne un encodage valide, le <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> méthode tente de récupérer un encodage mis en cache dont l’identificateur de code page est <paramref name="codepage" />. Pour cette raison, si vous choisissez de remplacer le <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> (méthode), la substitution doit retourner <see langword="null" /> si <paramref name="codepage" /> n’est pas l’identificateur de page de code d’un codage que vous prenez en charge ; il ne doit jamais lever une exception.</para>
        </block>
        <block subset="none" type="usage">
          <para>Cette méthode est appelée par le <see cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> (méthode). Vous ne devez pas appeler directement à partir de code utilisateur.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoding">
      <MemberSignature Language="C#" Value="public virtual System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Text::Encoding ^ GetEncoding(System::String ^ name, System::Text::EncoderFallback ^ encoderFallback, System::Text::DecoderFallback ^ decoderFallback);" />
      <MemberSignature Language="F#" Value="abstract member GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding&#xA;override this.GetEncoding : string * System.Text.EncoderFallback * System.Text.DecoderFallback -&gt; System.Text.Encoding" Usage="encodingProvider.GetEncoding (name, encoderFallback, decoderFallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="encoderFallback" Type="System.Text.EncoderFallback" />
        <Parameter Name="decoderFallback" Type="System.Text.DecoderFallback" />
      </Parameters>
      <Docs>
        <param name="name">Nom de l’encodage préféré.</param>
        <param name="encoderFallback">Objet qui fournit une procédure de gestion des erreurs quand un caractère ne peut pas être encodé avec cet encodage.</param>
        <param name="decoderFallback">Objet qui fournit une procédure de gestion d'erreurs quand une séquence d'octets ne peut pas être décodée avec l'encodage actuel.</param>
        <summary>Retourne l'encodage associé au nom spécifié. Les paramètres spécifient un gestionnaire d'erreurs pour les caractères qui ne peuvent pas être encodés et pour les séquences d'octets qui ne peuvent pas être décodées.</summary>
        <returns>Encodage associé au nom spécifié ou <see langword="null" /> si ce <see cref="T:System.Text.EncodingProvider" /> ne peut pas retourner d'encodage valide qui correspond à <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le `encoderFallback` et `decoderFallback` paramètres sont des objets qui définissent la stratégie de secours utilisée dans le cas où un encodeur ne peut pas convertir un caractère en une séquence d’octets ou un décodeur ne peut pas convertir une séquence d’octets en un caractère. Le .NET Framework fournit les mécanismes de secours suivants :  
  
-   Exception de secours. Si le `encoderFallback` argument est une instance de <xref:System.Text.EncoderExceptionFallback>, ou le `decoderExceptionFallback` argument est une instance de <xref:System.Text.DecoderExceptionFallback>, la méthode de codage lève une exception si les caractères ne peuvent pas être encodés, et la méthode de décodage lève une exception si un octet séquence ne peut pas être décodée.  
  
-   Remplacement de secours. Si le `encoderFallback` argument est une instance de <xref:System.Text.EncoderReplacementFallback>, ou le `decoderExceptionFallback` argument est une instance de <xref:System.Text.DecoderReplacementFallback>, l’encodage et décodage des méthodes substituent une chaîne de remplacement pour les caractères qui ne peut pas être encodé et les séquences d’octets ne peut pas être décodé. Si vous instancié l’objet de secours de remplacement en appelant le constructeur par défaut, le caractère de remplacement est un « ? ». Si vous appelez le <xref:System.Text.EncoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> ou <xref:System.Text.DecoderReplacementFallback.%23ctor%28System.String%29?displayProperty=nameWithType> constructeur, vous pouvez spécifier la chaîne de remplacement.  
  
-   Secours la mieux adaptée. Vous pouvez dériver de la <xref:System.Text.EncoderFallback> ou <xref:System.Text.DecoderFallback> classe pour implémenter un mécanisme de remplacement de secours les mieux adaptées.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Étant donné que les appels à cette méthode utilisent votre implémentation de la <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String)" /> (méthode), vous n’avez pas à remplacer. Lorsque le code utilisateur tente de récupérer un encodage en appelant le <see cref="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> (méthode), la méthode passe le <paramref name="codepage" /> identificateur à chaque fournisseur d’encodage inscrit jusqu'à ce qu’une retourne un encodage valide. Si aucune retourne un encodage valide, le <see cref="M:System.Text.Encoding.GetEncoding(System.Int32)" /> méthode tente de récupérer un encodage mis en cache dont l’identificateur de code page est <paramref name="codepage" />. Pour cette raison, si vous choisissez de remplacer le <see cref="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> (méthode), la substitution doit retourner <see langword="null" /> si <paramref name="codepage" /> n’est pas l’identificateur de page de code d’un codage que vous prenez en charge ; il ne doit jamais lever une exception.</para>
        </block>
        <block subset="none" type="usage">
          <para>Cette méthode est appelée par le <see cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" /> (méthode). Vous ne devez pas appeler directement à partir de code utilisateur.</para>
        </block>
        <altmember cref="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)" />
      </Docs>
    </Member>
  </Members>
</Type>