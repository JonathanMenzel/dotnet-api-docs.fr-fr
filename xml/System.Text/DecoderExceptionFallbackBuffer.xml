<Type Name="DecoderExceptionFallbackBuffer" FullName="System.Text.DecoderExceptionFallbackBuffer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71272ef1c44a9afc7d7bf5ae2a12d208d15dea16" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30527723" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DecoderExceptionFallbackBuffer : System.Text.DecoderFallbackBuffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DecoderExceptionFallbackBuffer extends System.Text.DecoderFallbackBuffer" />
  <TypeSignature Language="DocId" Value="T:System.Text.DecoderExceptionFallbackBuffer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DecoderExceptionFallbackBuffer&#xA;Inherits DecoderFallbackBuffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DecoderExceptionFallbackBuffer sealed : System::Text::DecoderFallbackBuffer" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.DecoderFallbackBuffer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Lève une exception <see cref="T:System.Text.DecoderFallbackException" /> si une séquence d'octets codée en entrée ne peut pas être convertie en un caractère de sortie décodé. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Une raison courante pour un encodage ou de décodage opération échec est que si la classe d’encodage sous-jacente ne fournit pas un mappage entre un caractère et une séquence d’octets équivalent. Si la séquence d’octets d’entrée ne peut pas être convertie en un caractère de sortie, l’opération de décodage appelle la <xref:System.Text.DecoderExceptionFallbackBuffer.Fallback%2A> méthode qui lève une exception <xref:System.Text.DecoderFallbackException>.  
  
 Le <xref:System.Text.DecoderFallbackBuffer?displayProperty=nameWithType> (classe), qui représente une mémoire tampon de données utilisé dans une opération de décodage, est la classe de base pour la <xref:System.Text.DecoderExceptionFallbackBuffer> classe. Toutefois, au lieu d’une mémoire tampon de données, la <xref:System.Text.DecoderExceptionFallbackBuffer> classe représente un comportement standard dans lequel une exception est levée si une opération de décodage échoue. Pas de mémoire tampon et les membres conçus pour manipuler cette mémoire tampon ne font aucun travail.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DecoderExceptionFallbackBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.DecoderExceptionFallbackBuffer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DecoderExceptionFallbackBuffer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.DecoderExceptionFallbackBuffer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public override bool Fallback (byte[] bytesUnknown, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Fallback(unsigned int8[] bytesUnknown, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.DecoderExceptionFallbackBuffer.Fallback(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Fallback (bytesUnknown As Byte(), index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Fallback(cli::array &lt;System::Byte&gt; ^ bytesUnknown, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesUnknown" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytesUnknown">Tableau d'octets en entrée.</param>
        <param name="index">Position d'index d'un octet dans l'entrée.</param>
        <summary>Lève <see cref="T:System.Text.DecoderFallbackException" /> lorsque la séquence d'octets d'entrée ne peut pas être décodée. La valeur de retour nominale n'est pas utilisée.</summary>
        <returns>Aucun. Aucune valeur n'est retournée parce que la méthode <see cref="M:System.Text.DecoderExceptionFallbackBuffer.Fallback(System.Byte[],System.Int32)" /> lève toujours une exception.  
  
 La valeur de retour nominale est <see langword="true" />. Une valeur de retour est définie, même si elle est invariable, parce que cette méthode implémente une méthode abstraite.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Text.Encoding.GetBytes%2A> et <xref:System.Text.Decoder.Convert%2A> appel de méthodes <xref:System.Text.DecoderExceptionFallbackBuffer.Fallback%2A> si elles rencontrent un octet inconnu en entrée. En réponse, le <xref:System.Text.DecoderExceptionFallbackBuffer.Fallback%2A> méthode lève toujours <xref:System.Text.DecoderFallbackException> et affiche les données d’entrée. Le <xref:System.Text.DecoderExceptionFallbackBuffer.Fallback%2A> méthode indique nominativement si une exception est levée si une séquence d’octets d’entrée ne peut pas être décodée.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.DecoderFallbackException">Cette méthode lève toujours une exception qui rapporte la valeur et la position d'index de l'octet d'entrée qui ne peut pas être décodé.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetNextChar">
      <MemberSignature Language="C#" Value="public override char GetNextChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetNextChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.DecoderExceptionFallbackBuffer.GetNextChar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetNextChar () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetNextChar();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Récupère le caractère suivant de la mémoire tampon d'exception.</summary>
        <returns>La valeur de retour est toujours le caractère Unicode NULL (U+0000).  
  
 Une valeur de retour est définie, même si elle est invariable, parce que cette méthode implémente une méthode abstraite.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que <xref:System.Text.DecoderExceptionFallbackBuffer> n’a aucun tampon de données exception réelle, la <xref:System.Text.DecoderExceptionFallbackBuffer.GetNextChar%2A> méthode retourne toujours le caractère NULL Unicode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovePrevious">
      <MemberSignature Language="C#" Value="public override bool MovePrevious ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MovePrevious() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.DecoderExceptionFallbackBuffer.MovePrevious" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MovePrevious () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MovePrevious();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entraîne l'appel suivant à la méthode <see cref="M:System.Text.DecoderExceptionFallbackBuffer.GetNextChar" /> pour accéder à la position de caractère de la mémoire tampon d'exception précédant la position en cours.</summary>
        <returns>La valeur de retour est toujours <see langword="false" />.  
  
 Une valeur de retour est définie, même si elle est invariable, parce que cette méthode implémente une méthode abstraite.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que <xref:System.Text.DecoderExceptionFallbackBuffer> n’a aucune mémoire tampon d’exception réel, le <xref:System.Text.DecoderExceptionFallbackBuffer.MovePrevious%2A> méthode retourne toujours `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remaining">
      <MemberSignature Language="C#" Value="public override int Remaining { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Remaining" />
      <MemberSignature Language="DocId" Value="P:System.Text.DecoderExceptionFallbackBuffer.Remaining" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Remaining As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Remaining { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le nombre de caractères dans l'objet <see cref="T:System.Text.DecoderExceptionFallbackBuffer" /> en cours qu'il reste à traiter.</summary>
        <value>La valeur de retour est toujours zéro.  
  
 Une valeur de retour est définie, même si elle est invariable, parce que cette méthode implémente une méthode abstraite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Étant donné que <xref:System.Text.DecoderExceptionFallbackBuffer> n’a aucune mémoire tampon d’exception réel, le <xref:System.Text.DecoderExceptionFallbackBuffer.Remaining%2A> propriété retourne toujours zéro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>