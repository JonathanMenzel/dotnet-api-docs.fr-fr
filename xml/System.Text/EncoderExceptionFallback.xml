<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EncoderExceptionFallback.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5defbde3ce59a9e553fd10f370ac200349a8fbddb.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">defbde3ce59a9e553fd10f370ac200349a8fbddb</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Text.EncoderExceptionFallback">
          <source>Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence.</source>
          <target state="translated">Fournit un mécanisme de gestion d'erreurs, appelé secours, quand un caractère d'entrée ne peut pas être converti en séquence d'octets en sortie.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Text.EncoderExceptionFallback">
          <source>The fallback throws an exception if an input character cannot be converted to an output byte sequence.</source>
          <target state="translated">Le secours lève une exception si un caractère d'entrée ne peut pas être converti en séquence d'octets en sortie.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Text.EncoderExceptionFallback">
          <source>This class cannot be inherited.</source>
          <target state="translated">Cette classe ne peut pas être héritée.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>An encoding maps a Unicode character to an encoded sequence of bytes, which can subsequently be transferred to a physical medium, such as a disk, or over a communications link.</source>
          <target state="translated">Un encodage de mappe un caractère Unicode en une séquence codée d’octets, qui peut ensuite être transférée vers un support physique, telle qu’un disque ou sur une liaison de communication.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> class.</source>
          <target state="translated">Caractères peuvent être mappés de différentes manières, et un encodage particulier est représenté par un type dérivé de la <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>Specifically, the encoding type's <ph id="ph1">`GetBytes`</ph> method encodes a character to a byte sequence, and the <ph id="ph2">`GetChars`</ph> method decodes a byte sequence to a character.</source>
          <target state="translated">De plus précisément, le type de codage <ph id="ph1">`GetBytes`</ph> méthode encode un caractère en une séquence d’octets et la <ph id="ph2">`GetChars`</ph> méthode décode une séquence d’octets en un caractère.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>An encoding operation can fail if the input character cannot be represented by the encoding.</source>
          <target state="translated">Une opération d’encodage peut échouer si le caractère d’entrée ne peut pas être représenté par l’encodage.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>For example, a <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> object cannot encode a character that yields a Unicode code point value that is outside the range U+0000 to U+007F.</source>
          <target state="translated">Par exemple, un <ph id="ph1">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> objet ne peut pas encoder un caractère qui produit une valeur de point de code Unicode qui est en dehors de la plage comprise entre U + 0000 et U + 007F.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback.</source>
          <target state="translated">Dans les cas où une conversion d’encodage ou de décodage ne peut pas être effectuée, le .NET Framework fournit un mécanisme de gestion de défaillance, appelé secours, quand.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>Your application can use the predefined .NET Framework encoder fallback, or it can create a custom encoder fallback derived from the <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> classes.</source>
          <target state="translated">Votre application peut utiliser l’encodeur de secours prédéfini du .NET Framework, ou créer un encodeur de secours personnalisé dérivé de la <ph id="ph1">&lt;xref:System.Text.EncoderFallback&gt;</ph> et <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> classes.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>The .NET Framework provides two predefined classes that implement different fallback strategies for handling encoding conversion failures.</source>
          <target state="translated">Le .NET Framework fournit deux classes prédéfinies qui implémentent différentes stratégies de secours pour la gestion des échecs de conversion de codage.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>The <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> class substitutes a string provided for any input character that cannot be converted.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> classe substitue la chaîne fournie pour un caractère qui ne peut pas être converti en entrée.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>The substitute string is encoded in place of the invalid character, and then the encoding operation continues converting the remainder of the input.</source>
          <target state="translated">La chaîne de substitution est encodée à la place le caractère non valide, et ensuite l’opération d’encodage poursuit la conversion du reste de l’entrée.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> class throws a <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> when an invalid character is encountered.</source>
          <target state="translated">En revanche, le <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> classe lève une <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> lorsqu’un caractère non valide est rencontré.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Text.EncoderExceptionFallback">
          <source>The following code example demonstrates the <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> classes.</source>
          <target state="translated">L’exemple de code suivant montre la <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> et <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> classes.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
          <source>Returns an encoder fallback buffer that throws an exception if it cannot convert a character sequence to a byte sequence.</source>
          <target state="translated">Retourne une mémoire tampon de secours d'encodeur qui lève une exception s'il ne peut pas convertir une séquence de caractères en séquence d'octets.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
          <source>An encoder fallback buffer that throws an exception when it cannot encode a character sequence.</source>
          <target state="translated">Mémoire tampon de secours de décodeur qui lève une exception quand elle ne peut pas encoder une séquence de caractères.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
          <source>An encoder fallback buffer is responsible for receiving and handling characters that an encoder cannot convert to a byte sequence.</source>
          <target state="translated">Un mémoire tampon de l’encodeur de secours est chargé de recevoir et traiter les caractères qui ne peut pas convertir un encodeur en une séquence d’octets.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
          <source>This method returns an instance of the <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> class, which is a subclass of  the <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> class.</source>
          <target state="translated">Cette méthode retourne une instance de la <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> (classe), qui est une sous-classe de la <ph id="ph2">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
          <source>An <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> object throws an <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> exception whenever characters are passed to its <ph id="ph3">&lt;xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> objet lève une <ph id="ph2">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> exception chaque fois que les caractères sont passés à son <ph id="ph3">&lt;xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.Equals(System.Object)">
          <source>An object that derives from the <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> class.</source>
          <target state="translated">Objet qui dérive de la classe <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.Equals(System.Object)">
          <source>Indicates whether the current <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> object and a specified object are equal.</source>
          <target state="translated">Indique si l'objet <ph id="ph1">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> actif et un objet spécifié sont égaux.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is not <ph id="ph3">&lt;see langword="null" /&gt;</ph> (<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic .NET) and is a <ph id="ph5">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> object; otherwise, <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> n'est pas <ph id="ph3">&lt;see langword="null" /&gt;</ph> (<ph id="ph4">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic .NET) et est un objet <ph id="ph5">&lt;see cref="T:System.Text.EncoderExceptionFallback" /&gt;</ph> ; sinon, <ph id="ph6">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.GetHashCode">
          <source>Retrieves the hash code for this instance.</source>
          <target state="translated">Récupère le code de hachage de cette instance.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Text.EncoderExceptionFallback.GetHashCode">
          <source>The return value is always the same arbitrary value, and has no special significance.</source>
          <target state="translated">La valeur de retour représente toujours la même valeur arbitraire et n'a pas de signification particulière.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Text.EncoderExceptionFallback.GetHashCode">
          <source>Because the <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback.GetHashCode%2A&gt;</ph> method always returns the same value, the application should not use this value to distinguish one instance of the <ph id="ph2">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> class from another.</source>
          <target state="translated">Étant donné que la <ph id="ph1">&lt;xref:System.Text.EncoderExceptionFallback.GetHashCode%2A&gt;</ph> méthode retourne toujours la même valeur, l’application ne doit pas utiliser cette valeur pour distinguer une instance de la <ph id="ph2">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> classe à partir d’un autre.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Text.EncoderExceptionFallback.MaxCharCount">
          <source>Gets the maximum number of characters this instance can return.</source>
          <target state="translated">Obtient le nombre maximal de caractères que cette instance peut retourner.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Text.EncoderExceptionFallback.MaxCharCount">
          <source>The return value is always zero.</source>
          <target state="translated">La valeur de retour est toujours zéro.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>