<Namespace Name="System.Diagnostics.PerformanceData">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8813c8ce03149b4c97305ad0ee10d1cdd88ce604" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34173735" />
  </Metadata>
  <Docs>
    <summary>Utilise les classes de cet espace de noms pour fournir des données de compteur. Les compteurs sont utilisés pour exposer les métriques de performances aux consommateurs comme la Surveillance des performances. L’espace de noms ne contient pas de classes pour consommer les données du compteur. Pour obtenir une description complète de l’architecture des compteurs de performance, consultez <see href="https://msdn.microsoft.com/library/windows/desktop/aa373083\(v=vs.85\">Compteurs de performances</see>.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les classes de cet espace de noms prend en charge la nouvelle architecture (version 2.0) pour les compteurs de performances qui a été introduite dans Windows Vista. Dans la nouvelle architecture, le fournisseur ne répond plus aux demandes de consommateur directement, mais au lieu de cela, il vous suffit conserve les données de compteur. Le système injecte un thread dans le processus du fournisseur lorsque le fournisseur crée une instance de l’ensemble de compteurs ; le thread est responsable du traitement des demandes de consommateur.  
  
 Les étapes suivantes montrent le processus d’écriture d’un fournisseur de compteurs.  
  
1.  Les compteurs pour le fournisseur fournit est défini dans un manifeste XML. Les compteurs sont regroupés logiquement dans des ensembles de compteurs. Les compteurs dans un ensemble de compteurs sont identifiés par un identificateur numérique qui est unique dans l’ensemble de compteurs. Un fournisseur peut définir un ou plusieurs ensembles de compteurs. Un ensemble de compteurs est identifié par un Guid qui est unique pour un fournisseur. Notez que si vous utilisez ces classes pour écrire votre fournisseur :  
  
    -   L’attribut de rappel de l’élément de fournisseur est ignoré.  
  
    -   La valeur de référence pour l’attribut de nom de l’élément counterAttribute est ignorée.  
  
     Pour plus d’informations sur l’écriture du manifeste, consultez [schéma des compteurs de performances](https://msdn.microsoft.com/library/windows/desktop/aa373092\(v=vs.85\).aspx).  
  
2.  Après avoir écrit votre manifeste, utilisez la [CTRPP](https://msdn.microsoft.com/library/windows/desktop/aa372128\(v=vs.85\).aspx) outil pour compiler le manifeste (ctrpp provider.man). L’outil génère quatre fichiers : .h, .c, .rc et * _r.h. Vous pouvez ignorer les fichiers .h et .c. Le fichier .rc contient les chaînes localisées définies dans votre manifeste. Les fichiers .rc et * _r.h vous permet de créer le fichier de ressources compilé (.res) que vous incluez dans votre projet. L’appel suivant montre comment compiler le fichier de ressources :  
  
    ```console  
    rc /r /i "c:\Program Files\Microsoft SDKs\Windows\v6.0\Include" provider.rc  
    ```  
  
     Si vous obtenez une erreur qui référence sal.h, copiez le fichier sal.h votre Microsoft Visual Studio, Visual C# inclure dans le répertoire que vous spécifiez pour le commutateur /i.  
  
     Ajoutez un chemin d’accès au fichier de ressources compilé (.res) à la page de propriétés d’Application de votre projet.  
  
3.  Écrivez votre fournisseur. Les étapes suivantes montrent les appels effectués par un fournisseur :  
  
    1.  Appelez le <xref:System.Diagnostics.PerformanceData.CounterSet.%23ctor%2A?displayProperty=nameWithType> constructeur pour définir l’ensemble de compteurs. Appelez cette méthode pour chaque ensemble de compteurs défini dans le manifeste.  
  
    2.  Pour chaque ensemble de compteurs, appelez l’une de le <xref:System.Diagnostics.PerformanceData.CounterSet.AddCounter%2A?displayProperty=nameWithType> méthodes pour ajouter les compteurs à l’ensemble. Appelez cette méthode pour chaque compteur défini dans l’ensemble de compteurs.  
  
    3.  Appelez le <xref:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance%2A?displayProperty=nameWithType> méthode pour créer une instance de l’ensemble de compteurs (une instance contient les données de compteur). Pour les ensembles de compteurs d’instance unique, appelez cette méthode une seule fois. Pour plusieurs ensembles de compteurs d’instance, appelez cette méthode pour chaque instance pour laquelle vous devez fournir des données de compteur (utilisez un nom unique pour chaque instance).  
  
    4.  Utilisez le <xref:System.Diagnostics.PerformanceData.CounterSetInstance.Counters%2A?displayProperty=nameWithType> propriété accéder à et définir les données de compteur du compteur.  
  
4.  Une fois que vous avez terminé votre fournisseur, utilisez l’outil LodCtr pour enregistrer les compteurs sur l’ordinateur. Par exemple :  
  
    ```console  
    lodctr /m:provider.man  
    ```  
  
     L’exemple suppose que le manifeste et le fichier exécutable se trouvent dans le répertoire actif. Pour plus d’informations sur l’utilisation du LodCtr, consultez [Microsoft Technet](Http://Go.Microsoft.Com/FWLink/?LinkId=84000).  
  
 Vous pouvez utiliser les classes dans cet espace de noms sur les ordinateurs qui exécutent Windows Vista et systèmes d’exploitation ultérieurs.  
  
   
  
## Examples  
 Le code suivant illustre un manifeste simple :  
  
```xml  
<!-- <?xml version="1.0" encoding="UTF-16"?> -->  
<instrumentationManifest xsi:schemaLocation="http://schemas.microsoft.com/win/2004/08/events eventman.xsd"   
     xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events"   
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
     xmlns:xs="http://www.w3.org/2001/XMLSchema"   
     xmlns:trace=http://schemas.microsoft.com/win/2004/08/events/trace>  
  
    <instrumentation>  
  
        <counters xmlns=http://schemas.microsoft.com/win/2005/12/counters>  
  
            <provider  
              applicationIdentity = "provider1.exe"  
              providerType = "userMode"  
              providerGuid = "{51D1685C-35ED-45be-99FE-17261A4F27F3}">  
  
               <counterSet guid = "{582803C9-AACD-45e5-8C30-571141A22092}"  
                  uri = "Microsoft.Windows.System.PerfCounters.Typing"  
                  name = "$(string.CounterSet1.Name)"   
                  description = "$(string.CounterSet1.Description)"   
                  instances = "single">  
  
                    <counter id = "1"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.TotalWords"  
                      name = "$(string.CS1.Counter1.Name)"  
                      description = "$(string.CS1.Counter1.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "2"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsInInterval"  
                      name = "$(string.CS1.Counter2.Name)"  
                      description = "$(string.CS1.Counter2.Description)"  
                      type = "perf_counter_delta"  
                      detailLevel = "standard"/>  
  
                    <counter id = "3"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.LetterAPressed"  
                      name = "$(string.CS1.Counter3.Name)"  
                      description = "$(string.CS1.Counter3.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "4"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsContainingLetterA"  
                      name = "$(string.CS1.Counter4.Name)"   
                      description = "$(string.CS1.Counter4.Description)"   
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "5"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentOfWordsContainingLetterA"  
                      name = "$(string.CS1.Counter5.Name)"   
                      description = "$(string.CS1.Counter5.Description)"   
                      type = "perf_sample_fraction"  
                      baseID = "6"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "displayAsReal" />  
                      </counterAttributes>  
                    </counter>  
  
                    <counter id = "6"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentBase"  
                      type = "perf_sample_base"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "noDisplay" />  
                      </counterAttributes>  
                    </counter>  
  
                </counterSet>  
            </provider>  
        </counters>  
    </instrumentation>  
  
    <localization>  
        <resources culture="en-US">  
            <stringTable>  
  
                <string id="CounterSet1.Name" value="Typing"/>  
                <string id="CounterSet1.Description" value="Captures simple typing metrics."/>  
                <string id="CS1.Counter1.Name" value="Total Words Typed"/>   
                <string id="CS1.Counter1.Description" value="The total number of words typed."/>  
                <string id="CS1.Counter2.Name" value="Words Typed In Interval"/>   
                <string id="CS1.Counter2.Description" value="The total number of words typed in the interval."/>  
                <string id="CS1.Counter3.Name" value="Letter A Pressed"/>   
                <string id="CS1.Counter3.Description" value="The number of times that the letter A is pressed."/>  
                <string id="CS1.Counter4.Name" value="Words Containing A"/>   
                <string id="CS1.Counter4.Description" value="The number of words that contain the letter A."/>  
                <string id="CS1.Counter5.Name" value="Percent of Words Containing A"/>   
                <string id="CS1.Counter5.Description" value="The percent of words that contain the letter A in the last interval."/>  
  
            </stringTable>  
        </resources>  
    </localization>  
</instrumentationManifest>  
```  
  
 Le code suivant illustre une implémentation de fournisseur simple pour le manifeste :  
  
```cs  
using System.Diagnostics.PerformanceData;  
  
        private static Guid providerId = new Guid("{51D1685C-35ED-45be-99FE-17261A4F27F3}");  
        private static Guid typingCounterSetId = new Guid("{582803C9-AACD-45e5-8C30-571141A22092}");  
  
        private static CounterSet typingCounterSet;         // Defines the counter set  
        private static CounterSetInstance typingCsInstance; // Instance of the counter set  
  
        private static int numberOfLetterAInWord = 0;  
  
        . . .  
  
            // Create the 'Typing' counter set.  
            typingCounterSet = new CounterSet(providerId, typingCounterSetId, CounterSetInstanceType.Single);  
  
            // Add the counters to the counter set definition.  
            typingCounterSet.AddCounter(1, CounterType.RawData32, "Total Word Count");  
            typingCounterSet.AddCounter(2, CounterType.Delta32, "Words Typed In Interval");  
            typingCounterSet.AddCounter(3, CounterType.RawData32, "A Key Pressed");  
            typingCounterSet.AddCounter(4, CounterType.RawData32, "Words Containing A");  
            typingCounterSet.AddCounter(5, CounterType.SampleFraction, "Percent of Words Containg A");  
            typingCounterSet.AddCounter(6, CounterType.SampleBase, "Percent Base");  
  
            // Create an instance of the counter set (contains the counter data).  
            typingCsInstance = typingCounterSet.CreateCounterSetInstance("Typing Instance");  
            typingCsInstance.Counters[1].Value = 0;  
            typingCsInstance.Counters[2].Value = 0;  
            typingCsInstance.Counters[3].Value = 0;  
            typingCsInstance.Counters[4].Value = 0;  
            typingCsInstance.Counters[5].Value = 0;  
            typingCsInstance.Counters[6].Value = 0;  
  
        . . .  
  
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)  
        {  
            typingCounterSet.Dispose();  
        }  
  
        // Simple effort to capture letter A key press and words typed.  
        private void textInput_KeyDown(object sender, KeyEventArgs e)  
        {  
            Keys keyData = e.KeyData;  
  
            switch (e.KeyData)  
            {  
                case Keys.A :  
                    // In the .NET 3.5 Framework, you had to use the  
                    // Value property to set and increment the counter   
                    // value. Beginning with the .NET 4.0 Framework,   
                    // the Value property is safe to use in a multi-  
                    // threaded application.  
                    typingCsInstance.Counters["A Key Pressed"].Value++;  
                    numberOfLetterAInWord++;  
  
                    break;  
  
                case Keys.Enter:  
                case Keys.Space:  
                case Keys.Tab:  
  
                    if (numberOfLetterAInWord > 0)  
                    {  
                        // Beginning with the .NET 4.0 Framework, you   
                        // can use the Increment method to increment   
                        // the counter value by 1. The Increment method   
                        // is safe to use in a multi-threaded   
                        // application.  
                        typingCsInstance.Counters["Words Containing A"].Increment();  
                        typingCsInstance.Counters["Percent of Words Containg A"].Increment();  
                        numberOfLetterAInWord = 0;  
                    }  
  
                    typingCsInstance.Counters["Percent Base"].Increment();  
                    typingCsInstance.Counters["Total Word Count"].Increment();  
                    typingCsInstance.Counters["Words Typed In Interval"].Increment();  
  
                    break;  
            }  
        }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>