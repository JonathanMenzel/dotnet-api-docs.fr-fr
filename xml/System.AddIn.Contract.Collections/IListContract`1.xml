<Type Name="IListContract&lt;C&gt;" FullName="System.AddIn.Contract.Collections.IListContract&lt;C&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="183490a024d3325fa82a8b930258a5452fdbed22" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37705856" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IListContract&lt;C&gt; : System.AddIn.Contract.Collections.ICollectionContract&lt;C&gt;, System.AddIn.Contract.Collections.IEnumerableContract&lt;C&gt; where C : IContract" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IListContract`1&lt;(class System.AddIn.Contract.IContract) C&gt; implements class System.AddIn.Contract.Collections.ICollectionContract`1&lt;!C&gt;, class System.AddIn.Contract.Collections.IEnumerableContract`1&lt;!C&gt;, class System.AddIn.Contract.IContract" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Contract.Collections.IListContract`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IListContract(Of C)&#xA;Implements ICollectionContract(Of C), IEnumerableContract(Of C)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename C&gt;&#xA; where C : IContractpublic interface class IListContract : System::AddIn::Contract::Collections::ICollectionContract&lt;C&gt;, System::AddIn::Contract::Collections::IEnumerableContract&lt;C&gt;" />
  <TypeSignature Language="F#" Value="type IListContract&lt;'C (requires 'C :&gt; IContract)&gt; = interface&#xA;    interface ICollectionContract&lt;'C (requires 'C :&gt; IContract)&gt;&#xA;    interface IEnumerableContract&lt;'C (requires 'C :&gt; IContract)&gt;&#xA;    interface IContract" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn.Contract</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="C">
      <Constraints>
        <InterfaceName>System.AddIn.Contract.IContract</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.AddIn.Contract.Collections.ICollectionContract&lt;C&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.AddIn.Contract.Collections.IEnumerableContract&lt;C&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="C">Type d'objets présents dans la liste. <c>C</c> doit implémenter le <see cref="T:System.AddIn.Contract.IContract" /> interface.</typeparam>
    <summary>Représente une collection générique d'objets <see cref="T:System.AddIn.Contract.IContract" /> accessibles séparément par index.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetItem">
      <MemberSignature Language="C#" Value="public C GetItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !C GetItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IListContract`1.GetItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItem (index As Integer) As C" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; C GetItem(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetItem : int -&gt; 'C" Usage="iListContract.GetItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>C</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index de base zéro de l'élément à obtenir.</param>
        <summary>Retourne l'élément à l'index spécifié.</summary>
        <returns>Élément au niveau de l'index spécifié.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.AddIn.Contract.Collections.IListContract%601.GetItem%2A> méthode ne supprime pas l’élément à l’index spécifié. Pour supprimer un élément à partir de la <xref:System.AddIn.Contract.Collections.IListContract%601>, utilisez le <xref:System.AddIn.Contract.Collections.IListContract%601.RemoveAt%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à la valeur de retour de <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (C item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!C item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IListContract`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As C) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(C item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'C -&gt; int" Usage="iListContract.IndexOf item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="C" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.AddIn.Contract.IContract" /> à rechercher dans <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</param>
        <summary>Retourne l'index d'un élément spécifique dans le <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</summary>
        <returns>Index de <paramref name="item" /> s'il figure dans la liste ; sinon, -1.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, C item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !C item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IListContract`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As C)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, C item);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'C -&gt; unit" Usage="iListContract.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="C" />
      </Parameters>
      <Docs>
        <param name="index">Index de base zéro au niveau duquel insérer <c>item</c>.</param>
        <param name="item">
          <see cref="T:System.AddIn.Contract.IContract" /> à insérer dans le <see cref="T:System.AddIn.Contract.Collections.IListContract`1" />.</param>
        <summary>Insère un élément dans le <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> à l'index spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Après avoir appelé <xref:System.AddIn.Contract.Collections.IListContract%601.Insert%2A>, les éléments qui suivent le point d’insertion vers pour intégrer un nouvel élément. Les index des éléments déplacés sont également mis à jour. Pour remplacer un élément à l’index spécifié, utilisez la <xref:System.AddIn.Contract.Collections.IListContract%601.SetItem%2A> (méthode).  
  
 Pour déterminer si un <xref:System.AddIn.Contract.Collections.IListContract%601> est en lecture seule, appelez le <xref:System.AddIn.Contract.Collections.ICollectionContract%601.GetIsReadOnly%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à la valeur de retour de <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> est en lecture seule.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IListContract`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit" Usage="iListContract.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Index de l'élément à supprimer.</param>
        <summary>Supprime l'élément au niveau de l'index spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Après avoir appelé <xref:System.AddIn.Contract.Collections.IListContract%601.RemoveAt%2A>, les éléments qui suivent l’élément supprimé vers pour occuper l’espace libéré. Les index des éléments déplacés sont également mis à jour.  
  
 Pour déterminer si un <xref:System.AddIn.Contract.Collections.IListContract%601> est en lecture seule, appelez le <xref:System.AddIn.Contract.Collections.ICollectionContract%601.GetIsReadOnly%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à la valeur de retour de <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> est en lecture seule.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public void SetItem (int index, C value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetItem(int32 index, !C value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IListContract`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetItem (index As Integer, value As C)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetItem(int index, C value);" />
      <MemberSignature Language="F#" Value="abstract member SetItem : int * 'C -&gt; unit" Usage="iListContract.SetItem (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="C" />
      </Parameters>
      <Docs>
        <param name="index">Index de base zéro au niveau duquel définir l'élément.</param>
        <param name="value">Élément à définir au niveau de l'index spécifié.</param>
        <summary>Remplace l'élément à l'index spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.AddIn.Contract.Collections.IListContract%601.SetItem%2A> méthode remplace l’élément à l’index spécifié. Pour ajouter un élément à la <xref:System.AddIn.Contract.Collections.IListContract%601>, utilisez le <xref:System.AddIn.Contract.Collections.IListContract%601.Insert%2A> (méthode).  
  
 Pour déterminer si un <xref:System.AddIn.Contract.Collections.IListContract%601> est en lecture seule, appelez le <xref:System.AddIn.Contract.Collections.ICollectionContract%601.GetIsReadOnly%2A> (méthode).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="index" /> est supérieur ou égal à la valeur de retour de <see cref="M:System.AddIn.Contract.Collections.ICollectionContract`1.GetCount" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.AddIn.Contract.Collections.IListContract`1" /> est en lecture seule.</exception>
      </Docs>
    </Member>
  </Members>
</Type>