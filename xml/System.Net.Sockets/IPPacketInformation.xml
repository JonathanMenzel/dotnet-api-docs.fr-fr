<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IPPacketInformation.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac573b6c62c72316406494c8eb3758058245e05aed0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73b6c62c72316406494c8eb3758058245e05aed0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.IPPacketInformation">
          <source>Presents the packet information from a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph>.</source>
          <target state="translated">Présente les informations relatives au paquet d'un appel à <ph id="ph1">&lt;see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph> ou <ph id="ph2">&lt;see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.IPPacketInformation.Address">
          <source>Gets the origin information of the packet that was received as a result of calling the <ph id="ph1">&lt;see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph> method or <ph id="ph2">&lt;see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph> method.</source>
          <target state="translated">Obtient les informations d'origine du paquet qui a été reçu en appelant les méthodes <ph id="ph1">&lt;see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph> ou <ph id="ph2">&lt;see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.IPPacketInformation.Address">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> that indicates the origin information of the packet that was received as a result of calling the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph> method or <ph id="ph3">&lt;see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> qui indique les informations d'origine du paquet qui a été reçu en appelant les méthodes <ph id="ph2">&lt;see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph> ou <ph id="ph3">&lt;see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.IPPacketInformation.Address">
          <source>For packets that were sent from a unicast address, the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.IPPacketInformation.Address" /&gt;</ph> property will return the <ph id="ph2">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> of the sender; for multicast or broadcast packets, the <ph id="ph3">&lt;see cref="P:System.Net.Sockets.IPPacketInformation.Address" /&gt;</ph> property will return the multicast or broadcast <ph id="ph4">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph>.</source>
          <target state="translated">Pour les paquets qui ont été envoyés à partir d'une adresse unicast, la propriété <ph id="ph1">&lt;see cref="P:System.Net.Sockets.IPPacketInformation.Address" /&gt;</ph> retourne l'<ph id="ph2">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> de l'expéditeur ; pour les paquets multicast ou de diffusion, la propriété <ph id="ph3">&lt;see cref="P:System.Net.Sockets.IPPacketInformation.Address" /&gt;</ph> retourne l'<ph id="ph4">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> multicast ou de diffusion.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Objet à comparer avec cette instance.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="comparand" /&gt;</ph> is an instance of <ph id="ph3">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> and equals the value of the instance; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="comparand" /&gt;</ph> est une instance de <ph id="ph3">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> et équivaut à la valeur de l'instance ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Retourne le code de hachage de cette instance.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.GetHashCode">
          <source>An Int32 hash code.</source>
          <target state="translated">Code de hachage Int32.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.IPPacketInformation.GetHashCode">
          <source>The hash code is constructed from the values of the <ph id="ph1">&lt;xref:System.Net.Sockets.IPPacketInformation.Address%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.IPPacketInformation.Interface%2A&gt;</ph> properties.</source>
          <target state="translated">Le code de hachage est construit à partir des valeurs de la <ph id="ph1">&lt;xref:System.Net.Sockets.IPPacketInformation.Address%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Net.Sockets.IPPacketInformation.Interface%2A&gt;</ph> propriétés.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.IPPacketInformation.Interface">
          <source>Gets the network interface information that is associated with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph>.</source>
          <target state="translated">Obtient les informations d'interface réseau associées à un appel à <ph id="ph1">&lt;see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph> ou <ph id="ph2">&lt;see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.IPPacketInformation.Interface">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value, which represents the index of the network interface.</source>
          <target state="translated">Valeur <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>, qui représente l'index de l'interface réseau.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.IPPacketInformation.Interface">
          <source>You can use this index with <ph id="ph1">&lt;see cref="M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces" /&gt;</ph> to get more information about the relevant interface.</source>
          <target state="translated">Vous pouvez utiliser cet index avec <ph id="ph1">&lt;see cref="M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces" /&gt;</ph> pour obtenir plus d'informations à propos de l'interface appropriée.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> instance that is to the left of the equality operator.</source>
          <target state="translated">Instance de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> figurant à gauche de l'opérateur d'égalité.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> instance that is to the right of the equality operator.</source>
          <target state="translated">Instance de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> figurant à droite de l'opérateur d'égalité.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source>Tests whether two specified <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> instances are equivalent.</source>
          <target state="translated">Teste si deux instances de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> spécifiées sont équivalentes.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="packetInformation1" /&gt;</ph> and <ph id="ph3">&lt;paramref name="packetInformation2" /&gt;</ph> are equal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="packetInformation1" /&gt;</ph> et <ph id="ph3">&lt;paramref name="packetInformation2" /&gt;</ph> sont égales ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source>This operator tests both the <ph id="ph1">&lt;xref:System.Net.Sockets.IPPacketInformation.Address%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.IPPacketInformation.Interface%2A&gt;</ph> values for both arguments.</source>
          <target state="translated">Cet opérateur teste les le <ph id="ph1">&lt;xref:System.Net.Sockets.IPPacketInformation.Address%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Net.Sockets.IPPacketInformation.Interface%2A&gt;</ph> les valeurs pour les deux arguments.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Net.Sockets.IPPacketInformation.Equals(System.Object)&gt;</ph>.</source>
          <target state="translated">La méthode équivalente pour cet opérateur est <ph id="ph1">&lt;xref:System.Net.Sockets.IPPacketInformation.Equals(System.Object)&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> instance that is to the left of the inequality operator.</source>
          <target state="translated">Instance de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> figurant à gauche de l'opérateur d'inégalité.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> instance that is to the right of the inequality operator.</source>
          <target state="translated">Instance de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> figurant à droite de l'opérateur d'inégalité.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source>Tests whether two specified <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> instances are not equal.</source>
          <target state="translated">Teste si deux instances de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.IPPacketInformation" /&gt;</ph> spécifiées ne sont pas égales.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="packetInformation1" /&gt;</ph> and <ph id="ph3">&lt;paramref name="packetInformation2" /&gt;</ph> are unequal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="packetInformation1" /&gt;</ph> et <ph id="ph3">&lt;paramref name="packetInformation2" /&gt;</ph> sont inégaux ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source>This operator tests both the <ph id="ph1">&lt;xref:System.Net.Sockets.IPPacketInformation.Address%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.IPPacketInformation.Interface%2A&gt;</ph> values for both arguments.</source>
          <target state="translated">Cet opérateur teste les le <ph id="ph1">&lt;xref:System.Net.Sockets.IPPacketInformation.Address%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Net.Sockets.IPPacketInformation.Interface%2A&gt;</ph> les valeurs pour les deux arguments.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Net.Sockets.IPPacketInformation.Equals(System.Object)&gt;</ph>.</source>
          <target state="translated">La méthode équivalente pour cet opérateur est <ph id="ph1">&lt;xref:System.Net.Sockets.IPPacketInformation.Equals(System.Object)&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>