<Type Name="LingerOption" FullName="System.Net.Sockets.LingerOption">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1d7bd39336c8421bd2f4e1b765dbc9777e514c79" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37643982" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LingerOption" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LingerOption extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.LingerOption" />
  <TypeSignature Language="VB.NET" Value="Public Class LingerOption" />
  <TypeSignature Language="C++ CLI" Value="public ref class LingerOption" />
  <TypeSignature Language="F#" Value="type LingerOption = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Spécifie si un <see cref="T:System.Net.Sockets.Socket" /> restera connecté après un appel aux méthodes <see cref="M:System.Net.Sockets.Socket.Close" /> ou <see cref="M:System.Net.Sockets.TcpClient.Close" />, ainsi que la durée pendant laquelle il restera connecté s'il reste des données à envoyer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il peut rester des données disponibles dans le tampon réseau sortant après une application appelle la <xref:System.Net.Sockets.Socket> ou <xref:System.Net.Sockets.TcpClient> (méthode). Si vous souhaitez spécifier la quantité de temps que le <xref:System.Net.Sockets.Socket> va tenter de transmettre des données non envoyées après la fermeture, créez un <xref:System.Net.Sockets.LingerOption> avec le `enable` paramètre défini sur `true`et le `seconds` paramètre défini sur la quantité de temps souhaitée . Le `seconds` paramètre est utilisé pour indiquer la durée pendant laquelle vous souhaitez que le <xref:System.Net.Sockets.Socket> pour rester connecté avant l’expiration. Si vous ne souhaitez pas que le <xref:System.Net.Sockets.Socket> pour rester connecté pendant une durée prolongée après la fermeture, créer un <xref:System.Net.Sockets.LingerOption> instance avec le `enable` paramètre défini sur `true` et le `seconds` paramètre défini sur zéro. Dans ce cas, le <xref:System.Net.Sockets.Socket> se ferme immédiatement et les données non envoyées seront perdues. Une fois créé, passez le <xref:System.Net.Sockets.LingerOption> à la <xref:System.Net.Sockets.Socket.SetSocketOption%2A?displayProperty=nameWithType> (méthode). Si vous envoyez et recevez des données avec un <xref:System.Net.Sockets.TcpClient>, puis définissez le <xref:System.Net.Sockets.LingerOption> d’instance dans le <xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType> propriété.  
  
 La pile IP calcule le délai par défaut protocole IP à utiliser en fonction du temps d’aller-retour de la connexion. Dans la plupart des cas, le délai d’attente calculé par la pile est plus pertinent que celui défini par une application. Il s’agit du comportement par défaut pour un <xref:System.Net.Sockets.Socket> lorsque le <xref:System.Net.Sockets.Socket.LingerState%2A> propriété n’est pas définie et pour un <xref:System.Net.Sockets.TcpClient> lorsque le <xref:System.Net.Sockets.TcpClient.LingerState%2A> propriété n’est pas définie.  
  
   
  
## Examples  
 L’exemple suivant définit un créé précédemment <xref:System.Net.Sockets.Socket> pour attendre une seconde après avoir appelé la <xref:System.Net.Sockets.Socket.Close%2A> (méthode).  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LingerOption (bool enable, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enable, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enable As Boolean, seconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LingerOption(bool enable, int seconds);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.LingerOption : bool * int -&gt; System.Net.Sockets.LingerOption" Usage="new System.Net.Sockets.LingerOption (enable, seconds)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enable">
          <see langword="true" /> pour rester connecté après avoir appelé la méthode <see cref="M:System.Net.Sockets.Socket.Close" /> ; sinon <see langword="false" />.</param>
        <param name="seconds">Nombre de secondes restant avant la déconnexion après avoir appelé la méthode <see cref="M:System.Net.Sockets.Socket.Close" />.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.LingerOption" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il peut rester des données disponibles dans le tampon réseau sortant après avoir fermé le <xref:System.Net.Sockets.Socket>. Utilisez le `enable` paramètre pour spécifier si vous souhaitez que le <xref:System.Net.Sockets.Socket> continue à transmettre des données non envoyées après l’appel de la méthode close. Utilisez le `seconds` paramètre pour indiquer la durée pendant laquelle vous souhaitez que le <xref:System.Net.Sockets.Socket> pour tenter de transférer des données non envoyées avant l’expiration. Si vous spécifiez `true` pour le `enable` paramètre et la valeur 0 pour le `seconds` paramètre, le <xref:System.Net.Sockets.Socket> essaiera d’envoyer les données jusqu'à ce qu’il n’existe aucun gauche des données dans le tampon réseau sortant. Si vous spécifiez `false` pour le `enable` paramètre, le <xref:System.Net.Sockets.Socket> se ferme immédiatement et les données non envoyées seront perdues.  
  
 Le tableau suivant décrit le comportement sur le <xref:System.Net.Sockets.Socket.Close%2A?displayProperty=nameWithType> et <xref:System.Net.Sockets.TcpClient.Close%2A?displayProperty=nameWithType> méthodes basées sur les valeurs possibles de la `enable` et `seconds` paramètres lorsqu’une instance.LingerOption est créée et définie dans le <xref:System.Net.Sockets.Socket.LingerState%2A?displayProperty=nameWithType> ou <xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=nameWithType> propriété.  
  
|`enable`|`seconds`|Comportement|  
|--------------|---------------|--------------|  
|`false` (désactivé), la valeur par défaut|Le délai d’attente n’est pas applicable, (par défaut).|Tente d’envoyer les données pour un socket orienté connexion (TCP, par exemple) en attente jusqu'à ce que la valeur par défaut délai arrive à expiration.|  
|`true` (activé)|Un délai d’expiration différent de zéro|Essaie d’envoyer les données en attente jusqu'à ce que le délai spécifié expire et si la tentative échoue, Winsock réinitialise la connexion.|  
|`true` (activé)|Un délai d’attente nulle.|Ignore toutes les données en attente. Pour un socket orienté connexion (TCP, par exemple), Winsock réinitialise la connexion.|  
  
 La pile IP calcule le délai par défaut protocole IP à utiliser en fonction du temps d’aller-retour de la connexion. Dans la plupart des cas, le délai d’attente calculé par la pile est plus pertinent que celui défini par une application. Il s’agit du comportement par défaut pour un socket lors de la <xref:System.Net.Sockets.Socket.LingerState%2A> propriété n’est pas définie.  
  
 Lorsque le <xref:System.Net.Sockets.LingerOption.LingerTime%2A> propriété stockée dans le <xref:System.Net.Sockets.Socket.LingerState%2A> propriété est supérieure au délai de protocole IP par défaut, le délai de protocole IP par défaut sera toujours s’appliquent et remplacent.  
  
   
  
## Examples  
 L’exemple suivant définit un créé précédemment <xref:System.Net.Sockets.Socket> pour attendre une seconde après avoir appelé la <xref:System.Net.Sockets.Socket.Close%2A> (méthode).  
  
 [!code-cpp[Classic LingerOption Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Net.Sockets.LingerOption.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique s'il faut attendre ou non après la fermeture de <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Net.Sockets.Socket" /> doit attendre l'appel de la méthode <see cref="M:System.Net.Sockets.Socket.Close" /> ; sinon, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vous pouvez utiliser la <xref:System.Net.Sockets.LingerOption.Enabled%2A> propriété afin de déterminer si le <xref:System.Net.Sockets.Socket> attendra la fermeture. Remplacez cette valeur par `true` ou `false` et passer le <xref:System.Net.Sockets.LingerOption> à la <xref:System.Net.Sockets.Socket.SetSocketOption%2A> méthode ou un ensemble la <xref:System.Net.Sockets.TcpClient.LingerState%2A> ou <xref:System.Net.Sockets.Socket.LingerState%2A> pour désactiver ou activer l’attente.  
  
 Le tableau suivant décrit le comportement pour les valeurs possibles de la <xref:System.Net.Sockets.LingerOption.Enabled%2A> propriété et la <xref:System.Net.Sockets.LingerOption.LingerTime%2A> propriété stockée dans le <xref:System.Net.Sockets.Socket.LingerState%2A> propriété.  
  
|`enable`|`seconds`|Comportement|  
|--------------|---------------|--------------|  
|`false` (désactivé), la valeur par défaut|Le délai d’attente n’est pas applicable, (par défaut).|Tente d’envoyer les données pour un socket orienté connexion (TCP, par exemple) en attente jusqu'à ce que la valeur par défaut délai arrive à expiration.|  
|`true` (activé)|Un délai d’expiration différent de zéro|Essaie d’envoyer les données en attente jusqu'à ce que le délai spécifié expire et si la tentative échoue, Winsock réinitialise la connexion.|  
|`true` (activé)|Un délai d’attente nulle.|Ignore toutes les données en attente. Pour un socket orienté connexion (TCP, par exemple), Winsock réinitialise la connexion.|  
  
 La pile IP calcule le délai par défaut protocole IP à utiliser en fonction du temps d’aller-retour de la connexion. Dans la plupart des cas, le délai d’attente calculé par la pile est plus pertinent que celui défini par une application. Il s’agit du comportement par défaut pour un socket lors de la <xref:System.Net.Sockets.Socket.LingerState%2A> propriété n’est pas définie.  
  
 Lorsque le <xref:System.Net.Sockets.LingerOption.LingerTime%2A> propriété stockée dans le <xref:System.Net.Sockets.Socket.LingerState%2A> propriété est supérieure au délai de protocole IP par défaut, le délai de protocole IP par défaut sera toujours s’appliquent et remplacent.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerTime">
      <MemberSignature Language="C#" Value="public int LingerTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LingerTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.LingerTime" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LingerTime { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LingerTime : int with get, set" Usage="System.Net.Sockets.LingerOption.LingerTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la durée de maintien de la connexion une fois la méthode <see cref="M:System.Net.Sockets.Socket.Close" /> appelée s'il reste des données à envoyer.</summary>
        <value>La durée, en secondes, restant avant la déconnexion après avoir appelé <see cref="M:System.Net.Sockets.Socket.Close" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilisez cette valeur si vous souhaitez déterminer combien de temps fermé <xref:System.Net.Sockets.Socket> tentera de transférer les données non envoyées avant l’expiration. Vous pouvez également définir cette valeur pour le délai souhaité en secondes.  
  
 Si le <xref:System.Net.Sockets.LingerOption.Enabled%2A> propriété est `true`, et que vous définissez <xref:System.Net.Sockets.LingerOption.LingerTime%2A> à 0, le <xref:System.Net.Sockets.Socket> ignore toutes les données en attente d’envoi dans le tampon réseau sortant. Si vous modifiez cette valeur, vous devez passer le <xref:System.Net.Sockets.LingerOption> l’instance à la <xref:System.Net.Sockets.Socket.SetSocketOption%2A> méthode ou un ensemble la <xref:System.Net.Sockets.TcpClient.LingerState%2A> ou <xref:System.Net.Sockets.Socket.LingerState%2A> propriété.  
  
 Le tableau suivant décrit le comportement pour les valeurs possibles de la <xref:System.Net.Sockets.LingerOption.Enabled%2A> propriété et la <xref:System.Net.Sockets.LingerOption.LingerTime%2A> propriété stockée dans le <xref:System.Net.Sockets.Socket.LingerState%2A> propriété.  
  
|`enable`|`seconds`|Comportement|  
|--------------|---------------|--------------|  
|`false` (désactivé), la valeur par défaut|Le délai d’attente n’est pas applicable, (par défaut).|Tente d’envoyer les données pour un socket orienté connexion (TCP, par exemple) en attente jusqu'à ce que la valeur par défaut délai arrive à expiration.|  
|`true` (activé)|Un délai d’expiration différent de zéro|Essaie d’envoyer les données en attente jusqu'à ce que le délai spécifié expire et si la tentative échoue, Winsock réinitialise la connexion.|  
|`true` (activé)|Un délai d’attente nulle.|Ignore toutes les données en attente. Pour un socket orienté connexion (TCP, par exemple), Winsock réinitialise la connexion.|  
  
 La pile IP calcule le délai par défaut protocole IP à utiliser en fonction du temps d’aller-retour de la connexion. Dans la plupart des cas, le délai d’attente calculé par la pile est plus pertinent que celui défini par une application. Il s’agit du comportement par défaut pour un socket lors de la <xref:System.Net.Sockets.Socket.LingerState%2A> propriété n’est pas définie.  
  
 Lorsque le <xref:System.Net.Sockets.LingerOption.LingerTime%2A> propriété stockée dans le <xref:System.Net.Sockets.Socket.LingerState%2A> propriété est supérieure au délai de protocole IP par défaut, le délai de protocole IP par défaut sera toujours s’appliquent et remplacent.  
  
   
  
## Examples  
 L’exemple suivant affiche la valeur de cette propriété.  
  
 [!code-cpp[Socket_Socket_Options#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket_Socket_Options#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket_Socket_Options#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>