<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="NetworkStream.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50f9b3287ea8eafb8d3d2d9f207429a0f3d86eb49.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f9b3287ea8eafb8d3d2d9f207429a0f3d86eb49</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.NetworkStream">
          <source>Provides the underlying stream of data for network access.</source>
          <target state="translated">Fournit le flux de données sous-jacent pour l’accès réseau.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class provides methods for sending and receiving data over <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph> sockets in blocking mode.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> classe fournit des méthodes pour envoyer et recevoir des données via <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph> sockets en mode blocage.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>For more information about blocking versus nonblocking <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>s, see <bpt id="p1">[</bpt>Using an Asynchronous Client Socket<ept id="p1">](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur le blocage et non bloquant <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>s, consultez <bpt id="p1">[</bpt>à l’aide d’un Socket Client asynchrone<ept id="p1">](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md)</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>You can use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class for both synchronous and asynchronous data transfer.</source>
          <target state="translated">Vous pouvez utiliser la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> classe pour les transferts de données synchrones et asynchrones.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>For more information about synchronous and asynchronous communication, see <bpt id="p1">[</bpt>Sockets<ept id="p1">](~/docs/framework/network-programming/sockets.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur les communications synchrones et asynchrones, consultez <bpt id="p1">[</bpt>Sockets<ept id="p1">](~/docs/framework/network-programming/sockets.md)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>To create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, you must provide a connected <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Pour créer un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, vous devez fournir un connecté <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>You can also specify what <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> permission the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> has over the provided <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Vous pouvez également spécifier <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> autorisation le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> sur fourni <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>By default, closing the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not close the provided <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Par défaut, la fermeture de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> ne ferme pas fourni <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>If you want the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> to have permission to close the provided <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, you must specify <ph id="ph3">`true`</ph> for the value of the <ph id="ph4">`ownsSocket`</ph> parameter.</source>
          <target state="translated">Si vous souhaitez que le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> soit autorisé à fermer fourni <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, vous devez spécifier <ph id="ph3">`true`</ph> pour la valeur de le <ph id="ph4">`ownsSocket`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> methods for simple single thread synchronous blocking I/O.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> méthodes unique pour les threads d’e/s bloquante synchrone.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>If you want to process your I/O using separate threads, consider using the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> methods, or the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> methods for communication.</source>
          <target state="translated">Si vous souhaitez traiter votre d’e/s à l’aide de threads séparés, envisagez d’utiliser le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> et <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> méthodes, ou le <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> et <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> méthodes pour la communication.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not support random access to the network data stream.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> ne prend pas en charge l’accès aléatoire aux flux de données réseau.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The value of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanSeek%2A&gt;</ph> property, which indicates whether the stream supports seeking, is always <ph id="ph2">`false`</ph>; reading the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Position%2A&gt;</ph> property, reading the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Length%2A&gt;</ph> property, or calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Seek%2A&gt;</ph> method will throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">La valeur de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanSeek%2A&gt;</ph> propriété qui indique si le flux prend en charge la recherche, est toujours <ph id="ph2">`false`</ph>; lecture le <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Position%2A&gt;</ph> propriété, la lecture de la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Length%2A&gt;</ph> propriété, ou en appelant le <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Seek%2A&gt;</ph> méthode lève un <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">Lire et écrire des opérations peuvent être effectuées simultanément sur une instance de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> classe sans avoir besoin pour la synchronisation.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">Tant qu’il existe un thread unique pour les opérations d’écriture et un thread unique pour les opérations de lecture, il n’y aura aucune interférence ne s’entre en lecture et écriture threads et aucune synchronisation n’est requise.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The following code example demonstrates how to create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> from a connected <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph><ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and perform basic synchronous blocking I/O.</source>
          <target state="translated">L’exemple de code suivant montre comment créer un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> de connecté <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph> <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> et effectuer une e/s bloquante synchrone de base.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.NetworkStream">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class.</source>
          <target state="translated">Crée une instance de la classe <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> qu'utilisera <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> pour envoyer et recevoir des données.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Crée une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> pour le <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est créé avec un accès en lecture/écriture spécifiée aux <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not own the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, so calling the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method does not close the <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> ne possède pas le <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, de sorte que l’appel du <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> méthode ne ferme pas le <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The following code example illustrates how to create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant montre comment créer un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> avec un <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> n'est pas connecté.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> du paramètre <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> n'a pas la valeur <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> est dans un état non bloquant.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> qu'utilisera <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> pour envoyer et recevoir des données.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>Set to <ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will take ownership of the <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">A la valeur <ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> prendra possession de <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> ownership.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> pour le <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> spécifié avec l'appartenance <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> spécifiée.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est créé avec un accès en lecture/écriture spécifiée aux <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>If the value of <ph id="ph1">`ownsSocket`</ph> parameter is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> takes ownership of the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method also closes the underlying <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Si la valeur de <ph id="ph1">`ownsSocket`</ph> paramètre est <ph id="ph2">`true`</ph>, le <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> prend possession de l’objet sous-jacent <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>et en appelant le <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> méthode ferme également sous-jacent <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with ownership of the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant crée un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> avec la propriété de la <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> n'est pas connecté.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>the value of the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated">la propriété <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> du paramètre <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> n'a pas la valeur <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>the <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated">le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> est dans un état non bloquant.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> qu'utilisera <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> pour envoyer et recevoir des données.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values that specify the type of access given to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> over the provided <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Combinaison d'opérations de bits des valeurs <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> qui spécifie le type d'accès accordé à <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> sur le <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> fourni.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified access rights.</source>
          <target state="translated">Crée une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> pour le <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> spécifié possédant les droits d'accès donnés.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with the specified access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est créé avec l’accès spécifié à l’objet <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not own the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, so calling the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method does not close the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Avec ce constructeur, le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> ne possède pas le <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, de sorte que l’appel du <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> méthode ne ferme pas sous-jacent <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">`access`</ph> jeux de paramètres la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> propriétés de la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">Si vous spécifiez <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, puis le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> autorise les appels à la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">Si vous spécifiez <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, puis le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> autorise les appels à la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, both method calls are allowed.</source>
          <target state="translated">Si vous spécifiez <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, les deux appels de méthode sont autorisés.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with the ability to read and write to the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant crée un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> avec la possibilité de lire et écrire dans le <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> n'est pas connecté.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated">la propriété <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> du paramètre <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> n'a pas la valeur <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>the <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated">le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> est dans un état non bloquant.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> qu'utilisera <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> pour envoyer et recevoir des données.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values that specifies the type of access given to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> over the provided <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Combinaison d'opérations de bits des valeurs <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> qui spécifie le type d'accès accordé à <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> sur le <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> fourni.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Set to <ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will take ownership of the <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">A la valeur <ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> prendra possession de <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified access rights and the specified <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> ownership.</source>
          <target state="translated">Crée une instance de la classe <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> pour le <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> spécifié possédant les droits d'accès et l'appartenance <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> donnés.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est créé avec un accès en lecture/écriture spécifiée aux <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If the value of the <ph id="ph1">`ownsSocket`</ph> parameter is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> takes ownership of the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method also closes the underlying <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Si la valeur de la <ph id="ph1">`ownsSocket`</ph> paramètre est <ph id="ph2">`true`</ph>, le <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> prend possession de l’objet sous-jacent <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>et en appelant le <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> méthode ferme également sous-jacent <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">`access`</ph> jeux de paramètres la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> et <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> propriétés de la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">Si vous spécifiez <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, puis le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> autorise les appels à la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">Si vous spécifiez <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, puis le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> autorise les appels à la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, both method calls are allowed.</source>
          <target state="translated">Si vous spécifiez <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, les deux appels de méthode sont autorisés.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with the ability to read and write to the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">L’exemple de code suivant crée un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> avec la possibilité de lire et écrire dans le <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Ownership of the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is given to this <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> by specifying <ph id="ph3">`true`</ph> for the <ph id="ph4">`ownsSocket`</ph> parameter.</source>
          <target state="translated">La propriété de la <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> est accordée à <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> en spécifiant <ph id="ph3">`true`</ph> pour la <ph id="ph4">`ownsSocket`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> n'est pas connecté.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> du paramètre <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> n'a pas la valeur <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> est dans un état non bloquant.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that is the location in memory to store data read from the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Tableau de type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> qui correspond à l'emplacement dans la mémoire pour stocker des données lues à partir de <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin storing the data.</source>
          <target state="translated">Emplacement dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> auquel commencer le stockage des données.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The number of bytes to read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Nombre d'octets à lire à partir de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that is executed when <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> completes.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> exécuté lorsque <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that contains any additional user-defined data.</source>
          <target state="translated">Objet contenant toutes les données supplémentaires définies par l'utilisateur.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Démarre une lecture asynchrone de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> qui représente l'appel asynchrone.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method starts asynchronously reading data from the incoming network buffers.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> méthode démarre la lecture asynchrone des données à partir des tampons réseau entrants.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method gives you the ability to receive data within a separate execution thread.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> méthode vous donne la possibilité de recevoir des données dans un thread d’exécution distinct.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You must create a callback method that implements the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate and pass its name to the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">Vous devez créer une méthode de rappel qui implémente le <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> délégué et passe son nom à la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>At the very minimum, your <ph id="ph1">`state`</ph> parameter must contain the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Au minimum, votre <ph id="ph1">`state`</ph> paramètre doit contenir le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Because you will want to obtain the received data within your callback method, you should create a small class or structure to hold a read buffer and any other useful information.</source>
          <target state="translated">Étant donné que vous devez obtenir les données reçues dans votre méthode de rappel, vous devez créer une petite classe ou une structure contenant un tampon de lecture et d’autres informations utiles.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the structure or class instance to the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method through the <ph id="ph2">`state`</ph> parameter.</source>
          <target state="translated">Passez l’instance de classe ou structure à la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> méthode via la <ph id="ph2">`state`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Your callback method should call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method.</source>
          <target state="translated">Votre méthode de rappel doit appeler la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>When your application calls <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, the system will wait until data is received or an error occurs, and then the system will use a separate thread to execute the specified callback method, and blocks on <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> until the provided <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> reads data or throws an exception.</source>
          <target state="translated">Lorsque votre application appelle <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, le système attend jusqu'à ce que les données reçues ou une erreur se produit, puis le système utilise un thread séparé pour exécuter la méthode de rappel spécifiée et se bloque sur <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> jusqu'à fourni <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> lit données ou lève une exception.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you want the original thread to block after you call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">Si vous souhaitez que le thread d’origine se bloque après que vous appelez le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> méthode, utilisez la <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Call <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> in the callback method when you want the original thread to continue executing.</source>
          <target state="translated">Appelez <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> dans la méthode de rappel lorsque vous souhaitez que le thread d’origine pour continuer l’exécution.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>For additional information about writing callback methods, see <bpt id="p1">[</bpt>Marshaling a Delegate as a Callback Method<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’écriture de méthodes de rappel, consultez <bpt id="p1">[</bpt>Marshaling d’un délégué comme méthode de rappel<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method reads as much data as is available, up to the number of bytes specified by the <ph id="ph2">`size`</ph> parameter.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> méthode lit autant de données n’est disponible, jusqu’au nombre d’octets spécifié par le <ph id="ph2">`size`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si vous recevez un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, vérifiez le <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété pour déterminer si elle a été provoquée par un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Dans ce cas, utilisez le <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> propriété à obtenir le code d’erreur spécifique et reportez-vous à la documentation sur les codes d’erreur de l’API Windows Sockets version 2 dans MSDN pour obtenir une description détaillée de l’erreur.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">Lire et écrire des opérations peuvent être effectuées simultanément sur une instance de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> classe sans avoir besoin pour la synchronisation.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">Tant qu’il existe un thread unique pour les opérations d’écriture et un thread unique pour les opérations de lecture, il n’y aura aucune interférence ne s’entre en lecture et écriture threads et aucune synchronisation n’est requise.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> to read data asynchronously from the network stream.</source>
          <target state="translated">Le code suivant utilise des exemple <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> pour lire des données de façon asynchrone à partir du flux réseau.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`myReadCallBack`</ph> method implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate and is called by the system when <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> returns.</source>
          <target state="translated">Le <ph id="ph1">`myReadCallBack`</ph> méthode implémente la <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> délégué et est appelée par le système lorsque <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> renvoie.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of the <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> paramater.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est supérieure à la longueur du paramètre <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> est supérieur à la longueur de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> moins la valeur du paramètre <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> sous-jacent est fermé.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>There was a failure while reading from the network.</source>
          <target state="translated">Une erreur s'est produite pendant la lecture à partir du réseau.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Une erreur s’est produite pendant l’accès au socket.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the data to write to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Tableau de type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> qui contient les données à écrire dans <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin sending the data.</source>
          <target state="translated">Emplacement dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> auquel commencer l’envoi des données.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The number of bytes to write to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Nombre d'octets à écrire dans <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that is executed when <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> completes.</source>
          <target state="translated">Délégué <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> exécuté lorsque <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> se termine.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that contains any additional user-defined data.</source>
          <target state="translated">Objet contenant toutes les données supplémentaires définies par l'utilisateur.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write to a stream.</source>
          <target state="translated">Démarre une écriture asynchrone dans un flux.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> qui représente l'appel asynchrone.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method starts an asynchronous send operation to the remote host.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> méthode démarre une opération d’envoi asynchrone à l’hôte distant.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method gives you the ability to send data within a separate execution thread.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> méthode vous donne la possibilité d’envoyer des données dans un thread d’exécution distinct.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You must create a callback method that implements the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate and pass its name to the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method.</source>
          <target state="translated">Vous devez créer une méthode de rappel qui implémente le <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> délégué et passe son nom à la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>At the very minimum, your <ph id="ph1">`state`</ph> parameter must contain the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Au minimum, votre <ph id="ph1">`state`</ph> paramètre doit contenir le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If your callback needs more information, you can create a small class or structure to hold the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> and the other required information.</source>
          <target state="translated">Si votre rappel a besoin de plus d’informations, vous pouvez créer une petite classe ou une structure pour contenir le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> et les autres informations requises.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the structure or class instance to the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method through the <ph id="ph2">`state`</ph> parameter.</source>
          <target state="translated">Passez l’instance de classe ou structure à la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> méthode via la <ph id="ph2">`state`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Your callback method should implement the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method.</source>
          <target state="translated">Votre méthode de rappel doit implémenter la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>When your application calls <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, the system uses a separate thread to execute the specified callback method, and blocks on <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> until the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> sends the number of bytes requested or throws an exception.</source>
          <target state="translated">Lorsque votre application appelle <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, le système utilise un thread séparé pour exécuter la méthode de rappel spécifiée et se bloque sur <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> jusqu'à ce que le <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> envoie le nombre d’octets demandé ou lève une exception.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you want the original thread to block after you call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">Si vous souhaitez que le thread d’origine se bloque après que vous appelez le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> méthode, utilisez la <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Call <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> in the callback method when you want the original thread to continue executing.</source>
          <target state="translated">Appelez <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> dans la méthode de rappel lorsque vous souhaitez que le thread d’origine pour continuer l’exécution.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>For additional information about writing callback methods, see <bpt id="p1">[</bpt>Marshaling a Delegate as a Callback Method<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’écriture de méthodes de rappel, consultez <bpt id="p1">[</bpt>Marshaling d’un délégué comme méthode de rappel<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si vous recevez un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, vérifiez le <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété pour déterminer si elle a été provoquée par un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Dans ce cas, utilisez le <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> propriété à obtenir le code d’erreur spécifique et reportez-vous à la documentation sur les codes d’erreur de l’API Windows Sockets version 2 dans MSDN pour obtenir une description détaillée de l’erreur.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">Lire et écrire des opérations peuvent être effectuées simultanément sur une instance de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> classe sans avoir besoin pour la synchronisation.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">Tant qu’il existe un thread unique pour les opérations d’écriture et un thread unique pour les opérations de lecture, il n’y aura aucune interférence ne s’entre en lecture et écriture threads et aucune synchronisation n’est requise.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> to write data asynchronously to a network stream.</source>
          <target state="translated">Le code suivant utilise des exemple <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> pour écrire des données de façon asynchrone dans un flux réseau.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`myWriteCallBack`</ph> method implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate and is called by the system when <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> returns.</source>
          <target state="translated">Le <ph id="ph1">`myWriteCallBack`</ph> méthode implémente la <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> délégué et est appelée par le système lorsque <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> renvoie.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est supérieur à la longueur de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="size" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="size" /&gt;</ph> est supérieur à la longueur de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> moins la valeur du paramètre <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> sous-jacent est fermé.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>There was a failure while writing to the network.</source>
          <target state="translated">Une erreur s'est produite pendant l'écriture sur le réseau.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Une erreur s’est produite pendant l’accès au socket.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> supports reading.</source>
          <target state="translated">Obtient une valeur indiquant si <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> prend en charge la lecture.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be read from the stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les données du flux peuvent être lues ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">La valeur par défaut est <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> est <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> autorise les appels à la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>Provide the appropriate <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> enumerated value in the constructor to set the readability and writability of the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Fournir les informations appropriées <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> énumérées dans le constructeur pour définir la lisibilité et écriture de la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> propriété est définie lorsque le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est initialisé.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The following code example checks <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> to verify that the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable.</source>
          <target state="translated">Le code suivant exemple vérifie <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> pour vérifier que le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est accessible en lecture.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>It then performs a read operation on the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Il effectue ensuite une opération de lecture sur le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source>Gets a value that indicates whether the stream supports seeking.</source>
          <target state="translated">Obtient une valeur qui indique si le flux prend en charge la recherche.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source>This property is not currently supported.This property always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Cette propriété n'est pas actuellement prise en charge. Elle retourne toujours <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases to indicate that <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> cannot seek a specific location in the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> dans tous les cas pour indiquer que <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> ne peut pas rechercher un emplacement spécifique dans le flux.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source>Indicates whether timeout properties are usable for <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Indique si les propriétés de délai d'attente peuvent être utilisées pour <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> dans tous les cas.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source>This property is present because it is inherited from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>.</source>
          <target state="translated">Cette propriété est présente, car elle est héritée <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> supports writing.</source>
          <target state="translated">Obtient une valeur indiquant si <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> prend en charge l'écriture.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be written to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les données peuvent être écrites dans <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">La valeur par défaut est <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> est <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> autorise les appels à la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>Provide the appropriate <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> enumerated value in the constructor to set the readability and writability of the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Fournir les informations appropriées <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> énumérées dans le constructeur pour définir la lisibilité et écriture de la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> propriété est définie lorsque le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est initialisé.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The following code example checks <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> to verify that the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">Le code suivant exemple vérifie <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> pour vérifier que le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est accessible en écriture.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>It then performs a write operation on the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Il effectue ensuite une opération d’écriture sur le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing.</source>
          <target state="translated">Entier signé 32 bits qui spécifie le nombre de millisecondes à attendre avant d'envoyer les données restantes éventuelles, préalablement à la fermeture.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>Closes the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> after waiting the specified time to allow data to be sent.</source>
          <target state="translated">Ferme <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> après avoir attendu le temps spécifié pour permettre l'envoi des données.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method frees both unmanaged and managed resources associated with the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> méthode libère les ressources non managées et managées associées à la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> owns the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, it is closed as well.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> possède sous-jacent <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, il est également fermé.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>If a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> was associated with a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method will close the TCP connection, but not dispose of the associated <ph id="ph4">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</source>
          <target state="translated">Si un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> a été associé à un <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, le <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> méthode fermera la connexion TCP, mais ne dispose pas de la <ph id="ph4">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> est inférieur à -1.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Gets a value that indicates whether data is available on the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> to be read.</source>
          <target state="translated">Obtient une valeur indiquant si des données sont disponibles sur le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> à lire.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data is available on the stream to be read; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si des données sont disponibles dans le flux à lire ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> property to determine if data is ready to be read.</source>
          <target state="translated">Utilisez le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> propriété pour déterminer si les données sont prêtes à être lu.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, a call to <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> returns immediately.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> est <ph id="ph2">`true`</ph>, un appel à <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> retourne immédiatement.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>If the remote host shuts down or closes the connection, <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> may throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si l’hôte distant arrête ou ferme la connexion, <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> peut lever un <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The following code example reads from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> as long as data is available.</source>
          <target state="translated">L’exemple de code suivant lit le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> tant que les données sont disponibles.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> sous-jacent est fermé.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Utilisez la propriété <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> pour obtenir le code d’erreur spécifique et reportez-vous à la documentation sur les codes d’erreur de l’API Windows Sockets version 2 dans MSDN pour obtenir une description détaillée de l’erreur.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour libérer les ressources managées et non managées ; <ph id="ph2">&lt;see langword="false" /&gt;</ph> pour ne libérer que les ressources non managées.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Libère les ressources non managées utilisées par <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> et libère éventuellement les ressources managées.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Cette méthode est appelée par le public <ph id="ph1">`Dispose`</ph> (méthode) et le <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> appelle la méthode protégée <ph id="ph2">`Dispose(Boolean)`</ph> méthode avec la <ph id="ph3">`disposing`</ph> paramètre la valeur <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> appelle <ph id="ph2">`Dispose`</ph> avec <ph id="ph3">`disposing`</ph> la valeur <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> references.</source>
          <target state="translated">Si le paramètre <ph id="ph1">`disposing`</ph> a la valeur <ph id="ph2">`true`</ph>, cette méthode libère toutes les ressources détenues par les objets managés référencés par ce <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">Cette méthode appelle la méthode <ph id="ph1">`Dispose`</ph> de chaque objet référencé.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> peut être appelée plusieurs fois par d'autres objets.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">Lors de la substitution de <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, veillez à ne pas référencer des objets qui ont été préalablement supprimés lors d'un appel précédent à <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’implémentation <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, consultez <bpt id="p1">[</bpt>implémentant une méthode de suppression<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">Pour plus d’informations sur <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> et <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, consultez <bpt id="p1">[</bpt>de nettoyage des ressources non managées<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> et <bpt id="p2">[</bpt>substitution de la méthode Finalize<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents an asynchronous call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> qui représente un appel asynchrone.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Handles the end of an asynchronous read.</source>
          <target state="translated">Gère la fin d'une lecture asynchrone.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Nombre d'octets lus à partir de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method completes the asynchronous read operation started in the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> méthode termine l’opération de lecture asynchrone démarrée dans le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Before calling <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, you need to create a callback method that implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated">Avant d’appeler <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, vous devez créer une méthode de rappel qui implémente le <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>This callback method executes in a separate thread and is called by the system after <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> returns.</source>
          <target state="translated">Cette méthode de rappel s’exécute dans un thread distinct et est appelée par le système après <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> retourne.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The callback method must accept the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method as a parameter.</source>
          <target state="translated">La méthode de rappel doit accepter le <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> retourné à partir de la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> méthode en tant que paramètre.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Within the callback method, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to obtain the state object passed to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">Dans la méthode de rappel, appelez le <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> propriété de la <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> pour obtenir l’objet d’état passé à la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Extract the receiving <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> from this state object.</source>
          <target state="translated">Extraire la réception <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> à partir de cet objet d’état.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>After obtaining the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method to successfully complete the read operation and return the number of bytes read.</source>
          <target state="translated">Après avoir obtenu le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, appelez le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> méthode pour terminer l’opération de lecture et retourner le nombre d’octets lus.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method blocks until data is available.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> méthode est bloquée jusqu'à ce que les données sont disponibles.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method reads as much data as is available up to the number of bytes specified in the <ph id="ph2">`size`</ph> parameter of the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> méthode lit autant de données est disponible jusqu’au nombre d’octets spécifié dans le <ph id="ph2">`size`</ph> paramètre de la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If the remote host shuts down the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> connection and all available data has been received, the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method completes immediately and returns zero bytes.</source>
          <target state="translated">Si l’hôte distant arrête la <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> connexion et toutes les données disponibles ont été reçues, le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> méthode se termine immédiatement et retourne zéro octet.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>To obtain the received data, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>, and extract the buffer contained in the resulting state object.</source>
          <target state="translated">Pour obtenir les données reçues, appelez le <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> propriété de la <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>et extrayez la mémoire tampon contenue dans l’objet d’état obtenu.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si vous recevez un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, vérifiez le <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété pour déterminer si elle a été provoquée par un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Dans ce cas, utilisez le <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> propriété à obtenir le code d’erreur spécifique et reportez-vous à la documentation sur les codes d’erreur de l’API Windows Sockets version 2 dans MSDN pour obtenir une description détaillée de l’erreur.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>In the following code example, <ph id="ph1">`myReadCallback`</ph> is provided to <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> as the callback method.</source>
          <target state="translated">Dans l’exemple de code suivant, <ph id="ph1">`myReadCallback`</ph> est fourni à <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> comme méthode de rappel.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> is implemented in <ph id="ph2">`myReadCallback`</ph> to complete the asynchronous read call started by <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> est implémenté dans <ph id="ph2">`myReadCallback`</ph> fin asynchrone de lecture appel démarré par <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> sous-jacent est fermé.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Une erreur s’est produite pendant l’accès au socket.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> qui représente l'appel asynchrone.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Handles the end of an asynchronous write.</source>
          <target state="translated">Gère la fin d'une écriture asynchrone.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> completes the asynchronous send operation started in <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> termine l’opération d’envoi asynchrone démarrée dans <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Before calling <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, you need to create a callback method that implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated">Avant d’appeler <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, vous devez créer une méthode de rappel qui implémente le <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> déléguer.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>This callback method executes in a separate thread and is called by the system after <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> returns.</source>
          <target state="translated">Cette méthode de rappel s’exécute dans un thread distinct et est appelée par le système après <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> retourne.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The callback method must accept the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method as a parameter.</source>
          <target state="translated">La méthode de rappel doit accepter le <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> retourné à partir de la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> méthode en tant que paramètre.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Within the callback method, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">`IAsyncResult`</ph> parameter to obtain the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Dans la méthode de rappel, appelez le <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> propriété de la <ph id="ph2">`IAsyncResult`</ph> paramètre pour obtenir le <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>After obtaining the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, you can call the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method to successfully complete the send operation and return the number of bytes sent.</source>
          <target state="translated">Après avoir obtenu le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, vous pouvez appeler la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> méthode pour terminer l’opération d’envoi et de retourner le nombre d’octets envoyés avec succès.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method blocks until the requested number of bytes are sent.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> méthode est bloquée jusqu'à ce que le nombre d’octets demandés est envoyé.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si vous recevez un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, vérifiez le <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété pour déterminer si elle a été provoquée par un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Dans ce cas, utilisez le <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> propriété à obtenir le code d’erreur spécifique et reportez-vous à la documentation sur les codes d’erreur de l’API Windows Sockets version 2 dans MSDN pour obtenir une description détaillée de l’erreur.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>In the following code example, <ph id="ph1">`myWriteCallback`</ph> is provided to <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> as the callback method.</source>
          <target state="translated">Dans l’exemple de code suivant, <ph id="ph1">`myWriteCallback`</ph> est fourni à <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> comme méthode de rappel.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> is implemented in <ph id="ph2">`myWriteCallback`</ph> to complete the asynchronous write call started by <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> est implémenté dans <ph id="ph2">`myWriteCallback`</ph> pour terminer l’appel d’écriture asynchrone démarrée par <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> sous-jacent est fermé.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>An error occurred while writing to the network.</source>
          <target state="translated">Une erreur s'est produite pendant l'écriture sur le réseau.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Une erreur s’est produite pendant l’accès au socket.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Libère toutes les ressources utilisées par <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Cette méthode se substitue à <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>Application code should not call this method; an object's <ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Code d’application ne doit pas appeler cette méthode ; d’un objet <ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> méthode est appelée automatiquement lors du garbage collection, à moins que la finalisation par le garbage collector a été désactivée par un appel à la <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>For more information about using the Finalize method, see <bpt id="p1">[</bpt>Finalize Methods and Destructors<ept id="p1">](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>Cleaning Up Unmanaged Resources<ept id="p2">](~/docs/standard/garbage-collection/unmanaged.md)</ept>, and <bpt id="p3">[</bpt>Overriding the Finalize Method<ept id="p3">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’utilisation de la méthode Finalize, consultez <bpt id="p1">[</bpt>destructeurs et méthodes Finalize<ept id="p1">](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>de nettoyage des ressources non managées<ept id="p2">](~/docs/standard/garbage-collection/unmanaged.md)</ept>, et <bpt id="p3">[</bpt>substitution de la méthode Finalize<ept id="p3">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept> .</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>Flushes data from the stream.</source>
          <target state="translated">Vide les données du flux.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>This method is reserved for future use.</source>
          <target state="translated">Cette méthode est réservée à une utilisation ultérieure.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> method implements the <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph> method; however, because <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is not buffered, it has no affect on network streams.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> méthode implémente le <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph> méthode ; Toutefois, étant donné que <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est ne pas mis en mémoire tampon, il n’a aucun effet sur les flux de réseau.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> method does not throw an exception.</source>
          <target state="translated">Appel de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> méthode ne lève pas d’exception.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A cancellation token used to propagate notification that this  operation should be canceled.</source>
          <target state="translated">Jeton d’annulation utilisé pour propager la notification d’annulation de cette opération.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Flushes data from the stream as an asynchronous operation.</source>
          <target state="translated">Vide les données du flux en tant qu'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Retourne <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Objet de tâche représentant l'opération asynchrone.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>This operation will not block.</source>
          <target state="translated">Cette opération ne bloque pas.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after data has been flushed from the stream for the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> instance.</source>
          <target state="translated">Retourné <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objet s’achève une fois les données a été vidées à partir du flux pour le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> instance.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>Gets the length of the data available on the stream.</source>
          <target state="translated">Obtient la longueur des données disponibles dans le flux.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>This property is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">Cette propriété n'est pas actuellement prise en charge et lève toujours <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>The length of the data available on the stream.</source>
          <target state="translated">Longueur des données disponibles dans le flux.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>Any use of this property.</source>
          <target state="translated">Toute utilisation de cette propriété.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>Gets or sets the current position in the stream.</source>
          <target state="translated">Obtient ou définit la position actuelle dans le flux.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>This property is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">Cette propriété n'est pas actuellement prise en charge et lève toujours <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>The current position in the stream.</source>
          <target state="translated">Position actuelle dans le flux.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>Any use of this property.</source>
          <target state="translated">Toute utilisation de cette propriété.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that is the location in memory to store data read from the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Tableau de type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> qui correspond à l'emplacement dans la mémoire pour stocker des données lues à partir de <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin storing the data to.</source>
          <target state="translated">Emplacement dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> auquel commencer le stockage des données.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Nombre d'octets à lire à partir de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads data from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Lit les données de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>, or 0 if the socket is closed.</source>
          <target state="translated">Nombre d’octets lus à partir de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>, ou 0 si le socket est fermé.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This method reads data into the <ph id="ph1">`buffer`</ph> parameter and returns the number of bytes successfully read.</source>
          <target state="translated">Cette méthode lit les données dans le <ph id="ph1">`buffer`</ph> paramètre et retourne le nombre d’octets lus correctement.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the socket is closed, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method returns 0.</source>
          <target state="translated">Si le socket est fermé, le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> méthode renvoie la valeur 0.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> operation reads as much data as is available, up to the number of bytes specified by the <ph id="ph2">`size`</ph> parameter.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> opération lit autant de données n’est disponible, jusqu’au nombre d’octets spécifié par le <ph id="ph2">`size`</ph> paramètre.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the remote host shuts down the connection, and all available data has been received, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method completes immediately and return zero bytes.</source>
          <target state="translated">Si l’hôte distant arrête la connexion, et toutes les données disponibles ont été reçues, le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> méthode se termine immédiatement et retourne zéro octet.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Check to see if the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property.</source>
          <target state="translated">Vérifiez si le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est lisible en appelant le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If you attempt to read from a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> that is not readable, you will get an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">Si vous tentez de lire un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> qui n’est pas lisible, vous obtiendrez une <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si vous recevez un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, vérifiez le <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété pour déterminer si elle a été provoquée par un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Dans ce cas, utilisez le <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> propriété à obtenir le code d’erreur spécifique et reportez-vous à la documentation sur les codes d’erreur de l’API Windows Sockets version 2 dans MSDN pour obtenir une description détaillée de l’erreur.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> to determine if data is available to be read.</source>
          <target state="translated">Le code suivant utilise des exemple <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> pour déterminer si les données sont disponibles pour la lecture.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If data is available, it reads from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Si les données sont disponibles, il lit à partir de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est supérieur à la longueur de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="size" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="size" /&gt;</ph> est supérieur à la longueur de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> moins la valeur du paramètre <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Une erreur s’est produite pendant l’accès au socket.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> sous-jacent est fermé.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>There is a failure reading from the network.</source>
          <target state="translated">Une erreur s'est produite pendant la lecture à partir du réseau.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>Gets or sets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> can be read.</source>
          <target state="translated">Obtient ou définit une valeur indiquant si <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> peut être lu.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> can be read; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> pour indiquer que <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> peut être lu ; sinon, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">La valeur par défaut est <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>You must derive from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class to use the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property.</source>
          <target state="translated">Vous devez dériver la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> classe à utiliser le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> est <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> autorise les appels à la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>You can also determine whether a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable by checking the publicly accessible <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property.</source>
          <target state="translated">Vous pouvez également déterminer si un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est lisible en vérifiant accessible publiquement <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> propriété est définie lorsque le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est initialisé.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>In the following code example, the <ph id="ph1">`CanCommunicate`</ph> property checks the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property to determine if the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable.</source>
          <target state="translated">Dans l’exemple de code suivant, le <ph id="ph1">`CanCommunicate`</ph> propriété vérifications le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> propriété pour déterminer si le <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est accessible en lecture.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>Gets or sets the amount of time that a read operation blocks waiting for data.</source>
          <target state="translated">Obtient ou définit la durée pendant laquelle une opération de lecture reste bloquée en attendant des données.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>A <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that specifies the amount of time, in milliseconds, that will elapse before a read operation fails.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> qui spécifie la durée, en millisecondes, qui doit s'écouler avant l'échec d'une opération de lecture.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The default value, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, specifies that the read operation does not time out.</source>
          <target state="translated">La valeur par défaut, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, spécifie que l'opération de lecture n'expire pas.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>If the read operation does not complete within the time specified by this property, the read operation throws an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">Si l’opération de lecture ne se termine pas dans le délai spécifié par cette propriété, l’opération de lecture lève une <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>This property affects only synchronous reads performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">Cette propriété affecte uniquement les lectures synchrones exécutées en appelant le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>This property does not affect asynchronous reads performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">Cette propriété n’affecte pas les lectures asynchrones exécutées en appelant le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The following code example sets the read time-out for a network stream to 10 milliseconds.</source>
          <target state="translated">L’exemple de code suivant définit le délai d’attente de lecture d’un flux de réseau à 10 millisecondes.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The value specified is less than or equal to zero and is not <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">La valeur spécifiée est inférieure ou égale à zéro et n'est pas <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This parameter is not used.</source>
          <target state="translated">Ce paramètre n'est pas utilisé.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This parameter is not used.</source>
          <target state="translated">Ce paramètre n'est pas utilisé.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the current position of the stream to the given value.</source>
          <target state="translated">Affecte la valeur donnée à la position actuelle du flux.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This method is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">Cette méthode n'est pas actuellement prise en charge et lève toujours <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The position in the stream.</source>
          <target state="translated">Position dans le flux.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Any use of this property.</source>
          <target state="translated">Toute utilisation de cette propriété.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>This parameter is not used.</source>
          <target state="translated">Ce paramètre n'est pas utilisé.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>Sets the length of the stream.</source>
          <target state="translated">Définit la longueur du flux.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>This method always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">Cette méthode lève toujours <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>Any use of this property.</source>
          <target state="translated">Toute utilisation de cette propriété.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Obtient le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> sous-jacent.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that represents the underlying network connection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> qui représente la connexion réseau sous-jacente.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> can use this property to get the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Les classes dérivées de <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> pouvez utiliser cette propriété pour obtenir l’objet sous-jacent <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Use the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Socket%2A&gt;</ph> property if you require access beyond that which <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> provides.</source>
          <target state="translated">Utilisez sous-jacent <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> retourné à partir de la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Socket%2A&gt;</ph> propriété si vous avez besoin d’accéder aux au-delà de celles qui <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> fournit.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>This property is accessible only through this class or a derived class.</source>
          <target state="translated">Cette propriété est accessible uniquement par le biais de cette classe ou une classe dérivée.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>The following code example retrieves the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to verify an active connection.</source>
          <target state="translated">L’exemple de code suivant récupère sous-jacent <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> pour vérifier une connexion active.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the data to write to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Tableau de type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> qui contient les données à écrire dans <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to start writing data.</source>
          <target state="translated">Emplacement dans <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> à partir duquel commencer l’écriture des données.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Nombre d'octets à écrire dans <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes data to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Écrit des données dans <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method starts at the specified <ph id="ph2">`offset`</ph> and sends <ph id="ph3">`size`</ph> bytes from the contents of <ph id="ph4">`buffer`</ph> to the network.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> méthode commence à la position spécifiée <ph id="ph2">`offset`</ph> et envoie <ph id="ph3">`size`</ph> octets à partir du contenu de <ph id="ph4">`buffer`</ph> au réseau.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method blocks until the requested number of bytes is sent or a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> is thrown.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> méthode est bloquée jusqu'à ce que le nombre d’octets demandé est envoyé ou une <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> est levée.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Si vous recevez un <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, utilisez le <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> propriété à obtenir le code d’erreur spécifique et reportez-vous à la documentation sur les codes d’erreur de l’API Windows Sockets version 2 dans MSDN pour obtenir une description détaillée de l’erreur.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Check to see if the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable by accessing the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">Vérifiez si le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est accessible en écriture en accédant à la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you attempt to write to a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> that is not writable, you will get an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">Si vous tentez d’écrire dans un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> qui n’est pas accessible en écriture, vous obtiendrez une <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si vous recevez un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, vérifiez le <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propriété pour déterminer si elle a été provoquée par un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example checks to see whether the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">Le code suivant exemple vérifie si le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est accessible en écriture.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If it is, then <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> is used to write a small message.</source>
          <target state="translated">Si elle est ensuite <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> est utilisé pour écrire un message de petite taille.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> a la valeur <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> est supérieur à la longueur de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="size" /&gt;</ph> est inférieur à 0.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated">Le paramètre <ph id="ph1">&lt;paramref name="size" /&gt;</ph> est supérieur à la longueur de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> moins la valeur du paramètre <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>There was a failure while writing to the network.</source>
          <target state="translated">Une erreur s'est produite pendant l'écriture sur le réseau.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Une erreur s’est produite pendant l’accès au socket.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">Le <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> est fermé.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- ou -</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>There was a failure reading from the network.</source>
          <target state="translated">Une erreur s'est produite pendant la lecture à partir du réseau.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is writable.</source>
          <target state="translated">Obtient une valeur qui indique si <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> est accessible en écriture.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be written to the stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si les données peuvent être écrites dans le flux ; sinon, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">La valeur par défaut est <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>You must derive from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class to use the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property.</source>
          <target state="translated">Vous devez dériver la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> classe à utiliser le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> est <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> autorise les appels à la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>You can also determine whether a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable by checking the publicly accessible <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">Vous pouvez également déterminer si un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est accessible en écriture en vérifiant accessible publiquement <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> propriété.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> propriété est définie lorsque le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est initialisé.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>In the following code example, the <ph id="ph1">`CanCommunicate`</ph> property checks the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property to determine if the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">Dans l’exemple de code suivant, le <ph id="ph1">`CanCommunicate`</ph> propriété vérifie le <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> propriété pour déterminer si le <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> est accessible en écriture.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>Gets or sets the amount of time that a write operation blocks waiting for data.</source>
          <target state="translated">Obtient ou définit la durée pendant laquelle une opération d'écriture reste bloquée en attendant des données.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>A <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that specifies the amount of time, in milliseconds, that will elapse before a write operation fails.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> qui spécifie la durée, en millisecondes, qui doit s'écouler avant l'échec d'une opération d'écriture.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The default value, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, specifies that the write operation does not time out.</source>
          <target state="translated">La valeur par défaut, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, spécifie que l'opération d'écriture n'expire pas.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>If the write operation does not complete within the time specified by this property, the write operation throws a <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">Si l’opération d’écriture ne se termine pas dans le délai spécifié par cette propriété, l’opération d’écriture lève un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>This property affects only synchronous write operations performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">Cette propriété affecte les opérations d’écriture synchrone uniquement effectuées en appelant le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>This property does not affect asynchronous writes performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method.</source>
          <target state="translated">Cette propriété n’affecte pas les écritures asynchrones exécutées en appelant le <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> (méthode).</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The following code example sets the write time-out for a network stream to 10 milliseconds.</source>
          <target state="translated">L’exemple de code suivant définit le délai d’attente de l’écriture d’un flux de réseau à 10 millisecondes.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The value specified is less than or equal to zero and is not <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">La valeur spécifiée est inférieure ou égale à zéro et n'est pas <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>