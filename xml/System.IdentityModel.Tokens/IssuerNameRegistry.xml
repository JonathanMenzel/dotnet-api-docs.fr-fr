<Type Name="IssuerNameRegistry" FullName="System.IdentityModel.Tokens.IssuerNameRegistry">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6192ef5b23fb8f0d2befe5afca574fba64762992" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52609053" /></Metadata><TypeSignature Language="C#" Value="public abstract class IssuerNameRegistry : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit IssuerNameRegistry extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.IssuerNameRegistry" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class IssuerNameRegistry&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class IssuerNameRegistry abstract : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type IssuerNameRegistry = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Classe de base abstraite pour un registre des noms d'émetteurs. Registre de noms d'émetteurs utilisé pour associer un nom mnémonique avec le matériel de chiffrement qui est nécessaire pour vérifier les signatures des jetons produits par l'émetteur correspondant. Le Registre des noms d'émetteurs contient la liste des émetteurs qui sont approuvés par une application de partie de confiance (RP).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le Registre des noms d’émetteur est utilisé pour associer un nom mnémonique avec le matériel de chiffrement nécessaire pour vérifier les signatures des jetons produits par l’émetteur correspondant. Ce nom est ensuite utilisé pour définir le <xref:System.Security.Claims.Claim.Issuer%2A> ou <xref:System.Security.Claims.Claim.OriginalIssuer%2A> propriété d’une revendication. Les méthodes exposées par la <xref:System.IdentityModel.Tokens.IssuerNameRegistry> classe sont appelées à partir du pipeline par le Gestionnaire de jetons de sécurité qui traite le jeton. Jetons signés par un matériel qui n’est mappé à un registre des noms d’émetteur sont ignorées comme non approuvé. Le nom retourné par le Registre de nom de l’émetteur doit être unique dans le contexte d’une application de partie de confiance.  
  
 Dans le code, vous pouvez spécifier le Registre de nom d’émetteur à utiliser en définissant le <xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.IssuerNameRegistry%2A?displayProperty=nameWithType> propriété. Dans un fichier de configuration, le Registre de nom de l’émetteur peut être spécifié en spécifiant le [ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) élément sous le [ &lt;securityTokenHandlerConfiguration &gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/securitytokenhandlerconfiguration.md) élément.  
  
 Windows Identity Foundation (WIF) fournit une implémentation de la <xref:System.IdentityModel.Tokens.IssuerNameRegistry> classe prêts à l’emploi : le <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry> classe. Lorsque vous utilisez cette implémentation, vous pouvez spécifier la liste des émetteurs approuvés dans le fichier de configuration de l’application de partie de confiance sous la [ &lt;trustedIssuers&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/trustedissuers.md) élément, qui est un élément enfant de le `<issuerNameRegistry>`élément lorsque la <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>.class est référencé dans l’élément `type` attribut. Sous le `<trustedIssuers>` élément, chaque nom de l’émetteur est mappé au certificat X.509 qui doit être utilisé pour vérifier sa signature.  
  
 Pour créer un registre des noms d’émetteur personnalisé, vous devez substituer la <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> (méthode). Cette méthode retourne le nom de l’émetteur de jeton de sécurité spécifié. Vous pouvez éventuellement substituer le <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%2CSystem.String%29?displayProperty=nameWithType> méthode pour fournir un mécanisme affinage lors de la récupération des noms de l’émetteur et le <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName%2A> méthode si vous souhaitez fournir des jetons de nom de l’émetteur pour Windows qui est différente de <xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>. Remplacer le <xref:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration%2A> méthode pour permettre à votre Registre de nom d’émetteur à initialiser à partir d’un fichier de configuration.  
  
   
  
## Examples  
 Le code suivant illustre une implémentation de la <xref:System.IdentityModel.Tokens.IssuerNameRegistry> classe qui accepte uniquement les émetteurs qui utilisent des certificats avec l’objet « CN = localhost ».  
  
> [!WARNING]
>  Le code suivant est uniquement à des fins d’illustration. Validation des certificats selon le nom de l’objet n’est pas une bonne pratique. Ce code ne doit pas être utilisé comme mise en production.  
  
 [!code-csharp[WifIssuerNameRegistry#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifissuernameregistry/cs/mvcwepapp/trustedissuernameregistry.cs#1)]  
  
 Voici le code XML nécessaire pour configurer une application avec le Registre des noms d’émetteurs approuvés.  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <issuerNameRegistry type="System.IdentityModel.Samples.TrustedIssuerNameRegistry, MyApp" />  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry" />
    <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
    <related type="Article" href="https://msdn.microsoft.com/library/58b39d12-c953-40c4-88af-d7eb3343ca28">&lt;issuerNameRegistry&gt;</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected IssuerNameRegistry ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IssuerNameRegistry();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IdentityModel.Tokens.IssuerNameRegistry" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetIssuerName">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>En cas de substitution dans une classe dérivée, retourne le nom de l'émetteur pour le jeton de sécurité spécifié.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Appelée à partir du pipeline de traitement par le Gestionnaire de jetons de sécurité qui traite le jeton. La méthode doit retourner un nom unique pour l’émetteur dans le contexte de l’application de partie de confiance.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetIssuerName">
      <MemberSignature Language="C#" Value="public abstract string GetIssuerName (System.IdentityModel.Tokens.SecurityToken securityToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetIssuerName(class System.IdentityModel.Tokens.SecurityToken securityToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetIssuerName(System::IdentityModel::Tokens::SecurityToken ^ securityToken);" />
      <MemberSignature Language="F#" Value="abstract member GetIssuerName : System.IdentityModel.Tokens.SecurityToken -&gt; string" Usage="issuerNameRegistry.GetIssuerName securityToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityToken" Type="System.IdentityModel.Tokens.SecurityToken" />
      </Parameters>
      <Docs>
        <param name="securityToken">Jeton de sécurité pour lequel retourner le nom de l'émetteur.</param>
        <summary>En cas de substitution dans une classe dérivée, retourne le nom de l'émetteur du jeton de sécurité spécifié.</summary>
        <returns>Nom de l'émetteur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les implémentations doivent retourner une chaîne non null et non vide pour identifier un émetteur reconnu, ou une chaîne null pour identifier un émetteur non reconnu.  
  
 Appelée à partir du pipeline de traitement par le Gestionnaire de jetons de sécurité qui traite le jeton. La méthode doit retourner un nom unique pour l’émetteur dans le contexte de l’application de partie de confiance.  
  
   
  
## Examples  
 Le code suivant illustre la <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%2A> méthode pour un Registre de nom de l’émetteur. L’exemple complet est dans le <xref:System.IdentityModel.Tokens.IssuerNameRegistry> rubrique Vue d’ensemble de la classe.  
  
> [!WARNING]
>  Le code suivant est uniquement à des fins d’illustration. Validation des certificats selon le nom de l’objet n’est pas une bonne pratique. Ce code ne doit pas être utilisé comme mise en production.  
  
 [!code-csharp[WifIssuerNameRegistry#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifissuernameregistry/cs/mvcwepapp/trustedissuernameregistry.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetIssuerName">
      <MemberSignature Language="C#" Value="public virtual string GetIssuerName (System.IdentityModel.Tokens.SecurityToken securityToken, string requestedIssuerName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetIssuerName(class System.IdentityModel.Tokens.SecurityToken securityToken, string requestedIssuerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName(System.IdentityModel.Tokens.SecurityToken,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetIssuerName(System::IdentityModel::Tokens::SecurityToken ^ securityToken, System::String ^ requestedIssuerName);" />
      <MemberSignature Language="F#" Value="abstract member GetIssuerName : System.IdentityModel.Tokens.SecurityToken * string -&gt; string&#xA;override this.GetIssuerName : System.IdentityModel.Tokens.SecurityToken * string -&gt; string" Usage="issuerNameRegistry.GetIssuerName (securityToken, requestedIssuerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityToken" Type="System.IdentityModel.Tokens.SecurityToken" />
        <Parameter Name="requestedIssuerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="securityToken">Jeton de sécurité pour lequel retourner le nom de l'émetteur.</param>
        <param name="requestedIssuerName">Nom de l'émetteur à prendre en considération dans la demande.</param>
        <summary>En cas de substitution dans une classe dérivée, retourne le nom de l'émetteur du jeton de sécurité spécifié. Le nom d'émetteur spécifié peut être utilisé pour déterminer le nom d'émetteur à retourner.</summary>
        <returns>Nom de l'émetteur.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’implémentation par défaut ignore le `requestedIssuerName` paramètre et appelle simplement la <xref:System.IdentityModel.Tokens.IssuerNameRegistry.GetIssuerName%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=nameWithType> (méthode).  
  
 Appelée à partir du pipeline de traitement par le Gestionnaire de jetons de sécurité qui traite le jeton. La méthode doit retourner un nom unique pour l’émetteur dans le contexte de l’application de partie de confiance.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="GetWindowsIssuerName">
      <MemberSignature Language="C#" Value="public virtual string GetWindowsIssuerName ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetWindowsIssuerName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.GetWindowsIssuerName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWindowsIssuerName () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetWindowsIssuerName();" />
      <MemberSignature Language="F#" Value="abstract member GetWindowsIssuerName : unit -&gt; string&#xA;override this.GetWindowsIssuerName : unit -&gt; string" Usage="issuerNameRegistry.GetWindowsIssuerName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retourne le nom d'émetteur par défaut à utiliser pour les revendications Windows.</summary>
        <returns>Nom de l'émetteur par défaut pour les revendications Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implémentation par défaut retourne la valeur <xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>.  
  
 Appelée à partir du pipeline de traitement par le Gestionnaire de jetons de sécurité qui traite le jeton. La méthode doit retourner un nom unique pour l’émetteur dans le contexte de l’application de partie de confiance.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="issuerNameRegistry.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">Éléments XML de configuration. Chaque nœud de la liste est de type <see cref="T:System.Xml.XmlElement" />.</param>
        <summary>Après substitution dans une classe dérivée, charge la configuration personnalisée à partir de XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.IdentityModel.Tokens.IssuerNameRegistry.LoadCustomConfiguration%2A> méthode est appelée par l’infrastructure de configuration. Lorsque cette méthode est appelée, le `nodelist` contiendra les éléments enfants de niveau supérieur de la [ &lt;issuerNameRegistry&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/issuernameregistry.md) élément à partir du fichier de configuration. Chacun d'entre eux peut, à son tour, contient des attributs ou éléments enfants en fonction du schéma de configuration que vous définissez pour votre classe dérivée.  
  
 L’implémentation par défaut lève un <xref:System.NotImplementedException>. Substituez cette méthode dans votre classe dérivée pour activer l’initialisation de votre Registre de nom d’émetteur à partir d’un fichier de configuration.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/58b39d12-c953-40c4-88af-d7eb3343ca28">&lt;issuerNameRegistry&gt;</related>
      </Docs>
    </Member>
  </Members>
</Type>