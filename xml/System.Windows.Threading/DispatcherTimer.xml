<Type Name="DispatcherTimer" FullName="System.Windows.Threading.DispatcherTimer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0dd0e4caeeda8fb99923da39b3470b069d82c651" /><Meta Name="ms.sourcegitcommit" Value="9e3550fb2088d4faf2043f0acb29da4555519937" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="12/12/2018" /><Meta Name="ms.locfileid" Value="53291494" /></Metadata><TypeSignature Language="C#" Value="public class DispatcherTimer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DispatcherTimer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherTimer" />
  <TypeSignature Language="VB.NET" Value="Public Class DispatcherTimer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherTimer" />
  <TypeSignature Language="F#" Value="type DispatcherTimer = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Minuterie intégrée dans la file d'attente de <see cref="T:System.Windows.Threading.Dispatcher" /> qui est traitée à un intervalle de temps et selon une priorité spécifiés.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Threading.DispatcherTimer> est réévaluée en haut de chaque <xref:System.Windows.Threading.Dispatcher> boucle.  
  
 Minuteurs ne sont pas garantis pour exécuter exactement quand l’intervalle de temps se produit, mais ils sont assurément ne pas s’exécuter avant l’intervalle de temps se produit.  Il s’agit, car <xref:System.Windows.Threading.DispatcherTimer> opérations sont placées sur le <xref:System.Windows.Threading.Dispatcher> file d’attente tout comme les autres opérations.  Lorsque le <xref:System.Windows.Threading.DispatcherTimer> opération s’exécute dépend d’autres tâches de la file d’attente et des priorités.  
  
 Si un <xref:System.Timers.Timer?displayProperty=nameWithType> est utilisée dans un [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] application, il est important de souligner que le <xref:System.Timers.Timer?displayProperty=nameWithType> s’exécute sur un thread différent de celui du [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread.  Afin d’accéder aux objets sur le [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread, il est nécessaire de publier l’opération sur le <xref:System.Windows.Threading.Dispatcher> de la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] à l’aide de threads <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. Raisons d’utiliser un <xref:System.Windows.Threading.DispatcherTimer> par opposition à un <xref:System.Timers.Timer?displayProperty=nameWithType> qui sont le <xref:System.Windows.Threading.DispatcherTimer> s’exécute sur le même thread que le <xref:System.Windows.Threading.Dispatcher> et un <xref:System.Windows.Threading.DispatcherPriority> peut être définie sur le <xref:System.Windows.Threading.DispatcherTimer>.  
  
 Un <xref:System.Windows.Threading.DispatcherTimer> garde un objet actif lorsque les méthodes de l’objet sont liées à la minuterie.  
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Threading.DispatcherTimer> qui met à jour le contenu d’un <xref:System.Windows.Controls.Label> et appelle le <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> méthode sur le <xref:System.Windows.Input.CommandManager>.  
  
 Un <xref:System.Windows.Threading.DispatcherTimer> objet nommé `dispatcherTimer` est créé.  Le Gestionnaire d’événements `dispatcherTimer_Tick` est ajouté à la <xref:System.Windows.Threading.DispatcherTimer.Tick> événement de `dispatcherTimer`.  Le <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> est défini sur 1 seconde à l’aide un <xref:System.Windows.Duration.TimeSpan%2A> objet et la minuterie est démarrée.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 Le <xref:System.Windows.Threading.DispatcherTimer.Tick> Gestionnaire d’événements met à jour un <xref:System.Windows.Controls.Label> qui affiche la seconde actuelle, et il appelle <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> sur le <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> s’exécute sur le <xref:System.Windows.Threading.Dispatcher> du thread actuel à <xref:System.Windows.Threading.DispatcherPriority.Background> priorité.  Pour spécifier un autre <xref:System.Windows.Threading.Dispatcher>, utilisez le constructeur suivant : <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer priority" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">Priorité à laquelle appeler la minuterie.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Threading.DispatcherTimer" /> qui traite des événements de minuterie à la priorité spécifiée.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> s’exécute sur le <xref:System.Windows.Threading.Dispatcher> du thread actuel.  Pour spécifier un autre <xref:System.Windows.Threading.Dispatcher>, utilisez le constructeur suivant : <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (priority, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="priority">Priorité à laquelle appeler la minuterie.</param>
        <param name="dispatcher">Répartiteur auquel la minuterie est associée.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Threading.DispatcherTimer" /> qui s'exécute sur le <see cref="T:System.Windows.Threading.Dispatcher" /> spécifié à la priorité spécifiée.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dispatcher" /> est <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan interval, valuetype System.Windows.Threading.DispatcherPriority priority, class System.EventHandler callback, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(TimeSpan interval, System::Windows::Threading::DispatcherPriority priority, EventHandler ^ callback, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : TimeSpan * System.Windows.Threading.DispatcherPriority * EventHandler * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (interval, priority, callback, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="callback" Type="System.EventHandler" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="interval">Durée séparant les graduations.</param>
        <param name="priority">Priorité à laquelle appeler la minuterie.</param>
        <param name="callback">Gestionnaire d'événements à appeler lorsque l'événement <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> se produit.</param>
        <param name="dispatcher">Répartiteur auquel la minuterie est associée.</param>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Threading.DispatcherTimer" /> qui utilise l'intervalle de temps, la priorité, le gestionnaire d'événements et le <see cref="T:System.Windows.Threading.Dispatcher" /> spécifiés.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="callback" /> est <see langword="null" />.

ou

          <paramref name="dispatcher" /> est <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval" /> est inférieur à 0 ou supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Windows.Threading.Dispatcher" /> associé à ce <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <value>Répartiteur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A> propriété est déterminée lors de la création de la <xref:System.Windows.Threading.DispatcherTimer> objet.  Le <xref:System.Windows.Threading.Dispatcher> propriété est définie sur actuel <xref:System.Windows.Threading.Dispatcher> au moment de la création, sauf si un autre <xref:System.Windows.Threading.Dispatcher> est spécifié.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public TimeSpan Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Interval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : TimeSpan with get, set" Usage="System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit la durée séparant les graduations de la minuterie.</summary>
        <value>Durée séparant les graduations. La valeur par défaut est 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Minuteurs ne sont pas garantis pour exécuter exactement quand l’intervalle de temps se produit, mais ils sont assurément ne pas s’exécuter avant l’intervalle de temps se produit.  Il s’agit, car <xref:System.Windows.Threading.DispatcherTimer> opérations sont placées sur le <xref:System.Windows.Threading.Dispatcher> file d’attente tout comme les autres opérations.  Lorsque le <xref:System.Windows.Threading.DispatcherTimer> opération s’exécute dépend d’autres tâches de la file d’attente et des priorités.  
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Threading.DispatcherTimer>.  Un nouveau <xref:System.Windows.Threading.DispatcherTimer> objet nommé `dispatcherTimer` est créé.  Le Gestionnaire d’événements `dispatcherTimer_Tick` est ajouté à la <xref:System.Windows.Threading.DispatcherTimer.Tick> événement.  Le <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> est défini sur 1 seconde à l’aide un <xref:System.TimeSpan> objet.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval" /> est inférieur à 0 ou supérieur à <see cref="F:System.Int32.MaxValue" /> millisecondes.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit une valeur qui indique si la minuterie est active.</summary>
        <value><see langword="true" /> si la minuterie est activée ; sinon, <see langword="false" />.  La valeur par défaut est <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> doit être définie sur `true` pour le <xref:System.Windows.Threading.DispatcherTimer.Tick> déclenchement d’événement.  
  
 Appel <xref:System.Windows.Threading.DispatcherTimer.Start%2A> définit <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> à `true`.  
  
 Appel <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> définit <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> à `false`.  
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Threading.DispatcherTimer>.  Un nouveau <xref:System.Windows.Threading.DispatcherTimer> objet nommé `dispatcherTimer` est créé.  Le Gestionnaire d’événements `dispatcherTimer_Tick` est ajouté à la <xref:System.Windows.Threading.DispatcherTimer.Tick> événement.  Le <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> est défini sur 1 seconde à l’aide un <xref:System.TimeSpan> objet.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="dispatcherTimer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Démarre <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Paramètre <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> à `false` démarrage de la minuterie s’arrête la minuterie.  
  
 Paramètre <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> à `true` lorsque l’arrêt du minuteur démarre le minuteur.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> définit <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> à `true`.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> Réinitialise le minuteur <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>.  
  
   
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Threading.DispatcherTimer>.  Un nouveau <xref:System.Windows.Threading.DispatcherTimer> objet nommé `dispatcherTimer` est créé.  Le Gestionnaire d’événements `dispatcherTimer_Tick` est ajouté à la <xref:System.Windows.Threading.DispatcherTimer.Tick> événement.  Le <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> est défini sur 1 seconde à l’aide un <xref:System.Windows.Duration.TimeSpan%2A> objet.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="dispatcherTimer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arrête <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Paramètre <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> à `false` démarrage de la minuterie s’arrête la minuterie.  
  
 Paramètre <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> à `true` lorsque l’arrêt du minuteur démarre le minuteur.  
  
 Appel <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> définit <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> à `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient ou définit un objet de données défini par l'utilisateur.</summary>
        <value>Données définies par l'utilisateur.  La valeur par défaut est <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.DispatcherTimer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produit lorsque l'intervalle de la minuterie s'est écoulé.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant crée un <xref:System.Windows.Threading.DispatcherTimer.Tick> Gestionnaire d’événements.  Le Gestionnaire d’événements met à jour un <xref:System.Windows.Controls.Label> qui affiche la seconde actuelle, et il appelle <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> sur le <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>