<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5cf08520e6e2163cd1b704766f06d720551be889" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="fr-FR" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55346562" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="36896-101">Fournit des services pour la gestion de la file d'attente des éléments de travail d'un thread.</span><span class="sxs-lookup"><span data-stu-id="36896-101">Provides services for managing the queue of work items for a thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-102">Le <xref:System.Windows.Threading.Dispatcher> maintient une file d’attente prioritaire d’éléments de travail pour un thread spécifique.</span><span class="sxs-lookup"><span data-stu-id="36896-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="36896-103">Quand un <xref:System.Windows.Threading.Dispatcher> est créé sur un thread, il devient le seul <xref:System.Windows.Threading.Dispatcher> qui peut être associé au thread, même si le <xref:System.Windows.Threading.Dispatcher> est arrêté.</span><span class="sxs-lookup"><span data-stu-id="36896-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="36896-104">Si vous tentez d’obtenir le <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> pour le thread actuel et un <xref:System.Windows.Threading.Dispatcher> n’est pas associé au thread, un <xref:System.Windows.Threading.Dispatcher> sera créé.</span><span class="sxs-lookup"><span data-stu-id="36896-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="36896-105">Un <xref:System.Windows.Threading.Dispatcher> est également créée lorsque vous créez un <xref:System.Windows.Threading.DispatcherObject>.</span><span class="sxs-lookup"><span data-stu-id="36896-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="36896-106">Si vous créez un <xref:System.Windows.Threading.Dispatcher> sur un thread d’arrière-plan, veillez à arrêter le répartiteur avant de quitter le thread.</span><span class="sxs-lookup"><span data-stu-id="36896-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="36896-107">Si un <xref:System.Windows.Threading.Dispatcher> est arrêté, il ne peut pas être redémarré.</span><span class="sxs-lookup"><span data-stu-id="36896-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="36896-108">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], un <xref:System.Windows.Threading.DispatcherObject> est uniquement accessible par le <xref:System.Windows.Threading.Dispatcher> lui est associée.</span><span class="sxs-lookup"><span data-stu-id="36896-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="36896-109">Par exemple, un thread d’arrière-plan ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui est associé le <xref:System.Windows.Threading.Dispatcher> sur la [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span><span class="sxs-lookup"><span data-stu-id="36896-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="36896-110">Afin que le thread d’arrière-plan pour accéder à la <xref:System.Windows.Controls.ContentControl.Content%2A> propriété de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé à la [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span><span class="sxs-lookup"><span data-stu-id="36896-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="36896-111">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="36896-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-113">L’opération est ajoutée à la file d’attente de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-114">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est appelée sur un <xref:System.Windows.Threading.Dispatcher> qui s’est arrêté, la propriété status de retourné <xref:System.Windows.Threading.DispatcherOperation> est défini sur <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="36896-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="36896-115">Toutes les méthodes sur <xref:System.Windows.Threading.Dispatcher>, à l’exception de <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, sont libres de threads.</span><span class="sxs-lookup"><span data-stu-id="36896-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="36896-116">Objets qui dérivent de <xref:System.Windows.Threading.DispatcherObject> ont une affinité de thread.</span><span class="sxs-lookup"><span data-stu-id="36896-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="36896-117">Objets qui dérivent de <xref:System.Windows.Freezable> sont libres de threads lorsqu’ils sont figés.</span><span class="sxs-lookup"><span data-stu-id="36896-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="36896-118">Pour plus d’informations, consultez [Vue d’ensemble des objets Freezable](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span><span class="sxs-lookup"><span data-stu-id="36896-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36896-119">L’exemple suivant montre comment placer une opération sur un <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="36896-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="36896-120">Pour le code source complet de cet exemple, consultez [Single-Threaded Application avec Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="36896-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="36896-121">Tout d’abord, un délégué est créé qui n’accepte aucun argument.</span><span class="sxs-lookup"><span data-stu-id="36896-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="36896-122">Ensuite, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="36896-123">Cet appel à <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> accepte deux paramètres : la priorité, qui est définie sur <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>et le rappel, qui est passé dans une instance du délégué `NextPrimeDelegate`.</span><span class="sxs-lookup"><span data-stu-id="36896-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="36896-124">Application monothread avec Long-Running Calculation Sample</span><span class="sxs-lookup"><span data-stu-id="36896-124">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="36896-125">Exécute de façon asynchrone un délégué sur le thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-125">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-126">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-126">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="36896-127">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-127">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="36896-128">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-128">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="36896-129">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-129">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="36896-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-131">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-131">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone ; Par conséquent, contrôle immédiat à l’objet appelant après que qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="36896-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Retourne un <xref:System.Windows.Threading.DispatcherOperation> objet qui peut être utilisé pour interagir avec le délégué lorsque le délégué est dans cette file d’attente.</span><span class="sxs-lookup"><span data-stu-id="36896-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="36896-134">Le <xref:System.Windows.Threading.DispatcherOperation> objet retourné par <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> peut être utilisé de plusieurs façons d’interagir avec le délégué spécifié, tel que :</span><span class="sxs-lookup"><span data-stu-id="36896-134">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="36896-135">Modification de la <xref:System.Windows.Threading.DispatcherPriority> du délégué en attente l’exécution de l’événement de file d’attente.</span><span class="sxs-lookup"><span data-stu-id="36896-135">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="36896-136">Suppression du délégué de la file d’attente de l’événement.</span><span class="sxs-lookup"><span data-stu-id="36896-136">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="36896-137">En attente de délégué à retourner.</span><span class="sxs-lookup"><span data-stu-id="36896-137">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="36896-138">Obtention de la valeur retournée par le délégué après qu’il est exécuté.</span><span class="sxs-lookup"><span data-stu-id="36896-138">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="36896-139">Si plusieurs <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> appels sont effectués au même <xref:System.Windows.Threading.DispatcherPriority>, elles sont exécutées dans l’ordre les appels ont été apportées.</span><span class="sxs-lookup"><span data-stu-id="36896-139">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="36896-140">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est appelée sur un <xref:System.Windows.Threading.Dispatcher> qui s’est arrêté, la propriété status de retourné <xref:System.Windows.Threading.DispatcherOperation> est défini sur <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="36896-140">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="36896-141">Délégué d'une méthode qui prend les paramètres spécifiés dans <paramref name="args" />, qui fait l'objet d'un push dans la file d'attente des événements de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-141">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="36896-142">Tableau d’objets à passer comme arguments à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="36896-142">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="36896-143">Peut être <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-143">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="36896-144">Exécute de façon asynchrone le délégué spécifié avec les arguments spécifiés sur le thread sur lequel le <see cref="T:System.Windows.Threading.Dispatcher" /> spécifié a été créé.</span><span class="sxs-lookup"><span data-stu-id="36896-144">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="36896-145">Objet qui est retourné immédiatement après l'appel de <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> et qui peut être utilisé pour interagir avec le délégué en attente d'exécution dans la file d'attente des événements.</span><span class="sxs-lookup"><span data-stu-id="36896-145">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-146">Le <xref:System.Windows.Threading.DispatcherOperation> objet retourné par <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> peut être utilisé de plusieurs façons d’interagir avec le délégué spécifié, tel que :</span><span class="sxs-lookup"><span data-stu-id="36896-146">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="36896-147">Modification de la <xref:System.Windows.Threading.DispatcherPriority> du délégué en attente l’exécution de l’événement de file d’attente.</span><span class="sxs-lookup"><span data-stu-id="36896-147">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="36896-148">Suppression du délégué de la file d’attente de l’événement.</span><span class="sxs-lookup"><span data-stu-id="36896-148">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="36896-149">En attente de délégué à retourner.</span><span class="sxs-lookup"><span data-stu-id="36896-149">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="36896-150">Obtention de la valeur retournée par le délégué après qu’il est exécuté.</span><span class="sxs-lookup"><span data-stu-id="36896-150">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="36896-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone ; Par conséquent, contrôle immédiat à l’objet appelant après que qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="36896-152">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-152">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="36896-153">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-153">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="36896-154">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-154">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="36896-155">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-155">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="36896-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="36896-157">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-157">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-158">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est appelée sur un <xref:System.Windows.Threading.Dispatcher> qui s’est arrêté, la propriété status de retourné <xref:System.Windows.Threading.DispatcherOperation> est défini sur <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="36896-158">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-159">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-159">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="36896-160">Délégué vers une méthode qui ne prend pas d'arguments, qui fait l'objet d'un push dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-160">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="36896-161">Exécute le délégué spécifié de façon asynchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-161">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-162">Objet qui est retourné immédiatement après l'appel de <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> et qui peut être utilisé pour interagir avec le délégué en attente d'exécution dans la file d'attente des événements.</span><span class="sxs-lookup"><span data-stu-id="36896-162">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-163">Si plusieurs <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> appels sont effectués au même <xref:System.Windows.Threading.DispatcherPriority>, elles sont exécutées dans l’ordre les appels ont été apportées.</span><span class="sxs-lookup"><span data-stu-id="36896-163">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="36896-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Retourne un <xref:System.Windows.Threading.DispatcherOperation> objet qui peut être utilisé pour interagir avec le délégué lorsque le délégué est dans cette file d’attente.</span><span class="sxs-lookup"><span data-stu-id="36896-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="36896-165">Le <xref:System.Windows.Threading.DispatcherOperation> objet retourné par <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> peut être utilisé de plusieurs façons d’interagir avec le délégué spécifié, tel que :</span><span class="sxs-lookup"><span data-stu-id="36896-165">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="36896-166">Modification de la <xref:System.Windows.Threading.DispatcherPriority> du délégué en attente l’exécution de l’événement de file d’attente.</span><span class="sxs-lookup"><span data-stu-id="36896-166">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="36896-167">Suppression du délégué de la file d’attente de l’événement.</span><span class="sxs-lookup"><span data-stu-id="36896-167">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="36896-168">En attente de délégué à retourner.</span><span class="sxs-lookup"><span data-stu-id="36896-168">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="36896-169">Obtention de la valeur retournée par le délégué après qu’il est exécuté.</span><span class="sxs-lookup"><span data-stu-id="36896-169">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="36896-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone ; Par conséquent, contrôle immédiat à l’objet appelant après que qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="36896-171">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-171">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="36896-172">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-172">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="36896-173">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-173">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="36896-174">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-174">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="36896-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-176">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-176">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-177">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est appelée sur un <xref:System.Windows.Threading.Dispatcher> qui s’est arrêté, la propriété status de retourné <xref:System.Windows.Threading.DispatcherOperation> est défini sur <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="36896-177">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36896-178">L’exemple suivant montre comment placer une opération sur un <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="36896-178">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="36896-179">Pour le code source complet de cet exemple, consultez [Single-Threaded Application avec Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span><span class="sxs-lookup"><span data-stu-id="36896-179">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="36896-180">Tout d’abord, un délégué est créé qui n’accepte aucun argument.</span><span class="sxs-lookup"><span data-stu-id="36896-180">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="36896-181">Ensuite, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-181">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="36896-182">Étant donné que chaque <xref:System.Windows.Threading.DispatcherObject> a une propriété qui retourne le <xref:System.Windows.Threading.Dispatcher> il est associé, souhaité <xref:System.Windows.Threading.Dispatcher> est obtenu en interrogeant le <xref:System.Windows.Threading.DispatcherObject>, dans ce cas un <xref:System.Windows.Controls.Button> nommé `startStopButton`.</span><span class="sxs-lookup"><span data-stu-id="36896-182">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="36896-183">L’appel à <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> accepte deux paramètres : la priorité, qui est définie sur <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>et le rappel, qui est passé dans une instance du délégué `NextPrimeDelegate`.</span><span class="sxs-lookup"><span data-stu-id="36896-183">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36896-184"><paramref name="method" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-184"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="36896-185"><paramref name="priority" /> n’est pas un <see cref="T:System.Windows.Threading.DispatcherPriority" /> valide.</span><span class="sxs-lookup"><span data-stu-id="36896-185"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="36896-186">Application monothread avec Long-Running Calculation Sample</span><span class="sxs-lookup"><span data-stu-id="36896-186">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="36896-187">Délégué d'une méthode qui prend les paramètres spécifiés dans <paramref name="args" />, qui fait l'objet d'un push dans la file d'attente des événements de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-187">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-188">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-188">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="36896-189">Tableau d’objets à passer comme arguments à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="36896-189">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="36896-190">Peut être <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-190">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="36896-191">Exécute le délégué spécifié de façon asynchrone selon la priorité indiquée et avec les arguments définis, sur le  thread sur lequel <see cref="T:System.Windows.Threading.Dispatcher" /> a été créé.</span><span class="sxs-lookup"><span data-stu-id="36896-191">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="36896-192">Objet qui est retourné immédiatement après l'appel de <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> et qui peut être utilisé pour interagir avec le délégué en attente d'exécution dans la file d'attente des événements.</span><span class="sxs-lookup"><span data-stu-id="36896-192">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-193">Le <xref:System.Windows.Threading.DispatcherOperation> objet retourné par <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> peut être utilisé de plusieurs façons d’interagir avec le délégué spécifié, tel que :</span><span class="sxs-lookup"><span data-stu-id="36896-193">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="36896-194">Modification de la <xref:System.Windows.Threading.DispatcherPriority> du délégué en attente l’exécution de l’événement de file d’attente.</span><span class="sxs-lookup"><span data-stu-id="36896-194">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="36896-195">Suppression du délégué de la file d’attente de l’événement.</span><span class="sxs-lookup"><span data-stu-id="36896-195">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="36896-196">En attente de délégué à retourner.</span><span class="sxs-lookup"><span data-stu-id="36896-196">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="36896-197">Obtention de la valeur retournée par le délégué après qu’il est exécuté.</span><span class="sxs-lookup"><span data-stu-id="36896-197">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="36896-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone ; Par conséquent, contrôle immédiat à l’objet appelant après que qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="36896-199">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-199">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="36896-200">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-200">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="36896-201">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-201">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="36896-202">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-202">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="36896-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="36896-204">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-204">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-205">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est appelée sur un <xref:System.Windows.Threading.Dispatcher> qui s’est arrêté, la propriété status de retourné <xref:System.Windows.Threading.DispatcherOperation> est défini sur <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="36896-205">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-206">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-206">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="36896-207">Délégué vers une méthode qui prend un argument, qui fait l'objet d'un push dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-207">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="36896-208">Objet à passer comme argument à la méthode spécifiée.</span><span class="sxs-lookup"><span data-stu-id="36896-208">The object to pass as an argument to the specified method.</span></span></param>
        <summary><span data-ttu-id="36896-209">Exécute le délégué spécifié de façon asynchrone selon la priorité indiquée et avec l'argument défini au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-209">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-210">Objet qui est retourné immédiatement après l'appel de <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> et qui peut être utilisé pour interagir avec le délégué en attente d'exécution dans la file d'attente des événements.</span><span class="sxs-lookup"><span data-stu-id="36896-210">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-211">`Arg` peut être `null` si aucun argument n’est nécessaire.</span><span class="sxs-lookup"><span data-stu-id="36896-211">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="36896-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Retourne un <xref:System.Windows.Threading.DispatcherOperation> objet qui peut être utilisé pour interagir avec le délégué lorsque le délégué est dans cette file d’attente.</span><span class="sxs-lookup"><span data-stu-id="36896-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="36896-213">Le <xref:System.Windows.Threading.DispatcherOperation> objet retourné par <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> peut être utilisé de plusieurs façons d’interagir avec le délégué spécifié, tel que :</span><span class="sxs-lookup"><span data-stu-id="36896-213">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="36896-214">Modification de la <xref:System.Windows.Threading.DispatcherPriority> du délégué en attente l’exécution de l’événement de file d’attente.</span><span class="sxs-lookup"><span data-stu-id="36896-214">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="36896-215">Suppression du délégué de la file d’attente de l’événement.</span><span class="sxs-lookup"><span data-stu-id="36896-215">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="36896-216">En attente de délégué à retourner.</span><span class="sxs-lookup"><span data-stu-id="36896-216">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="36896-217">Obtention de la valeur retournée par le délégué après qu’il est exécuté.</span><span class="sxs-lookup"><span data-stu-id="36896-217">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="36896-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone ; Par conséquent, contrôle immédiat à l’objet appelant après que qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="36896-219">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-219">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="36896-220">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-220">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="36896-221">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-221">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="36896-222">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-222">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="36896-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-224">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-224">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-225">Si plusieurs <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> appels sont effectués au même <xref:System.Windows.Threading.DispatcherPriority>, elles sont exécutées dans l’ordre les appels ont été apportées.</span><span class="sxs-lookup"><span data-stu-id="36896-225">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="36896-226">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est appelée sur un <xref:System.Windows.Threading.Dispatcher> qui s’est arrêté, la propriété status de retourné <xref:System.Windows.Threading.DispatcherOperation> est défini sur <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="36896-226">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36896-227">L’exemple suivant montre comment placer une opération sur un <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="36896-227">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="36896-228">Tout d’abord, un délégué est créé qui accepte un seul argument, dans ce cas une chaîne.</span><span class="sxs-lookup"><span data-stu-id="36896-228">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="36896-229">Ensuite, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-229">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="36896-230">Étant donné que chaque <xref:System.Windows.Threading.DispatcherObject> a une propriété qui retourne le <xref:System.Windows.Threading.Dispatcher> il est associé, souhaité <xref:System.Windows.Threading.Dispatcher> est obtenu en interrogeant le <xref:System.Windows.Threading.DispatcherObject>, dans ce cas un <xref:System.Windows.Controls.Grid> nommé `tomorrowsWeather`.</span><span class="sxs-lookup"><span data-stu-id="36896-230">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="36896-231">L’appel à <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> accepte trois paramètres : la priorité, qui est définie sur <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; le rappel, qui est passé dans une instance du délégué `OneArgDelegate`; et une chaîne nommée `weather`, qui est l’argument pour le rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-231">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36896-232"><paramref name="method" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-232"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="36896-233"><paramref name="priority" /> n’est pas un <see cref="T:System.Windows.Threading.DispatcherPriority" /> valide.</span><span class="sxs-lookup"><span data-stu-id="36896-233"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="36896-234">Application monothread avec Long-Running Calculation Sample</span><span class="sxs-lookup"><span data-stu-id="36896-234">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-235">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-235">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="36896-236">Délégué vers une méthode qui prend plusieurs arguments, qui fait l'objet d'un push dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-236">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="36896-237">Objet à passer comme argument à la méthode spécifiée.</span><span class="sxs-lookup"><span data-stu-id="36896-237">The object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="36896-238">Tableau d'objets à passer comme arguments à la méthode spécifiée.</span><span class="sxs-lookup"><span data-stu-id="36896-238">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="36896-239">Exécute le délégué spécifié de façon asynchrone selon la priorité indiquée et avec le tableau d'arguments défini au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-239">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-240">Objet qui est retourné immédiatement après l'appel de <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> et qui peut être utilisé pour interagir avec le délégué en attente d'exécution dans la file d'attente du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-240">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-241">Le `arg` paramètre peut être `null` si aucun argument n’est nécessaire.</span><span class="sxs-lookup"><span data-stu-id="36896-241">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="36896-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> Retourne un <xref:System.Windows.Threading.DispatcherOperation> objet qui peut être utilisé pour interagir avec le délégué lorsque le délégué est dans cette file d’attente.</span><span class="sxs-lookup"><span data-stu-id="36896-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="36896-243">Le <xref:System.Windows.Threading.DispatcherOperation> objet retourné par <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> peut être utilisé de plusieurs façons d’interagir avec le délégué spécifié, tel que :</span><span class="sxs-lookup"><span data-stu-id="36896-243">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="36896-244">Modification de la <xref:System.Windows.Threading.DispatcherPriority> du délégué en attente l’exécution de l’événement de file d’attente.</span><span class="sxs-lookup"><span data-stu-id="36896-244">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="36896-245">Suppression du délégué de la file d’attente de l’événement.</span><span class="sxs-lookup"><span data-stu-id="36896-245">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="36896-246">En attente de délégué à retourner.</span><span class="sxs-lookup"><span data-stu-id="36896-246">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="36896-247">Obtention de la valeur retournée par le délégué après qu’il est exécuté.</span><span class="sxs-lookup"><span data-stu-id="36896-247">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="36896-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone ; Par conséquent, contrôle immédiat à l’objet appelant après que qu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="36896-249">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-249">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="36896-250">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-250">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="36896-251">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-251">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="36896-252">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-252">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="36896-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-254">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-254">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-255">Si plusieurs <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> appels sont effectués au même <xref:System.Windows.Threading.DispatcherPriority>, elles sont exécutées dans l’ordre les appels ont été apportées.</span><span class="sxs-lookup"><span data-stu-id="36896-255">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="36896-256">Si <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est appelée sur un <xref:System.Windows.Threading.Dispatcher> qui s’est arrêté, la propriété status de retourné <xref:System.Windows.Threading.DispatcherOperation> est défini sur <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span><span class="sxs-lookup"><span data-stu-id="36896-256">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36896-257"><paramref name="method" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-257"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="36896-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> n'est pas une priorité valide.</span><span class="sxs-lookup"><span data-stu-id="36896-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="36896-259">Application monothread avec Long-Running Calculation Sample</span><span class="sxs-lookup"><span data-stu-id="36896-259">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-260">Priorité à laquelle l'arrêt du répartiteur doit commencer.</span><span class="sxs-lookup"><span data-stu-id="36896-260">The priority at which to begin shutting down the dispatcher.</span></span></param>
        <summary><span data-ttu-id="36896-261">Initialise de façon asynchrone l'arrêt du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-261">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> les demandes sans restriction des autorisations de l’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="36896-263">Lorsque le <xref:System.Windows.Threading.Dispatcher> commence à arrêter, le <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> événement est déclenché et <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> est défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-263">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-264">Le <xref:System.Windows.Threading.Dispatcher> n’arrête pas complètement jusqu'à ce que la file d’attente de l’événement se déroule.</span><span class="sxs-lookup"><span data-stu-id="36896-264">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="36896-265">Lorsque le répartiteur termine en cours d’arrêt, le <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> événement est déclenché et le <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propriété est définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-265">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-266">Une fois que le processus d’arrêt commence, toutes les tâches en attente, les éléments dans la file d’attente sont abandonnées.</span><span class="sxs-lookup"><span data-stu-id="36896-266">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="36896-267">Pour arrêter le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-267">for shutting down the dispatcher.</span></span>  <span data-ttu-id="36896-268">Énumérations associées :  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="36896-268">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36896-269">Détermine si le thread appelant est le thread associé à ce <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-269">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <returns><span data-ttu-id="36896-270"><see langword="true" /> si le thread appelant est le thread associé à ce <see cref="T:System.Windows.Threading.Dispatcher" /> ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="36896-270"><see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-271">Uniquement les <xref:System.Windows.Threading.Dispatcher> qui un <xref:System.Windows.Threading.DispatcherObject> est créé peut accéder l’objet.</span><span class="sxs-lookup"><span data-stu-id="36896-271">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="36896-272">Utilisez <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> pour accéder à l’objet d’un thread différent.</span><span class="sxs-lookup"><span data-stu-id="36896-272">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="36896-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> peut être appelée à partir de n’importe quel thread.</span><span class="sxs-lookup"><span data-stu-id="36896-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="36896-274">La différence entre <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> et <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> est <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> retourne une valeur booléenne indiquant si le thread appelant a accès à la <xref:System.Windows.Threading.Dispatcher> et <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> lève une exception.</span><span class="sxs-lookup"><span data-stu-id="36896-274">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36896-275">L’exemple suivant utilise <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> pour déterminer si un thread a accès à un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="36896-275">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="36896-276">Le <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> méthode sur le <xref:System.Windows.Threading.Dispatcher> associé à la <xref:System.Windows.Controls.Button> est appelée pour vérifier l’accès au thread.</span><span class="sxs-lookup"><span data-stu-id="36896-276">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="36896-277">Si le thread appelant a accès à la <xref:System.Windows.Threading.Dispatcher>, le <xref:System.Windows.Controls.Button> est mis à jour en accédant aux membres de la <xref:System.Windows.Controls.Button>; sinon, un délégué qui accepte un <xref:System.Windows.Controls.Button> en tant qu’argument, est placé sur le <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="36896-277">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="36896-278">Le <xref:System.Windows.Threading.Dispatcher> délègue le travail de mise à jour le <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="36896-278">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36896-279">Obtient le <see cref="T:System.Windows.Threading.Dispatcher" /> pour le thread en cours d'exécution et crée un nouveau <see cref="T:System.Windows.Threading.Dispatcher" /> si aucun n'est déjà associé au thread.</span><span class="sxs-lookup"><span data-stu-id="36896-279">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span></span></summary>
        <value><span data-ttu-id="36896-280">Répartiteur associé au thread actuel.</span><span class="sxs-lookup"><span data-stu-id="36896-280">The dispatcher associated with the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-281">Si un <xref:System.Windows.Threading.Dispatcher> n’est pas associé au thread actuel, un nouveau <xref:System.Windows.Threading.Dispatcher> sera créé.</span><span class="sxs-lookup"><span data-stu-id="36896-281">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="36896-282">Ce n'est pas le cas avec la méthode <xref:System.Windows.Threading.Dispatcher.FromThread%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-282">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="36896-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> retournera `null` si il n’existe pas de répartiteur associé au thread spécifié.</span><span class="sxs-lookup"><span data-stu-id="36896-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36896-284">Désactive le traitement de la file d'attente du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-284">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></summary>
        <returns><span data-ttu-id="36896-285">Structure utilisée pour réactiver le traitement du répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-285">A structure used to re-enable dispatcher processing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-286">Désactiver le traitement du répartiteur est une méthode avancée qui vise à éliminer le risque de réentrance non associée.</span><span class="sxs-lookup"><span data-stu-id="36896-286">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="36896-287">Les effets de la désactivation de traitement sont les suivantes :</span><span class="sxs-lookup"><span data-stu-id="36896-287">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="36896-288">Verrous CLR ne seront pas pompe pas les messages en interne.</span><span class="sxs-lookup"><span data-stu-id="36896-288">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="36896-289"><xref:System.Windows.Threading.DispatcherFrame> objets ne sont pas autorisés à être envoyées.</span><span class="sxs-lookup"><span data-stu-id="36896-289"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="36896-290">Traitement des messages n’est pas autorisé.</span><span class="sxs-lookup"><span data-stu-id="36896-290">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="36896-291">Le <xref:System.Windows.Threading.DispatcherProcessingDisabled> qui structure <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> retourne lorsqu’elle est appelée peut être utilisé pour réactiver le traitement du répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-291">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="36896-292">Appel <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> sur la <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure réactive le traitement.</span><span class="sxs-lookup"><span data-stu-id="36896-292">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="36896-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> peut uniquement être appelée sur le thread du <xref:System.Windows.Threading.Dispatcher> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36896-294">L’exemple suivant montre comment désactiver et réactiver le traitement du répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-294">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="36896-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> est appelé dans un **à l’aide de** instruction.</span><span class="sxs-lookup"><span data-stu-id="36896-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="36896-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> Retourne un <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure qui est utilisé en tant que l’objet à supprimer après la **à l’aide de** exécution du bloc.</span><span class="sxs-lookup"><span data-stu-id="36896-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="36896-297">Lorsque <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> est appelée sur le <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, le traitement du répartiteur est réactivé.</span><span class="sxs-lookup"><span data-stu-id="36896-297">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36896-298">Demande la fermeture de tous les frames, y compris les frames imbriqués.</span><span class="sxs-lookup"><span data-stu-id="36896-298">Requests that all frames exit, including nested frames.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="36896-299">pour appeler cette méthode.</span><span class="sxs-lookup"><span data-stu-id="36896-299">for calling this method.</span></span> <span data-ttu-id="36896-300">Énumérations associées :  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="36896-300">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><span data-ttu-id="36896-301">Thread à partir duquel obtenir le <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-301">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span></span></param>
        <summary><span data-ttu-id="36896-302">Obtient le <see cref="T:System.Windows.Threading.Dispatcher" /> pour le thread spécifié.</span><span class="sxs-lookup"><span data-stu-id="36896-302">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span></span></summary>
        <returns><span data-ttu-id="36896-303">Répartiteur de <paramref name="thread" />.</span><span class="sxs-lookup"><span data-stu-id="36896-303">The dispatcher for <paramref name="thread" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-304">Si un répartiteur n’est pas disponible pour le thread spécifié, `null` sera retourné.</span><span class="sxs-lookup"><span data-stu-id="36896-304">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="36896-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> ne crée pas un <xref:System.Windows.Threading.Dispatcher> sur un thread qui n’a pas un <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="36896-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="36896-306">Un nouveau <xref:System.Windows.Threading.Dispatcher> est créé sur un thread qui n’a pas déjà un <xref:System.Windows.Threading.Dispatcher> lorsque vous tentez d’obtenir le <xref:System.Windows.Threading.Dispatcher> à l’aide de la <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> propriété.</span><span class="sxs-lookup"><span data-stu-id="36896-306">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36896-307">Détermine si l'arrêt du <see cref="T:System.Windows.Threading.Dispatcher" /> a abouti.</span><span class="sxs-lookup"><span data-stu-id="36896-307">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span></span></summary>
        <value><span data-ttu-id="36896-308"><see langword="true" /> si l'arrêt du répartiteur a abouti ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="36896-308"><see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-309">Lorsque le <xref:System.Windows.Threading.Dispatcher> commence à arrêter, le <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> événement est déclenché et <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> est défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-309">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-310">Le <xref:System.Windows.Threading.Dispatcher> ne s’arrête pas complètement jusqu'à ce que la file d’attente de l’événement se déroule.</span><span class="sxs-lookup"><span data-stu-id="36896-310">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="36896-311">Lorsque le répartiteur termine en cours d’arrêt, le <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> événement est déclenché et le <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propriété est définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-311">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-312">Une fois que le processus d’arrêt commence, toutes les tâches en attente, les éléments dans la file d’attente sont abandonnées.</span><span class="sxs-lookup"><span data-stu-id="36896-312">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36896-313">Détermine si le processus d'arrêt du <see cref="T:System.Windows.Threading.Dispatcher" /> est en cours.</span><span class="sxs-lookup"><span data-stu-id="36896-313">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span></span></summary>
        <value><span data-ttu-id="36896-314"><see langword="true" /> si le processus d'arrêt du <see cref="T:System.Windows.Threading.Dispatcher" /> a commencé ; sinon, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="36896-314"><see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-315">Lorsque le <xref:System.Windows.Threading.Dispatcher> commence à arrêter, le <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> événement est déclenché et <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> est défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-315">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-316">Le <xref:System.Windows.Threading.Dispatcher> n’arrête pas complètement jusqu'à ce que la file d’attente de l’événement se déroule.</span><span class="sxs-lookup"><span data-stu-id="36896-316">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="36896-317">Lorsque le répartiteur termine en cours d’arrêt, le <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> événement est déclenché et le <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propriété est définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-317">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-318">Une fois que le processus d’arrêt commence, toutes les tâches en attente, les éléments dans la file d’attente sont abandonnées.</span><span class="sxs-lookup"><span data-stu-id="36896-318">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36896-319">Obtient la collection de raccordements qui fournissent des informations d'événement supplémentaires sur le <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-319">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <value><span data-ttu-id="36896-320">Raccordements associés à ce <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-320">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-321">Le <xref:System.Windows.Threading.DispatcherHooks> classe fournit des informations d’événement supplémentaires sur le <xref:System.Windows.Threading.Dispatcher>, par exemple lorsque le <xref:System.Windows.Threading.Dispatcher> est inactif ou quand une opération est terminée.</span><span class="sxs-lookup"><span data-stu-id="36896-321">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="36896-322">Pour obtenir cette propriété.</span><span class="sxs-lookup"><span data-stu-id="36896-322">for getting this property.</span></span>  <span data-ttu-id="36896-323">Énumérations associées :  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="36896-323">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="36896-324">Exécute le délégué spécifié de façon synchrone au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-324">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-325">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-325">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="36896-326">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-326">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="36896-327">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-327">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="36896-328">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-328">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="36896-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-330">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-330">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est une opération synchrone ; Par conséquent, contrôle ne retourne pas à l’objet appelant jusqu'à ce qu’après le retour du rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36896-332">L’exemple suivant place un délégué sur un <xref:System.Windows.Threading.Dispatcher> à <xref:System.Windows.Threading.DispatcherPriority.Normal> à l’aide de <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-332">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="36896-333">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-333">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="36896-334">Exécute l'objet <see cref="T:System.Action" /> spécifié de façon synchrone au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-334">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="36896-335">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-335">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-336">La priorité qui détermine l'ordre d'exécution du rappel spécifié, est appelée par rapport aux autres opérations en attente dans <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-336">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="36896-337">Exécute l'objet <see cref="T:System.Action" /> spécifié de façon synchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-337">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="36896-338">Délégué d'une méthode qui prend les paramètres spécifiés dans <paramref name="args" />, qui fait l'objet d'un push dans la file d'attente des événements de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-338">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="36896-339">Tableau d’objets à passer comme arguments à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="36896-339">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="36896-340">Peut être <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-340">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="36896-341">Exécute le délégué spécifié de façon synchrone avec les arguments spécifiés, sur le thread auquel <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-341">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-342">Valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="36896-342">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-343">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-343">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="36896-344">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-344">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="36896-345">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-345">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="36896-346">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-346">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="36896-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="36896-348">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-348">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est une opération synchrone ; Par conséquent, contrôle ne retourne pas à l’objet appelant jusqu'à ce qu’après le retour du rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-350">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-350">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="36896-351">Délégué vers une méthode qui ne prend pas d'arguments, qui fait l'objet d'un push dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-351">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="36896-352">Exécute le délégué spécifié de façon synchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-352">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-353">Valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="36896-353">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-354">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-354">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="36896-355">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-355">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="36896-356">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-356">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="36896-357">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-357">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="36896-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-359">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-359">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est une opération synchrone ; Par conséquent, contrôle ne retourne pas à l’objet appelant jusqu'à ce qu’après le retour du rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36896-361">L’exemple suivant place un délégué sur un <xref:System.Windows.Threading.Dispatcher> à <xref:System.Windows.Threading.DispatcherPriority.Normal> à l’aide de <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-361">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36896-362"><paramref name="priority" /> est égal à <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="36896-362"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="36896-363"><paramref name="priority" /> n'est pas une priorité valide.</span><span class="sxs-lookup"><span data-stu-id="36896-363"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36896-364"><paramref name="method" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-364"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="36896-365">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-365">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-366">La priorité qui détermine l'ordre d'exécution du rappel spécifié, est appelée par rapport aux autres opérations en attente dans <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-366">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="36896-367">Objet qui indique s'il est nécessaire d'annuler l'action.</span><span class="sxs-lookup"><span data-stu-id="36896-367">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="36896-368">Exécute l'objet <see cref="T:System.Action" /> spécifié de façon synchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-368">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="36896-369">Délégué d'une méthode qui prend les paramètres spécifiés dans <paramref name="args" />, qui fait l'objet d'un push dans la file d'attente des événements de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-369">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="36896-370">Durée maximale d'attente d'achèvement de l'opération.</span><span class="sxs-lookup"><span data-stu-id="36896-370">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="args"><span data-ttu-id="36896-371">Tableau d’objets à passer comme arguments à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="36896-371">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="36896-372">Peut être <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-372">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="36896-373">Exécute le délégué spécifié de façon synchrone, dans l'intervalle de temps spécifié, selon la priorité indiquée et avec les arguments définis sur le thread auquel <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-373">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-374">Valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="36896-374">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-375">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-375">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="36896-376">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-376">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="36896-377">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-377">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="36896-378">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-378">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="36896-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="36896-380">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-380">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est une opération synchrone ; Par conséquent, contrôle ne retourne pas à l’objet appelant jusqu'à ce qu’après le retour du rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="36896-382">Délégué d'une méthode qui prend les paramètres spécifiés dans <paramref name="args" />, qui fait l'objet d'un push dans la file d'attente des événements de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-382">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-383">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-383">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="36896-384">Tableau d’objets à passer comme arguments à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="36896-384">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="36896-385">Peut être <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-385">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="36896-386">Exécute le délégué spécifié de façon synchrone selon la priorité indiquée et avec les arguments définis au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-386">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-387">Valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="36896-387">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-388">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-388">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="36896-389">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-389">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="36896-390">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-390">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="36896-391">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-391">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="36896-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="36896-393">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-393">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est une opération synchrone ; Par conséquent, contrôle ne retourne pas à l’objet appelant jusqu'à ce qu’après le retour du rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-395">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-395">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="36896-396">Délégué vers une méthode qui prend un argument, qui fait l'objet d'un push dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-396">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="36896-397">Objet à passer comme argument à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="36896-397">An object to pass as an argument to the given method.</span></span></param>
        <summary><span data-ttu-id="36896-398">Exécute le délégué spécifié de façon synchrone selon la priorité indiquée et avec l'argument défini au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-398">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-399">Valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="36896-399">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-400">`Arg` peut être `null` si un argument n’est pas nécessaire.</span><span class="sxs-lookup"><span data-stu-id="36896-400">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="36896-401">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-401">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="36896-402">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-402">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="36896-403">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-403">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="36896-404">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-404">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="36896-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-406">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-406">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est une opération synchrone ; Par conséquent, contrôle ne retourne pas à l’objet appelant jusqu'à ce qu’après le retour du rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36896-408"><paramref name="priority" /> est égal à <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="36896-408"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="36896-409"><paramref name="priority" /> n'est pas une priorité valide.</span><span class="sxs-lookup"><span data-stu-id="36896-409"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36896-410"><paramref name="method" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-410"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-411">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-411">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="36896-412">Temps d'attente maximal pour l'aboutissement de l'opération.</span><span class="sxs-lookup"><span data-stu-id="36896-412">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="36896-413">Délégué vers une méthode qui ne prend pas d'arguments, qui fait l'objet d'un push dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-413">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="36896-414">Exécute le délégué spécifié de façon synchrone selon la priorité indiquée et avec la valeur de délai d'attente définie au niveau du thread sur lequel le <see cref="T:System.Windows.Threading.Dispatcher" /> a été créé.</span><span class="sxs-lookup"><span data-stu-id="36896-414">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span></span></summary>
        <returns><span data-ttu-id="36896-415">Valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="36896-415">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-416">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-416">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="36896-417">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-417">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="36896-418">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-418">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="36896-419">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-419">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="36896-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-421">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-421">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est une opération synchrone ; Par conséquent, contrôle ne retourne pas à l’objet appelant jusqu'à ce qu’après le retour du rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="36896-423">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-423">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-424">La priorité qui détermine l'ordre d'exécution du rappel spécifié, est appelée par rapport aux autres opérations en attente dans <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-424">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="36896-425">Objet qui indique s'il est nécessaire d'annuler l'action.</span><span class="sxs-lookup"><span data-stu-id="36896-425">An object that indicates whether to cancel the action.</span></span></param>
        <param name="timeout"><span data-ttu-id="36896-426">Durée minimale d'attente de démarrage de l'opération.</span><span class="sxs-lookup"><span data-stu-id="36896-426">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="36896-427">Exécute l'objet <see cref="T:System.Action" /> spécifié de façon synchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-427">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="36896-428">Délégué d'une méthode qui prend les paramètres spécifiés dans <paramref name="args" />, qui fait l'objet d'un push dans la file d'attente des événements de <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-428">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="36896-429">Durée maximale d'attente d'achèvement de l'opération.</span><span class="sxs-lookup"><span data-stu-id="36896-429">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-430">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-430">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="36896-431">Tableau d’objets à passer comme arguments à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="36896-431">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="36896-432">Peut être <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-432">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="36896-433">Exécute le délégué spécifié de façon synchrone, dans l'intervalle de temps spécifié, selon la priorité indiquée et avec les arguments définis sur le thread auquel <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-433">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-434">Valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="36896-434">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-435">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-435">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="36896-436">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-436">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="36896-437">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-437">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="36896-438">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-438">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="36896-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="36896-440">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-440">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est une opération synchrone ; Par conséquent, contrôle ne retourne pas à l’objet appelant jusqu'à ce qu’après le retour du rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-442">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-442">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="36896-443">Délégué vers une méthode qui prend plusieurs arguments, qui fait l'objet d'un push dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-443">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="36896-444">Objet à passer comme argument à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="36896-444">An object to pass as an argument to the given method.</span></span></param>
        <param name="args"><span data-ttu-id="36896-445">Tableau d’objets à passer comme arguments à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="36896-445">An array of objects to pass as arguments to the given method.</span></span></param>
        <summary><span data-ttu-id="36896-446">Exécute le délégué spécifié de façon synchrone selon la priorité indiquée et avec les arguments définis au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-446">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-447">Valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="36896-447">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-448">`Arg` peut être `null` si un argument n’est pas nécessaire.</span><span class="sxs-lookup"><span data-stu-id="36896-448">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="36896-449">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-449">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="36896-450">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-450">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="36896-451">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-451">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="36896-452">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-452">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="36896-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-454">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-454">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est une opération synchrone ; Par conséquent, contrôle ne retourne pas à l’objet appelant jusqu'à ce qu’après le retour du rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36896-456"><paramref name="priority" /> est égal à <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="36896-456"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="36896-457"><paramref name="priority" /> n'est pas une priorité valide.</span><span class="sxs-lookup"><span data-stu-id="36896-457"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36896-458"><paramref name="method" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-458"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-459">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-459">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="36896-460">Temps d'attente maximal pour l'aboutissement de l'opération.</span><span class="sxs-lookup"><span data-stu-id="36896-460">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="36896-461">Délégué vers une méthode qui prend plusieurs arguments, qui fait l'objet d'un push dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-461">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="36896-462">Objet à passer comme argument à la méthode donnée.</span><span class="sxs-lookup"><span data-stu-id="36896-462">An object to pass as an argument to the given method.</span></span> <span data-ttu-id="36896-463">Peut être <see langword="null" /> si aucun argument n’est nécessaire.</span><span class="sxs-lookup"><span data-stu-id="36896-463">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="36896-464">Exécute le délégué spécifié de façon synchrone selon la priorité indiquée et avec l'argument défini au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-464">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-465">Valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="36896-465">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-466">`Arg` peut être `null` si un argument n’est pas nécessaire.</span><span class="sxs-lookup"><span data-stu-id="36896-466">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="36896-467">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-467">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="36896-468">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-468">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="36896-469">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-469">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="36896-470">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-470">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="36896-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-472">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-472">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est une opération synchrone ; Par conséquent, contrôle ne retourne pas à l’objet appelant jusqu'à ce qu’après le retour du rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36896-474"><paramref name="priority" /> est égal à <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="36896-474"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="36896-475"><paramref name="priority" /> n'est pas une priorité valide.</span><span class="sxs-lookup"><span data-stu-id="36896-475"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36896-476"><paramref name="method" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-476"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-477">Priorité, par rapport aux autres opérations en attente dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />, à laquelle la méthode spécifiée est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-477">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="36896-478">Temps d'attente maximal pour l'aboutissement de l'opération.</span><span class="sxs-lookup"><span data-stu-id="36896-478">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="36896-479">Délégué vers une méthode qui prend plusieurs arguments, qui fait l'objet d'un push dans la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-479">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="36896-480">Objet à passer comme argument à la méthode spécifiée.</span><span class="sxs-lookup"><span data-stu-id="36896-480">An object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="36896-481">Tableau d'objets à passer comme arguments à la méthode spécifiée.</span><span class="sxs-lookup"><span data-stu-id="36896-481">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="36896-482">Exécute le délégué spécifié de façon synchrone selon la priorité indiquée et avec les arguments définis au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-482">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-483">Valeur de retour du délégué appelé ou <see langword="null" /> si le délégué n'a pas de valeur de retour.</span><span class="sxs-lookup"><span data-stu-id="36896-483">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-484">`Arg` peut être `null` si un argument n’est pas nécessaire.</span><span class="sxs-lookup"><span data-stu-id="36896-484">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="36896-485">Dans [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], uniquement le thread qui a créé un <xref:System.Windows.Threading.DispatcherObject> peuvent accéder à cet objet.</span><span class="sxs-lookup"><span data-stu-id="36896-485">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="36896-486">Par exemple, un thread d’arrière-plan qui est lancé à partir du thread d’interface utilisateur ne peut pas mettre à jour le contenu d’un <xref:System.Windows.Controls.Button> qui a été créé sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-486">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="36896-487">Afin que le thread d’arrière-plan accéder à la propriété de contenu de la <xref:System.Windows.Controls.Button>, le thread d’arrière-plan doit déléguer le travail à la <xref:System.Windows.Threading.Dispatcher> associé au thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-487">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="36896-488">Cela est accompli en utilisant soit <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-488">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="36896-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est synchrone et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> est asynchrone.</span><span class="sxs-lookup"><span data-stu-id="36896-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="36896-490">L’opération est ajoutée à la file d’attente des événements de la <xref:System.Windows.Threading.Dispatcher> à l’emplacement spécifié <xref:System.Windows.Threading.DispatcherPriority>.</span><span class="sxs-lookup"><span data-stu-id="36896-490">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="36896-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> est une opération synchrone ; Par conséquent, contrôle ne retourne pas à l’objet appelant jusqu'à ce qu’après le retour du rappel.</span><span class="sxs-lookup"><span data-stu-id="36896-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="36896-492"><paramref name="priority" /> est égal à <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span><span class="sxs-lookup"><span data-stu-id="36896-492"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="36896-493"><paramref name="priority" /> n’est pas un <see cref="T:System.Windows.Threading.DispatcherPriority" /> valide.</span><span class="sxs-lookup"><span data-stu-id="36896-493"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36896-494"><paramref name="method" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-494"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="36896-495">Type de valeur de retour du délégué spécifié.</span><span class="sxs-lookup"><span data-stu-id="36896-495">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="36896-496">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-496">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="36896-497">Exécute l'objet <see cref="T:System.Func`1" /> spécifié de façon synchrone au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-497">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-498">La valeur retournée par `callback`.</span><span class="sxs-lookup"><span data-stu-id="36896-498">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="36896-499">Type de valeur de retour du délégué spécifié.</span><span class="sxs-lookup"><span data-stu-id="36896-499">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="36896-500">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-500">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-501">La priorité qui détermine l'ordre d'exécution du rappel spécifié, est appelée par rapport aux autres opérations en attente dans <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-501">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="36896-502">Exécute l'objet <see cref="T:System.Func`1" /> spécifié de façon synchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-502">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-503">La valeur retournée par `callback`.</span><span class="sxs-lookup"><span data-stu-id="36896-503">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="36896-504">Type de valeur de retour du délégué spécifié.</span><span class="sxs-lookup"><span data-stu-id="36896-504">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="36896-505">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-505">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-506">La priorité qui détermine l'ordre d'exécution du rappel spécifié, est appelée par rapport aux autres opérations en attente dans <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-506">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="36896-507">Objet qui indique s'il est nécessaire d'annuler l'opération.</span><span class="sxs-lookup"><span data-stu-id="36896-507">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="36896-508">Exécute l'objet <see cref="T:System.Func`1" /> spécifié de façon synchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-508">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-509">La valeur retournée par `callback`.</span><span class="sxs-lookup"><span data-stu-id="36896-509">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="36896-510">Type de valeur de retour du délégué spécifié.</span><span class="sxs-lookup"><span data-stu-id="36896-510">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="36896-511">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-511">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-512">La priorité qui détermine l'ordre d'exécution du rappel spécifié, est appelée par rapport aux autres opérations en attente dans <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-512">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="36896-513">Objet qui indique s'il est nécessaire d'annuler l'opération.</span><span class="sxs-lookup"><span data-stu-id="36896-513">An object that indicates whether to cancel the operation.</span></span></param>
        <param name="timeout"><span data-ttu-id="36896-514">Durée minimale d'attente de démarrage de l'opération.</span><span class="sxs-lookup"><span data-stu-id="36896-514">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="36896-515">Exécute l'objet <see cref="T:System.Func`1" /> spécifié de façon synchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-515">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-516">La valeur retournée par `callback`.</span><span class="sxs-lookup"><span data-stu-id="36896-516">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="36896-517">Exécute le délégué spécifié de façon asynchrone au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-517">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="36896-518">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-518">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="36896-519">Exécute l'objet <see cref="T:System.Action" /> spécifié de façon asynchrone au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-519">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-520">Objet qui est retourné immédiatement après l'appel de <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> et qui peut être utilisé pour interagir avec le délégué en attente d'exécution dans la file d'attente des événements.</span><span class="sxs-lookup"><span data-stu-id="36896-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="36896-521">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-521">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-522">La priorité qui détermine l'ordre d'exécution du rappel spécifié, est appelée par rapport aux autres opérations en attente dans <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="36896-523">Exécute l'objet <see cref="T:System.Action" /> spécifié de façon asynchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-523">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-524">Objet qui est retourné immédiatement après l'appel de <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> et qui peut être utilisé pour interagir avec le délégué en attente d'exécution dans la file d'attente des événements.</span><span class="sxs-lookup"><span data-stu-id="36896-524">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="36896-525">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-525">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-526">La priorité qui détermine l'ordre d'exécution du rappel spécifié, est appelée par rapport aux autres opérations en attente dans <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-526">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="36896-527">Objet qui indique s'il est nécessaire d'annuler l'action.</span><span class="sxs-lookup"><span data-stu-id="36896-527">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="36896-528">Exécute l'objet <see cref="T:System.Action" /> spécifié de façon asynchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-528">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-529">Objet qui est retourné immédiatement après l'appel de <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> et qui peut être utilisé pour interagir avec le délégué en attente d'exécution dans la file d'attente des événements.</span><span class="sxs-lookup"><span data-stu-id="36896-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="36896-530">Type de valeur de retour du délégué spécifié.</span><span class="sxs-lookup"><span data-stu-id="36896-530">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="36896-531">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-531">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="36896-532">Exécute l'objet <see cref="T:System.Func`1" /> spécifié de façon asynchrone au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-532">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-533">Objet qui est retourné immédiatement après l'appel de <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> et qui peut être utilisé pour interagir avec le délégué en attente d'exécution dans la file d'attente des événements.</span><span class="sxs-lookup"><span data-stu-id="36896-533">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="36896-534">Type de valeur de retour du délégué spécifié.</span><span class="sxs-lookup"><span data-stu-id="36896-534">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="36896-535">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-535">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-536">La priorité qui détermine l'ordre d'exécution du rappel spécifié, est appelée par rapport aux autres opérations en attente dans <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-536">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="36896-537">Exécute l'objet <see cref="T:System.Func`1" /> spécifié de façon asynchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-537">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-538">Objet qui est retourné immédiatement après l'appel de <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> et qui peut être utilisé pour interagir avec le délégué en attente d'exécution dans la file d'attente des événements.</span><span class="sxs-lookup"><span data-stu-id="36896-538">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="36896-539">Type de valeur de retour du délégué spécifié.</span><span class="sxs-lookup"><span data-stu-id="36896-539">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="36896-540">Délégué permettant d'appeler via le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-540">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="36896-541">La priorité qui détermine l'ordre d'exécution du rappel spécifié, est appelée par rapport aux autres opérations en attente dans <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-541">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="36896-542">Objet qui indique s'il est nécessaire d'annuler l'opération.</span><span class="sxs-lookup"><span data-stu-id="36896-542">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="36896-543">Exécute l'objet <see cref="T:System.Func`1" /> spécifié de façon asynchrone selon la priorité spécifiée au niveau du thread auquel le <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-543">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="36896-544">Objet qui est retourné immédiatement après l'appel de <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> et qui peut être utilisé pour interagir avec le délégué en attente d'exécution dans la file d'attente des événements.</span><span class="sxs-lookup"><span data-stu-id="36896-544">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36896-545">Initialise de façon synchrone le processus d'arrêt du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-545">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> les demandes sans restriction des autorisations de l’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="36896-547">Lorsque le <xref:System.Windows.Threading.Dispatcher> commence à arrêter, le <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> événement est déclenché et <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> est défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-547">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-548">Le <xref:System.Windows.Threading.Dispatcher> n’arrête pas complètement jusqu'à ce que la file d’attente de l’événement se déroule.</span><span class="sxs-lookup"><span data-stu-id="36896-548">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="36896-549">Lorsque le répartiteur termine en cours d’arrêt, le <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> événement est déclenché et le <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propriété est définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-549">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-550">Une fois que le processus d’arrêt commence, toutes les tâches en attente, les éléments dans la file d’attente sont abandonnées.</span><span class="sxs-lookup"><span data-stu-id="36896-550">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="36896-551">Pour arrêter le répartiteur.</span><span class="sxs-lookup"><span data-stu-id="36896-551">for shutting down the dispatcher.</span></span>  <span data-ttu-id="36896-552">Énumérations associées :  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="36896-552">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame"><span data-ttu-id="36896-553">Frame que le répartiteur doit traiter.</span><span class="sxs-lookup"><span data-stu-id="36896-553">The frame for the dispatcher to process.</span></span></param>
        <summary><span data-ttu-id="36896-554">Entame une boucle d'exécution.</span><span class="sxs-lookup"><span data-stu-id="36896-554">Enters an execute loop.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-555">Un <xref:System.Windows.Threading.DispatcherFrame> représente une boucle qui traite les éléments de travail en attente.</span><span class="sxs-lookup"><span data-stu-id="36896-555">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="36896-556">Le répartiteur traite la file d’attente des éléments de travail dans une boucle.</span><span class="sxs-lookup"><span data-stu-id="36896-556">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="36896-557">La boucle est appelée un frame.</span><span class="sxs-lookup"><span data-stu-id="36896-557">The loop is referred to as a frame.</span></span>  <span data-ttu-id="36896-558">La boucle initiale est généralement créée par l’application en appelant <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-558">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="36896-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> entame une boucle représentée par le paramètre `frame`.</span><span class="sxs-lookup"><span data-stu-id="36896-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="36896-560">À chaque itération de la boucle, le <xref:System.Windows.Threading.Dispatcher> vérifiera la <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> propriété sur le <xref:System.Windows.Threading.DispatcherFrame> classe pour déterminer si la boucle doit continuer ou si elle doit s’arrêter.</span><span class="sxs-lookup"><span data-stu-id="36896-560">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="36896-561"><xref:System.Windows.Threading.DispatcherFrame> permet la <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> propriété à définir explicitement et respecte le <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> propriété sur le <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="36896-561"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="36896-562">Cela signifie que, lorsque le <xref:System.Windows.Threading.Dispatcher> commence à arrêter, les frames qui utilisent la valeur par défaut <xref:System.Windows.Threading.DispatcherFrame> implémentation s’arrête, ce qui permet à tous les frames imbriqués quitter.</span><span class="sxs-lookup"><span data-stu-id="36896-562">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36896-563">L’exemple suivant montre comment utiliser un <xref:System.Windows.Threading.DispatcherFrame> pour obtenir des résultats similaires en tant que le [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="36896-563">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="36896-564"><paramref name="frame" /> est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="36896-564"><paramref name="frame" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="36896-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> a la valeur <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="36896-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span></span>  
  
<span data-ttu-id="36896-566">ou</span><span class="sxs-lookup"><span data-stu-id="36896-566">-or-</span></span> 
 <span data-ttu-id="36896-567"><paramref name="frame" /> s'exécute sur un <see cref="T:System.Windows.Threading.Dispatcher" /> différent.</span><span class="sxs-lookup"><span data-stu-id="36896-567"><paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span>  
  
<span data-ttu-id="36896-568">ou</span><span class="sxs-lookup"><span data-stu-id="36896-568">-or-</span></span> 
<span data-ttu-id="36896-569">Le traitement du répartiteur a été désactivé.</span><span class="sxs-lookup"><span data-stu-id="36896-569">Dispatcher processing has been disabled.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="36896-570">pour pousser un frame d’exécution.</span><span class="sxs-lookup"><span data-stu-id="36896-570">for pushing an execution frame.</span></span>  <span data-ttu-id="36896-571">Énumérations associées :  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="36896-571">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36896-572">Exécute un push du frame d'exécution principal au niveau de la file d'attente des événements du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-572">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-573">Le <xref:System.Windows.Threading.Dispatcher> traite la file d’attente d’événement dans une boucle.</span><span class="sxs-lookup"><span data-stu-id="36896-573">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="36896-574">La boucle est appelée un frame.</span><span class="sxs-lookup"><span data-stu-id="36896-574">The loop is referred to as a frame.</span></span>  <span data-ttu-id="36896-575">La boucle initiale est généralement créée par l’application en appelant <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span><span class="sxs-lookup"><span data-stu-id="36896-575">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="36896-576">Le frame d’exécution principal continue jusqu'à ce que le <xref:System.Windows.Threading.Dispatcher> est arrêtée.</span><span class="sxs-lookup"><span data-stu-id="36896-576">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36896-577">Se produit une fois l'arrêt du <see cref="T:System.Windows.Threading.Dispatcher" /> accompli.</span><span class="sxs-lookup"><span data-stu-id="36896-577">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-578">Lorsque le processus d’arrêt d’un <xref:System.Windows.Threading.Dispatcher> est démarré, le <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> événement est déclenché et <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> est défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-578">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-579">Le <xref:System.Windows.Threading.Dispatcher> ne s’arrête pas complètement jusqu'à ce que la file d’attente de l’événement se déroule.</span><span class="sxs-lookup"><span data-stu-id="36896-579">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="36896-580">Lorsque le répartiteur termine en cours d’arrêt, le <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> événement est déclenché et le <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propriété est définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-580">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-581">Une fois que le processus d’arrêt commence, toutes les tâches en attente, les éléments dans la file d’attente sont abandonnées.</span><span class="sxs-lookup"><span data-stu-id="36896-581">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36896-582">Se produit au début du processus d'arrêt du <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-582">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-583">Lorsque le processus d’arrêt d’un <xref:System.Windows.Threading.Dispatcher> est démarré, le <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> événement est déclenché et <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> est défini sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-583">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-584">Le <xref:System.Windows.Threading.Dispatcher> ne s’arrête pas complètement jusqu'à ce que la file d’attente de l’événement se déroule.</span><span class="sxs-lookup"><span data-stu-id="36896-584">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="36896-585">Lorsque le répartiteur termine en cours d’arrêt, le <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> événement est déclenché et le <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> propriété est définie sur `true`.</span><span class="sxs-lookup"><span data-stu-id="36896-585">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="36896-586">Une fois que le processus d’arrêt commence, toutes les tâches en attente, les éléments dans la file d’attente sont abandonnées.</span><span class="sxs-lookup"><span data-stu-id="36896-586">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36896-587">Obtient le thread auquel ce <see cref="T:System.Windows.Threading.Dispatcher" /> est associé.</span><span class="sxs-lookup"><span data-stu-id="36896-587">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="36896-588">Thread.</span><span class="sxs-lookup"><span data-stu-id="36896-588">The thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36896-589">Se produit lorsqu'une exception de thread est levée et non interceptée pendant l'exécution d'un délégué au moyen de <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> ou de <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span><span class="sxs-lookup"><span data-stu-id="36896-589">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-590">Cet événement est déclenché lorsqu’une exception a été levée pendant l’exécution d’un délégué au moyen de <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> n’est pas interceptée.</span><span class="sxs-lookup"><span data-stu-id="36896-590">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="36896-591">Un gestionnaire peut marquer l’exception comme étant géré, ce qui empêche le Gestionnaire d’exceptions interne qui est appelée.</span><span class="sxs-lookup"><span data-stu-id="36896-591">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="36896-592">Gestionnaires d’événements pour cet événement doivent être écrite avec précaution pour éviter de créer des exceptions secondaire et intercepter celles qui se produisent.</span><span class="sxs-lookup"><span data-stu-id="36896-592">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="36896-593">Il est recommandé d’éviter d’allocation de mémoire ou pour effectuer des opérations intensives dans le Gestionnaire de n’importe quelle ressource.</span><span class="sxs-lookup"><span data-stu-id="36896-593">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="36896-594">Le <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> événement permet de ne pas déclencher la <xref:System.Windows.Threading.Dispatcher.UnhandledException> événement.</span><span class="sxs-lookup"><span data-stu-id="36896-594">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="36896-595">Le <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> événement est déclenché en premier et si <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> sur le <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> a la valeur `false`, le <xref:System.Windows.Threading.Dispatcher.UnhandledException> événement n’est pas déclenché.</span><span class="sxs-lookup"><span data-stu-id="36896-595">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="36896-596">Se produit lorsqu'une exception de thread est levée et non interceptée pendant l'exécution d'un délégué au moyen de <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> ou de <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> lors de l'étape de filtrage.</span><span class="sxs-lookup"><span data-stu-id="36896-596">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-597">Cet événement est déclenché pendant l’étape de filtrage pour une exception est levée pendant l’exécution d’un délégué au moyen de <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> et n’est pas interceptée.</span><span class="sxs-lookup"><span data-stu-id="36896-597">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="36896-598">La pile des appels n’est pas déroulée à ce stade (exception de première chance).</span><span class="sxs-lookup"><span data-stu-id="36896-598">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="36896-599">Gestionnaires d’événements pour cet événement doivent être écrite avec précaution pour éviter de créer des exceptions secondaire et intercepter celles qui se produisent.</span><span class="sxs-lookup"><span data-stu-id="36896-599">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="36896-600">Il est recommandé d’éviter d’allocation de mémoire ou pour effectuer des opérations intensives dans le Gestionnaire de n’importe quelle ressource.</span><span class="sxs-lookup"><span data-stu-id="36896-600">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="36896-601">Le <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> événement permet de ne pas déclencher la <xref:System.Windows.Threading.Dispatcher.UnhandledException> événement.</span><span class="sxs-lookup"><span data-stu-id="36896-601">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="36896-602">Le <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> événement est déclenché en premier et si <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> sur le <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> a la valeur `false`, le <xref:System.Windows.Threading.Dispatcher.UnhandledException> événement n’est pas déclenché.</span><span class="sxs-lookup"><span data-stu-id="36896-602">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="36896-603">Pour ajouter ou supprimer un gestionnaire pour cet événement.</span><span class="sxs-lookup"><span data-stu-id="36896-603">for adding or removing a handler for this event.</span></span>  <span data-ttu-id="36896-604">Énumérations associées :  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="36896-604">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-605">Priorité à vérifier.</span><span class="sxs-lookup"><span data-stu-id="36896-605">The priority to check.</span></span></param>
        <param name="parameterName"><span data-ttu-id="36896-606">Chaîne qui sera retournée par l'exception qui se produira si la priorité n'est pas valide.</span><span class="sxs-lookup"><span data-stu-id="36896-606">A string that will be returned by the exception that occurs if the priority is invalid.</span></span></param>
        <summary><span data-ttu-id="36896-607">Détermine si la priorité <see cref="T:System.Windows.Threading.DispatcherPriority" /> spécifiée est une priorité valide.</span><span class="sxs-lookup"><span data-stu-id="36896-607">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="36896-608"><paramref name="priority" /> n’est pas un <see cref="T:System.Windows.Threading.DispatcherPriority" /> valide.</span><span class="sxs-lookup"><span data-stu-id="36896-608"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36896-609">Détermine si le thread appelant a accès à ce <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-609">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-610">Seul le thread le <xref:System.Windows.Threading.Dispatcher> est créé peut accéder le <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="36896-610">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="36896-611">Cette méthode est publique ; Par conséquent, n’importe quel thread peut vérifier s’il a accès à la <xref:System.Windows.Threading.Dispatcher>.</span><span class="sxs-lookup"><span data-stu-id="36896-611">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="36896-612">La différence entre <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> et <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> est <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> retourne une valeur booléenne si le thread appelant n’a pas accès à la <xref:System.Windows.Threading.Dispatcher> et <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> lève une exception.</span><span class="sxs-lookup"><span data-stu-id="36896-612">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="36896-613">L’exemple suivant utilise <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> pour déterminer si un thread a accès au thread qui un <xref:System.Windows.Controls.Button> a été créé.</span><span class="sxs-lookup"><span data-stu-id="36896-613">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="36896-614">La méthode prend un objet en tant qu’argument, qui est casté en un <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="36896-614">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="36896-615">Le <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> méthode sur le <xref:System.Windows.Threading.Dispatcher> de la <xref:System.Windows.Controls.Button> est appelée pour vérifier l’accès au thread.</span><span class="sxs-lookup"><span data-stu-id="36896-615">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="36896-616">Si le thread appelant a accès à la <xref:System.Windows.Threading.Dispatcher>, le <xref:System.Windows.Controls.Button> est mis à jour par les membres de l’accès à la <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="36896-616">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="36896-617">Si le thread appelant n’a pas accès, un <xref:System.InvalidOperationException> est levée.</span><span class="sxs-lookup"><span data-stu-id="36896-617">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="36896-618">Cet exemple intercepte l’exception et exécute un push d’un délégué qui accepte un <xref:System.Windows.Controls.Button> en tant qu’argument, sur le <xref:System.Windows.Threading.Dispatcher> de la <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="36896-618">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="36896-619">Cela <xref:System.Windows.Threading.Dispatcher> effectuent l’opération de mise à jour le <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="36896-619">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="36896-620">Le thread appelant n'a pas accès à ce <see cref="T:System.Windows.Threading.Dispatcher" />.</span><span class="sxs-lookup"><span data-stu-id="36896-620">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="36896-621">Crée un objet awaitable qui renvoie de façon asynchrone le contrôle au répartiteur actuel et offre la possibilité au répartiteur de gérer d'autres événements.</span><span class="sxs-lookup"><span data-stu-id="36896-621">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="36896-622">Crée un objet awaitable qui renvoie de façon asynchrone le contrôle au répartiteur actuel et offre la possibilité au répartiteur de gérer d'autres événements.</span><span class="sxs-lookup"><span data-stu-id="36896-622">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
        <returns><span data-ttu-id="36896-623">Objet awaitable qui renvoie de façon asynchrone le contrôle au répartiteur actuel et offre la possibilité au répartiteur de gérer d'autres événements.</span><span class="sxs-lookup"><span data-stu-id="36896-623">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-624">Cette méthode fournit un moyen pour vous permettre de libérer temporairement de contrôle d’exécution au répartiteur actuel afin qu’il peut effectuer d’autres tâches, telles que gérer d’autres événements.</span><span class="sxs-lookup"><span data-stu-id="36896-624">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="36896-625">Utilisez le `await`, ou `Await` en Visual Basic, l’opérateur sur la valeur de retour pour retourner le contrôle au répartiteur actuel.</span><span class="sxs-lookup"><span data-stu-id="36896-625">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="36896-626">Utilisez cette méthode si souhaitez permettre à votre application pour traiter des événements pendant que votre application effectue beaucoup de travail sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-626">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="36896-627">Par exemple, vous pouvez utiliser cette méthode dans une boucle d’exécution longue qui met à jour d’un contrôle.</span><span class="sxs-lookup"><span data-stu-id="36896-627">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="36896-628">Cette méthode équivaut à appeler le <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> (méthode) et en passant <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="36896-628">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="36896-629">Priorité avec laquelle planifier la suite.</span><span class="sxs-lookup"><span data-stu-id="36896-629">The priority at which to schedule the continuation.</span></span></param>
        <summary><span data-ttu-id="36896-630">Crée un objet awaitable qui renvoie de façon asynchrone le contrôle au répartiteur actuel et offre la possibilité au répartiteur de gérer d'autres événements.</span><span class="sxs-lookup"><span data-stu-id="36896-630">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span>  <span data-ttu-id="36896-631">Travail qui se produit lorsqu'un contrôle retourne au code qui attend le résultat de cette méthode est planifiés avec la priorité spécifiée.</span><span class="sxs-lookup"><span data-stu-id="36896-631">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span></span></summary>
        <returns><span data-ttu-id="36896-632">Objet awaitable qui renvoie de façon asynchrone le contrôle au répartiteur actuel et offre la possibilité au répartiteur de gérer d'autres événements.</span><span class="sxs-lookup"><span data-stu-id="36896-632">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="36896-633">Cette méthode fournit un moyen pour vous permettre de libérer temporairement de contrôle d’exécution au répartiteur actuel afin qu’il peut effectuer d’autres tâches, telles que gérer d’autres événements.</span><span class="sxs-lookup"><span data-stu-id="36896-633">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="36896-634">Utilisez le `await`, ou `Await` en Visual Basic, l’opérateur sur la valeur de retour pour retourner le contrôle au répartiteur actuel.</span><span class="sxs-lookup"><span data-stu-id="36896-634">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="36896-635">Utilisez cette méthode si souhaitez permettre à votre application pour traiter des événements pendant que votre application effectue beaucoup de travail sur le thread d’interface utilisateur.</span><span class="sxs-lookup"><span data-stu-id="36896-635">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="36896-636">Par exemple, vous pouvez utiliser cette méthode dans une boucle d’exécution longue qui met à jour d’un contrôle.</span><span class="sxs-lookup"><span data-stu-id="36896-636">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>