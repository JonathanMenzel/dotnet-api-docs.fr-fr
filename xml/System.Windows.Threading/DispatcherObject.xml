<Type Name="DispatcherObject" FullName="System.Windows.Threading.DispatcherObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a940ab9e8bca976429db39edb2ab477f770dde6b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30668543" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DispatcherObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherObject abstract" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Représente un objet associé à un <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seul le thread qui le <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> a été créé peut accéder le <xref:System.Windows.Threading.DispatcherObject> directement.  Pour accéder à un <xref:System.Windows.Threading.DispatcherObject> à partir d’un thread autre que le thread du <xref:System.Windows.Threading.DispatcherObject> a été créé, appelez <xref:System.Windows.Threading.Dispatcher.Invoke%2A> ou <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> sur la <xref:System.Windows.Threading.Dispatcher> le <xref:System.Windows.Threading.DispatcherObject> est associé.  
  
 Les sous-classes de <xref:System.Windows.Threading.DispatcherObject> qu’avez besoin pour appliquer la thread sécurité pouvez le faire en appelant <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> sur toutes les méthodes publiques.  Cela garantit que le thread appelant est le thread qui le <xref:System.Windows.Threading.DispatcherObject> a été créé.  
  
 Un <xref:System.Windows.Threading.DispatcherObject> ne peut pas être instancié indépendamment ; autrement dit, tous les constructeurs sont protégés.  
  
 Les objets qui dérivent de <xref:System.Windows.Threading.DispatcherObject> ont une affinité de thread.  
  
 Les objets qui dérivent de <xref:System.Windows.Freezable> sont libres de threads lorsqu’ils sont figés.  Pour plus d’informations, consultez la [Vue d’ensemble des objets Freezable](~/docs/framework/wpf/advanced/freezable-objects-overview.md).  
  
 ]]></format>
    </remarks>
    <threadsafe>N’importe quel public <see langword="static" /> de ce type sont thread-safe. Il n'est pas garanti que les membres d'instance soient thread-safe.  
  
 Cet objet est accessible uniquement à partir du thread sur lequel il a été créé. Tente d’y accéder à partir d’autres threads lève une <see cref="T:System.InvalidOperationException" />. <see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> ou <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> prennent en charge le marshaling de travail vers le thread correct.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DispatcherObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DispatcherObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Détermine si le thread appelant a accès à ce <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <returns>
          <see langword="true" /> si le thread appelant a accès à cet objet ; sinon, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seul le thread le <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> a été créé peut accéder le <xref:System.Windows.Threading.DispatcherObject>.  
  
 N’importe quel thread peut vérifier s’il a accès à cette <xref:System.Windows.Threading.DispatcherObject>.  
  
 La différence entre <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> et <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> qui est <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> retourne une valeur booléenne qui spécifie si le thread appelant a accès à cette <xref:System.Windows.Threading.DispatcherObject> et <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> lève une exception si le thread appelant n’a pas accès à la Cela <xref:System.Windows.Threading.DispatcherObject>.  
  
 Appel de cette méthode est identique à l’appel <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> sur associé <xref:System.Windows.Threading.Dispatcher> objet.  
  
   
  
## Examples  
 L’exemple suivant utilise <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> pour déterminer si un thread a accès au thread qui un <xref:System.Windows.Controls.Button> a été créé.  Le <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> méthode sur le <xref:System.Windows.Controls.Button> est appelée pour vérifier l’accès au thread.  Si le thread appelant a accès, le <xref:System.Windows.Controls.Button> est mis à jour en accédant simplement aux membres de la <xref:System.Windows.Controls.Button>; sinon, un délégué qui accepte une <xref:System.Windows.Controls.Button> en tant qu’argument, est publié sur le <xref:System.Windows.Threading.Dispatcher> de la <xref:System.Windows.Controls.Button>.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtient le <see cref="T:System.Windows.Threading.Dispatcher" /> associé à <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <value>Répartiteur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seul le thread qui le <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> a été créé peut accéder le <xref:System.Windows.Threading.DispatcherObject> directement.  Pour accéder à un <xref:System.Windows.Threading.DispatcherObject> à partir d’un thread autre que le thread du <xref:System.Windows.Threading.DispatcherObject> a été créé, appelez <xref:System.Windows.Threading.Dispatcher.Invoke%2A> et <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> sur la <xref:System.Windows.Threading.Dispatcher> le <xref:System.Windows.Threading.DispatcherObject> est associé.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Garantit que le thread appelant a accès à <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Seul le thread le <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> a été créé peut accéder le <xref:System.Windows.Threading.DispatcherObject>.  
  
 N’importe quel thread peut vérifier s’il a accès à cette <xref:System.Windows.Threading.DispatcherObject>.  
  
 La différence entre <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> et <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> qui est <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> retourne une valeur booléenne qui spécifie si le thread appelant a accès à cette <xref:System.Windows.Threading.DispatcherObject> et <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> lève une exception si le thread appelant n’a pas accès à la Cela <xref:System.Windows.Threading.DispatcherObject>.  
  
   
  
## Examples  
 L’exemple suivant utilise <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> pour déterminer si un thread a accès au thread qui un <xref:System.Windows.Controls.Button> a été créé.  Si le thread appelant n’a pas accès, un <xref:System.InvalidOperationException> est levée.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">le thread appelant n'a pas accès à <see cref="T:System.Windows.Threading.DispatcherObject" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>