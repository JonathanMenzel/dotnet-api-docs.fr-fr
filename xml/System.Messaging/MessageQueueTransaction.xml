<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d2f750339c17f272f8cc360d38e3f1850a40606b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460033" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="80dd6-101">Fournit une transaction Message Queuing interne.</span>
      <span class="sxs-lookup">
        <span data-stu-id="80dd6-101">Provides a Message Queuing internal transaction.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80dd6-102">Pour envoyer ou recevoir un message dans le cadre d’une transaction, vous pouvez utiliser la <xref:System.Messaging.MessageQueueTransaction> classe pour créer une transaction et le passer à une surcharge de la <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> méthode ou la <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> méthode qui prend un `transaction` paramètre.</span><span class="sxs-lookup"><span data-stu-id="80dd6-102">To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> method that takes a `transaction` parameter.</span></span> <span data-ttu-id="80dd6-103">Les messages envoyés dans le cadre d’une transaction doivent être envoyés aux files d’attente transactionnelles.</span><span class="sxs-lookup"><span data-stu-id="80dd6-103">Messages sent as part of a transaction must be sent to transactional queues.</span></span> <span data-ttu-id="80dd6-104">Messages reçus à partir de files d’attente transactionnelles doivent être reçues à l’aide d’une transaction spécifiée.</span><span class="sxs-lookup"><span data-stu-id="80dd6-104">Messages received from transactional queues must be received using a specified transaction.</span></span>  
  
 <span data-ttu-id="80dd6-105">Outre le <xref:System.Messaging.MessageQueue.Receive%2A> (méthode), vous pouvez recevoir des messages avec un identificateur spécifié ou un identificateur de corrélation spécifié.</span><span class="sxs-lookup"><span data-stu-id="80dd6-105">In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier.</span></span> <span data-ttu-id="80dd6-106">Consultez le <xref:System.Messaging.MessageQueue.ReceiveById%2A> et <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> méthodes pour plus d’informations sur la réception sélective des messages à partir de files d’attente transactionnelles.</span><span class="sxs-lookup"><span data-stu-id="80dd6-106">See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.</span></span>  
  
 <span data-ttu-id="80dd6-107">Messages envoyés aux files d’attente transactionnelles sont supprimés si la transaction est validée.</span><span class="sxs-lookup"><span data-stu-id="80dd6-107">Messages sent to transactional queues are removed if the transaction is committed.</span></span> <span data-ttu-id="80dd6-108">De même, les messages reçus à partir de files d’attente transactionnelles sont retournés à la file d’attente si la transaction est restaurée.</span><span class="sxs-lookup"><span data-stu-id="80dd6-108">Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</span></span>  
  
 <span data-ttu-id="80dd6-109">Si vous instanciez un <xref:System.Messaging.MessageQueueTransaction> et le passer à une surcharge applicable de la <xref:System.Messaging.MessageQueue.Send%2A> méthode ou <xref:System.Messaging.MessageQueue.Receive%2A> méthode pour envoyer un message à une file d’attente non transactionnelle ou recevoir un message d’une file d’attente non transactionnelle, la méthode lève une exception qui Indique « Utilisation de la Transaction incorrect. »</span><span class="sxs-lookup"><span data-stu-id="80dd6-109">If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</span></span>  
  
 <span data-ttu-id="80dd6-110"><xref:System.Messaging.MessageQueueTransaction> cloisonnement prenant en charge, par conséquent si votre état de cloisonnement est `STA`, vous ne pouvez pas utiliser la transaction dans plusieurs threads.</span><span class="sxs-lookup"><span data-stu-id="80dd6-110"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="80dd6-111">Visual Basic définit l’état du thread principal `STA`, vous devez donc appliquer le <xref:System.MTAThreadAttribute> dans les `Main` une sous-routine.</span><span class="sxs-lookup"><span data-stu-id="80dd6-111">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="80dd6-112">Sinon, l'envoi d'un message transactionnel qui utilise un autre thread lève une exception <xref:System.Messaging.MessageQueueException>.</span><span class="sxs-lookup"><span data-stu-id="80dd6-112">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="80dd6-113">Vous appliquez le <xref:System.MTAThreadAttribute> en utilisant le fragment suivant.</span><span class="sxs-lookup"><span data-stu-id="80dd6-113">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="80dd6-114">Ce type est thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="80dd6-114">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="80dd6-115">Initialise une nouvelle instance de la classe <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-115">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueTransaction" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80dd6-116">Ce constructeur définit la <xref:System.Messaging.MessageQueueTransaction.Status%2A> propriété `Initialized`.</span><span class="sxs-lookup"><span data-stu-id="80dd6-116">This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="80dd6-117">Restaure la transaction interne en attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-117">Rolls back the pending internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80dd6-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marque l’abandon d’un processus qui a commencé à un appel à <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="80dd6-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="80dd6-119">En règle générale, une effectue un appel à <xref:System.Messaging.MessageQueueTransaction.Begin%2A> au sein d’un `Try...Catch` bloc de gestion des exceptions, placer un appel à <xref:System.Messaging.MessageQueueTransaction.Commit%2A> dans les `Try` clause et un appel à <xref:System.Messaging.MessageQueueTransaction.Abort%2A> dans le `Catch` clause.</span><span class="sxs-lookup"><span data-stu-id="80dd6-119">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 <span data-ttu-id="80dd6-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> Restaure l’intégralité de la transaction.</span><span class="sxs-lookup"><span data-stu-id="80dd6-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction.</span></span> <span data-ttu-id="80dd6-121">Cela inclut tous les messages envoyés ou reçus après l’appel à <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="80dd6-121">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="80dd6-122">La transaction interne que vous tentez de restaurer n'a pas démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-122">The internal transaction you are attempting to roll back has not started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="80dd6-123">Une erreur Message Queuing interne s'est produite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-123">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="80dd6-124">Commence une nouvelle transaction Message Queuing interne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-124">Begins a new Message Queuing internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80dd6-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marque le début du traitement qui est validé ou annulée, en fonction de la réussite de la transaction.</span><span class="sxs-lookup"><span data-stu-id="80dd6-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</span></span> <span data-ttu-id="80dd6-126">Si une exception se produit pendant le traitement, la transaction entière est restaurée.</span><span class="sxs-lookup"><span data-stu-id="80dd6-126">If an exception occurs during processing, the entire transaction is rolled back.</span></span> <span data-ttu-id="80dd6-127">Cela inclut tous les messages envoyés ou reçus après l’appel à <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="80dd6-127">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="80dd6-128">En règle générale, une effectue un appel à <xref:System.Messaging.MessageQueueTransaction.Begin%2A> au sein d’un `Try...Catch` bloc de gestion des exceptions, placer un appel à <xref:System.Messaging.MessageQueueTransaction.Commit%2A> dans les `Try` clause et un appel à <xref:System.Messaging.MessageQueueTransaction.Abort%2A> dans le `Catch` clause.</span><span class="sxs-lookup"><span data-stu-id="80dd6-128">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="80dd6-129">La transaction a déjà démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-129">The transaction has already been started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="80dd6-130">Une erreur Message Queuing interne s'est produite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-130">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="80dd6-131">Valide une transaction interne en attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-131">Commits a pending internal transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80dd6-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marque l’achèvement réussi du processus qui a commencé à un appel à <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="80dd6-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span> <span data-ttu-id="80dd6-133">Si une exception se produit entre l’appel de la <xref:System.Messaging.MessageQueueTransaction.Begin%2A> et l’appel à <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, toute la transaction est restaurée.</span><span class="sxs-lookup"><span data-stu-id="80dd6-133">If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back.</span></span> <span data-ttu-id="80dd6-134">Cela inclut tous les messages envoyés ou reçus après l’appel à <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span><span class="sxs-lookup"><span data-stu-id="80dd6-134">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="80dd6-135">En règle générale, une effectue un appel à <xref:System.Messaging.MessageQueueTransaction.Begin%2A> au sein d’un `Try...Catch` bloc de gestion des exceptions, placer un appel à <xref:System.Messaging.MessageQueueTransaction.Commit%2A> dans les `Try` clause et un appel à <xref:System.Messaging.MessageQueueTransaction.Abort%2A> dans le `Catch` clause.</span><span class="sxs-lookup"><span data-stu-id="80dd6-135">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="80dd6-136">La transaction que vous tentez de valider n'a pas démarré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-136">The transaction you are trying to commit has not started.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="80dd6-137">Une erreur Message Queuing interne s'est produite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-137">An internal Message Queuing error occurs.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="80dd6-138">Libère les ressources utilisées par le <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-138">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="80dd6-139">Libère toutes les ressources utilisées par <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-139">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80dd6-140">Appel de <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> autorise les ressources utilisées par le <xref:System.Messaging.MessageQueueTransaction> à être réaffectés à d’autres fins.</span><span class="sxs-lookup"><span data-stu-id="80dd6-140">Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes.</span></span> <span data-ttu-id="80dd6-141">Pour plus d’informations sur `Dispose`, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="80dd6-141">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 <span data-ttu-id="80dd6-142">Toutes les transactions internes en attente sont restaurées <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="80dd6-142">Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="80dd6-143">
            <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-143">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="80dd6-144">Libère les ressources non managées utilisées par <see cref="T:System.Messaging.MessageQueueTransaction" /> et libère éventuellement les ressources managées.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-144">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80dd6-145">Cette méthode est appelée par le public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> (méthode) et le <xref:System.Object.Finalize%2A> (méthode).</span><span class="sxs-lookup"><span data-stu-id="80dd6-145">This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="80dd6-146">`Dispose` appelle la méthode protégée `Dispose(Boolean)` méthode avec la `disposing` paramètre la valeur `true`.</span><span class="sxs-lookup"><span data-stu-id="80dd6-146">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="80dd6-147"><xref:System.Object.Finalize%2A> appelle `Dispose` avec `disposing` la valeur `false`.</span><span class="sxs-lookup"><span data-stu-id="80dd6-147"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="80dd6-148">Si le paramètre `disposing` a la valeur `true`, cette méthode libère toutes les ressources détenues par les objets managés référencés par ce <xref:System.Messaging.MessageQueueTransaction>.</span><span class="sxs-lookup"><span data-stu-id="80dd6-148">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references.</span></span> <span data-ttu-id="80dd6-149">Cette méthode appelle la méthode `Dispose` de chaque objet référencé.</span><span class="sxs-lookup"><span data-stu-id="80dd6-149">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="80dd6-150">
              <see langword="Dispose" /> peut être appelée plusieurs fois par d'autres objets.</span>
            <span class="sxs-lookup">
              <span data-stu-id="80dd6-150">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="80dd6-151">Lors de la substitution de <see langword="Dispose(Boolean)" />, veillez à ne pas référencer des objets qui ont été préalablement supprimés lors d'un appel précédent à <see langword="Dispose" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="80dd6-151">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="80dd6-152">Pour plus d’informations sur l’implémentation <see langword="Dispose" />, consultez [implémentant une méthode de suppression](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            <span class="sxs-lookup">
              <span data-stu-id="80dd6-152">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="80dd6-153">Pour plus d’informations sur <see langword="Dispose" /> et <see langword="Finalize" />, consultez [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md) et [substitution de la méthode Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            <span class="sxs-lookup">
              <span data-stu-id="80dd6-153">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="80dd6-154">Libère les ressources détenues par l’instance actuelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-154">Releases the resources held by the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80dd6-155">Cette méthode se substitue à <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="80dd6-155">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="80dd6-156">Code d’application ne doit pas appeler cette méthode ; d’un objet <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> méthode est appelée automatiquement lors du garbage collection, à moins que la finalisation par le garbage collector a été désactivée par un appel à la <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> (méthode).</span><span class="sxs-lookup"><span data-stu-id="80dd6-156">Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="80dd6-157">Pour plus d’informations, consultez [destructeurs et méthodes Finalize](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [de nettoyage des ressources non managées](~/docs/standard/garbage-collection/unmanaged.md), et [substitution de la méthode Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span><span class="sxs-lookup"><span data-stu-id="80dd6-157">For more information, see [Finalize Methods and Destructors](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="80dd6-158">Obtient l'état de la transaction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-158">Gets the status of the transaction.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="80dd6-159">Une des valeurs <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> qui indique si la transaction a été validée, abandonnée ou initialisée, ou si elle est en attente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="80dd6-159">One of the <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="80dd6-160">Lorsqu’une instance de la <xref:System.Messaging.MessageQueueTransaction> classe a été créée, le <xref:System.Messaging.MessageQueueTransaction.Status%2A> est définie par le constructeur pour `Initialized`.</span><span class="sxs-lookup"><span data-stu-id="80dd6-160">When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`.</span></span> <span data-ttu-id="80dd6-161">Après un appel à <xref:System.Messaging.MessageQueueTransaction.Begin%2A> mais avant un appel à <xref:System.Messaging.MessageQueueTransaction.Commit%2A> ou <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, le <xref:System.Messaging.MessageQueueTransaction.Status%2A> est `Pending`.</span><span class="sxs-lookup"><span data-stu-id="80dd6-161">After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>