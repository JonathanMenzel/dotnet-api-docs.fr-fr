<Type Name="PersistenceParticipant" FullName="System.Activities.Persistence.PersistenceParticipant">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8d7c75dc0fd110e2ed3fd606b8610133c2cf51d8" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32087902" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PersistenceParticipant" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PersistenceParticipant extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Persistence.PersistenceParticipant" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PersistenceParticipant" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistenceParticipant abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Cette classe permet à <see cref="T:System.Activities.WorkflowApplication" /> et <see cref="T:System.ServiceModel.WorkflowServiceHost" /> de participer au processus de persistance. Un participant de persistance dérive de la classe <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> ou de la classe <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> (classe dérivée de la classe <see cref="T:System.Activities.Persistence.PersistenceParticipant" />), implémente des méthodes abstraites, puis ajoute une instance de la classe en tant qu'extension d'une instance de flux de travail. <see cref="T:System.Activities.WorkflowApplication" /> et <see cref="T:System.ServiceModel.WorkflowServiceHost" /> recherchent ces extensions lors de la persistance d'une instance et appellent les méthodes appropriées aux moments opportuns.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un hôte exécute les étapes suivantes lors de la persistance d'une instance :  
  
1.  Recueille les valeurs à rendre persistantes.  
  
2.  Mappe les champs de valeurs structurées monolithiques aux valeurs individuelles.  
  
3.  Émet <xref:System.Activities.DurableInstancing.SaveWorkflowCommand> sur le fournisseur de persistance.  
  
4.  Effectue des E/S dans le cadre de la transaction de persistance.  
  
 Un hôte termine une étape avant de commencer la suivante. Par exemple lors de la persistance, l'hôte recueille des valeurs auprès de tous les participants de persistance avant de passer à la deuxième étape. Dans la deuxième étape, l'hôte fournit toutes les valeurs recueillies dans la première étape à tous les participants de persistance de la deuxième étape en vue de leur mappage. Dans la troisième étape, l'hôte fournit toutes les valeurs recueillies dans les première et deuxième étapes au fournisseur de persistance lors de l'appel à <xref:System.Activities.DurableInstancing.SaveWorkflowCommand>. Enfin, dans la quatrième étape, l’hôte fournit toutes les valeurs recueillies à tous les participants d’E/S de persistance dans le cadre de la transaction de persistance.  
  
 Un hôte exécute les étapes suivantes lors du chargement d'une instance de persistance :  
  
1.  Émet <xref:System.Activities.DurableInstancing.LoadWorkflowCommand> et <xref:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand> sur le fournisseur de persistance.  
  
2.  Effectue des E/S dans le cadre de la transaction de persistance.  
  
3.  Publie les valeurs chargées.  
  
 Au niveau le plus élevé, les extensions d'instance de flux de travail qui dérivent de la classe <xref:System.Activities.Persistence.PersistenceParticipant> peuvent participer à la première et à la deuxième étape (respectivement, Recueillir et Mapper) du processus de persistance et à la troisième étape (Publier) du processus de chargement.  Les extensions d’instance de flux de travail qui dérivent de la classe PersistenceIOParticipant peuvent également participer à la quatrième étape du processus de persistance et à la deuxième étape du processus de chargement (E/S).  
  
   
  
## Examples  
 L'exemple de code suivant montre comment créer une classe qui dérive de <xref:System.Activities.Persistence.PersistenceParticipant>. Cet exemple est issu le [processus d’embauche](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) exemple.  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistenceParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PersistenceParticipant();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialise une instance de la classe <see cref="T:System.Activities.Persistence.PersistenceParticipant" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple de code suivant montre comment créer une classe qui dérive de <xref:System.Activities.Persistence.PersistenceParticipant>. Cet exemple est issu le [processus d’embauche](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) exemple.  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectValues">
      <MemberSignature Language="C#" Value="protected virtual void CollectValues (out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CollectValues([out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; readWriteValues, [out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CollectValues (ByRef readWriteValues As IDictionary(Of XName, Object), ByRef writeOnlyValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CollectValues([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % readWriteValues, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % writeOnlyValues);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Valeurs en lecture-écriture à rendre persistantes.</param>
        <param name="writeOnlyValues">Valeurs en écriture seule à rendre persistantes.</param>
        <summary>Un hôte appelle cette méthode sur un participant de persistance personnalisé pour recueillir des valeurs en lecture-écriture et des valeurs en écriture seule à rendre persistantes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valeurs en lecture-écriture des packages hôtes dans le premier dictionnaire en tant qu'objets <xref:System.Runtime.DurableInstancing.InstanceValue> d'une collection <xref:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData*>, et valeurs en écriture seule des packages dans le deuxième dictionnaire en tant qu'objets <xref:System.Runtime.DurableInstancing.InstanceValue> avec indicateurs <xref:System.Runtime.DurableInstancing.InstanceValueOptions.Optional> et <xref:System.Runtime.DurableInstancing.InstanceValueOptions.WriteOnly> définis. Pour plus d'informations, consultez <xref:System.Runtime.DurableInstancing.InstanceValueOptions>.  
  
> [!IMPORTANT]
>  Chaque valeur fournie par les implémentations de <xref:System.Activities.Persistence.PersistenceParticipant.CollectValues%2A> dans tous les participants de persistance dans le cadre d'un même épisode de persistance doit avoir un XName unique.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser CollectValues dans une classe qui dérive de <xref:System.Activities.Persistence.PersistenceParticipant>. Cet exemple est issu le [Participants de persistance](~/docs/framework/windows-workflow-foundation/persistence-participants.md) exemple.  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapValues">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; MapValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; MapValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MapValues (readWriteValues As IDictionary(Of XName, Object), writeOnlyValues As IDictionary(Of XName, Object)) As IDictionary(Of XName, Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ MapValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ writeOnlyValues);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Valeurs en lecture-écriture à rendre persistantes.</param>
        <param name="writeOnlyValues">Valeurs en écriture seule à rendre persistantes.</param>
        <summary>Un hôte appelle cette méthode après avoir terminé la collecte des valeurs lors de la première étape. L'hôte transfère deux dictionnaires en lecture seule de valeurs recueillies auprès de tous les participants de persistance au cours de la première étape (CollectValues) à cette méthode en vue du mappage. L’hôte ajoute les valeurs du dictionnaire retournées par cette méthode à la collection de valeurs en écriture seule.</summary>
        <returns>Dictionnaire contenant les valeurs en écriture seule supplémentaires à rendre persistantes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chaque valeur fournie par les implémentations de toutes les méthodes <xref:System.Activities.Persistence.PersistenceParticipant.MapValues%2A> dans tous les participants de persistance, y compris toutes les valeurs recueillis dans la première étape (CollectValues), doit avoir un XName unique.  
  
   
  
## Examples  
 L'exemple de code suivant montre comment utiliser MapValues dans une classe qui dérive de <xref:System.Activities.Persistence.PersistenceParticipant>. Cet exemple est issu le [processus d’achat d’entreprise](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) exemple.  
  
 [!code-csharp[wfs_PurchaseProcess#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/xmlpersistenceparticipant.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishValues">
      <MemberSignature Language="C#" Value="protected virtual void PublishValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PublishValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PublishValues (readWriteValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PublishValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Valeurs en lecture-écriture qui ont été chargées à partir du magasin de persistance. Ce dictionnaire correspond au dictionnaire de valeurs en lecture-écriture persistantes dans l'épisode de persistance le plus récent.</param>
        <summary>L'hôte appelle cette méthode et passe toutes les valeurs chargées dans la collection <see cref="P:System.Activities.Persistence.SaveWorkflowCommand.InstanceData" /> (remplie par <see cref="T:System.Activities.Persistence.LoadWorkflowCommand" /> ou <see cref="T:System.Activities.Persistence.LoadWorkflowByInstanceKeyCommand" />) en tant que paramètre de dictionnaire.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'exemple de code suivant montre comment utiliser PublishValues dans une classe qui dérive de <xref:System.Activities.Persistence.PersistenceParticipant>. Cet exemple est issu le [Participants de persistance](~/docs/framework/windows-workflow-foundation/persistence-participants.md) exemple.  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>