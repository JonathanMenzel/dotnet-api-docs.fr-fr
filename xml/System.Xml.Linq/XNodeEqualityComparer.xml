<Type Name="XNodeEqualityComparer" FullName="System.Xml.Linq.XNodeEqualityComparer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1331933f9ee261860aea966c53d6fe632cba7fe1" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39809456" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XNodeEqualityComparer : System.Collections.Generic.IEqualityComparer&lt;System.Xml.Linq.XNode&gt;, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNodeEqualityComparer extends System.Object implements class System.Collections.Generic.IEqualityComparer`1&lt;class System.Xml.Linq.XNode&gt;, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNodeEqualityComparer" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNodeEqualityComparer&#xA;Implements IEqualityComparer, IEqualityComparer(Of XNode)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNodeEqualityComparer sealed : System::Collections::Generic::IEqualityComparer&lt;System::Xml::Linq::XNode ^&gt;, System::Collections::IEqualityComparer" />
  <TypeSignature Language="F#" Value="type XNodeEqualityComparer = class&#xA;    interface IEqualityComparer&#xA;    interface IEqualityComparer&lt;XNode&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.Xml.Linq.XNode&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Compare des nœuds pour déterminer s'ils sont égaux. Cette classe ne peut pas être héritée.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L’objectif de cette classe consiste à implémenter <xref:System.Collections.IEqualityComparer?displayProperty=nameWithType> et <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType>. Les classes qui requièrent l’identité (tel que <xref:System.Collections.Generic.Dictionary%602> ) requièrent une instance d’une classe qui implémente l’une de ces interfaces.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XNodeEqualityComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XNodeEqualityComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Linq.XNodeEqualityComparer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L’exemple suivant utilise cette classe pour déterminer si deux nœuds sont égaux.  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XElement xmlTree2 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
xmlTree2.Add(new XElement("NewChild", "new content"));  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
```  
  
 Cet exemple génère la sortie suivante :  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xml.Linq.XNode x, System.Xml.Linq.XNode y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xml.Linq.XNode x, class System.Xml.Linq.XNode y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As XNode, y As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xml::Linq::XNode ^ x, System::Xml::Linq::XNode ^ y);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xml.Linq.XNode * System.Xml.Linq.XNode -&gt; bool" Usage="xNodeEqualityComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Xml.Linq.XNode" />
        <Parameter Name="y" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="x">Premier <see cref="T:System.Xml.Linq.XNode" /> à comparer.</param>
        <param name="y">Deuxième <see cref="T:System.Xml.Linq.XNode" /> à comparer.</param>
        <summary>Compare les valeurs de deux nœuds.</summary>
        <returns>
          <see cref="T:System.Boolean" /> indiquant si les nœuds sont égaux.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les critères suivants déterminent si les deux nœuds sont égaux :  
  
-   Un `null` nœud est égal à un autre `null` nœud, mais pas égale à une non -`null` nœud.  
  
-   Deux <xref:System.Xml.Linq.XNode> objets de types différents ne sont jamais égaux.  
  
-   Deux <xref:System.Xml.Linq.XText> nœuds sont égaux s’ils contiennent le même texte.  
  
-   Deux <xref:System.Xml.Linq.XElement> nœuds sont égaux s’ils ont le même nom de balise, le même ensemble d’attributs avec les mêmes valeurs, et (hormis les commentaires et instructions de traitement), contiennent deux séquences de longueur égale d’égaux par paire nœuds de contenu.  
  
-   Deux <xref:System.Xml.Linq.XDocument> objets sont égaux si leurs nœuds racines sont égaux.  
  
-   Deux <xref:System.Xml.Linq.XComment> nœuds sont égaux s’ils contiennent le même texte de commentaire.  
  
-   Deux <xref:System.Xml.Linq.XProcessingInstruction> nœuds sont égaux s’ils ont la même cible et les données.  
  
-   Deux <xref:System.Xml.Linq.XDocumentType> nœuds sont égaux si les ont le même nom, ID public, ID système et sous-ensemble interne.  
  
   
  
## Examples  
 L’exemple suivant utilise cette classe pour comparer deux nœuds.  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XElement xmlTree2 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
xmlTree2.Add(new XElement("NewChild", "new content"));  
Console.WriteLine(equalityComparer.Equals(xmlTree1, xmlTree2));  
```  
  
 Cet exemple génère la sortie suivante :  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (System.Xml.Linq.XNode obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(class System.Xml.Linq.XNode obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As XNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Xml::Linq::XNode ^ obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : System.Xml.Linq.XNode -&gt; int" Usage="xNodeEqualityComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Xml.Linq.XNode" /> à hacher.</param>
        <summary>Retourne un code de hachage reposant sur un <see cref="T:System.Xml.Linq.XNode" />.</summary>
        <returns>
          <see cref="T:System.Int32" /> qui contient un code de hachage reposant sur une valeur pour le nœud.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.Linq.XNode> implémentation de <xref:System.Object.GetHashCode%2A> repose sur l’identité référentielle du nœud. Cette méthode calcule un code de hachage complexe basé sur la valeur du nœud et tous ses descendants. Le code de hachage reflète tous les attributs et tous les nœuds descendants.  
  
   
  
## Examples  
 L’exemple suivant utilise cette méthode pour obtenir un code de hachage complexe pour une arborescence XML.  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XNodeEqualityComparer equalityComparer = new XNodeEqualityComparer();  
Console.WriteLine("HashCode: {0}", equalityComparer.GetHashCode(xmlTree).ToString("X"));  
xmlTree.Add(new XElement("NewChild", "new content"));  
Console.WriteLine("HashCode: {0}", equalityComparer.GetHashCode(xmlTree).ToString("X"));  
```  
  
 Cet exemple génère la sortie suivante :  
  
```  
HashCode: 958CCD0  
HashCode: AD26516B  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Premier <see cref="T:System.Xml.Linq.XNode" /> à comparer.</param>
        <param name="y">Deuxième <see cref="T:System.Xml.Linq.XNode" /> à comparer.</param>
        <summary>Compare les valeurs de deux nœuds.</summary>
        <returns>
          <see langword="true" /> si les nœuds sont égaux ; sinon <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Les critères suivants déterminent si les deux nœuds sont égaux :  
  
-   Un `null` nœud est égal à un autre `null` nœud, mais pas égale à une non -`null` nœud.  
  
-   Deux <xref:System.Xml.Linq.XNode> objets de types différents ne sont jamais égaux.  
  
-   Deux <xref:System.Xml.Linq.XText> nœuds sont égaux s’ils contiennent le même texte.  
  
-   Deux <xref:System.Xml.Linq.XElement> nœuds sont égaux s’ils ont le même nom de balise, le même ensemble d’attributs avec les mêmes valeurs, et (hormis les commentaires et instructions de traitement), contiennent deux séquences-longueur de l’égalité par paire nœuds de contenu.  
  
-   Deux <xref:System.Xml.Linq.XDocument> objets sont égaux si leurs nœuds racines sont égaux.  
  
-   Deux <xref:System.Xml.Linq.XComment> nœuds sont égaux s’ils contiennent le même texte de commentaire.  
  
-   Deux <xref:System.Xml.Linq.XProcessingInstruction> nœuds sont égaux s’ils ont la même cible et les données.  
  
-   Deux <xref:System.Xml.Linq.XDocumentType> nœuds sont égaux si les ont le même nom, ID public, ID système et sous-ensemble interne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Nœud à hacher.</param>
        <summary>Retourne un code de hachage basé sur la valeur d'un nœud.</summary>
        <returns>
          <see cref="T:System.Int32" /> qui contient un code de hachage reposant sur une valeur pour le nœud.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le <xref:System.Xml.Linq.XNode> implémentation de <xref:System.Object.GetHashCode%2A> repose sur l’identité référentielle du nœud. Cette méthode calcule un code de hachage complexe basé sur la valeur du nœud, ses attributs et ses descendants.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>