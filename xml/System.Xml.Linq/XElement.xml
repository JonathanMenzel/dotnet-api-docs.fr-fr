<Type Name="XElement" FullName="System.Xml.Linq.XElement">
  <TypeSignature Language="C#" Value="public class XElement : System.Xml.Linq.XContainer, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XElement extends System.Xml.Linq.XContainer implements class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XElement" />
  <TypeSignature Language="VB.NET" Value="Public Class XElement&#xA;Inherits XContainer&#xA;Implements IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XElement : System::Xml::Linq::XContainer, System::Xml::Serialization::IXmlSerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1&lt;System.Xml.Linq.XElement&gt;))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider(null, IsAny=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d6fc7-101">Représente un élément XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-101">Represents an XML element.</span></span>  <span data-ttu-id="d6fc7-102">Pour des informations d’utilisation et des exemples, consultez [Vue d’ensemble de la classe XElement](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) et la section Notes de cette page.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-102">See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) and the Remarks section on this page for usage information and examples.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-103">Cette classe représente un élément XML, la construction XML fondamentale.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-103">This class represents an XML element, the fundamental XML construct.</span></span>  <span data-ttu-id="d6fc7-104">Consultez [vue d’ensemble de la classe XElement](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) pour d’autres informations sur l’utilisation.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-104">See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) for other usage information.</span></span>  
  
 <span data-ttu-id="d6fc7-105">Un élément a un <xref:System.Xml.Linq.XName>, vous pouvez éventuellement un ou plusieurs attributs et peut éventuellement contenir du contenu (pour plus d’informations, consultez <xref:System.Xml.Linq.XContainer.Nodes%2A>).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-105">An element has an <xref:System.Xml.Linq.XName>, optionally one or more attributes, and can optionally contain content (for more information, see <xref:System.Xml.Linq.XContainer.Nodes%2A>).</span></span>  
  
 <span data-ttu-id="d6fc7-106">Un <xref:System.Xml.Linq.XElement> peut contenir les types de contenu suivants :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-106">An <xref:System.Xml.Linq.XElement> can contain the following types of content:</span></span>  
  
-   <xref:System.Xml.Linq.XElement>  
  
-   <xref:System.Xml.Linq.XComment>  
  
-   <xref:System.Xml.Linq.XProcessingInstruction>  
  
-   <xref:System.Xml.Linq.XText>  
  
 <span data-ttu-id="d6fc7-107">Pour plus d’informations sur le contenu valid d’un <xref:System.Xml.Linq.XElement>, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-107">For details about the valid content of an <xref:System.Xml.Linq.XElement>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="d6fc7-108"><xref:System.Xml.Linq.XElement> dérive de <xref:System.Xml.Linq.XContainer>, lequel dérive <xref:System.Xml.Linq.XNode>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-108"><xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, which derives from <xref:System.Xml.Linq.XNode>.</span></span>  
  
 <span data-ttu-id="d6fc7-109">Certains <xref:System.Xml.Linq.XElement> méthodes peuvent être utilisées à partir de XAML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-109">Some <xref:System.Xml.Linq.XElement> methods can be used from XAML.</span></span> <span data-ttu-id="d6fc7-110">Pour plus d’informations, consultez [Propriétés dynamiques LINQ to XML](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-110">For more information, see [LINQ to XML Dynamic Properties](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-111">L’exemple suivant crée une arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-111">The following example creates an XML tree.</span></span> <span data-ttu-id="d6fc7-112">Le contenu du nouvel élément provient d’une requête LINQ.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-112">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="d6fc7-113">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-113">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="d6fc7-114">Voici le même exemple, mais dans ce cas le XML est un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-114">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="d6fc7-115">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-115">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree1 = new XElement(aw + "Root",  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5),  
    new XElement(aw + "Child6", 6)  
);  
  
XElement xmlTree2 = new XElement(aw + "Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree1 As XElement = _  
            <Root>  
                <Child1>1</Child1>  
                <Child2>2</Child2>  
                <Child3>3</Child3>  
                <Child4>4</Child4>  
                <Child5>5</Child5>  
                <Child6>6</Child6>  
            </Root>  
  
        Dim xmlTree2 As XElement = _   
            <Root>  
                <%= From el In xmlTree1.Elements() _  
                    Where el.Value >= 3 And el.Value <= 5 _  
                    Select el %>  
            </Root>  
  
        Console.WriteLine(xmlTree2)  
    End SUb  
End Module  
```  
  
 <span data-ttu-id="d6fc7-116">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-116">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6fc7-117">Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-117">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-118">Pour plus d’informations sur le contenu valide qui peut être passé à ce constructeur, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-118">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="d6fc7-119">Il existe une conversion implicite d’une chaîne en <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-119">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="d6fc7-120">Une utilisation typique de ce constructeur consiste à spécifier une chaîne comme paramètre au lieu de créer un nouveau <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-120">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="d6fc7-121">Lorsque vous créez un élément dans un espace de noms, l’usage consiste à utiliser la surcharge d’opérateur addition avec un <xref:System.Xml.Linq.XNamespace> et une chaîne pour créer un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-121">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="d6fc7-122">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-122">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-123">L’exemple suivant crée une arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-123">The following example creates an XML tree.</span></span> <span data-ttu-id="d6fc7-124">Le contenu du nouvel élément provient d’une requête LINQ.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-124">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5),  
    new XElement("Child", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
            <Child>2</Child>  
            <Child>3</Child>  
            <Child>4</Child>  
            <Child>5</Child>  
            <Child>6</Child>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="d6fc7-125">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-125">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XElement ^ other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="d6fc7-126">Objet <see cref="T:System.Xml.Linq.XElement" /> à partir duquel effectuer la copie.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-126">An <see cref="T:System.Xml.Linq.XElement" /> object to copy from.</span></span></param>
        <summary><span data-ttu-id="d6fc7-127">Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Linq.XElement" /> à partir d'un autre objet <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-127">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from another <see cref="T:System.Xml.Linq.XElement" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-128">Ce constructeur effectue une copie complète d’un élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-128">This constructor makes a deep copy of an element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-129">L’exemple suivant crée une arborescence XML, crée un clone de l’arborescence, puis appelle <xref:System.Xml.Linq.XNode.DeepEquals%2A>, qui teste si les deux arborescences XML sont égales.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-129">The following example creates an XML tree, creates a clone of the tree, and then calls <xref:System.Xml.Linq.XNode.DeepEquals%2A>, which tests whether the two XML trees are equal.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2)  
);  
  
// Create a clone of the tree.  
XElement treeClone = new XElement(xmlTree);  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
  
// Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(new XElement("Child3", 3));  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root Att1="1">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
        </Root>  
  
' Create a clone of the tree.  
Dim treeClone As XElement = New XElement(xmlTree)  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
  
' Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(New XElement("Child3", 3))  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
```  
  
 <span data-ttu-id="d6fc7-130">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-130">This example produces the following output:</span></span>  
  
```  
xmlTree = treeClone: True  
xmlTree = treeClone: False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d6fc7-131"><see cref="T:System.Xml.Linq.XName" /> qui contient le nom de l'élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-131">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</span></span></param>
        <summary><span data-ttu-id="d6fc7-132">Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Linq.XElement" /> avec le nom spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-132">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-133">Ce constructeur crée un élément avec aucun contenu et aucun attribut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-133">This constructor creates an element with no content and no attributes.</span></span>  
  
 <span data-ttu-id="d6fc7-134">Il existe une conversion implicite d’une chaîne en <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-134">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="d6fc7-135">Une utilisation typique de ce constructeur consiste à spécifier une chaîne comme paramètre au lieu de créer un nouveau <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-135">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="d6fc7-136">Lorsque vous créez un élément dans un espace de noms, l’usage consiste à utiliser la surcharge d’opérateur addition avec un <xref:System.Xml.Linq.XNamespace> et une chaîne pour créer un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-136">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="d6fc7-137">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-137">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-138">L’exemple suivant crée un élément sans contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-138">The following example creates an element with no content.</span></span>  
  
```csharp  
XElement el = new XElement("Root");  
Console.WriteLine(el);  
```  
  
```vb  
Dim el As XElement = <Root/>  
Console.WriteLine(el)  
```  
  
 <span data-ttu-id="d6fc7-139">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-139">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 <span data-ttu-id="d6fc7-140">L’exemple suivant crée un élément dans un espace de noms sans contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-140">The following example creates an element in a namespace with no content.</span></span> <span data-ttu-id="d6fc7-141">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-141">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```  

XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root = <Root/>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d6fc7-142">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-142">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XStreamingElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XStreamingElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XStreamingElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XStreamingElement ^ other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XStreamingElement" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="d6fc7-143"><see cref="T:System.Xml.Linq.XStreamingElement" /> qui contient des requêtes non évaluées qui seront itérées pour rechercher le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-143">An <see cref="T:System.Xml.Linq.XStreamingElement" /> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-144">Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Linq.XElement" /> à partir d'un objet <see cref="T:System.Xml.Linq.XStreamingElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-144">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from an <see cref="T:System.Xml.Linq.XStreamingElement" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-145">Ce constructeur parcourt le contenu de l’objet <xref:System.Xml.Linq.XStreamingElement>et crée un élément avec son contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-145">This constructor iterates through the contents of the specified <xref:System.Xml.Linq.XStreamingElement>, and creates an element with its contents.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-146">L’exemple suivant crée une arborescence XML source, puis crée un <xref:System.Xml.Linq.XStreamingElement> à partir d’une requête sur l’arborescence XML source.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-146">The following example creates a source XML tree, and then creates an <xref:System.Xml.Linq.XStreamingElement> from a query on the source XML tree.</span></span> <span data-ttu-id="d6fc7-147">Il sérialise ensuite le <xref:System.Xml.Linq.XStreamingElement> à la console, ajoute un nouvel élément à l’arborescence XML source, puis la sérialise le <xref:System.Xml.Linq.XStreamingElement> à nouveau.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-147">It then serializes the <xref:System.Xml.Linq.XStreamingElement> to the console, adds a new element to the source XML tree, and then serializes the <xref:System.Xml.Linq.XStreamingElement> again.</span></span> <span data-ttu-id="d6fc7-148">Vous pouvez voir cet élément qui vient d’être ajouté à l’arborescence XML source n’est pas inclus dans la première sérialisation, mais il est inclus dans la seconde.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-148">You can see that element newly added to the source XML tree is not included in the first serialization, but is included in the second.</span></span>  
  
```csharp  
XElement src = new XElement("Root",  
                   new XElement("Child1", 1),  
                   new XElement("Child2", 2),  
                   new XElement("Child3", 3)  
               );  
XStreamingElement xse = new XStreamingElement("NewRoot",  
                            from el in src.Elements()  
                            where (int)el >= 2  
                            select el  
                        );  
Console.WriteLine(xse);  
src.Add(new XElement("Child4", 4));  
Console.WriteLine("----");  
Console.WriteLine(xse);  
```  
  
```vb  
Dim src As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
Dim xse As XStreamingElement = New XStreamingElement("NewRoot", _  
        From el In src.Elements() _  
        Where (CInt(el) >= 2) _  
        Select el _  
)  
Console.WriteLine(xse)  
src.Add(New XElement("Child4", 4))  
Console.WriteLine("----")  
Console.WriteLine(xse)  
```  
  
 <span data-ttu-id="d6fc7-149">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-149">This example produces the following output:</span></span>  
  
```  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</NewRoot>  
----  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
</NewRoot>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, System::Object ^ content);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d6fc7-150"><see cref="T:System.Xml.Linq.XName" /> qui contient le nom de l'élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-150">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span></span></param>
        <param name="content"><span data-ttu-id="d6fc7-151">Contenu de l'élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-151">The contents of the element.</span></span></param>
        <summary><span data-ttu-id="d6fc7-152">Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Linq.XElement" /> avec le nom et le contenu spécifiés.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-152">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-153">Ce constructeur crée un élément avec les attributs et le contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-153">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="d6fc7-154">Il existe une conversion implicite d’une chaîne en <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-154">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="d6fc7-155">Une utilisation typique de ce constructeur consiste à spécifier une chaîne comme paramètre au lieu de créer un nouveau <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-155">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="d6fc7-156">Lorsque vous créez un élément dans un espace de noms, l’usage consiste à utiliser la surcharge d’opérateur addition avec un <xref:System.Xml.Linq.XNamespace> et une chaîne pour créer un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-156">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="d6fc7-157">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-157">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="d6fc7-158">Pour plus d’informations sur le contenu valide qui peut être passé à ce constructeur, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-158">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-159">L’exemple suivant crée une arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-159">The following example creates an XML tree.</span></span> <span data-ttu-id="d6fc7-160">Le contenu du nouvel élément provient d’une requête LINQ.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-160">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="d6fc7-161">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-161">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="d6fc7-162">L’exemple suivant crée une arborescence XML avec un large éventail de types de contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-162">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-163">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-163">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="d6fc7-164">L’exemple suivant crée une arborescence XML dans un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-164">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-165">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-165">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="d6fc7-166">L’exemple suivant crée une arborescence XML avec des espaces de noms imbriqués.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-166">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XDocument root = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XElement(aw + "Root",  
        new XElement(fc + "Child",  
            new XElement(aw + "DifferentChild", "other content")  
        )  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-167">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-167">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, ... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d6fc7-168"><see cref="T:System.Xml.Linq.XName" /> qui contient le nom de l'élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-168">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span></span></param>
        <param name="content"><span data-ttu-id="d6fc7-169">Contenu initial de l'élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-169">The initial content of the element.</span></span></param>
        <summary><span data-ttu-id="d6fc7-170">Initialise une nouvelle instance de la classe <see cref="T:System.Xml.Linq.XElement" /> avec le nom et le contenu spécifiés.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-170">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-171">Ce constructeur crée un élément avec les attributs et le contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-171">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="d6fc7-172">Il existe une conversion implicite d’une chaîne en <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-172">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="d6fc7-173">Une utilisation typique de ce constructeur consiste à spécifier une chaîne comme paramètre au lieu de créer un nouveau <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-173">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="d6fc7-174">Lorsque vous créez un élément dans un espace de noms, l’usage consiste à utiliser la surcharge d’opérateur addition avec un <xref:System.Xml.Linq.XNamespace> et une chaîne pour créer un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-174">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="d6fc7-175">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-175">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="d6fc7-176">Pour plus d’informations sur le contenu valide qui peut être passé à ce constructeur, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-176">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-177">L’exemple suivant crée une arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-177">The following example creates an XML tree.</span></span> <span data-ttu-id="d6fc7-178">Le contenu du nouvel élément provient d’une requête LINQ.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-178">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="d6fc7-179">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-179">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="d6fc7-180">L’exemple suivant crée une arborescence XML avec un large éventail de types de contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-180">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-181">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-181">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="d6fc7-182">L’exemple suivant crée une arborescence XML dans un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-182">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-183">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-183">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="d6fc7-184">L’exemple suivant crée une arborescence XML avec des espaces de noms imbriqués.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-184">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(fc + "Child",  
        new XElement(aw + "DifferentChild", "other content")  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-185">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-185">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AncestorsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6fc7-186">Retourne une collection d'éléments contenant cet élément ainsi que ses ancêtres.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-186">Returns a collection of elements that contain this element, and the ancestors of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-187">Les éléments de la collection retournée sont dans l’ordre inverse du document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-187">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="d6fc7-188">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-188">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6fc7-189">Retourne une collection d'éléments contenant cet élément ainsi que ses ancêtres.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-189">Returns a collection of elements that contain this element, and the ancestors of this element.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-190"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> des éléments qui contiennent cet élément, ainsi que ses ancêtres.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-190">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-191">Les éléments de la collection retournée sont dans l’ordre inverse du document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-191">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="d6fc7-192">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-192">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-193">L’exemple suivant crée une arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-193">The following example creates an XML tree.</span></span> <span data-ttu-id="d6fc7-194">Il recherche ensuite le `GrandChild` élément, puis imprime que ses ancêtres.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-194">It then finds the `GrandChild` element, and then prints the ancestors of it.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas =  
    from el in gc.AncestorsAndSelf()  
    select el;  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
  
Dim aas As IEnumerable(Of XElement) = _  
    From el In GC.AncestorsAndSelf() _  
    Select el  
  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="d6fc7-195">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-195">This example produces the following output:</span></span>  
  
```  
GrandChild  
Child  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </Member>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d6fc7-196"><see cref="T:System.Xml.Linq.XName" /> à mettre en correspondance.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-196">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="d6fc7-197">Retourne une collection filtrée d’éléments contenant cet élément ainsi que ses ancêtres.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-197">Returns a filtered collection of elements that contain this element, and the ancestors of this element.</span></span> <span data-ttu-id="d6fc7-198">Seuls les éléments avec un <see cref="T:System.Xml.Linq.XName" /> correspondant sont inclus dans la collection.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-198">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-199"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> qui contient cet élément, ainsi que ses ancêtres.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-199">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element.</span></span> <span data-ttu-id="d6fc7-200">Seuls les éléments avec un <see cref="T:System.Xml.Linq.XName" /> correspondant sont inclus dans la collection.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-200">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-201">Les éléments de la collection retournée sont dans l’ordre inverse du document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-201">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="d6fc7-202">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-202">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-203">L’exemple suivant utilise cette.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-203">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas = gc.AncestorsAndSelf("Child");  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
Dim aas As IEnumerable(Of XElement) = GC.AncestorsAndSelf("Child")  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="d6fc7-204">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-204">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute Attribute (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XAttribute Attribute(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attribute (name As XName) As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XAttribute ^ Attribute(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d6fc7-205"><see cref="T:System.Xml.Linq.XName" /> du <see cref="T:System.Xml.Linq.XAttribute" /> à obtenir.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-205">The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.</span></span></param>
        <summary><span data-ttu-id="d6fc7-206">Retourne le <see cref="T:System.Xml.Linq.XAttribute" /> de ce <see cref="T:System.Xml.Linq.XElement" /> qui a le <see cref="T:System.Xml.Linq.XName" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-206">Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-207"><see cref="T:System.Xml.Linq.XAttribute" /> qui a le <see cref="T:System.Xml.Linq.XName" /> spécifié ; <see langword="null" /> s'il n'existe aucun attribut avec le nom spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-207">An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; <see langword="null" /> if there is no attribute with the specified name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-208">Certaines retournent des collections d’éléments ou attributs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-208">Some  return collections of elements or attributes.</span></span> <span data-ttu-id="d6fc7-209">Cette méthode retourne uniquement un attribut unique.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-209">This method returns only a single attribute.</span></span> <span data-ttu-id="d6fc7-210">Cela est parfois appelée une *singleton* (contrairement à un *collection*).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-210">Sometimes this is referred to as a *singleton* (in contrast to a *collection*).</span></span>  
  
 <span data-ttu-id="d6fc7-211">Les utilisateurs de Visual Basic peuvent utiliser l’axe d’attribut intégrée pour récupérer la valeur d’un attribut avec un nom spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-211">Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-212">L’exemple suivant crée un élément avec un attribut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-212">The following example creates an element with an attribute.</span></span> <span data-ttu-id="d6fc7-213">Il récupère ensuite l’attribut à l’aide de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-213">It then retrieves the attribute using this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute("Att");  
Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att="attribute content"/>  
  
Dim att As XAttribute = xmlTree.Attribute("Att")  
Console.WriteLine(att)  
```  
  
 <span data-ttu-id="d6fc7-214">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-214">This example produces the following output:</span></span>  
  
```  
Att="attribute content"  
```  
  
 <span data-ttu-id="d6fc7-215">Voici le même exemple, mais dans ce cas le XML est un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-215">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="d6fc7-216">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-216">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute(aw + "Att");  
Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att="attribute content"/>  
  
        Dim att As XAttribute = xmlTree.Attribute(GetXmlNamespace(aw) + "Att")  
        Console.WriteLine(att)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d6fc7-217">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-217">This example produces the following output:</span></span>  
  
```  
aw:Att="attribute content"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6fc7-218">Retourne une collection d'attributs de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-218">Returns a collection of attributes of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-219">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-219">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes () As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6fc7-220">Retourne une collection d'attributs de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-220">Returns a collection of attributes of this element.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-221"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XAttribute" /> d'attributs de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-221">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-222">Les attributs de la collection retournée sont dans l’ordre qu’ils ont été ajoutés à l’élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-222">The attributes in the returned collection are in the order that they were added to the element.</span></span> <span data-ttu-id="d6fc7-223">Si l’arborescence XML a été analysée à partir de XML, les attributs sont retournés dans l’ordre du document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-223">If the XML tree was parsed from XML, the attributes are returned in document order.</span></span>  
  
 <span data-ttu-id="d6fc7-224">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-224">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-225">L’exemple suivant crée un élément avec deux attributs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-225">The following example creates an element with two attributes.</span></span> <span data-ttu-id="d6fc7-226">Il utilise pour récupérer tous les attributs de l’élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-226">It then uses this  to retrieve all attributes of the element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = _  
From at In xmlTree.Attributes() _  
Select at  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="d6fc7-227">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-227">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
Att2="content2"  
```  
  
 <span data-ttu-id="d6fc7-228">Voici le même exemple, mais dans ce cas le XML est un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-228">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="d6fc7-229">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-229">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2"),  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = _  
            From at In xmlTree.Attributes() _  
            Select at  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d6fc7-230">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-230">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
aw:Att2="content2"  
xmlns:aw="http://www.adventure-works.com"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes (name As XName) As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d6fc7-231"><see cref="T:System.Xml.Linq.XName" /> à mettre en correspondance.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-231">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="d6fc7-232">Retourne une collection filtrée d’attributs de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-232">Returns a filtered collection of attributes of this element.</span></span> <span data-ttu-id="d6fc7-233">Seuls les éléments avec un <see cref="T:System.Xml.Linq.XName" /> correspondant sont inclus dans la collection.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-233">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-234"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XAttribute" /> qui contient les attributs de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-234">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element.</span></span> <span data-ttu-id="d6fc7-235">Seuls les éléments avec un <see cref="T:System.Xml.Linq.XName" /> correspondant sont inclus dans la collection.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-235">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-236">Noms d’attribut doivent être uniques au sein d’un élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-236">Attribute names must be unique within an element.</span></span> <span data-ttu-id="d6fc7-237">Par conséquent, il peut retourner une collection qui contient un seul attribut, ou elle peut retourner une collection vide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-237">Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.</span></span>  
  
 <span data-ttu-id="d6fc7-238">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-238">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-239">L’exemple suivant utilise cette.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-239">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes("Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes("Att1")  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="d6fc7-240">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-240">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
```  
  
 <span data-ttu-id="d6fc7-241">Voici le même exemple, mais dans ce cas le XML est un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-241">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="d6fc7-242">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-242">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes(aw + "Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(GetXmlNamespace(aw) + "Att1")  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d6fc7-243">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-243">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodesAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodesAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodesAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantNodesAndSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodesAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6fc7-244">Retourne une collection de nœuds contenant cet élément ainsi que tous ses nœuds descendants, dans l’ordre du document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-244">Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-245"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XNode" /> qui contiennent cet élément, ainsi que tous ses nœuds descendants, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-245">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-246">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-246">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-247">L’exemple suivant crée une arborescence XML, puis l’utilise.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-247">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    // Attributes are not nodes, so will not be returned by DescendantNodesAndSelf.  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XNode> dnas =  
    from node in xmlTree.DescendantNodesAndSelf()  
    select node;  
foreach (XNode node in dnas)  
{  
    if (node is XElement)  
        Console.WriteLine((node as XElement).Name);  
    else  
        Console.WriteLine(node);  
}  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text<GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim dnas As IEnumerable(Of XNode) = _  
    From node In xmlTree.DescendantNodesAndSelf() _  
    Select node  
  
For Each node In dnas  
    If TypeOf node Is XElement Then  
        Console.WriteLine(DirectCast(node, XElement).Name)  
    Else  
        Console.WriteLine(node)  
    End If  
Next  
```  
  
 <span data-ttu-id="d6fc7-248">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-248">This example produces the following output:</span></span>  
  
```  
Root  
Child  
Some text  
GrandChild  
element content  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DescendantsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6fc7-249">Retourne une collection d’éléments contenant cet élément ainsi que tous ses éléments descendants, dans l’ordre du document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-249">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-250">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-250">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6fc7-251">Retourne une collection d’éléments contenant cet élément ainsi que tous ses éléments descendants, dans l’ordre du document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-251">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-252"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> des éléments qui contiennent cet élément, ainsi que tous ses éléments descendants, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-252">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-253">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-253">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-254">L’exemple suivant crée une arborescence XML, puis l’utilise.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-254">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das =  
    from el in xmlTree.DescendantsAndSelf()  
    select el;  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = _  
    From el In xmlTree.DescendantsAndSelf() _  
    Select el  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="d6fc7-255">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-255">This example produces the following output:</span></span>  
  
```  
Root  
Child  
GrandChild  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d6fc7-256"><see cref="T:System.Xml.Linq.XName" /> à mettre en correspondance.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-256">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="d6fc7-257">Retourne une collection filtrée d’éléments contenant cet élément ainsi que tous ses éléments descendants, dans l’ordre du document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-257">Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order.</span></span> <span data-ttu-id="d6fc7-258">Seuls les éléments avec un <see cref="T:System.Xml.Linq.XName" /> correspondant sont inclus dans la collection.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-258">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-259"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> qui contiennent cet élément, ainsi que tous ses éléments descendants, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-259">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order.</span></span> <span data-ttu-id="d6fc7-260">Seuls les éléments avec un <see cref="T:System.Xml.Linq.XName" /> correspondant sont inclus dans la collection.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-260">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-261">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-261">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-262">L’exemple suivant crée une arborescence XML, puis l’utilise.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-262">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das = xmlTree.DescendantsAndSelf("Child");  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = xmlTree.DescendantsAndSelf("Child")  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="d6fc7-263">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-263">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptySequence">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; EmptySequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; EmptySequence" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.EmptySequence" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EmptySequence As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ EmptySequence { System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6fc7-264">Obtient une collection d’éléments vide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-264">Gets an empty collection of elements.</span></span></summary>
        <value><span data-ttu-id="d6fc7-265"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> qui contient une collection vide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-265">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-266">Cette propriété est généralement utilisée par les implémenteurs de classes lors de l’écriture d’une méthode qui retourne une collection d’éléments.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-266">This property is typically used by class implementers when writing a method that returns a collection of elements.</span></span> <span data-ttu-id="d6fc7-267">Si la méthode ne doit retourner aucun élément, elle peut utiliser cette propriété pour obtenir une collection vide de <xref:System.Xml.Linq.XElement> objets.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-267">If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute FirstAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute FirstAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.FirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ FirstAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6fc7-268">Obtient le premier attribut de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-268">Gets the first attribute of this element.</span></span></summary>
        <value><span data-ttu-id="d6fc7-269"><see cref="T:System.Xml.Linq.XAttribute" /> qui contient le premier attribut de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-269">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the first attribute of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-270">Les attributs sont stockés dans l’élément dans l’ordre qu’ils ont été ajoutés à l’élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-270">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-271">L’exemple suivant utilise cette propriété.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-271">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.FirstAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.FirstAttribute)  
```  
  
 <span data-ttu-id="d6fc7-272">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-272">This example produces the following output:</span></span>  
  
```  
Att1="1"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultNamespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetDefaultNamespace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetDefaultNamespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetDefaultNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefaultNamespace () As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetDefaultNamespace();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6fc7-273">Obtient le <see cref="T:System.Xml.Linq.XNamespace" /> par défaut de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-273">Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-274"><see cref="T:System.Xml.Linq.XNamespace" /> qui contient l'espace de noms par défaut de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-274">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-275">Les déclarations de Namespace peuvent être persistante en tant qu’attributs dans l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-275">Namespace declarations may be persisted as attributes in the XML tree.</span></span> <span data-ttu-id="d6fc7-276">Ces attributs spéciaux déclarent des espaces de noms, y compris les espaces de noms par défaut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-276">These special attributes declare namespaces, including default namespaces.</span></span> <span data-ttu-id="d6fc7-277">Cette méthode trouve la déclaration d’espace de noms qui déclare l’espace de noms par défaut, le cas échéant, et retourne le <xref:System.Xml.Linq.XNamespace> pour l’espace de noms par défaut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-277">This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace.</span></span>  
  
 <span data-ttu-id="d6fc7-278">S’il n’existe aucun attribut qui déclare l’espace de noms par défaut, cette méthode retourne alors <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-278">If there is no attribute that declares the default namespace, then this method returns <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d6fc7-279">Lorsque vous créez des arborescences XML à l’aide de c#, même si une arborescence XML est sérialisée avec un espace de noms par défaut, si l’espace de noms n’est pas persistante dans l’arborescence XML en tant qu’attribut, cette méthode ne signale pas l’espace de noms comme l’espace de noms par défaut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-279">When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.</span></span>  
  
 <span data-ttu-id="d6fc7-280">Lorsque vous créez des arborescences XML à l’aide de Visual Basic et des littéraux XML, si vous créez le code XML dans un espace de noms par défaut à l’aide de l’instruction Imports, alors un attribut d’espace de noms est créé à l’arborescence par le compilateur Visual Basic, et cette méthode signale cet espace de noms.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-280">When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-281">L’exemple suivant crée une arborescence XML qui a un espace de noms par défaut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-281">The following example creates an XML tree that has a default namespace.</span></span> <span data-ttu-id="d6fc7-282">Il utilise ensuite cette méthode pour récupérer l’espace de noms par défaut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-282">It then uses this method to retrieve the default namespace.</span></span>  
  
```csharp  
String xml = "<root xmlns='http://www.adventure-works.com'/>";  
XElement e = XElement.Parse(xml);  
Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim e As XElement = <root/>  
        Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d6fc7-283">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-283">This example produces the following output:</span></span>  
  
```  
Default namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamespaceOfPrefix">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetNamespaceOfPrefix (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetNamespaceOfPrefix(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNamespaceOfPrefix (prefix As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetNamespaceOfPrefix(System::String ^ prefix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix"><span data-ttu-id="d6fc7-284">Chaîne contenant le préfixe d'espace de noms à rechercher.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-284">A string that contains the namespace prefix to look up.</span></span></param>
        <summary><span data-ttu-id="d6fc7-285">Obtient l'espace de noms associé à un préfixe particulier pour ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-285">Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-286"><see cref="T:System.Xml.Linq.XNamespace" /> pour l'espace de noms associé au préfixe pour ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-286">An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-287">Cette méthode parcourt l’arborescence XML pour les attributs d’espace de noms qui sont dans la portée pour cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-287">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="d6fc7-288">Les préfixes Namespace sont spécifiés dans les attributs d’espace de noms qui se trouvent dans l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-288">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-289">L’exemple suivant crée une arborescence XML qui a un espace de noms avec un préfixe associé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-289">The following example creates an XML tree that has a namespace with an associated prefix.</span></span> <span data-ttu-id="d6fc7-290">Il utilise ensuite cette méthode pour récupérer le <xref:System.Xml.Linq.XNamespace> pour le préfixe.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-290">It then uses this method to retrieve the <xref:System.Xml.Linq.XNamespace> for the prefix.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
XNamespace awNamespace = xmlTree.GetNamespaceOfPrefix("aw");  
Console.WriteLine("Namespace: {0}", awNamespace);  
```  
  
 <span data-ttu-id="d6fc7-291">Lorsque vous utilisez Visual Basic, vous utilisez généralement la [opérateur GetXmlNamespace](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) (opérateur), comme suit</span><span class="sxs-lookup"><span data-stu-id="d6fc7-291">When using Visual Basic, you would typically use the [GetXmlNamespace Operator](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) operator, as follows</span></span>  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim awNamespace As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine("Namespace: {0}", awNamespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d6fc7-292">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-292">This example produces the following output:</span></span>  
  
```  
Namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrefixOfNamespace">
      <MemberSignature Language="C#" Value="public string GetPrefixOfNamespace (System.Xml.Linq.XNamespace ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPrefixOfNamespace(class System.Xml.Linq.XNamespace ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrefixOfNamespace (ns As XNamespace) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPrefixOfNamespace(System::Xml::Linq::XNamespace ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="ns"><span data-ttu-id="d6fc7-293"><see cref="T:System.Xml.Linq.XNamespace" /> à rechercher.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-293">An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.</span></span></param>
        <summary><span data-ttu-id="d6fc7-294">Obtient le préfixe associé à un espace de noms pour ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-294">Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-295"><see cref="T:System.String" /> qui contient le préfixe d'espace de noms.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-295">A <see cref="T:System.String" /> that contains the namespace prefix.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-296">Cette méthode parcourt l’arborescence XML pour les attributs d’espace de noms qui sont dans la portée pour cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-296">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="d6fc7-297">Les préfixes Namespace sont spécifiés dans les attributs d’espace de noms qui se trouvent dans l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-297">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
 <span data-ttu-id="d6fc7-298">Si l’espace de noms est l’espace de noms par défaut, et il n’existe pas de préfixe pour l’espace de noms, cette méthode retourne null.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-298">If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-299">L’exemple suivant crée une arborescence XML qui contient un espace de noms avec un préfixe.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-299">The following example creates an XML tree that contains a namespace with a prefix.</span></span> <span data-ttu-id="d6fc7-300">Il utilise ensuite cette méthode pour récupérer le préfixe pour l’espace de noms.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-300">It then uses this method to retrieve the prefix for the namespace.</span></span> <span data-ttu-id="d6fc7-301">Notez que cet exemple utilise la conversion implicite de chaîne à <xref:System.Xml.Linq.XNamespace> lors de l’appel de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-301">Notice that this example uses the implicit conversion from string to <xref:System.Xml.Linq.XNamespace> when calling this method.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
string prefix = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com");  
Console.WriteLine("Prefix: {0}", prefix);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim prefix As String = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com")  
        Console.WriteLine("Prefix: {0}", prefix)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d6fc7-302">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-302">This example produces the following output:</span></span>  
  
```  
Prefix: aw  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAttributes { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6fc7-303">Obtient une valeur indiquant si cet élément possède au moins un attribut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-303">Gets a value indicating whether this element has at least one attribute.</span></span></summary>
        <value>
          <span data-ttu-id="d6fc7-304"><see langword="true" /> si cet élément possède au moins un attribut. Sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-304"><see langword="true" /> if this element has at least one attribute; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d6fc7-305">L’exemple suivant utilise cette propriété.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-305">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1)  
);  
Console.WriteLine(xmlTree1.HasAttributes);  
XElement xmlTree2 = new XElement("Root");  
Console.WriteLine(xmlTree2.HasAttributes);  
```  
  
```vb  
Dim xmlTree1 As XElement = <Root Att1="1"/>  
Console.WriteLine(xmlTree1.HasAttributes)  
  
Dim xmlTree2 As XElement = <Root/>  
Console.WriteLine(xmlTree2.HasAttributes)  
```  
  
 <span data-ttu-id="d6fc7-306">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-306">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasElements">
      <MemberSignature Language="C#" Value="public bool HasElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElements As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElements { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6fc7-307">Obtient une valeur indiquant si cet élément possède au moins un élément enfant.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-307">Gets a value indicating whether this element has at least one child element.</span></span></summary>
        <value>
          <span data-ttu-id="d6fc7-308"><see langword="true" /> si cet élément a au moins un élément enfant ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-308"><see langword="true" /> if this element has at least one child element; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d6fc7-309">L’exemple suivant utilise cette propriété.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-309">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1)  
);  
Console.WriteLine(xmlTree1.HasElements);  
XElement xmlTree2 = new XElement("Root", "contents");  
Console.WriteLine(xmlTree2.HasElements);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
        </Root>  
Console.WriteLine(xmlTree1.HasElements)  
  
Dim xmlTree2 As XElement = <Root>contents</Root>  
Console.WriteLine(xmlTree2.HasElements)  
```  
  
 <span data-ttu-id="d6fc7-310">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-310">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6fc7-311">Obtient une valeur indiquant si cet élément ne contient aucun contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-311">Gets a value indicating whether this element contains no content.</span></span></summary>
        <value>
          <span data-ttu-id="d6fc7-312"><see langword="true" /> si cet élément ne contient aucun contenu ; sinon <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-312"><see langword="true" /> if this element contains no content; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-313">Notez qu’un élément qui contient une balise de début et de fin sans contenu entre les balises n'est pas considéré comme un élément vide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-313">Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element.</span></span> <span data-ttu-id="d6fc7-314">Il a un contenu sans longueur.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-314">It has content with no length.</span></span> <span data-ttu-id="d6fc7-315">Seul un élément qui contient uniquement une balise de début et est exprimée sous la forme d’un élément vide terminé, est considéré comme vide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-315">Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-316">L’exemple suivant crée une variété d’arborescences XML et affiche la valeur de cette propriété avec chaque arborescence.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-316">The following example creates a variety of XML trees, and shows the value of this property with each tree.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root");  
Console.WriteLine(el1);  
Console.WriteLine(el1.IsEmpty);  
Console.WriteLine();  
XElement el2 = new XElement("Root", "content");  
Console.WriteLine(el2);  
Console.WriteLine(el2.IsEmpty);  
Console.WriteLine();  
XElement el3 = new XElement("Root", "");  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
Console.WriteLine();  
el3.ReplaceAll(null);  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
```  
  
```vb  
Dim el1 As XElement = <Root/>  
Console.WriteLine(el1)  
Console.WriteLine(el1.IsEmpty)  
Console.WriteLine()  
Dim el2 As XElement = <Root>content</Root>  
Console.WriteLine(el2)  
Console.WriteLine(el2.IsEmpty)  
Console.WriteLine()  
Dim el3 As XElement = <Root></Root>  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
Console.WriteLine()  
el3.ReplaceAll(Nothing)  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
```  
  
 <span data-ttu-id="d6fc7-317">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-317">This example produces the following output:</span></span>  
  
```  
<Root />  
True  
  
<Root>content</Root>  
False  
  
<Root></Root>  
False  
  
<Root />  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LastAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute LastAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute LastAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.LastAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ LastAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6fc7-318">Obtient le dernier attribut de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-318">Gets the last attribute of this element.</span></span></summary>
        <value><span data-ttu-id="d6fc7-319"><see cref="T:System.Xml.Linq.XAttribute" /> qui contient le dernier attribut de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-319">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the last attribute of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-320">Les attributs sont stockés dans l’élément dans l’ordre qu’ils ont été ajoutés à l’élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-320">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-321">L’exemple suivant crée une arborescence XML avec trois attributs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-321">The following example creates an XML tree with three attributes.</span></span> <span data-ttu-id="d6fc7-322">Il écrit ensuite le dernier attribut en tant que sortie.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-322">It then writes the last attribute as output.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.LastAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.LastAttribute)  
```  
  
 <span data-ttu-id="d6fc7-323">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-323">This example produces the following output:</span></span>  
  
```  
Att3="3"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6fc7-324">Crée un <see cref="T:System.Xml.Linq.XElement" /> à partir d'un fichier spécifié par un URI, d'un <see cref="T:System.IO.TextReader" /> ou d'un <see cref="T:System.Xml.XmlReader" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-324">Creates a new <see cref="T:System.Xml.Linq.XElement" /> from a file specified by a URI, from an <see cref="T:System.IO.TextReader" />, or from an <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-325">Vous pouvez utiliser une des surcharges de cette méthode pour charger un <xref:System.Xml.Linq.XElement> à partir d’un fichier, un <xref:System.IO.TextReader>, ou un <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-325">You can use one of the overloads of this method to load an <xref:System.Xml.Linq.XElement> from a file, a <xref:System.IO.TextReader>, or an <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="d6fc7-326">Pour créer un <xref:System.Xml.Linq.XElement> à partir d’une chaîne qui contient du code XML, utilisez <xref:System.Xml.Linq.XElement.Parse%2A>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-326">To create an <xref:System.Xml.Linq.XElement> from a string that contains XML, use <xref:System.Xml.Linq.XElement.Parse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="d6fc7-327">Flux contenant les données XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-327">The stream that contains the XML data.</span></span></param>
        <summary><span data-ttu-id="d6fc7-328">Crée une nouvelle instance de <see cref="T:System.Xml.Linq.XElement" /> à l'aide du flux spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-328">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-329">Objet <see cref="T:System.Xml.Linq.XElement" /> permettant de lire les données contenues dans le flux de données.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-329">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that is contained in the stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-330">Si vous souhaitez contrôler les options de chargement, utilisez la <xref:System.Xml.Linq.XElement.Load%2A> surcharge acceptant <xref:System.Xml.Linq.LoadOptions> en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-330">If you want to control load options, use the <xref:System.Xml.Linq.XElement.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="d6fc7-331">LINQ à la fonctionnalité de chargement de XML repose sur <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-331">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-332">Par conséquent, vous pouvez intercepter les exceptions levées par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> surcharger des méthodes et les <xref:System.Xml.XmlReader> les méthodes qui lisent et analysent le document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-332">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="d6fc7-333">Si vous devez modifier <xref:System.Xml.XmlReaderSettings>, procédez comme suit :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-333">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="d6fc7-334">Créer un <xref:System.Xml.XmlReader> en appelant une de le <xref:System.Xml.XmlReader.Create%2A> surcharges qui prennent <xref:System.Xml.XmlReaderSettings> en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-334">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="d6fc7-335">Passez le <xref:System.Xml.XmlReader> à un du <xref:System.Xml.Linq.XElement>de <xref:System.Xml.Linq.XElement.Load%2A> surcharges qui acceptent <xref:System.Xml.XmlReader> en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-335">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader"><span data-ttu-id="d6fc7-336"><see cref="T:System.IO.TextReader" /> qui sera lu pour le contenu <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-336">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span></span></param>
        <summary><span data-ttu-id="d6fc7-337">Charge un <see cref="T:System.Xml.Linq.XElement" /> à partir d'un <see cref="T:System.IO.TextReader" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-337">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-338"><see cref="T:System.Xml.Linq.XElement" /> qui contient le code XML qui a été lu à partir du <see cref="T:System.IO.TextReader" />spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-338">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-339">Cette méthode lit les données XML brutes dans l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-339">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="d6fc7-340">Il ignore tous les espaces blancs non significatifs dans le fichier.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-340">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="d6fc7-341">LINQ à la fonctionnalité de chargement de XML repose sur <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-341">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-342">Par conséquent, vous pouvez intercepter les exceptions levées par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> surcharger des méthodes et les <xref:System.Xml.XmlReader> les méthodes qui lisent et analysent le document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-342">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-343">L’exemple suivant charge un élément d’un <xref:System.IO.StringReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-343">The following example loads an element from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader sr = new StringReader("<Root><Child/></Root>");  
XElement xmlTree = XElement.Load(sr);  
sr.Close();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim sr As TextReader = New StringReader("<Root><Child/></Root>")  
Dim xmlTree As XElement = XElement.Load(sr)  
sr.Close()  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="d6fc7-344">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-344">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="d6fc7-345">Chaîne d'URI faisant référence au fichier à charger dans un nouveau <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-345">A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-346">Charge un <see cref="T:System.Xml.Linq.XElement" /> à partir d'un fichier.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-346">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-347"><see cref="T:System.Xml.Linq.XElement" /> qui contient le contenu du fichier spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-347">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-348">Cette méthode lit les données XML brutes dans l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-348">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="d6fc7-349">Il ignore tous les espaces blancs non significatifs dans le fichier.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-349">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="d6fc7-350">LINQ à la fonctionnalité de chargement de XML repose sur <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-350">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-351">Par conséquent, vous pouvez intercepter les exceptions levées par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> surcharger des méthodes et les <xref:System.Xml.XmlReader> les méthodes qui lisent et analysent le document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-351">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-352">L’exemple suivant crée une arborescence XML, l’enregistre dans un fichier, puis utilise cette méthode pour charger le <xref:System.Xml.Linq.XElement> à partir du fichier.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-352">The following example creates an XML tree, saves it to a file, and then uses this method to load the <xref:System.Xml.Linq.XElement> from the file.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", "content")  
);  
xmlTree1.Save("Tree.xml");  
  
XElement xmlTree2 = XElement.Load("Tree.xml");  
Console.WriteLine(xmlTree2.Name);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>Content</Child>  
        </Root>  
xmlTree1.Save("Tree.xml")  
  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml")  
Console.WriteLine(xmlTree2.Name)  
```  
  
 <span data-ttu-id="d6fc7-353">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-353">This example produces the following output:</span></span>  
  
```  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="d6fc7-354"><see cref="T:System.Xml.XmlReader" /> qui sera lu pour le contenu du <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-354">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-355">Charge un <see cref="T:System.Xml.Linq.XElement" /> à partir d'un <see cref="T:System.Xml.XmlReader" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-355">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-356"><see cref="T:System.Xml.Linq.XElement" /> qui contient le code XML qui a été lu à partir du <see cref="T:System.Xml.XmlReader" />spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-356">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-357">En créant un <xref:System.Xml.XmlNodeReader> à partir d’un document DOM, puis en utilisant la <xref:System.Xml.XmlNodeReader> pour créer un <xref:System.Xml.Linq.XElement>, cette méthode peut être utilisée pour créer une copie d’un document DOM dans une arborescence LINQ to XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-357">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="d6fc7-358">LINQ à la fonctionnalité de chargement de XML repose sur <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-358">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-359">Par conséquent, vous pouvez intercepter les exceptions levées par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> surcharger des méthodes et les <xref:System.Xml.XmlReader> les méthodes qui lisent et analysent le document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-359">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-360">L’exemple suivant crée un document DOM, crée un <xref:System.Xml.XmlNodeReader> à partir du document DOM, instancie une arborescence à partir du lecteur.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-360">The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, instantiates a tree from the reader.</span></span> <span data-ttu-id="d6fc7-361">Ce code copie effectivement un document DOM en LINQ à l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-361">This code effectively copies a DOM document into a LINQ to XML tree.</span></span>  
  
```csharp  
// Create a DOM document with some content.  
XmlDocument doc = new XmlDocument();  
XmlElement child = doc.CreateElement("Child");  
child.InnerText = "child contents";  
XmlElement root = doc.CreateElement("Root");  
root.AppendChild(child);  
doc.AppendChild(root);  
  
// Create a reader and move to the content.  
using (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader);  
    Console.WriteLine(xRoot);  
}  
```  
  
```vb  
' Create a DOM document with some content.  
Dim doc As XmlDocument = New XmlDocument()  
Dim child As XmlElement = doc.CreateElement("Child")  
child.InnerText = "child contents"  
Dim root As XmlElement = doc.CreateElement("Root")  
root.AppendChild(child)  
doc.AppendChild(root)  
  
' Create a reader and move to the content.  
Using nodeReader = New XmlNodeReader(doc)  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader)  
    Console.WriteLine(xRoot)  
End Using  
```  
  
 <span data-ttu-id="d6fc7-362">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-362">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>child contents</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="d6fc7-363">Flux contenant les données XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-363">The stream containing the XML data.</span></span></param>
        <param name="options"><span data-ttu-id="d6fc7-364">Objet <see cref="T:System.Xml.Linq.LoadOptions" /> qui spécifie s'il faut charger l'URI de base et les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-364">A <see cref="T:System.Xml.Linq.LoadOptions" /> object that specifies whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="d6fc7-365">Crée une instance <see cref="T:System.Xml.Linq.XElement" /> à partir du flux spécifié, en conservant éventuellement l'espace blanc, en définissant l'URI de base, et en conservant les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-365">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-366">Objet <see cref="T:System.Xml.Linq.XElement" /> permettant de lire les données contenues dans le flux de données.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-366">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that the stream contains.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-367">LINQ à la fonctionnalité de chargement de XML repose sur <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-367">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-368">Par conséquent, vous pouvez intercepter les exceptions levées par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> surcharger des méthodes et les <xref:System.Xml.XmlReader> les méthodes qui lisent et analysent le document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-368">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="d6fc7-369">Si vous devez modifier <xref:System.Xml.XmlReaderSettings>, procédez comme suit :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-369">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="d6fc7-370">Créer un <xref:System.Xml.XmlReader> en appelant une de le <xref:System.Xml.XmlReader.Create%2A> surcharges qui prennent <xref:System.Xml.XmlReaderSettings> en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-370">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="d6fc7-371">Passez le <xref:System.Xml.XmlReader> à un du <xref:System.Xml.Linq.XElement>de <xref:System.Xml.Linq.XElement.Load%2A> surcharges qui acceptent <xref:System.Xml.XmlReader> en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-371">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="textReader"><span data-ttu-id="d6fc7-372"><see cref="T:System.IO.TextReader" /> qui sera lu pour le contenu <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-372">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span></span></param>
        <param name="options"><span data-ttu-id="d6fc7-373"><see cref="T:System.Xml.Linq.LoadOptions" /> qui spécifie le comportement pour les espaces blancs et détermine s'il faut charger l'URI de base et les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-373">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="d6fc7-374">Charge un <see cref="T:System.Xml.Linq.XElement" /> à partir d'un <see cref="T:System.IO.TextReader" />, en conservant éventuellement l'espace blanc et les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-374">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-375"><see cref="T:System.Xml.Linq.XElement" /> qui contient le code XML qui a été lu à partir du <see cref="T:System.IO.TextReader" />spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-375">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-376">Si le code XML source est mis en retrait, la définition de la <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> indicateur dans `options` provoque le lecteur à lire tous les espaces blancs dans le XML source.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-376">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="d6fc7-377">Les nœuds de type <xref:System.Xml.Linq.XText> sont créés pour les espaces blancs significatifs et non significatifs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-377">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="d6fc7-378">Si le code XML source est mis en retrait, ne définissez ne pas le <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> indicateur dans `options` amène le lecteur à ignorer tous les espaces blancs non significatifs dans le XML source.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-378">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="d6fc7-379">L’arborescence XML est créée sans nœud de texte pour les espaces blancs non significatifs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-379">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="d6fc7-380">Si la source XML n’est pas mis en retrait, la définition de la <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> indicateur dans `options` n’a aucun effet.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-380">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="d6fc7-381">Espace blanc significatif est conservé, et il n’y aucun étendues des espaces blancs non significatifs qui peuvent provoquer la création de plusieurs nœuds de texte d’un espace blanc.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-381">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="d6fc7-382">Pour plus d’informations, consultez [conserver les espaces lors du chargement ou de l’analyse de XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) et [conserver un espace blanc tandis que sérialisation](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-382">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="d6fc7-383">Utilisez <xref:System.Xml.Linq.XElement.Parse%2A> pour créer un <xref:System.Xml.Linq.XElement> à partir d’une chaîne qui contient du code XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-383">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="d6fc7-384">Paramètre <xref:System.Xml.Linq.LoadOptions.SetBaseUri> n’aura aucun effet lors du chargement d’un <xref:System.IO.TextReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-384">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when loading from a <xref:System.IO.TextReader>.</span></span>  
  
 <span data-ttu-id="d6fc7-385">Il existe une baisse des performances si vous définissez la <xref:System.Xml.Linq.LoadOptions.SetLineInfo> indicateur.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-385">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="d6fc7-386">Les informations de ligne sont exactes immédiatement après le chargement du document XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-386">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="d6fc7-387">Si vous modifiez l’arborescence XML après le chargement du document, les informations de ligne peuvent perdre leur signification.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-387">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="d6fc7-388">LINQ à la fonctionnalité de chargement de XML repose sur <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-388">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-389">Par conséquent, vous pouvez intercepter les exceptions levées par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> surcharger des méthodes et les <xref:System.Xml.XmlReader> les méthodes qui lisent et analysent le document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-389">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-390">L’exemple suivant charge un <xref:System.Xml.Linq.XElement> d’un <xref:System.IO.StringReader> de deux façons différentes : en conservant l’espace blanc et ne conservant ne pas d’espace blanc.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-390">The following example loads an <xref:System.Xml.Linq.XElement> from a <xref:System.IO.StringReader> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="d6fc7-391">Il utilise ensuite une requête pour déterminer le nombre de nœuds d’espaces blancs dans l’arborescence XML résultante.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-391">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
TextReader sr;  
int whiteSpaceNodes;  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree1 = XElement.Load(sr, LoadOptions.None);  
sr.Close();  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree2 = XElement.Load(sr, LoadOptions.PreserveWhitespace);  
sr.Close();  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim sr As TextReader  
Dim whiteSpaceNodes As Integer  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree1 As XElement = XElement.Load(sr, LoadOptions.None)  
sr.Close()  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree2 As XElement = XElement.Load(sr, LoadOptions.PreserveWhitespace)  
sr.Close()  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="d6fc7-392">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-392">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="d6fc7-393">L’exemple suivant charge les informations de ligne tandis qu’il charge à partir de la <xref:System.IO.TextReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-393">The following example loads the line information as it loads from the <xref:System.IO.TextReader>.</span></span> <span data-ttu-id="d6fc7-394">Il imprime ensuite les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-394">It then prints the line information.</span></span>  
  
```csharp  
TextReader sr = new StringReader(  
@"<Root>  
  <Child>  
    <GrandChild1/>  
    <GrandChild2/>  
  </Child>  
</Root>");  
XElement po = XElement.Load(sr,  
    LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim sr As TextReader = New StringReader( _  
    "<Root>" & Environment.NewLine & _  
    "  <Child>" & Environment.NewLine & _  
    "    <GrandChild1/>" & Environment.NewLine & _  
    "    <GrandChild2/>" & Environment.NewLine & _  
    "  </Child>" & Environment.NewLine & _  
    "</Root>")  
Dim po As XElement = XElement.Load(sr, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="d6fc7-395">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-395">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    4  
    GrandChild1     3    6  
    GrandChild2     4    6  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="uri"><span data-ttu-id="d6fc7-396">Chaîne d'URI faisant référence au fichier à charger dans un <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-396">A URI string referencing the file to load into an <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <param name="options"><span data-ttu-id="d6fc7-397"><see cref="T:System.Xml.Linq.LoadOptions" /> qui spécifie le comportement pour les espaces blancs et détermine s'il faut charger l'URI de base et les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-397">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="d6fc7-398">Charge un <see cref="T:System.Xml.Linq.XElement" /> à partir d'un fichier, en conservant éventuellement l'espace blanc, en définissant l'URI de base, et en conservant les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-398">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-399"><see cref="T:System.Xml.Linq.XElement" /> qui contient le contenu du fichier spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-399">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-400">Si le code XML source est mis en retrait, la définition de la <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> indicateur dans `options` provoque le lecteur à lire tous les espaces blancs dans le XML source.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-400">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="d6fc7-401">Les nœuds de type <xref:System.Xml.Linq.XText> sont créés pour les espaces blancs significatifs et non significatifs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-401">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="d6fc7-402">Si le code XML source est mis en retrait, ne définissez ne pas le <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> indicateur dans `options` amène le lecteur à ignorer tous les espaces blancs non significatifs dans le XML source.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-402">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="d6fc7-403">L’arborescence XML est créée sans nœud de texte pour les espaces blancs non significatifs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-403">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="d6fc7-404">Si la source XML n’est pas mis en retrait, la définition de la <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> indicateur dans `options` n’a aucun effet.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-404">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="d6fc7-405">Espace blanc significatif est conservé, et il n’y aucun étendues des espaces blancs non significatifs qui peuvent provoquer la création de plusieurs nœuds de texte d’un espace blanc.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-405">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="d6fc7-406">Pour plus d’informations, consultez [conserver les espaces lors du chargement ou de l’analyse de XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) et [conserver un espace blanc tandis que sérialisation](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-406">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="d6fc7-407">Utilisez <xref:System.Xml.Linq.XElement.Parse%2A> pour créer un <xref:System.Xml.Linq.XElement> à partir d’une chaîne qui contient du code XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-407">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="d6fc7-408">Il existe une baisse des performances si vous définissez la <xref:System.Xml.Linq.LoadOptions.SetBaseUri> et <xref:System.Xml.Linq.LoadOptions.SetLineInfo> indicateurs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-408">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.</span></span>  
  
 <span data-ttu-id="d6fc7-409">L’URI de base et les informations de ligne sont exactes immédiatement après le chargement du document XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-409">The base URI and the line information are accurate immediately after loading the XML document.</span></span> <span data-ttu-id="d6fc7-410">Si vous modifiez l’arborescence XML après le chargement du document, les informations d’URI et de la ligne de base peuvent perdre leur signification.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-410">If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</span></span>  
  
 <span data-ttu-id="d6fc7-411">LINQ à la fonctionnalité de chargement de XML repose sur <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-411">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-412">Par conséquent, vous pouvez intercepter les exceptions levées par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> surcharger des méthodes et les <xref:System.Xml.XmlReader> les méthodes qui lisent et analysent le document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-412">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-413">L’exemple suivant charge un <xref:System.Xml.Linq.XElement> à partir d’un fichier de deux manières différentes : en conservant l’espace blanc et ne conservant ne pas d’espace blanc.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-413">The following example loads an <xref:System.Xml.Linq.XElement> from a file in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="d6fc7-414">Il utilise ensuite une requête pour déterminer le nombre de nœuds d’espaces blancs dans l’arborescence XML résultante.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-414">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
XElement xmlTree1 = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace);  
xmlTree1.Save("Tree.xml");  
Console.WriteLine(xmlTree1);  
  
int whiteSpaceNodes;  
XElement xmlTree2 = XElement.Load("Tree.xml",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
XElement xmlTree3 = XElement.Load("Tree.xml",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree3  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace)  
xmlTree1.Save("Tree.xml")  
Console.WriteLine(xmlTree1)  
  
Dim whiteSpaceNodes As Integer  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml", LoadOptions.None)  
whiteSpaceNodes = xmlTree2 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree3 As XElement = XElement.Load("Tree.xml", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree3 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="d6fc7-415">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-415">This example produces the following output:</span></span>  
  
```  
<Root> <Child>  </Child> </Root>  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="d6fc7-416">L’exemple suivant charge les informations d’URI et de la ligne de base, tandis qu’il charge le fichier.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-416">The following example loads the base URI and line information as it loads the file.</span></span> <span data-ttu-id="d6fc7-417">Il imprime ensuite l’URI de base et les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-417">It then prints the base URI and the line information.</span></span>  
  
 <span data-ttu-id="d6fc7-418">Cet exemple utilise le fichier de ressource suivant : [exemple de fichier XML : commande fournisseur typique (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-418">This example uses the following resource file: [Sample XML File: Typical Purchase Order (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span></span>  
  
```csharp  
XElement po = XElement.Load("PurchaseOrder.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim po As XElement = XElement.Load("PurchaseOrder.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
Dim splitUri() As String = po.BaseUri.Split("/")  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="d6fc7-419">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-419">This example produces the following output:</span></span>  
  
```  
BaseUri: PurchaseOrder.xml  
  
Element Name        Line Position  
------------        ---- --------  
PurchaseOrder       2    2  
  Address           3    4  
    Name            4    6  
    Street          5    6  
    City            6    6  
    State           7    6  
    Zip             8    6  
    Country         9    6  
  Address           11   4  
    Name            12   6  
    Street          13   6  
    City            14   6  
    State           15   6  
    Zip             16   6  
    Country         17   6  
  DeliveryNotes     19   4  
  Items             20   4  
    Item            21   6  
      ProductName   22   8  
      Quantity      23   8  
      USPrice       24   8  
      Comment       25   8  
    Item            27   6  
      ProductName   28   8  
      Quantity      29   8  
      USPrice       30   8  
      ShipDate      31   8  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="d6fc7-420"><see cref="T:System.Xml.XmlReader" /> qui sera lu pour le contenu du <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-420">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span></span></param>
        <param name="options"><span data-ttu-id="d6fc7-421"><see cref="T:System.Xml.Linq.LoadOptions" /> qui spécifie le comportement pour les espaces blancs et détermine s'il faut charger l'URI de base et les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-421">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="d6fc7-422">Charge un <see cref="T:System.Xml.Linq.XElement" /> à partir d'un <see cref="T:System.Xml.XmlReader" />, en conservant éventuellement l'espace blanc, en définissant l'URI de base, et en conservant les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-422">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally preserving white space, setting the base URI, and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-423"><see cref="T:System.Xml.Linq.XElement" /> qui contient le code XML qui a été lu à partir du <see cref="T:System.Xml.XmlReader" />spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-423">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-424">En créant un <xref:System.Xml.XmlNodeReader> à partir d’un document DOM, puis en utilisant la <xref:System.Xml.XmlNodeReader> pour créer un <xref:System.Xml.Linq.XElement>, cette méthode peut être utilisée pour créer une copie d’un document DOM dans une arborescence LINQ to XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-424">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="d6fc7-425">Utilisez <xref:System.Xml.Linq.XElement.Parse%2A> pour créer un <xref:System.Xml.Linq.XElement> à partir d’une chaîne qui contient du code XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-425">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="d6fc7-426">Paramètre <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> n’est pas valide lors du chargement d’un <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-426">Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-427">Le <xref:System.Xml.XmlReader> sera configuré pour lire l’espace blanc ou non.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-427">The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not.</span></span> <span data-ttu-id="d6fc7-428">L’arborescence LINQ to XML est remplie avec les nœuds d’espace blanc qui les surfaces du lecteur.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-428">The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</span></span> <span data-ttu-id="d6fc7-429">Il s’agit du comportement, indépendamment du fait que <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> est défini ou non.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-429">This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.</span></span>  
  
 <span data-ttu-id="d6fc7-430">Le <xref:System.Xml.XmlReader> peut avoir un URI de base valid ou pas.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-430">The <xref:System.Xml.XmlReader> may have a valid base URI or not.</span></span> <span data-ttu-id="d6fc7-431">Si vous définissez <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, la base de URI sera défini dans l’arborescence XML à partir de l’URI de base qui est signalée par le <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-431">If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="d6fc7-432">Le <xref:System.Xml.XmlReader> peut avoir des informations de ligne valides ou pas.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-432">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="d6fc7-433">Si vous définissez <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, les informations de ligne seront définies dans l’arborescence XML à partir des informations de ligne qui sont signalées par le <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-433">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="d6fc7-434">Il existe une baisse des performances si vous définissez la <xref:System.Xml.Linq.LoadOptions.SetLineInfo> indicateur.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-434">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="d6fc7-435">Les informations de ligne sont exactes immédiatement après le chargement du document XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-435">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="d6fc7-436">Si vous modifiez l’arborescence XML après le chargement du document, les informations de ligne peuvent perdre leur signification.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-436">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="d6fc7-437">LINQ à la fonctionnalité de chargement de XML repose sur <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-437">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-438">Par conséquent, vous pouvez intercepter les exceptions levées par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> surcharger des méthodes et les <xref:System.Xml.XmlReader> les méthodes qui lisent et analysent le document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-438">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-439">L’exemple suivant charge les informations de ligne qu’il charge à partir de la <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-439">The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-440">Il imprime ensuite les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-440">It then prints the line information.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
// Create a reader and move to the content.  
using (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  
{  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader, LoadOptions.SetLineInfo);  
    Console.WriteLine("{0}{1}{2}",  
        "Element Name".PadRight(20),  
        "Line".PadRight(5),  
        "Position");  
    Console.WriteLine("{0}{1}{2}",  
        "------------".PadRight(20),  
        "----".PadRight(5),  
        "--------");  
    foreach (XElement e in xRoot.DescendantsAndSelf())  
        Console.WriteLine("{0}{1}{2}",  
            ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
            ((IXmlLineInfo)e).LinePosition);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child>" & Environment.NewLine & _  
    "        <GrandChild/>" & Environment.NewLine & _  
    "    </Child>" & Environment.NewLine & _  
    "</Root>"  
  
' Create a reader and move to the content.  
Using nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  
  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader, LoadOptions.SetLineInfo)  
    Console.WriteLine("{0}{1}{2}", _  
        "Element Name".PadRight(20), _  
        "Line".PadRight(5), _  
        "Position")  
    Console.WriteLine("{0}{1}{2}", _  
        "------------".PadRight(20), _  
        "----".PadRight(5), _  
        "--------")  
    For Each e As XElement In xRoot.DescendantsAndSelf()  
        Console.WriteLine("{0}{1}{2}", _  
            ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
            (DirectCast(e, IXmlLineInfo)).LinePosition)  
    Next  
End Using  
```  
  
 <span data-ttu-id="d6fc7-441">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-441">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textReader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XName Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XName ^ Name { System::Xml::Linq::XName ^ get(); void set(System::Xml::Linq::XName ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6fc7-442">Obtient ou définit le nom de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-442">Gets or sets the name of this element.</span></span></summary>
        <value><span data-ttu-id="d6fc7-443"><see cref="T:System.Xml.Linq.XName" /> qui contient le nom de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-443">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-444">Paramètre de cette propriété déclenche le <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-444">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-445">L’exemple suivant utilise cette propriété pour déterminer le nom d’un élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-445">The following example uses this property to determine the name of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.Name);  
  
XNamespace ns = "http://www.adventure-works.com";  
XElement el2 = new XElement(ns + "Root", "content");  
Console.WriteLine(el2.Name);  
Console.WriteLine(el2.Name.Namespace);  
Console.WriteLine(el2.Name.LocalName);  
el2.Name = ns + "NewName";  
Console.WriteLine(el2.Name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el1 As XElement = <Root>content</Root>  
        Console.WriteLine(el1.Name)  
  
        Dim el2 As XElement = <aw:Root>content</aw:Root>  
        Console.WriteLine(el2.Name)  
        Console.WriteLine(el2.Name.Namespace)  
        Console.WriteLine(el2.Name.LocalName)  
        Dim aw as XNamespace = GetXmlNamespace(aw)  
        el2.Name = aw + "NewName"  
        Console.WriteLine(el2.Name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="d6fc7-446">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-446">This example produces the following output:</span></span>  
  
```  
Root  
{http://www.adventure-works.com}Root  
http://www.adventure-works.com  
Root  
{http://www.adventure-works.com}NewName  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6fc7-447">Obtient le type de ce nœud.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-447">Gets the node type for this node.</span></span></summary>
        <value><span data-ttu-id="d6fc7-448">Type de nœud.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-448">The node type.</span></span> <span data-ttu-id="d6fc7-449">Pour les objets <see cref="T:System.Xml.Linq.XElement" />, cette valeur est <see cref="F:System.Xml.XmlNodeType.Element" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-449">For <see cref="T:System.Xml.Linq.XElement" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Element" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-450">Étant donné que toutes les classes qui dérivent de <xref:System.Xml.Linq.XObject> contiennent un <xref:System.Xml.Linq.XObject.NodeType%2A> propriété, vous pouvez écrire du code qui fonctionne sur des collections de la sous-classe concrète de <xref:System.Xml.Linq.XObject>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-450">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="d6fc7-451">Votre code peut ensuite tester le type de nœud de chaque nœud dans la collection.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-451">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-452">L’exemple suivant utilise cette propriété pour afficher le type de nœud d’un élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-452">The following example uses this property to print the node type of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.NodeType);  
Console.WriteLine();  
```  
  
```vb  
Dim el1 As XElement = <Root>content</Root>  
Console.WriteLine(el1.NodeType.ToString())  
Console.WriteLine()  
```  
  
 <span data-ttu-id="d6fc7-453">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-453">This example produces the following output:</span></span>  
  
```  
Element  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator bool (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator bool(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-454"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-454">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Boolean" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-455">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-455">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-456"><see cref="T:System.Boolean" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-456">A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-457">Lors de la conversion à <xref:System.Boolean> à partir d’un attribut ou un élément, valeurs autorisées sont « 0 », « 1 » et que toute chaîne qui génère « true » ou « false » après rognage et conversion en minuscules.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-457">When converting to <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="d6fc7-458">L’exemple suivant crée des éléments avec des valeurs booléennes.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-458">The following example creates some elements with boolean values.</span></span> <span data-ttu-id="d6fc7-459">Il convertit ensuite les <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-459">It then casts them to <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false)  
);  
bool bool1 = (bool)root.Element("BoolValue1");  
bool bool2 = (bool)root.Element("BoolValue2");  
Console.WriteLine("(bool)BoolValue1={0}", bool1);  
Console.WriteLine("(bool)BoolValue2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
Dim bool1 As Boolean = CBool(root.Element("BoolValue1"))  
Dim bool2 As Boolean = CBool(root.Element("BoolValue2"))  
Console.WriteLine("(bool)BoolValue1={0}", bool1)  
Console.WriteLine("(bool)BoolValue2={0}", bool2)  
```  
  
 <span data-ttu-id="d6fc7-460">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-460">This example produces the following output:</span></span>  
  
```  
(bool)BoolValue1=True  
(bool)BoolValue2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-461">L'élément ne contient pas de valeur <see cref="T:System.Boolean" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-461">The element does not contain a valid <see cref="T:System.Boolean" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-462">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-462">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTime (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTime(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-463"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.DateTime" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-463">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTime" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-464">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.DateTime" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-464">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-465"><see cref="T:System.DateTime" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-465">A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-466">L’espace de valeur d’un attribut ou un élément qui contient la date et d’heure est étroitement lié aux dates et heures décrites dans ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-466">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="d6fc7-467">Lorsque vous créez un attribut ou un élément qui contient la date et d’heure, les valeurs d’attribut ou d’élément sont mis en forme conformément à la spécification W3C.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-467">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="d6fc7-468">Consultez la spécification W3C pour plus de détails.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-468">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="d6fc7-469">Comportement est lax lors de la conversion à un <xref:System.DateTime> à partir d’un attribut ou élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-469">Behavior is lax when casting to a <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="d6fc7-470">Même si la valeur d’attribut ou d’élément n’est pas formatée exactement par la spécification W3C, la valeur est correctement convertie en un <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-470">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="d6fc7-471">Cet opérateur de conversion utilise <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> pour convertir un <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-471">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>

## Examples  
 <span data-ttu-id="d6fc7-472">L’exemple suivant crée un élément avec la date et d’heure.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-472">The following example creates an element with date and time content.</span></span> <span data-ttu-id="d6fc7-473">Il convertit ensuite à <xref:System.DateTime> pour récupérer la valeur.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-473">It then casts it to <xref:System.DateTime> to retrieve the value.</span></span>  
  
```csharp  
// Behavior is strict when formatting an XML element or attribute from a DateTime,  
// but behavior is lax when casting to a DateTime from an element or attribute.  
XElement root = new XElement("Root", new DateTime(2006, 10, 6, 12, 30, 0));  
Console.WriteLine(root);  
  
// Cast from a strictly formatted XML element.  
DateTime dt = (DateTime)root;  
Console.WriteLine("dt={0}", dt);  
Console.WriteLine("-----");  
  
// If root is formatted in some different way:  
XElement dtElement = new XElement("OrderDate", "October 6, 2006");  
Console.WriteLine(dtElement);  
DateTime orderDate = (DateTime)dtElement;  
Console.WriteLine("orderDate={0:d}", orderDate);  
```  
  
```vb  
' Behavior is strict when formatting an XML element or attribute from a DateTime,  
' but behavior is lax when casting to a DateTime from an element or attribute.  
Dim root As XElement = <Root><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Root>  
Console.WriteLine(root)  
  
' Cast from a strictly formatted XML element.  
Dim dt As DateTime = CType(root, DateTime)  
Console.WriteLine("dt={0}", dt)  
Console.WriteLine("-----")  
  
' If root is formatted in some different way:  
Dim dtElement As XElement = <OrderDate>October 6, 2006</OrderDate>  
Console.WriteLine(dtElement)  
Dim orderDate As DateTime = CType(dtElement, DateTime)  
Console.WriteLine("orderDate={0:d}", orderDate)  
```  
  
 <span data-ttu-id="d6fc7-474">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-474">This example produces the following output:</span></span>  
  
```  
<Root>2006-10-06T12:30:00</Root>  
dt=10/6/2006 12:30:00 PM  
-----  
<OrderDate>October 6, 2006</OrderDate>  
orderDate=10/6/2006  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-475">L'élément ne contient pas de valeur <see cref="T:System.DateTime" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-475">The element does not contain a valid <see cref="T:System.DateTime" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-476">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-476">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTimeOffset (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTimeOffset(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-477"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.DateTimeOffset" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-477">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTimeOffset" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-478">Castez la valeur de ce <see cref="T:System.Xml.Linq.XAttribute" /> en <see cref="T:System.DateTimeOffset" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-478">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-479"><see cref="T:System.DateTimeOffset" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-479">A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-480">Cet opérateur de conversion utilise la <xref:System.Xml.XmlConvert> classe pour effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-480">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>  
  
## Examples  
 <span data-ttu-id="d6fc7-481">L’exemple suivant crée un élément avec la date et d’heure.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-481">The following example creates an element with date and time content.</span></span> <span data-ttu-id="d6fc7-482">Il convertit ensuite à <xref:System.DateTimeOffset> pour récupérer la valeur.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-482">It then casts to <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset dt = (DateTimeOffset)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As DateTimeOffset = CType(root.<Child>(0), DateTimeOffset)  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="d6fc7-483">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-483">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-484">L'élément ne contient pas de valeur <see cref="T:System.DateTimeOffset" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-484">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-485">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-485">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-486"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-486">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-487">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-487">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-488"><see cref="T:System.Decimal" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-488">A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="d6fc7-489">L’exemple suivant crée un élément avec une valeur décimale.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-489">The following example creates an element with a decimal value.</span></span> <span data-ttu-id="d6fc7-490">Il récupère ensuite la valeur de l’attribut en effectuant un cast à <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-490">It then retrieves the value of the attribute by casting to <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "79228162514264337593543950335");  
decimal value = (decimal)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>79228162514264337593543950335</Root>  
Dim value As Decimal = CDec(root)  
Console.WriteLine("value={0}", value)  
  
```  
  
 <span data-ttu-id="d6fc7-491">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-491">This example produces the following output:</span></span>  
  
```  
value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-492">L'élément ne contient pas de valeur <see cref="T:System.Decimal" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-492">The element does not contain a valid <see cref="T:System.Decimal" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-493">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-493">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-494"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-494">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-495">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-495">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-496"><see cref="T:System.Double" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-496">A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Examples  
 <span data-ttu-id="d6fc7-497">L’exemple suivant crée un attribut avec `double` contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-497">The following example creates an attribute with `double` content.</span></span> <span data-ttu-id="d6fc7-498">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-498">It then retrieves the value by casting to <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 1.79769313486231e308);  
double value = (double)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>1.79769313486231E+308</Root>  
Dim value As Double = CDbl(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="d6fc7-499">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-499">This example produces the following output:</span></span>  
  
```  
value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-500">L'élément ne contient pas de valeur <see cref="T:System.Double" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-500">The element does not contain a valid <see cref="T:System.Double" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-501">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-501">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Guid (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Guid op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Guid(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-502"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Guid" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-502">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Guid" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-503">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Guid" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-503">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-504"><see cref="T:System.Guid" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-504">A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="d6fc7-505">L’exemple suivant crée un élément avec un guid en tant que contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-505">The following example creates an element with a guid as content.</span></span> <span data-ttu-id="d6fc7-506">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Guid>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-506">It then retrieves the value by casting to <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"));  
Guid value = (Guid)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Root>  
Dim value As Guid = CType(root, Guid)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="d6fc7-507">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-507">This example produces the following output:</span></span>  
  
```  
value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-508">L'élément ne contient pas de valeur <see cref="T:System.Guid" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-508">The element does not contain a valid <see cref="T:System.Guid" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-509">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-509">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-510"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-510">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int32" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-511">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-511">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-512"><see cref="T:System.Int32" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-512">A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="d6fc7-513">L’exemple suivant crée un élément avec un entier en tant que contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-513">The following example creates an element with an integer as content.</span></span> <span data-ttu-id="d6fc7-514">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-514">It then retrieves the value by casting to <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 2147483647);  
int value = (int)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>2147483647</Root>  
Dim value As Integer = CInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="d6fc7-515">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-515">This example produces the following output:</span></span>  
  
```  
value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-516">L'élément ne contient pas de valeur <see cref="T:System.Int32" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-516">The element does not contain a valid <see cref="T:System.Int32" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-517">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-517">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-518"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-518">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int64" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-519">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-519">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-520"><see cref="T:System.Int64" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-520">A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="d6fc7-521">L’exemple suivant crée un élément avec un entier long en tant que contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-521">The following example creates an element with a long integer as content.</span></span> <span data-ttu-id="d6fc7-522">Il récupère ensuite la valeur de l’élément en effectuant un cast à <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-522">It then retrieves the value of the element by casting to <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 9223372036854775807);  
long value = (long)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>9223372036854775807</Root>  
Dim value As Long = CLng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="d6fc7-523">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-523">This example produces the following output:</span></span>  
  
```  
value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-524">L'élément ne contient pas de valeur <see cref="T:System.Int64" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-524">The element does not contain a valid <see cref="T:System.Int64" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-525">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-525">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;bool&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;bool&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;bool&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-526"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-526">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-527">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-527">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-528"><see cref="T:System.Nullable`1" /> de <see cref="T:System.Boolean" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-528">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-529">Lors de la conversion à <xref:System.Nullable%601> de <xref:System.Boolean> à partir d’un attribut ou un élément, valeurs autorisées sont « 0 », « 1 » et que toute chaîne qui génère « true » ou « false » après rognage et conversion en minuscules.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-529">When converting to <xref:System.Nullable%601> of <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="d6fc7-530">L’exemple suivant crée un élément avec du contenu booléen.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-530">The following example creates an element with boolean content.</span></span> <span data-ttu-id="d6fc7-531">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Nullable%601> de <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-531">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false));  
bool? bool1 = (bool?)root.Element("BoolValue1");  
bool? bool2 = (bool?)root.Element("BoolValue2");  
Console.WriteLine("Nullable Boolean: value1={0}", bool1);  
Console.WriteLine("Nullable Boolean: value2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
  
Dim value1 As Nullable(Of Boolean) = CType(root.Element("BoolValue1"), Nullable(Of Boolean))  
Dim value2 As Nullable(Of Boolean) = CType(root.Element("BoolValue2"), Nullable(Of Boolean))  
Console.WriteLine("Nullable Boolean: value1={0}", IIf(value1.HasValue, value1.ToString(), "null"))  
Console.WriteLine("Nullable Boolean: value2={0}", IIf(value2.HasValue, value2.ToString(), "null"))  
```  
  
 <span data-ttu-id="d6fc7-532">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-532">This example produces the following output:</span></span>  
  
```  
Nullable Boolean: value1=True  
Nullable Boolean: value2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-533">L'élément ne contient pas de valeur <see cref="T:System.Boolean" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-533">The element does not contain a valid <see cref="T:System.Boolean" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTime&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTime&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-534"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.DateTime" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-534">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-535">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.DateTime" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-535">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-536"><see cref="T:System.Nullable`1" /> de <see cref="T:System.DateTime" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-536">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-537">L’espace de valeur d’un attribut ou un élément qui contient la date et d’heure est étroitement lié aux dates et heures décrites dans ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-537">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="d6fc7-538">Lorsque vous créez un attribut ou un élément qui contient la date et d’heure, les valeurs d’attribut ou d’élément sont mis en forme conformément à la spécification W3C.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-538">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="d6fc7-539">Consultez la spécification W3C pour plus de détails.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-539">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="d6fc7-540">Le comportement est lax lors de la conversion à un <xref:System.Nullable%601> de <xref:System.DateTime> à partir d’un attribut ou élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-540">The behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="d6fc7-541">Même si la valeur d’attribut ou d’élément n’est pas formatée exactement par la spécification W3C, la valeur est correctement convertie en un <xref:System.Nullable%601> de <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-541">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="d6fc7-542">Cet opérateur de conversion utilise <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> pour convertir un <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-542">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>
  
## Examples  
 <span data-ttu-id="d6fc7-543">L’exemple suivant crée un élément avec une date et une heure en tant que contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-543">The following example creates an element with a date and time as content.</span></span> <span data-ttu-id="d6fc7-544">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Nullable%601> de <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-544">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
```csharp
XElement root = new XElement("Root",  
    new XElement("Value", new DateTime(2006, 10, 6, 12, 30, 0))  
);  
DateTime? value = (DateTime?)root.Element("Value");  
Console.WriteLine("Nullable DateTime: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Value>  
    </Root>  
Dim value As Nullable(Of DateTime) = CType(root.Element("Value"), Nullable(Of DateTime))  
Console.WriteLine("Nullable DateTime: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="d6fc7-545">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-545">This example produces the following output:</span></span>  
  
```  
Nullable DateTime: value=10/6/2006 12:30:00 PM  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-546">L'élément ne contient pas de valeur <see cref="T:System.DateTime" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-546">The element does not contain a valid <see cref="T:System.DateTime" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTimeOffset&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTimeOffset&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTimeOffset&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-547"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.DateTimeOffset" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-547">The <see cref="T:System.Xml.Linq.XElement" /> to cast to an <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-548">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.DateTimeOffset" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-548">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-549"><see cref="T:System.Nullable`1" /> de <see cref="T:System.DateTimeOffset" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-549">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-550">Cet opérateur de conversion utilise la <xref:System.Xml.XmlConvert> classe pour effectuer la conversion.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-550">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>
  
## Examples  
 <span data-ttu-id="d6fc7-551">L’exemple suivant crée un élément avec la date et d’heure.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-551">The following example creates an element with date and time content.</span></span> <span data-ttu-id="d6fc7-552">Il convertit ensuite en <xref:System.Nullable%601> de <xref:System.DateTimeOffset> pour récupérer la valeur.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-552">It then casts to <xref:System.Nullable%601> of <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset? dt = (DateTimeOffset?)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As Nullable(Of DateTimeOffset) = CType(root.<Child>(0), Nullable(Of DateTimeOffset))  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="d6fc7-553">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-553">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-554">L'élément ne contient pas de valeur <see cref="T:System.DateTimeOffset" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-554">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;decimal&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::Decimal&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-555"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-555">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-556">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Decimal" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-556">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-557"><see cref="T:System.Nullable`1" /> de <see cref="T:System.Decimal" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-557">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="d6fc7-558">L’exemple suivant crée un élément avec du contenu décimal.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-558">The following example creates an element with decimal content.</span></span> <span data-ttu-id="d6fc7-559">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Nullable%601> de <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-559">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", "79228162514264337593543950335")  
);  
decimal? value = (decimal?)root.Element("Value");  
Console.WriteLine("Nullable decimal: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value>79228162514264337593543950335</Value>  
    </Root>  
Dim value As Nullable(Of Decimal) = CType(root.Element("Value"), Nullable(Of Decimal))  
Console.WriteLine("Nullable decimal: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="d6fc7-560">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-560">This example produces the following output:</span></span>  
  
```  
Nullable decimal: value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-561">L'élément ne contient pas de valeur <see cref="T:System.Decimal" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-561">The element does not contain a valid <see cref="T:System.Decimal" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;double&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;double&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-562"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-562">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-563">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Double" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-563">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-564"><see cref="T:System.Nullable`1" /> de <see cref="T:System.Double" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-564">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="d6fc7-565">L’exemple suivant crée un élément avec contenu du point de flottante double précision.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-565">The following example creates an element with double precision floating point content.</span></span> <span data-ttu-id="d6fc7-566">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Nullable%601> de <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-566">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", 1.79769313486231e308)  
);  
double? value = (double?)root.Element("Value");  
Console.WriteLine("Nullable double: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
        <Root>  
            <Value>1.79769313486231e308</Value>  
        </Root>  
  
Dim value As Nullable(Of Double) = CType(root.Element("Value"), Nullable(Of Double))  
Console.WriteLine("Nullable double: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="d6fc7-567">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-567">This example produces the following output:</span></span>  
  
```  
Nullable double: value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-568">L'élément ne contient pas de valeur <see cref="T:System.Double" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-568">The element does not contain a valid <see cref="T:System.Double" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;Guid&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Guid&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;Guid&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-569"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Guid" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-569">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-570">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Guid" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-570">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-571"><see cref="T:System.Nullable`1" /> de <see cref="T:System.Guid" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-571">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="d6fc7-572">L’exemple suivant crée un élément avec le contenu de type guid.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-572">The following example creates an element with guid content.</span></span> <span data-ttu-id="d6fc7-573">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Nullable%601> de <xref:System.Guid>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-573">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"))  
);  
Guid? value = (Guid?)root.Element("Value");  
Console.WriteLine("Nullable Guid: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Value>  
    </Root>  
Dim value As Nullable(Of Guid) = CType(root.Element("Value"), Nullable(Of Guid))  
Console.WriteLine("Nullable Guid: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="d6fc7-574">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-574">This example produces the following output:</span></span>  
  
```  
Nullable Guid: value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-575">L'élément ne contient pas de valeur <see cref="T:System.Guid" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-575">The element does not contain a valid <see cref="T:System.Guid" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;int&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;int&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-576"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-576">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-577">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-577">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-578"><see cref="T:System.Nullable`1" /> de <see cref="T:System.Int32" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-578">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="d6fc7-579">L’exemple suivant crée un élément avec le contenu de l’entier non signé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-579">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="d6fc7-580">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Nullable%601> de <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-580">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 2147483647)  
);  
int? value = (int?)root.Element("Value");  
Console.WriteLine("Nullable integer: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>2147483647</Value>  
        </Root>  
Dim value As Nullable(Of Integer) = CType(root.Element("Value"), Nullable(Of Integer))  
Console.WriteLine("Nullable integer: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
  
```  
  
 <span data-ttu-id="d6fc7-581">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-581">This example produces the following output:</span></span>  
  
```  
Nullable integer: value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-582">L'élément ne contient pas de valeur <see cref="T:System.Int32" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-582">The element does not contain a valid <see cref="T:System.Int32" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;long&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;long&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-583"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-583">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-584">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Int64" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-584">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-585"><see cref="T:System.Nullable`1" /> de <see cref="T:System.Int64" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-585">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="d6fc7-586">L’exemple suivant crée un élément avec le contenu de l’entier long.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-586">The following example creates an element with long integer content.</span></span> <span data-ttu-id="d6fc7-587">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Nullable%601> de <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-587">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",    
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="d6fc7-588">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-588">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-589">L'élément ne contient pas de valeur <see cref="T:System.Int64" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-589">The element does not contain a valid <see cref="T:System.Int64" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;float&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;float&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-590"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Single" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-590">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-591">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.Single" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-591">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-592"><see cref="T:System.Nullable`1" /> de <see cref="T:System.Single" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-592">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="d6fc7-593">L’exemple suivant crée un élément avec le contenu du point flottante simple précision.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-593">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="d6fc7-594">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Nullable%601> de <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-594">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 3.402823e38)  
);  
float? value = (float?)root.Element("Value");  
Console.WriteLine("Nullable Single: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>3.402823e38</Value>  
        </Root>  
Dim value As Nullable(Of Single) = CType(root.Element("Value"), Nullable(Of Single))  
Console.WriteLine("Nullable Single: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="d6fc7-595">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-595">This example produces the following output:</span></span>  
  
```  
Nullable Single: value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-596">L'élément ne contient pas de valeur <see cref="T:System.Single" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-596">The element does not contain a valid <see cref="T:System.Single" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;TimeSpan&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;TimeSpan&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-597"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.TimeSpan" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-597">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-598">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.TimeSpan" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-598">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-599"><see cref="T:System.Nullable`1" /> de <see cref="T:System.TimeSpan" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-599">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-600">L’espace de valeur d’un attribut ou un élément qui contient le contenu d’intervalle de temps est étroitement lié au contenu de durée, comme décrit dans la norme ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-600">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="d6fc7-601">Lorsque vous créez un attribut ou un élément qui contient le contenu d’intervalle de temps, les valeurs d’attribut ou d’élément sont mis en forme conformément à la spécification W3C.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-601">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="d6fc7-602">Consultez la spécification W3C pour plus de détails.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-602">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="d6fc7-603">Comportement est lax lors de la conversion à un <xref:System.Nullable%601> de <xref:System.TimeSpan> à partir d’un attribut ou élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-603">Behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="d6fc7-604">Même si la valeur d’attribut ou d’élément n’est pas formatée exactement par la spécification W3C, la valeur est correctement convertie en un <xref:System.Nullable%601> de <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-604">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="d6fc7-605">L’exemple suivant crée un élément avec un intervalle de temps contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-605">The following example creates an element with time span content.</span></span> <span data-ttu-id="d6fc7-606">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Nullable%601> de <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-606">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new TimeSpan(1, 5, 30))  
);  
TimeSpan? value = (TimeSpan?)root.Element("Value");  
Console.WriteLine("Nullable TimeSpan: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Value><%= New TimeSpan(1, 5, 30) %></Value>  
    </Root>  
Dim value As Nullable(Of TimeSpan) = CType(root.Element("Value"), Nullable(Of TimeSpan))  
Console.WriteLine("Nullable TimeSpan: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="d6fc7-607">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-607">This example produces the following output:</span></span>  
  
```  
Nullable TimeSpan: value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-608">L'élément ne contient pas de valeur <see cref="T:System.TimeSpan" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-608">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;uint&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt32&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-609"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.UInt32" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-609">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-610">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.UInt32" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-610">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-611"><see cref="T:System.Nullable`1" /> de <see cref="T:System.UInt32" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-611">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="d6fc7-612">L’exemple suivant crée un élément avec le contenu de l’entier non signé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-612">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="d6fc7-613">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Nullable%601> de <xref:System.UInt32>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-613">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 4294967295)  
);  
uint? value = (uint?)root.Element("Value");  
Console.WriteLine("Nullable uint: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>4294967295</Value>  
        </Root>  
Dim value As Nullable(Of UInteger) = CType(root.Element("Value"), Nullable(Of UInteger))  
Console.WriteLine("Nullable uint: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="d6fc7-614">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-614">This example produces the following output:</span></span>  
  
```  
Nullable uint: value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-615">L'élément ne contient pas de valeur <see cref="T:System.UInt32" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-615">The element does not contain a valid <see cref="T:System.UInt32" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;ulong&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt64&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-616"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Nullable`1" /> de <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-616">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-617">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Nullable`1" /> de <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-617">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-618"><see cref="T:System.Nullable`1" /> de <see cref="T:System.UInt64" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-618">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="d6fc7-619">L’exemple suivant crée un élément avec le contenu de l’entier long non signé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-619">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="d6fc7-620">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Nullable%601> de <xref:System.UInt64>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-620">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="d6fc7-621">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-621">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-622">L'élément ne contient pas de valeur <see cref="T:System.UInt64" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-622">The element does not contain a valid <see cref="T:System.UInt64" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-623"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.Single" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-623">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Single" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-624">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.Single" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-624">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-625"><see cref="T:System.Single" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-625">A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="d6fc7-626">L’exemple suivant crée un élément avec le contenu du point flottante simple précision.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-626">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="d6fc7-627">Il récupère ensuite la valeur en effectuant un cast à <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-627">It then retrieves the value by casting to <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 3.402823e38);  
float value = (float)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>3.402823E+38</Root>  
Dim value As Single = CSng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="d6fc7-628">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-628">This example produces the following output:</span></span>  
  
```  
value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-629">L'élément ne contient pas de valeur <see cref="T:System.Single" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-629">The element does not contain a valid <see cref="T:System.Single" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-630">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-630">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator string (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname string op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::String ^(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-631"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-631">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-632">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.String" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-632">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-633"><see cref="T:System.String" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-633">A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-634">Si le <xref:System.Xml.Linq.XElement> a des enfants, la valeur de chaîne concaténée de tous les descendants et de texte de l’élément est retournée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-634">If the <xref:System.Xml.Linq.XElement> has children, the concatenated string value of all of the element's text and descendant's text is returned.</span></span>  
  
## Examples  
 <span data-ttu-id="d6fc7-635">L’exemple suivant crée un élément avec le contenu de chaîne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-635">The following example creates an element with string content.</span></span> <span data-ttu-id="d6fc7-636">Il récupère ensuite la valeur en effectuant un cast à <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-636">It then retrieves the value by casting to <xref:System.String>.</span></span>  
  
```csharp  
XElement root = XElement.Parse("<Root>abc <b>def </b>ghi</Root>");  
Console.WriteLine("(string)root={0}", (string)root);  
```  
  
```vb  
Dim root As XElement = <Root>abc <b>def </b>ghi</Root>  
Console.WriteLine("(string)root={0}", root.Value)  
```  
  
 <span data-ttu-id="d6fc7-637">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-637">This example produces the following output:</span></span>  
  
```  
(string)root=abc def ghi  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator TimeSpan (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator TimeSpan(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-638"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.TimeSpan" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-638">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.TimeSpan" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-639">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.TimeSpan" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-639">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.TimeSpan" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-640"><see cref="T:System.TimeSpan" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-640">A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-641">L’espace de valeur d’un attribut ou un élément qui contient le contenu d’intervalle de temps est étroitement lié au contenu de durée, comme décrit dans la norme ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-641">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="d6fc7-642">Lorsque vous créez un attribut ou un élément qui contient le contenu d’intervalle de temps, les valeurs d’attribut ou d’élément sont mis en forme conformément à la spécification W3C.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-642">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="d6fc7-643">Consultez la spécification W3C pour plus de détails.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-643">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="d6fc7-644">Comportement est lax lors de la conversion à un <xref:System.TimeSpan> à partir d’un attribut ou élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-644">Behavior is lax when casting to a <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="d6fc7-645">Même si la valeur d’attribut ou d’élément n’est pas formatée exactement par la spécification W3C, la valeur est correctement convertie en un <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-645">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="d6fc7-646">L’exemple suivant crée un élément avec un intervalle de temps contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-646">The following example creates an element with time span content.</span></span> <span data-ttu-id="d6fc7-647">Il récupère ensuite la valeur en effectuant un cast à <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-647">It then retrieves the value by casting to <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new TimeSpan(1, 5, 30));  
TimeSpan value = (TimeSpan)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New TimeSpan(1, 5, 30) %></Root>  
Dim value As TimeSpan = CType(root, TimeSpan)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="d6fc7-648">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-648">This example produces the following output:</span></span>  
  
```  
value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-649">L'élément ne contient pas de valeur <see cref="T:System.TimeSpan" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-649">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-650">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-650">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-651"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.UInt32" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-651">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt32" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-652">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.UInt32" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-652">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-653"><see cref="T:System.UInt32" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-653">A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="d6fc7-654">L’exemple suivant crée un élément avec le contenu de l’entier non signé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-654">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="d6fc7-655">Il récupère ensuite la valeur en effectuant un cast à <xref:System.UInt32>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-655">It then retrieves the value by casting to <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 4294967295);  
uint value = (uint)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>4294967295</Root>  
Dim value As UInteger = CUInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="d6fc7-656">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-656">This example produces the following output:</span></span>  
  
```  
value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-657">L'élément ne contient pas de valeur <see cref="T:System.UInt32" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-657">The element does not contain a valid <see cref="T:System.UInt32" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-658">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-658">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="d6fc7-659"><see cref="T:System.Xml.Linq.XElement" /> à caster en <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-659">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt64" />.</span></span></param>
        <summary><span data-ttu-id="d6fc7-660">Castez la valeur de ce <see cref="T:System.Xml.Linq.XElement" /> en <see cref="T:System.UInt64" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-660">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-661"><see cref="T:System.UInt64" /> qui contient le contenu de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-661">A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="d6fc7-662">L’exemple suivant crée un élément avec le contenu de l’entier long non signé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-662">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="d6fc7-663">Il récupère ensuite la valeur en effectuant un cast à <xref:System.UInt64>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-663">It then retrieves the value by casting to <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 18446744073709551615);  
ulong value = (ulong)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>18446744073709551615</Root>  
Dim value As ULong = CULng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="d6fc7-664">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-664">This example produces the following output:</span></span>  
  
```  
value=18446744073709551615  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d6fc7-665">L'élément ne contient pas de valeur <see cref="T:System.UInt64" /> valide.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-665">The element does not contain a valid <see cref="T:System.UInt64" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-666">Le paramètre <paramref name="element" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-666">The <paramref name="element" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6fc7-667">Chargez un <see cref="T:System.Xml.Linq.XElement" /> à partir d'une chaîne qui contient du code XML, en conservant éventuellement les espaces blancs et les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-667">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="d6fc7-668"><see cref="T:System.String" /> qui contient le code XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-668">A <see cref="T:System.String" /> that contains XML.</span></span></param>
        <summary><span data-ttu-id="d6fc7-669">Chargez un <see cref="T:System.Xml.Linq.XElement" /> à partir d'une chaîne qui contient le code XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-669">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-670"><see cref="T:System.Xml.Linq.XElement" /> rempli à partir de la chaîne qui contient le code XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-670">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-671">Cette méthode ne conserve pas les espaces blancs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-671">This method does not preserve white space.</span></span> <span data-ttu-id="d6fc7-672">Si vous souhaitez conserver les espaces blancs dans l’arborescence XML, utilisez la surcharge de la <xref:System.Xml.Linq.XElement.Parse%2A> méthode prenant <xref:System.Xml.Linq.LoadOptions> en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-672">If you want to preserve white space in the XML tree, use the overload of the <xref:System.Xml.Linq.XElement.Parse%2A> method that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span> <span data-ttu-id="d6fc7-673">Pour plus d’informations, consultez [conserver les espaces lors du chargement ou de l’analyse de XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) et [conserver un espace blanc tandis que sérialisation](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-673">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="d6fc7-674">LINQ à la fonctionnalité de chargement de XML repose sur <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-674">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-675">Par conséquent, vous pouvez intercepter les exceptions levées par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> surcharger des méthodes et les <xref:System.Xml.XmlReader> les méthodes qui lisent et analysent le document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-675">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-676">L’exemple suivant crée une chaîne qui contient du code XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-676">The following example creates a string that contains XML.</span></span> <span data-ttu-id="d6fc7-677">Il analyse ensuite la chaîne dans un <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-677">It then parses the string into an <xref:System.Xml.Linq.XElement>.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root> <Child> </Child> </Root>");  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = <Root><Child></Child></Root>  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="d6fc7-678">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-678">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child></Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="d6fc7-679"><see cref="T:System.String" /> qui contient le code XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-679">A <see cref="T:System.String" /> that contains XML.</span></span></param>
        <param name="options"><span data-ttu-id="d6fc7-680"><see cref="T:System.Xml.Linq.LoadOptions" /> qui spécifie le comportement pour les espaces blancs et détermine s'il faut charger l'URI de base et les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-680">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span></span></param>
        <summary><span data-ttu-id="d6fc7-681">Chargez un <see cref="T:System.Xml.Linq.XElement" /> à partir d'une chaîne qui contient du code XML, en conservant éventuellement les espaces blancs et les informations de ligne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-681">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-682"><see cref="T:System.Xml.Linq.XElement" /> rempli à partir de la chaîne qui contient le code XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-682">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-683">Si le code XML source est mis en retrait, la définition de la <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> indicateur dans `options` provoque le lecteur à lire tous les espaces blancs dans le XML source.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-683">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="d6fc7-684">Les nœuds de type <xref:System.Xml.Linq.XText> sont créés pour les espaces blancs significatifs et non significatifs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-684">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="d6fc7-685">Si le code XML source est mis en retrait, ne définissez ne pas le <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> indicateur dans `options` amène le lecteur à ignorer tous les espaces blancs non significatifs dans le XML source.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-685">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="d6fc7-686">L’arborescence XML est créée sans nœud de texte pour les espaces blancs non significatifs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-686">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="d6fc7-687">Si la source XML n’est pas mis en retrait, la définition de la <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> indicateur dans `options` n’a aucun effet.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-687">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="d6fc7-688">Espace blanc significatif est conservé, et il n’y aucun étendues des espaces blancs non significatifs qui peuvent provoquer la création de plusieurs nœuds de texte d’un espace blanc.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-688">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="d6fc7-689">Pour plus d’informations, consultez [conserver les espaces lors du chargement ou de l’analyse de XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) et [conserver un espace blanc tandis que sérialisation](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-689">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="d6fc7-690">Paramètre <xref:System.Xml.Linq.LoadOptions.SetBaseUri> n’aura aucun effet lors de l’analyse d’un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-690">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when parsing from a <xref:System.String>.</span></span>  
  
 <span data-ttu-id="d6fc7-691">Le <xref:System.Xml.XmlReader> peut avoir des informations de ligne valides ou pas.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-691">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="d6fc7-692">Si vous définissez <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, les informations de ligne seront définies dans l’arborescence XML à partir des informations de ligne qui sont signalées par le <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-692">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="d6fc7-693">Il existe une baisse des performances si vous définissez la <xref:System.Xml.Linq.LoadOptions.SetLineInfo> indicateur.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-693">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="d6fc7-694">Les informations de ligne sont exactes immédiatement après le chargement du document XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-694">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="d6fc7-695">Si vous modifiez l’arborescence XML après le chargement du document, les informations de ligne peuvent perdre leur signification.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-695">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="d6fc7-696">LINQ à la fonctionnalité de chargement de XML repose sur <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-696">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="d6fc7-697">Par conséquent, vous pouvez intercepter les exceptions levées par le <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> surcharger des méthodes et les <xref:System.Xml.XmlReader> les méthodes qui lisent et analysent le document.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-697">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-698">L’exemple suivant analyse une chaîne dans un <xref:System.Xml.Linq.XElement> de deux façons différentes : en conservant l’espace blanc et ne conservant ne pas d’espace blanc.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-698">The following example parses a string into an <xref:System.Xml.Linq.XElement> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="d6fc7-699">Il utilise ensuite une requête pour déterminer le nombre de nœuds d’espaces blancs dans l’arborescence XML résultante.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-699">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
int whiteSpaceNodes;  
  
XElement xmlTree1 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}",  
    whiteSpaceNodes);  
  
XElement xmlTree2 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}",  
    whiteSpaceNodes);  
```  
  
```vb  
Dim whiteSpaceNodes As Integer  
  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.None)  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree2 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="d6fc7-700">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-700">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="d6fc7-701">L’exemple suivant conserve les informations de ligne tandis qu’il analyse la chaîne.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-701">The following example retains line information as it parses the string.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
XElement xRoot = XElement.Parse(markup, LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in xRoot.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim markup As String = _  
"<Root>" & Environment.NewLine & _  
"    <Child>" & Environment.NewLine & _  
"        <GrandChild/>" & Environment.NewLine & _  
"    </Child>" & Environment.NewLine & _  
"</Root>"  
  
Dim xRoot As XElement = XElement.Parse(markup, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In xRoot.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
        DirectCast(e, IXmlLineInfo).LinePosition)  
Next  
```  
  
 <span data-ttu-id="d6fc7-702">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-702">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6fc7-703">Supprime des nœuds et des attributs de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-703">Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-704">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-704">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-705">L’exemple suivant crée un élément avec des attributs et éléments enfants.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-705">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="d6fc7-706">Il appelle ensuite cette méthode pour supprimer les attributs et les éléments enfants.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-706">It then calls this method to remove both the attributes and the child elements.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAll();   // removes children elements and attributes of root  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root Attr1="1" Attr2="2" Attr3="3">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
  
root.RemoveAll()   ' removes children elements and attributes of root  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-707">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-707">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAttributes">
      <MemberSignature Language="C#" Value="public void RemoveAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6fc7-708">Supprime les attributs de ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-708">Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-709">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-709">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-710">L’exemple suivant crée un élément avec des attributs et éléments enfants.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-710">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="d6fc7-711">Il appelle ensuite cette méthode pour supprimer les attributs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-711">It then calls this method to remove the attributes.</span></span> <span data-ttu-id="d6fc7-712">Les éléments enfants restent.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-712">The child elements remain.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAttributes();  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root Attr1="1" Attr2="2" Attr3="3">  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <Child3>3</Child3>  
     </Root>  
  
root.RemoveAttributes()  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-713">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-713">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</Root>   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAll" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAll">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6fc7-714">Remplace les nœuds enfants et les attributs de cet élément par le contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-714">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-715">Cette méthode utilise la sémantique des instantanés, autrement dit, il crée une copie distincte du nouveau contenu avant de remplacer le contenu de l’élément actuel par le nouveau contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-715">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="d6fc7-716">Cela signifie que vous pouvez interroger le contenu de l’élément actuel et utiliser les résultats de la requête en tant que nouveau contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-716">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="d6fc7-717">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-717">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="d6fc7-718">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-718">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-719">L’exemple suivant passe les résultats d’une requête LINQ à cette méthode, en remplaçant le contenu d’un élément avec les résultats de requête.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-719">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span> <span data-ttu-id="d6fc7-720">Elle interroge l’élément qui a son contenu remplacé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-720">It queries the element that is having its contents replaced.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Data", 1),  
    new XElement("Data", 2),  
    new XElement("Data", 3),  
    new XElement("Data", 4),  
    new XElement("Data", 5)  
);  
  
Console.WriteLine(xmlTree);  
Console.WriteLine("-----");  
  
xmlTree.ReplaceAll(  
    from el in xmlTree.Elements()  
    where (int)el >= 3  
    select new XElement("NewData", (int)el)  
);  
  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Data>1</Data>  
        <Data>2</Data>  
        <Data>3</Data>  
        <Data>4</Data>  
        <Data>5</Data>  
    </Root>  
  
Console.WriteLine(xmlTree)  
Console.WriteLine("-----")  
  
xmlTree.ReplaceAll( _  
    From el In xmlTree.Elements _  
    Where el.Value >= 3 _  
    Select <NewData><%= el.Value %></NewData> _  
)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="d6fc7-721">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-721">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Data>1</Data>  
  <Data>2</Data>  
  <Data>3</Data>  
  <Data>4</Data>  
  <Data>5</Data>  
</Root>  
-----  
<Root>  
  <NewData>3</NewData>  
  <NewData>4</NewData>  
  <NewData>5</NewData>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="d6fc7-722">Contenu qui remplacera les nœuds enfants et les attributs de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-722">The content that will replace the child nodes and attributes of this element.</span></span></param>
        <summary><span data-ttu-id="d6fc7-723">Remplace les nœuds enfants et les attributs de cet élément par le contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-723">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-724">Cette méthode supprime tout d’abord les attributs et le contenu existant.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-724">This method first removes existing content and attributes.</span></span> <span data-ttu-id="d6fc7-725">Il ajoute ensuite l’objet `content`.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-725">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="d6fc7-726">Cette méthode utilise la sémantique des instantanés, autrement dit, il crée une copie distincte du nouveau contenu avant de remplacer le contenu de l’élément actuel par le nouveau contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-726">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="d6fc7-727">Cela signifie que vous pouvez interroger le contenu de l’élément actuel et utiliser les résultats de la requête en tant que nouveau contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-727">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="d6fc7-728">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-728">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="d6fc7-729">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-729">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-730">L’exemple suivant utilise cette méthode.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-730">The following example uses this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
// ReplaceAll with an XElement object.  
root.ReplaceAll(new XElement("NewChild", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with an XAttribute object.  
root.ReplaceAll(new XAttribute("NewAttribute", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with a string.  
root.ReplaceAll("Some text");  
Console.WriteLine(root);  
  
// ReplaceAll with a double.  
double dbl = 12.345;  
root.ReplaceAll(dbl);  
Console.WriteLine(root);  
  
// ReplaceAll with a DateTime object.  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root.ReplaceAll(dt);  
Console.WriteLine(root);  
  
// ReplaceAll with a string array.  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root.ReplaceAll(stringArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XElement objects.  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root.ReplaceAll(ellArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XAttribute objects.  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root.ReplaceAll(attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>child content</Child>  
    </Root>  
  
' ReplaceAll with an XElement object.  
root.ReplaceAll(<NewChild>n</NewChild>)  
Console.WriteLine(root)  
  
' ReplaceAll with an XAttribute object.  
root.ReplaceAll(New XAttribute("NewAttribute", "n"))  
Console.WriteLine(root)  
  
' ReplaceAll with a string.  
root.ReplaceAll("Some text")  
Console.WriteLine(root)  
  
' ReplaceAll with a double.  
Dim dbl As Double = 12.345  
root.ReplaceAll(dbl)  
Console.WriteLine(root)  
  
' ReplaceAll with a DateTime object.  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root.ReplaceAll(dt)  
Console.WriteLine(root)  
  
' ReplaceAll with a string array.  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root.ReplaceAll(stringArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XElement objects.  
Dim ellArray As XElement() = { _  
    New XElement("NewChild1", 1), _  
    New XElement("NewChild2", 2), _  
    New XElement("NewChild3", 3) _  
}  
root.ReplaceAll(ellArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XAttribute objects.  
Dim attArray As XAttribute() = { _  
New XAttribute("NewAtt1", 1), _  
New XAttribute("NewAtt2", 2), _  
New XAttribute("NewAtt3", 3) _  
}  
root.ReplaceAll(attArray)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-731">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-731">This example produces the following output:</span></span>  
  
```  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>Some text</Root>  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="d6fc7-732">Liste de paramètres d'objets de contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-732">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="d6fc7-733">Remplace les nœuds enfants et les attributs de cet élément par le contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-733">Replaces the child nodes and the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-734">Cette méthode supprime tout d’abord les attributs et le contenu existant.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-734">This method first removes existing content and attributes.</span></span> <span data-ttu-id="d6fc7-735">Il ajoute ensuite l’objet `content`.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-735">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="d6fc7-736">Cette méthode utilise la sémantique des instantanés, autrement dit, il crée une copie distincte du nouveau contenu avant de remplacer le contenu de l’élément actuel par le nouveau contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-736">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="d6fc7-737">Cela signifie que vous pouvez interroger le contenu de l’élément actuel et utiliser les résultats de la requête en tant que nouveau contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-737">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="d6fc7-738">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-738">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="d6fc7-739">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-739">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-740">L’exemple suivant passe les résultats d’une requête LINQ à cette méthode, en remplaçant le contenu d’un élément avec les résultats de requête.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-740">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
root.ReplaceAll(  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim root As XElement = <Root>  
                           <Child>child content</Child>  
                       </Root>  
  
root.ReplaceAll( _  
    From el In xmlTree1.Elements() _  
    Where el.Value >= 3 And el.Value <= 5 _  
    Select el _  
)  
  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-741">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-741">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6fc7-742">Remplace les attributs de cet élément par le contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-742">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-743">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-743">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="d6fc7-744">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-744">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-745">L’exemple suivant crée un élément avec trois attributs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-745">The following example creates an element with three attributes.</span></span> <span data-ttu-id="d6fc7-746">Il utilise ensuite cette méthode pour remplacer tous les attributs de l’élément avec un seul attribut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-746">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-747">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-747">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="d6fc7-748">Contenu qui remplacera les attributs de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-748">The content that will replace the attributes of this element.</span></span></param>
        <summary><span data-ttu-id="d6fc7-749">Remplace les attributs de cet élément par le contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-749">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-750">Cette méthode supprime d’abord les attributs existants.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-750">This method first removes existing attributes.</span></span> <span data-ttu-id="d6fc7-751">Il ajoute ensuite l’objet `content`.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-751">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="d6fc7-752">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-752">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="d6fc7-753">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-753">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-754">L’exemple suivant crée un élément avec trois attributs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-754">The following example creates an element with three attributes.</span></span> <span data-ttu-id="d6fc7-755">Il utilise ensuite cette méthode pour remplacer tous les attributs de l’élément avec un seul attribut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-755">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-756">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-756">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="d6fc7-757">Liste de paramètres d'objets de contenu.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-757">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="d6fc7-758">Remplace les attributs de cet élément par le contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-758">Replaces the attributes of this element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-759">Cette méthode supprime d’abord les attributs existants.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-759">This method first removes existing attributes.</span></span> <span data-ttu-id="d6fc7-760">Il ajoute ensuite l’objet `content`.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-760">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="d6fc7-761">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-761">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="d6fc7-762">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-762">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-763">L’exemple suivant crée un élément avec trois attributs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-763">The following example creates an element with three attributes.</span></span> <span data-ttu-id="d6fc7-764">Il remplace les attributs à d’autres attributs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-764">It then replaces the attributes with other attributes.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101),  
    new XAttribute("NewAtt2", 102),  
    new XAttribute("NewAtt3", 103)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes( _  
New XAttribute("NewAtt1", 101), _  
New XAttribute("NewAtt2", 102), _  
New XAttribute("NewAtt3", 103))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-765">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-765">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" NewAtt2="102" NewAtt3="103" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6fc7-766">Sérialisez l’arborescence XML sous-jacente de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-766">Serialize this element's underlying XML tree.</span></span> <span data-ttu-id="d6fc7-767">La sortie peut être enregistrée vers un fichier, un <see cref="T:System.Xml.XmlTextWriter" />, un <see cref="T:System.IO.TextWriter" /> ou un <see cref="T:System.Xml.XmlWriter" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-767">The output can be saved to a file, an <see cref="T:System.Xml.XmlTextWriter" />, a <see cref="T:System.IO.TextWriter" />, or an <see cref="T:System.Xml.XmlWriter" />.</span></span> <span data-ttu-id="d6fc7-768">Éventuellement, la mise en forme (mise en retrait) peut être désactivée.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-768">Optionally, formatting (indenting) can be disabled.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="d6fc7-769">Flux vers lequel générer ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-769">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span></span></param>
        <summary><span data-ttu-id="d6fc7-770">Renvoie ce <see cref="T:System.Xml.Linq.XElement" /> vers le <see cref="T:System.IO.Stream" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-770">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-771">Le code XML sérialisé est en retrait.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-771">The serialized XML will be indented.</span></span> <span data-ttu-id="d6fc7-772">Tous les espaces blancs non significatifs sera supprimé et un espace supplémentaire sera ajouté afin que le code XML mis en retrait correctement.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-772">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="d6fc7-773">Le comportement de cette méthode est que l’espace blanc non significatif ne sera pas préservé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-773">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="d6fc7-774">Si vous souhaitez contrôler les espaces blancs, utilisez la surcharge de <xref:System.Xml.Linq.XElement.Save%2A> qui accepte <xref:System.Xml.Linq.SaveOptions> en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-774">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="d6fc7-775">Utilisez la <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option pour enregistrer le code XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-775">Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML.</span></span> <span data-ttu-id="d6fc7-776">Cela entraîne le writer à écrire tous les espaces blancs exactement comme représenté dans l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-776">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="d6fc7-777">Utilisez la <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option si vous souhaitez supprimer les déclarations d’espace de noms en double.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-777">Use the <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="textWriter"><span data-ttu-id="d6fc7-778"><see cref="T:System.IO.TextWriter" /> dans lequel le <see cref="T:System.Xml.Linq.XElement" /> sera écrit.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-778">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span></span></param>
        <summary><span data-ttu-id="d6fc7-779">Sérialisez cet élément vers un <see cref="T:System.IO.TextWriter" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-779">Serialize this element to a <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-780">Le code XML sérialisé est en retrait.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-780">The serialized XML will be indented.</span></span> <span data-ttu-id="d6fc7-781">Tous les espaces blancs non significatifs sera supprimé et un espace supplémentaire sera ajouté afin que le code XML mis en retrait correctement.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-781">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="d6fc7-782">Le comportement de cette méthode est que l’espace blanc ne sera pas préservé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-782">The behavior of this method is that white space will not be preserved.</span></span>  
  
 <span data-ttu-id="d6fc7-783">Si vous souhaitez contrôler les espaces blancs, utilisez la surcharge de <xref:System.Xml.Linq.XElement.Save%2A> qui vous permet de spécifier <xref:System.Xml.Linq.SaveOptions> en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-783">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="d6fc7-784">Pour plus d’informations, consultez [conserver les espaces lors du chargement ou de l’analyse de XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) et [conserver un espace blanc tandis que sérialisation](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-784">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-785">L’exemple suivant crée un <xref:System.Xml.Linq.XElement>, enregistre le document à un <xref:System.IO.StringWriter>, puis imprime la chaîne dans la console.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-785">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
using (StringWriter sw = new StringWriter()) {  
    root.Save(sw);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
Using sw = New StringWriter()  
    root.Save(sw)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="d6fc7-786">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-786">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="d6fc7-787"><see cref="T:System.String" /> qui contient le nom du fichier.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-787">A <see cref="T:System.String" /> that contains the name of the file.</span></span></param>
        <summary><span data-ttu-id="d6fc7-788">Sérialisez cet élément dans un fichier.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-788">Serialize this element to a file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-789">Le code XML sérialisé est en retrait.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-789">The serialized XML will be indented.</span></span> <span data-ttu-id="d6fc7-790">Tous les espaces blancs non significatifs sera supprimé et un espace supplémentaire sera ajouté afin que le code XML mis en retrait correctement.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-790">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="d6fc7-791">Le comportement de cette méthode est que les nœuds dans l’arborescence XML ne seront pas préservés espaces non significatifs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-791">The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</span></span>  
  
 <span data-ttu-id="d6fc7-792">Si vous souhaitez contrôler les espaces blancs, utilisez la surcharge de <xref:System.Xml.Linq.XElement.Save%2A> qui vous permet de spécifier <xref:System.Xml.Linq.SaveOptions> en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-792">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="d6fc7-793">Pour plus d’informations, consultez [conserver les espaces lors du chargement ou de l’analyse de XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) et [conserver un espace blanc tandis que sérialisation](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-793">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-794">L’exemple suivant crée un <xref:System.Xml.Linq.XElement>, enregistre le document dans un fichier, puis imprime le fichier dans la console.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-794">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a file, and then prints the file to the console.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.Save("Root.xml");  
string str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
root.Save("Root.xml")  
Dim Str As String = File.ReadAllText("Root.xml")  
Console.WriteLine(Str)  
```  
  
 <span data-ttu-id="d6fc7-795">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-795">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>child content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="d6fc7-796"><see cref="T:System.Xml.XmlWriter" /> dans lequel le <see cref="T:System.Xml.Linq.XElement" /> sera écrit.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-796">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span></span></param>
        <summary><span data-ttu-id="d6fc7-797">Sérialisez cet élément vers un <see cref="T:System.Xml.XmlWriter" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-797">Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d6fc7-798">L'exemple suivant montre comment enregistrer un objet <xref:System.Xml.Linq.XElement> dans un objet <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-798">The following example shows how to save an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    XElement root = new XElement("Root",  
        new XElement("Child", "child content")  
    );  
    root.Save(xw);  
}  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
Using xw = XmlWriter.Create(sb, xws)  
    Dim root As XElement = <Root>  
                               <Child>child content</Child>  
                           </Root>  
    root.Save(xw)  
End Using  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="d6fc7-799">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-799">This example produces the following output:</span></span>  
  
```xml  
<Root><Child>child content</Child></Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="d6fc7-800">Flux vers lequel générer ce <see cref="T:System.Xml.Linq.XElement" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-800">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span></span></param>
        <param name="options"><span data-ttu-id="d6fc7-801">Objet <see cref="T:System.Xml.Linq.SaveOptions" /> qui spécifie le comportement de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-801">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="d6fc7-802">Génère ce <see cref="T:System.Xml.Linq.XElement" /> vers le <see cref="T:System.IO.Stream" /> spécifié, en précisant le cas échéant le comportement de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-802">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-803">Par défaut le `options` ont la valeur <xref:System.Xml.Linq.SaveOptions.None>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-803">By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>.</span></span> <span data-ttu-id="d6fc7-804">Cette option supprime tous les espaces non significatifs superflus et ajouter des espaces blancs non significatifs approprié afin que le code XML est mis en retrait correctement.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-804">This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span>  
  
 <span data-ttu-id="d6fc7-805">Si vous souhaitez enregistrer le code XML, spécifiez la <xref:System.Xml.Linq.SaveOptions.DisableFormatting> indicateur pour `options`.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-805">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="d6fc7-806">Cela entraîne le writer à écrire tous les espaces blancs exactement comme représenté dans l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-806">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="d6fc7-807">Utilisez <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option si vous souhaitez supprimer les déclarations d’espace de noms en double.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-807">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="textWriter"><span data-ttu-id="d6fc7-808"><see cref="T:System.IO.TextWriter" /> vers lequel exporter le code XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-808">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</span></span></param>
        <param name="options"><span data-ttu-id="d6fc7-809"><see cref="T:System.Xml.Linq.SaveOptions" /> qui spécifie le comportement de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-809">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="d6fc7-810">Sérialisez cet élément vers un <see cref="T:System.IO.TextWriter" />, en désactivant éventuellement la mise en forme.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-810">Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-811">Si vous souhaitez enregistrer le code XML, spécifiez la <xref:System.Xml.Linq.SaveOptions.DisableFormatting> indicateur pour `options`.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-811">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="d6fc7-812">Cela entraîne le writer à écrire tous les espaces blancs exactement comme représenté dans l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-812">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="d6fc7-813">Si vous souhaitez enregistrer le code XML mis en retrait, ne spécifiez pas le <xref:System.Xml.Linq.SaveOptions.DisableFormatting> indicateur pour `options`.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-813">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="d6fc7-814">Cela supprime tous les espaces non significatifs superflus et ajouter des espaces blancs non significatifs approprié afin que le code XML est mis en retrait correctement.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-814">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="d6fc7-815">Il s’agit du comportement par défaut et le comportement des surcharges de la <xref:System.Xml.Linq.XElement.Save%2A> les méthodes qui ne prennent pas `options` en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-815">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="d6fc7-816">Pour plus d’informations, consultez [conserver les espaces lors du chargement ou de l’analyse de XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) et [conserver un espace blanc tandis que sérialisation](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-816">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-817">L’exemple suivant montre deux utilisations de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-817">The following example shows two uses of this method.</span></span> <span data-ttu-id="d6fc7-818">La première utilisation conserve l’espace blanc.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-818">The first use preserves white space.</span></span> <span data-ttu-id="d6fc7-819">La seconde sérialise le <xref:System.Xml.Linq.XElement> avec mise en forme.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-819">The second serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span> <span data-ttu-id="d6fc7-820">Étant donné que le document ne comporte aucun espace blanc comme construit, conservation des espaces blancs génère le XML sans mise en retrait.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-820">Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.DisableFormatting);  
    Console.WriteLine(sw.ToString());  
}  
  
Console.WriteLine("=====");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.None);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.DisableFormatting)  
    Console.WriteLine(sw.ToString())  
End Using  
  
Console.WriteLine("=====")  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.None)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="d6fc7-821">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-821">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-16"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String, options As SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="d6fc7-822"><see cref="T:System.String" /> qui contient le nom du fichier.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-822">A <see cref="T:System.String" /> that contains the name of the file.</span></span></param>
        <param name="options"><span data-ttu-id="d6fc7-823"><see cref="T:System.Xml.Linq.SaveOptions" /> qui spécifie le comportement de mise en forme.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-823">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="d6fc7-824">Sérialisez cet élément dans un fichier, en désactivant éventuellement la mise en forme.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-824">Serialize this element to a file, optionally disabling formatting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-825">Si vous souhaitez enregistrer le code XML, spécifiez la <xref:System.Xml.Linq.SaveOptions.DisableFormatting> indicateur pour `options`.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-825">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="d6fc7-826">Cela entraîne le writer à écrire tous les espaces blancs exactement comme représenté dans l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-826">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="d6fc7-827">Si vous souhaitez enregistrer le code XML mis en retrait, ne spécifiez pas le <xref:System.Xml.Linq.SaveOptions.DisableFormatting> indicateur pour `options`.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-827">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="d6fc7-828">Cela supprime tous les espaces non significatifs superflus et ajouter des espaces blancs non significatifs approprié afin que le code XML est mis en retrait correctement.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-828">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="d6fc7-829">Il s’agit du comportement par défaut et le comportement des surcharges de la <xref:System.Xml.Linq.XElement.Save%2A> les méthodes qui ne prennent pas `options` en tant que paramètre.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-829">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="d6fc7-830">Pour plus d’informations, consultez [conserver les espaces lors du chargement ou de l’analyse de XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) et [conserver un espace blanc tandis que sérialisation](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-830">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-831">L’exemple suivant montre deux utilisations de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-831">The following example shows two uses of this method.</span></span> <span data-ttu-id="d6fc7-832">La première utilisation conserve l’espace blanc.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-832">The first use preserves white space.</span></span> <span data-ttu-id="d6fc7-833">La seconde sérialise le <xref:System.Xml.Linq.XElement> avec mise en forme.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-833">The second one serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span>  
  
```csharp  
string str;  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
root.Save("Root.xml", SaveOptions.DisableFormatting);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
  
Console.WriteLine("=====");  
  
root.Save("Root.xml", SaveOptions.None);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim str As String  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
root.Save("Root.xml", SaveOptions.DisableFormatting)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
  
Console.WriteLine("=====")  
  
root.Save("Root.xml", SaveOptions.None)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
```  
  
 <span data-ttu-id="d6fc7-834">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-834">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textWriter">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttributeValue">
      <MemberSignature Language="C#" Value="public void SetAttributeValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttributeValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttributeValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAttributeValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d6fc7-835"><see cref="T:System.Xml.Linq.XName" /> qui contient le nom de l'attribut à modifier.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-835">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.</span></span></param>
        <param name="value"><span data-ttu-id="d6fc7-836">Valeur à assigner à l'attribut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-836">The value to assign to the attribute.</span></span> <span data-ttu-id="d6fc7-837">L'attribut est supprimé si la valeur est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-837">The attribute is removed if the value is <see langword="null" />.</span></span> <span data-ttu-id="d6fc7-838">Sinon, la valeur est convertie en sa représentation sous forme de chaîne et assignée à la propriété <see cref="P:System.Xml.Linq.XAttribute.Value" /> de l'attribut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-838">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.</span></span></param>
        <summary><span data-ttu-id="d6fc7-839">Définit la valeur d'un attribut, ajoute un attribut ou supprime un attribut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-839">Sets the value of an attribute, adds an attribute, or removes an attribute.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-840">Cette méthode est conçue pour faciliter la gestion d’une liste de paires nom/valeur sous la forme d’un ensemble d’attributs.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-840">This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes.</span></span> <span data-ttu-id="d6fc7-841">Lors de la maintenance de la liste, vous devez ajouter des paires, paires de modifier ou supprimer des paires de.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-841">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="d6fc7-842">Si vous appelez cette méthode en passant un nom qui n’existe pas en tant qu’attribut, cette méthode crée un attribut pour vous.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-842">If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you.</span></span> <span data-ttu-id="d6fc7-843">Si vous appelez cette méthode en passant le nom d’un attribut existant, cette méthode modifie la valeur de l’attribut à la valeur que vous spécifiez.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-843">If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify.</span></span> <span data-ttu-id="d6fc7-844">Si vous passez `null` pour `value`, cette méthode supprime l’attribut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-844">If you pass `null` for `value`, this method removes the attribute.</span></span>  
  
 <span data-ttu-id="d6fc7-845">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-845">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="d6fc7-846">La valeur est assignée à l’attribut avec le nom spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-846">The value is assigned to the attribute with the specified name.</span></span> <span data-ttu-id="d6fc7-847">Si aucun attribut avec le nom spécifié existe, un nouvel attribut est ajouté.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-847">If no attribute with the specified name exists, a new attribute is added.</span></span> <span data-ttu-id="d6fc7-848">Si la valeur est `null`, l’attribut avec le nom spécifié, le cas échéant, est supprimé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-848">If the value is `null`, the attribute with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="d6fc7-849">Pour plus d’informations, consultez [en conservant les paires nom/valeur](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-849">For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-850">L’exemple suivant crée un élément avec un attribut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-850">The following example creates an element with an attribute.</span></span> <span data-ttu-id="d6fc7-851">Il utilise ensuite cette méthode pour remplacer le contenu de l’attribut.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-851">It then uses this method to replace the content of the attribute.</span></span>  
  
```csharp  
// Create an element with no content.  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetAttributeValue("Att1", 1);  
root.SetAttributeValue("Att2", 2);  
root.SetAttributeValue("Att3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetAttributeValue("Att1", 1)  
root.SetAttributeValue("Att2", 2)  
root.SetAttributeValue("Att3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-852">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-852">This example produces the following output:</span></span>  
  
```  
<Root Att1="1" Att2="2" Att3="3" />  
<Root Att1="1" Att2="22" Att3="3" />  
<Root Att1="1" Att2="22" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d6fc7-853">La <paramref name="value" /> est une instance de <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-853">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetElementValue">
      <MemberSignature Language="C#" Value="public void SetElementValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetElementValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetElementValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetElementValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d6fc7-854"><see cref="T:System.Xml.Linq.XName" /> qui contient le nom de l'élément enfant à modifier.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-854">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.</span></span></param>
        <param name="value"><span data-ttu-id="d6fc7-855">Valeur à assigner à l'élément enfant.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-855">The value to assign to the child element.</span></span> <span data-ttu-id="d6fc7-856">L'élément enfant est supprimé si la valeur est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-856">The child element is removed if the value is <see langword="null" />.</span></span> <span data-ttu-id="d6fc7-857">Sinon, la valeur est convertie en sa représentation sous forme de chaîne et assignée à la propriété <see cref="P:System.Xml.Linq.XElement.Value" /> de l'élément enfant.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-857">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.</span></span></param>
        <summary><span data-ttu-id="d6fc7-858">Définit la valeur d'un élément enfant, ajoute un élément enfant ou supprime un élément enfant.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-858">Sets the value of a child element, adds a child element, or removes a child element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-859">Cette méthode est conçue pour faciliter la gestion une liste de paires nom/valeur sous la forme d’un jeu d’éléments enfants.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-859">This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements.</span></span> <span data-ttu-id="d6fc7-860">Lors de la maintenance de la liste, vous devez ajouter des paires, paires de modifier ou supprimer des paires de.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-860">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="d6fc7-861">Si vous appelez cette méthode en passant un nom qui n’existe pas comme un élément enfant, cette méthode crée un élément enfant pour vous.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-861">If you call this method passing a name that does not exist as a child element, this method creates a child element for you.</span></span> <span data-ttu-id="d6fc7-862">Si vous appelez cette méthode en passant le nom d’un élément enfant existant, cette méthode modifie la valeur de l’élément enfant à la valeur que vous spécifiez.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-862">If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify.</span></span> <span data-ttu-id="d6fc7-863">Si vous passez `null` pour `value`, cette méthode supprime l’élément enfant.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-863">If you pass `null` for `value`, this method removes the child element.</span></span>  
  
 <span data-ttu-id="d6fc7-864">Cette méthode déclenchera des événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-864">This method will raise events.</span></span>  
  
 <span data-ttu-id="d6fc7-865">La valeur est assignée au premier élément enfant avec le nom spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-865">The value is assigned to the first child element with the specified name.</span></span> <span data-ttu-id="d6fc7-866">Si aucun élément enfant avec le nom spécifié existe, un nouvel élément enfant est ajouté.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-866">If no child element with the specified name exists, a new child element is added.</span></span> <span data-ttu-id="d6fc7-867">Si la valeur est null, le premier élément enfant avec le nom spécifié, le cas échéant, est supprimé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-867">If the value is null, the first child element with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="d6fc7-868">Cette méthode n’ajoute pas de nœuds enfants ou des attributs à l’élément enfant spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-868">This method does not add child nodes or attributes to the specified child element.</span></span> <span data-ttu-id="d6fc7-869">Cette méthode lève une exception si un objet qui dérive de <xref:System.Xml.Linq.XObject> est passé en tant que `value`.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-869">This method throws an exception if any object that derives from <xref:System.Xml.Linq.XObject> is passed as `value`.</span></span>  
  
 <span data-ttu-id="d6fc7-870">Pour plus d’informations, consultez [en conservant les paires nom/valeur](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-870">For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-871">L’exemple suivant crée un élément avec un élément enfant.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-871">The following example creates an element with a child element.</span></span> <span data-ttu-id="d6fc7-872">Il utilise ensuite cette méthode pour définir la valeur de l’élément enfant.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-872">It then uses this method to set the value of the child element.</span></span>  
  
```csharp  
// Create an element with no content  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetElementValue("Ele1", 1);  
root.SetElementValue("Ele2", 2);  
root.SetElementValue("Ele3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetElementValue("Ele3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetElementValue("Ele1", 1)  
root.SetElementValue("Ele2", 2)  
root.SetElementValue("Ele3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetElementValue("Ele3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-873">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-873">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>2</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d6fc7-874">La <paramref name="value" /> est une instance de <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-874">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d6fc7-875">Valeur à assigner à cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-875">The value to assign to this element.</span></span> <span data-ttu-id="d6fc7-876">La valeur est convertie en sa représentation sous forme de chaîne et assignée à la propriété <see cref="P:System.Xml.Linq.XElement.Value" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-876">The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.</span></span></param>
        <summary><span data-ttu-id="d6fc7-877">Définit la valeur de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-877">Sets the value of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-878">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-878">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="d6fc7-879">Il n’est pas valide pour transmettre une instance d’une classe qui dérive de <xref:System.Xml.Linq.XObject>, tel que <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-879">It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-880">L’exemple suivant crée un élément qui contient un élément enfant.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-880">The following example creates an element that contains a child element.</span></span> <span data-ttu-id="d6fc7-881">Il définit ensuite la valeur de l’élément à l’aide de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-881">It then sets the value of the element using this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.SetValue("new content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
  
root.SetValue("new content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="d6fc7-882">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-882">This example produces the following output:</span></span>  
  
```xml  
<Root>new content</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6fc7-883"><paramref name="value" /> a la valeur <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-883">The <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d6fc7-884">La <paramref name="value" /> est un <see cref="T:System.Xml.Linq.XObject" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-884">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</span></span></exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6fc7-885">Obtient une définition de schéma XML qui décrit la représentation XML de cet objet.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-885">Gets an XML schema definition that describes the XML representation of this object.</span></span></summary>
        <returns><span data-ttu-id="d6fc7-886"><see cref="T:System.Xml.Schema.XmlSchema" /> qui décrit la représentation XML de l'objet qui est généré par la méthode <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> et utilisé par la méthode <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-886">An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-887">Cette méthode fait partie de l’implémentation de la <xref:System.Xml.Serialization.IXmlSerializable> interface.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-887">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="d6fc7-888">Cette méthode est utilisée en interne pour la sérialisation de graphiques d’objets qui contiennent des LINQ to objets XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-888">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="d6fc7-889">Pour obtenir un exemple de la sérialisation d’un graphique d’objet qui contient LINQ to objets XML, consultez [objet de sérialisation graphiques qui contiennent des objets XElement](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-889">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="d6fc7-890"><see cref="T:System.Xml.XmlReader" /> à partir duquel l'objet est désérialisé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-890">The <see cref="T:System.Xml.XmlReader" /> from which the object is deserialized.</span></span></param>
        <summary><span data-ttu-id="d6fc7-891">Génère un objet à partir de sa représentation XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-891">Generates an object from its XML representation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-892">Cette méthode fait partie de l’implémentation de la <xref:System.Xml.Serialization.IXmlSerializable> interface.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-892">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="d6fc7-893">Cette méthode est utilisée en interne pour la sérialisation de graphiques d’objets qui contiennent des LINQ to objets XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-893">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="d6fc7-894">Pour obtenir un exemple de la sérialisation d’un graphique d’objet qui contient LINQ to objets XML, consultez [objet de sérialisation graphiques qui contiennent des objets XElement](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-894">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="d6fc7-895"><see cref="T:System.Xml.XmlWriter" /> vers lequel cet objet est sérialisé.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-895">The <see cref="T:System.Xml.XmlWriter" /> to which this object is serialized.</span></span></param>
        <summary><span data-ttu-id="d6fc7-896">Convertit un objet en sa représentation XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-896">Converts an object into its XML representation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-897">Cette méthode est utilisée en interne pour le marshaling de graphiques d’objets qui contiennent des LINQ to objets XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-897">This method is used internally for marshaling object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="d6fc7-898">Pour obtenir un exemple de la sérialisation d’un graphique d’objet qui contient LINQ to objets XML, consultez [objet de sérialisation graphiques qui contiennent des objets XElement](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span><span class="sxs-lookup"><span data-stu-id="d6fc7-898">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6fc7-899">Obtient ou définit le texte concaténé de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-899">Gets or sets the concatenated text contents of this element.</span></span></summary>
        <value><span data-ttu-id="d6fc7-900"><see cref="T:System.String" /> qui contient tout le contenu de texte de cet élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-900">A <see cref="T:System.String" /> that contains all of the text content of this element.</span></span> <span data-ttu-id="d6fc7-901">S'il existe plusieurs nœuds de texte, ils seront concaténés.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-901">If there are multiple text nodes, they will be concatenated.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6fc7-902">À l’aide de cette propriété, vous pouvez obtenir ou définir la valeur d’un élément.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-902">Using this property, you can get or set the value of an element.</span></span>  
  
 <span data-ttu-id="d6fc7-903">Paramètre de cette propriété déclenche le <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> événements.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-903">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="d6fc7-904">Si vous voulez obtenir la valeur d’un élément, mais vous n’êtes pas sûr qu’il existe, il est plus pratique d’utiliser les opérateurs de conversion explicite et affecter l’élément à un type nullable tel que `string` ou <xref:System.Nullable%601> de <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-904">If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>.</span></span> <span data-ttu-id="d6fc7-905">Si l’élément n’existe pas, le type nullable a la valeur `null`.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-905">If the element does not exist, the nullable type is set to `null`.</span></span> <span data-ttu-id="d6fc7-906">En revanche, si vous souhaitez utiliser cette propriété, vous devez vous assurer que le <xref:System.Xml.Linq.XContainer.Element%2A> méthode ne retourne pas `null` avant d’accéder à cette propriété.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-906">By contrast, if you want to use this property, you must make sure that the <xref:System.Xml.Linq.XContainer.Element%2A> method does not return `null` before you access this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d6fc7-907">L’exemple suivant utilise cette propriété pour récupérer le texte d’un élément avec du contenu mixte.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-907">The following example uses this property to retrieve the text of an element with mixed content.</span></span>  
  
```csharp  
XElement el = XElement.Parse("<Root>This is <b>mixed</b> content</Root>");  
Console.WriteLine("{0}", el.Value);  
```  
  
```vb  
Dim el As XElement = <Root>This is <b>mixed</b> content</Root>  
Console.WriteLine("{0}", el.Value)  
```  
  
 <span data-ttu-id="d6fc7-908">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-908">This example produces the following output:</span></span>  
  
```  
This is mixed content  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="d6fc7-909"><see cref="T:System.Xml.XmlWriter" /> dans lequel cette méthode écrira.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-909">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span></span></param>
        <summary><span data-ttu-id="d6fc7-910">Écrivez cet élément vers un <see cref="T:System.Xml.XmlWriter" />.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-910">Write this element to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d6fc7-911">L’exemple suivant montre comment écrire un <xref:System.Xml.Linq.XElement> à un <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-911">The following example shows how to write an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span> <span data-ttu-id="d6fc7-912">Notez que l’exemple n’a pas écrit de déclaration XML.</span><span class="sxs-lookup"><span data-stu-id="d6fc7-912">Note that the example did not write an XML declaration.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    xw.WriteStartElement("Root");  
  
    XElement child1 = new XElement("Child",  
        new XElement("GrandChild", "some content")  
    );  
    child1.WriteTo(xw);  
  
    XElement child2 = new XElement("AnotherChild",  
        new XElement("GrandChild", "different content")  
    );  
    child2.WriteTo(xw);  
  
    xw.WriteEndElement();  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    xw.WriteStartElement("Root")  
    Dim child1 As XElement = _  
        <Child>  
            <GrandChild>some content</GrandChild>  
        </Child>  
    child1.WriteTo(xw)  
    Dim child2 As XElement = _   
        <AnotherChild>  
            <GrandChild>different content</GrandChild>  
        </AnotherChild>  
    child2.WriteTo(xw)  
    xw.WriteEndElement()  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="d6fc7-913">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="d6fc7-913">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>  
    <GrandChild>some content</GrandChild>  
  </Child>  
  <AnotherChild>  
    <GrandChild>different content</GrandChild>  
  </AnotherChild>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>