<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XName.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c2029127d8735565c289926acb529dfac1574a14.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2029127d8735565c289926acb529dfac1574a14</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XName">
          <source>Represents a name of an XML element or attribute.</source>
          <target state="translated">Représente un nom d'un élément ou attribut XML.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>XML names include a namespace and a local name.</source>
          <target state="translated">Les noms XML incluent un espace de noms et un nom local.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>A <bpt id="p1">*</bpt>fully qualified name<ept id="p1">*</ept> is the combination of the namespace and local name.</source>
          <target state="translated">A <bpt id="p1">*</bpt>nom qualifié complet<ept id="p1">*</ept> est la combinaison de l’espace de noms et le nom local.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Creating an XName Object</source>
          <target state="translated">Création d’un objet XName</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> does not contain any public constructors.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> ne contient pas de constructeurs publics.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Instead, this class provides an implicit conversion from <ph id="ph1">&lt;xref:System.String&gt;</ph> that allows you to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Au lieu de cela, cette classe fournit une conversion implicite de <ph id="ph1">&lt;xref:System.String&gt;</ph> qui vous permet de créer un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The most common place you use this conversion is when constructing an element or attribute: The first argument to the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor is an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">La plus courante dans laquelle vous utilisez cette conversion est lors de la construction d’un élément ou attribut : le premier argument de la <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructeur est un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>By passing a string, you take advantage of the implicit conversion.</source>
          <target state="translated">En passant une chaîne, vous allez profiter de la conversion implicite.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The following code creates an element with a name that is in no namespace:</source>
          <target state="translated">Le code suivant crée un élément avec un nom qui se trouve dans aucun espace de noms :</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>In Visual Basic, it is more appropriate to use XML literals:</source>
          <target state="translated">En Visual Basic, il est plus approprié d’utiliser des littéraux XML :</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Assigning a string to an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> uses the implicit conversion from <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Assignation d’une chaîne à un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> utilise la conversion implicite de <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The Visual Basic example creates the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> using XML literals.</source>
          <target state="translated">L’exemple Visual Basic crée le <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> à l’aide de littéraux XML.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Even though XML literals are used, an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is created for the <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Bien que les littéraux XML sont utilisées, une <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objet est créé pour le <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>In addition, you can call the <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Get%2A&gt;</ph> method for an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> object.</source>
          <target state="translated">En outre, vous pouvez appeler la <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Get%2A&gt;</ph> méthode pour une <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> objet.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>However, the recommended way is to use the implicit conversion from string.</source>
          <target state="translated">Toutefois, la méthode recommandée est d’utiliser la conversion implicite de chaîne.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Creating an XName in a Namespace</source>
          <target state="translated">Création d’un XName dans un Namespace</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>As with XML, an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> can be in a namespace, or it can be in no namespace.</source>
          <target state="translated">Comme avec XML, un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> peut se trouver dans un espace de noms, ou il peut être dans aucun espace de noms.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For C#, the recommended approach for creating an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> in a namespace is to declare the <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object, then use the override of the addition operator.</source>
          <target state="translated">Pour c#, l’approche recommandée pour la création d’un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> dans un espace de noms consiste à déclarer le <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> de l’objet, puis utiliser le remplacement de l’opérateur d’addition.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.</source>
          <target state="translated">Pour Visual Basic, l’approche recommandée consiste à utiliser des littéraux XML et les déclarations d’espace de noms global à créer du code XML qui se trouve dans un espace de noms.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Creating an XName in no Namespace</source>
          <target state="translated">Création d’un XName dans aucun Namespace</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property of an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is guaranteed to not be null.</source>
          <target state="translated">Le <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> propriété d’un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> objet est garanti ne pas être null.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is in no namespace, then the <ph id="ph2">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property will be set to <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</source>
          <target state="translated">Si le <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> dans aucun espace de noms, puis le <ph id="ph2">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> propriété sera définie <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The following code demonstrates this:</source>
          <target state="translated">Le code suivant illustre cela :</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Using Expanded Names</source>
          <target state="translated">À l’aide des noms développés</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>You can also create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> from a expanded XML name in the form <ph id="ph2">`{namespace}localname`</ph>:</source>
          <target state="translated">Vous pouvez également créer un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> à partir d’un nom XML développé sous la forme <ph id="ph2">`{namespace}localname`</ph>:</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Be aware that creating an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> through an expanded name is less efficient than creating an <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object and using the override of the addition operator.</source>
          <target state="translated">N’oubliez pas que la création d’un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> via un nom développé est moins efficace que la création d’un <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objet et à l’aide de la substitution de l’opérateur d’addition.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>It is also less efficient than importing a global namespace and using XML literals in Visual Basic.</source>
          <target state="translated">Il est également moins efficace que l’importation d’un espace de noms global et à l’aide de littéraux XML en Visual Basic.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>If you create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> using an expanded name, LINQ to XML must find the atomized instance of a namespace.</source>
          <target state="translated">Si vous créez un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> à l’aide d’un nom développé, LINQ to XML doit rechercher l’instance atomisée d’un espace de noms.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This work must be repeated for every use of an expanded name.</source>
          <target state="translated">Cette opération doit être répétée pour chaque utilisation d’un nom développé.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.</source>
          <target state="translated">Ce temps supplémentaire est susceptible d’être négligeable lors de l’écriture de requêtes LINQ ; Toutefois, il peut être important lorsque vous créez une grande arborescence XML.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>XName Objects are Atomized</source>
          <target state="translated">Objets XName sont atomisés</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects are guaranteed to be atomized; that is, if two <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects have exactly the same namespace and exactly the same local name, they will share the same instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> les objets sont assurés d’être atomisés ; Autrement dit, si deux <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> ont exactement le même espace de noms et exactement le même nom local, ils partageront la même instance.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The equality and comparison operators are also provided explicitly for this purpose.</source>
          <target state="translated">Les opérateurs d’égalité et de comparaison sont également fournis explicitement dans ce but.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Among other benefits, this feature allows for faster execution of queries.</source>
          <target state="translated">Entre autres avantages, cette fonctionnalité permet une exécution plus rapide des requêtes.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.</source>
          <target state="translated">Lors du filtrage sur le nom des éléments ou attributs, les comparaisons exprimées dans les prédicats utilisent la comparaison de l’identité, pas comparaison de valeurs.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>It is much faster to determine that two references actually refer to the same object than to compare two strings.</source>
          <target state="translated">Il est beaucoup plus rapide pour déterminer que deux références font en fait référence au même objet que de comparer deux chaînes.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare to the current <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> à comparer à l'objet <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> actuel.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Détermine si le <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> spécifié est égal à ce <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to the current <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si le <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> spécifié est égal au <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> actuel ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source>For two <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects to be equal, they must have the same expanded name.</source>
          <target state="translated">Pour deux <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objets soit égale, ils doivent avoir le même nom développé.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XName">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object.</source>
          <target state="translated">Obtient un objet <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This method provides overloads that allow you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> from a expanded XML name.</source>
          <target state="translated">Cette méthode fournit des surcharges qui vous permettent de créer un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> à partir d’un nom XML développé.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>You can create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> from a string in the form <ph id="ph2">`{namespace}localname`</ph>, or from a namespace and a local name, specified separately.</source>
          <target state="translated">Vous pouvez créer un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> à partir d’une chaîne sous la forme <ph id="ph2">`{namespace}localname`</ph>, ou à partir d’un espace de noms et un nom local, spécifiés séparément.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>A much more common and easier way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is to use the implicit conversion from string.</source>
          <target state="translated">Un moyen beaucoup plus courante et plus facile de créer un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> consiste à utiliser la conversion implicite de chaîne.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>To create a name that is in a namespace, the common approach is to use the addition operator overload that allows you to combine an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object and a string.</source>
          <target state="translated">Pour créer un nom qui se trouve dans un espace de noms, l’approche courante consiste à utiliser la surcharge d’opérateur addition qui vous permet de combiner un <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> objet et une chaîne.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For more information and examples, see <bpt id="p1">[</bpt>How to: Create a Document with Namespaces (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept>.</source>
          <target state="translated">Pour plus d’informations et d’exemples, consultez <bpt id="p1">[</bpt>Comment : créer un Document avec des espaces de noms (c#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For more information on using namespaces in <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, see <bpt id="p1">[</bpt>Namespaces in Visual Basic (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept>.</source>
          <target state="translated">Pour plus d’informations sur l’utilisation des espaces de noms dans <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, consultez <bpt id="p1">[</bpt>espaces de noms dans Visual Basic (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects are atomized, if there is an existing <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> with exactly the same name, the assigned variable will refer to the existing <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Étant donné que <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objets sont atomisés, s’il existe un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> avec exactement le même nom, la variable assignée fera référence à l’objet existant <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>If there is no existing <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, a new one will be created and initialized.</source>
          <target state="translated">S’il n’existe aucun <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, une nouvelle sera être créé et initialisé.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains an expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> qui contient un nom XML développé au format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object from an expanded name.</source>
          <target state="translated">Obtient un objet <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> à partir d'un nom développé.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object constructed from the expanded name.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> construit à partir du nom développé.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>This method contains overloads that allow you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Cette méthode contient des surcharges qui vous permettent de créer un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>You can create it from a expanded XML name in the form <ph id="ph1">`{namespace}localname`</ph>, or from a namespace and a local name, specified separately.</source>
          <target state="translated">Vous pouvez le créer à partir d’un nom XML développé sous la forme <ph id="ph1">`{namespace}localname`</ph>, ou à partir d’un espace de noms et un nom local, spécifiés séparément.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>A much more common and easier way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is to use the implicit conversion from string.</source>
          <target state="translated">Un moyen beaucoup plus courante et plus facile de créer un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> consiste à utiliser la conversion implicite de chaîne.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> are atomized, if there is an existing <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> with exactly the same name, the assigned variable will refer to the existing <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Étant donné que <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> sont atomisés, s’il existe un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> avec exactement le même nom, la variable assignée fera référence à l’objet existant <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>If there is no existing <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, a new one will be created and initialized.</source>
          <target state="translated">S’il n’existe aucun <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, une nouvelle sera être créé et initialisé.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>The following example shows the use of this method.</source>
          <target state="translated">L’exemple suivant illustre l’utilisation de cette méthode.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>A local (unqualified) name.</source>
          <target state="translated">Nom local (non qualifié).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>An XML namespace.</source>
          <target state="translated">Espace de noms XML.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object from a local name and a namespace.</source>
          <target state="translated">Obtient un objet <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> à partir d'un nom local et d'un espace de noms.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object created from the specified local name and namespace.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> créé à partir du nom local et de l'espace de noms spécifiés.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>This method contains overloads that allow you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Cette méthode contient des surcharges qui vous permettent de créer un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>You can create it from an expanded XML name in the form <ph id="ph1">`{namespace}localname`</ph>, or from a namespace and a local name, specified separately.</source>
          <target state="translated">Vous pouvez le créer à partir d’un nom XML développé sous la forme <ph id="ph1">`{namespace}localname`</ph>, ou à partir d’un espace de noms et un nom local, spécifiés séparément.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>A much more common and easier way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is to use the implicit conversion from string.</source>
          <target state="translated">Un moyen beaucoup plus courante et plus facile de créer un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> consiste à utiliser la conversion implicite de chaîne.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> are atomized, if there is an existing <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> with exactly the same name, the assigned variable will refer to the existing <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Étant donné que <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> sont atomisés, s’il existe un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> avec exactement le même nom, la variable assignée fera référence à l’objet existant <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>If there is no existing <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, a new one will be created and initialized.</source>
          <target state="translated">S’il n’existe aucun <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, une nouvelle sera être créé et initialisé.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>The following example shows the use of this method.</source>
          <target state="translated">L’exemple suivant illustre l’utilisation de cette méthode.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>Gets a hash code for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Obtient un code de hachage pour ce <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that contains the hash code for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> qui contient le code de hachage pour le <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>This method serves as a hash function for <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Cette méthode sert de fonction de hachage pour <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>You can use <ph id="ph1">&lt;xref:System.Xml.Linq.XName.GetHashCode%2A&gt;</ph> in hashing algorithms, or in data structures such as a hash table.</source>
          <target state="translated">Vous pouvez utiliser <ph id="ph1">&lt;xref:System.Xml.Linq.XName.GetHashCode%2A&gt;</ph> dans des algorithmes de hachage, ou dans des structures de données telles qu’une table de hachage.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XName.LocalName">
          <source>Gets the local (unqualified) part of the name.</source>
          <target state="translated">Obtient la partie locale (non qualifiée) du nom.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the local (unqualified) part of the name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> qui contient la partie locale (non qualifiée) du nom.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>This property is guaranteed to not be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Cette propriété est garantie ne pas être <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>The following example shows the use of this property.</source>
          <target state="translated">L’exemple suivant illustre l’utilisation de cette propriété.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XName.Namespace">
          <source>Gets the namespace part of the fully qualified name.</source>
          <target state="translated">Obtient la partie de l'espace de noms du nom qualifié complet.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that contains the namespace part of the name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> qui contient la partie de l'espace de noms du nom.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property is guaranteed to not be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> est assurée de ne pas être <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>If an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is in no namespace, this property returns <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</source>
          <target state="translated">Si un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> est dans aucun espace de noms, cette propriété retourne <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>The following example shows the use of this property.</source>
          <target state="translated">L’exemple suivant illustre l’utilisation de cette propriété.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>Returns the URI of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Retourne l'URI du <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> pour ce <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>The URI of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">URI du <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> pour ce <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>This is a convenience property to get the namespace name from an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Il s’agit d’une propriété de commodité pour obtenir le nom de l’espace de noms à partir d’un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>This example creates an element in a namespace, and then prints the element's namespace.</source>
          <target state="translated">Cet exemple crée un élément dans un espace de noms, puis imprime l’espace de noms.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">Premier <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> à comparer.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">Deuxième <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> à comparer.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are equal.</source>
          <target state="translated">Retourne une valeur indiquant si deux instances de <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> sont égales.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are equal; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="left" /&gt;</ph> est égal à <ph id="ph3">&lt;paramref name="right" /&gt;</ph> ; sinon <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are included to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> and a <ph id="ph4">`string`</ph>, such as<ph id="ph5">`element.Name == "SomeElementName"`</ph>.</source>
          <target state="translated">Les surcharges d’opérateur <ph id="ph1">`==`</ph> et <ph id="ph2">`!=`</ph> sont inclus afin d’autoriser les comparaisons entre <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> et un <ph id="ph4">`string`</ph>, tel que<ph id="ph5">`element.Name == "SomeElementName"`</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</source>
          <target state="translated">Les opérateurs d’égalité de référence prédéfinis en c# requièrent qu’un opérande puisse être converti dans le type de l’autre par le biais des conversions de référence uniquement.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>These operators do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Ces opérateurs ne considèrent pas que la conversion implicite de chaîne à <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The following example shows some comparisons between <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects and strings.</source>
          <target state="translated">L’exemple suivant présente quelques comparaisons entre <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objets et des chaînes.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>A string that contains an expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Chaîne qui contient un nom XML développé au format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>Converts a string formatted as an expanded XML name (that is,<bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>) to an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object.</source>
          <target state="translated">Convertit une chaîne mise en forme en tant que nom XML développé (c’est-à-dire, <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>) en objet <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object constructed from the expanded name.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> construit à partir du nom développé.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>You are using this implicit operator when you create an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> by passing a string to the appropriate constructor.</source>
          <target state="translated">Vous utilisez cet opérateur implicite lorsque vous créez un <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> ou <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> en passant une chaîne au constructeur approprié.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> by assigning a string to it, which invokes this implicit conversion operator.</source>
          <target state="translated">L’exemple suivant crée un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> en lui assignant une chaîne, qui appelle cet opérateur de conversion implicite.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">Premier <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> à comparer.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">Deuxième <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> à comparer.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are not equal.</source>
          <target state="translated">Retourne une valeur indiquant si deux instances de <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> ne sont pas égales.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are not equal; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="left" /&gt;</ph> et <ph id="ph3">&lt;paramref name="right" /&gt;</ph> ne sont pas égaux ; sinon <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are included to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> and a string, such as<ph id="ph4">`element.Name == "SomeElementName"`</ph>.</source>
          <target state="translated">Les surcharges d’opérateur <ph id="ph1">`==`</ph> et <ph id="ph2">`!=`</ph> sont inclus afin d’autoriser les comparaisons entre <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> et une chaîne, tel que<ph id="ph4">`element.Name == "SomeElementName"`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</source>
          <target state="translated">Les opérateurs d’égalité de référence prédéfinis en c# requièrent qu’un opérande puisse être converti dans le type de l’autre par le biais des conversions de référence uniquement.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>These operators do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Ces opérateurs ne considèrent pas que la conversion implicite de chaîne à <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The following C# example compares an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> object to a string, which invokes this operator.</source>
          <target state="translated">L’exemple c# suivant compare un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objet à une chaîne, qui appelle cet opérateur.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#IEquatable&amp;lt;System#Xml#Linq#XName&amp;gt;#Equals(System.Xml.Linq.XName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare with this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> à comparer à ce <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#IEquatable&amp;lt;System#Xml#Linq#XName&amp;gt;#Equals(System.Xml.Linq.XName)">
          <source>Indicates whether the current <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Indique si le <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> actuel est égal au <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#IEquatable&amp;lt;System#Xml#Linq#XName&amp;gt;#Equals(System.Xml.Linq.XName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to the specified <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>, otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si ce <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> est égal au <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> spécifié ; sinon, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> to populate with data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> à remplir de données.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination (see <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>) for this serialization.</source>
          <target state="translated">Destination (voir <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>) de cette sérialisation.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> with the data required to serialize the target object.</source>
          <target state="translated">Remplit un <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> avec les données nécessaires pour sérialiser l'objet cible.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method is used internally to serialize object graphs that contain LINQ to XML objects.</source>
          <target state="translated">Cette méthode est utilisée en interne pour sérialiser des graphiques d’objets qui contiennent des LINQ to objets XML.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.ToString">
          <source>Returns the expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Retourne le nom XML développé au format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.ToString">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> qui contient le nom XML développé au format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.ToString">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, passing an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">L’exemple suivant appelle <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, en passant un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.ToString">
          <source>This causes the <ph id="ph1">&lt;xref:System.Xml.Linq.XName.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">Cela entraîne la <ph id="ph1">&lt;xref:System.Xml.Linq.XName.ToString%2A&gt;</ph> méthode à appeler.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.ToString">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>