<Type Name="XName" FullName="System.Xml.Linq.XName">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5f70a782c2233a9f629a3152500fb3c048d1b8af" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39845154" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XName : IEquatable&lt;System.Xml.Linq.XName&gt;, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XName" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XName&#xA;Implements IEquatable(Of XName), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XName sealed : IEquatable&lt;System::Xml::Linq::XName ^&gt;, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type XName = class&#xA;    interface IEquatable&lt;XName&gt;&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xml.Linq.XName&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.Xml.Linq.NameSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="3e326-101">Représente un nom d'un élément ou attribut XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3e326-101">Represents a name of an XML element or attribute.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-102">Les noms XML incluent un espace de noms et un nom local.</span><span class="sxs-lookup"><span data-stu-id="3e326-102">XML names include a namespace and a local name.</span></span> <span data-ttu-id="3e326-103">Un *nom qualifié complet* est la combinaison de l’espace de noms et le nom local.</span><span class="sxs-lookup"><span data-stu-id="3e326-103">A *fully qualified name* is the combination of the namespace and local name.</span></span>  
  
## <a name="creating-an-xname-object"></a><span data-ttu-id="3e326-104">Création d’un objet XName</span><span class="sxs-lookup"><span data-stu-id="3e326-104">Creating an XName Object</span></span>  
 <span data-ttu-id="3e326-105"><xref:System.Xml.Linq.XName> ne contient pas de constructeurs publics.</span><span class="sxs-lookup"><span data-stu-id="3e326-105"><xref:System.Xml.Linq.XName> does not contain any public constructors.</span></span> <span data-ttu-id="3e326-106">Au lieu de cela, cette classe fournit une conversion implicite de <xref:System.String> qui vous permet de créer un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-106">Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="3e326-107">La plus courante dans laquelle vous utilisez cette conversion est lors de la construction d’un élément ou attribut : le premier argument de la <xref:System.Xml.Linq.XElement> constructeur est un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-107">The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="3e326-108">En passant une chaîne, vous tirer parti de la conversion implicite.</span><span class="sxs-lookup"><span data-stu-id="3e326-108">By passing a string, you take advantage of the implicit conversion.</span></span> <span data-ttu-id="3e326-109">Le code suivant crée un élément avec un nom qui se trouve dans aucun espace de noms :</span><span class="sxs-lookup"><span data-stu-id="3e326-109">The following code creates an element with a name that is in no namespace:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
Console.WriteLine(root);  
```  
  
 <span data-ttu-id="3e326-110">Dans Visual Basic, il est plus approprié d’utiliser des littéraux XML :</span><span class="sxs-lookup"><span data-stu-id="3e326-110">In Visual Basic, it is more appropriate to use XML literals:</span></span>  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="3e326-111">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-111">This example produces the following output:</span></span>  
  
```xml  
<ElementName>content</ElementName>  
```  
  
 <span data-ttu-id="3e326-112">Affectation d’une chaîne à un <xref:System.Xml.Linq.XName> utilise la conversion implicite de <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="3e326-112">Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="3e326-113">L’exemple Visual Basic crée le <xref:System.Xml.Linq.XElement> à l’aide de littéraux XML.</span><span class="sxs-lookup"><span data-stu-id="3e326-113">The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals.</span></span> <span data-ttu-id="3e326-114">Bien que les littéraux XML sont utilisés, un <xref:System.Xml.Linq.XName> objet est créé pour le <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="3e326-114">Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.</span></span>  
  
 <span data-ttu-id="3e326-115">En outre, vous pouvez appeler la <xref:System.Xml.Linq.XName.Get%2A> méthode pour un <xref:System.Xml.Linq.XName> objet.</span><span class="sxs-lookup"><span data-stu-id="3e326-115">In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object.</span></span> <span data-ttu-id="3e326-116">Toutefois, la méthode recommandée consiste à utiliser la conversion implicite de chaîne.</span><span class="sxs-lookup"><span data-stu-id="3e326-116">However, the recommended way is to use the implicit conversion from string.</span></span>  
  
## <a name="creating-an-xname-in-a-namespace"></a><span data-ttu-id="3e326-117">Création d’un XName dans un Namespace</span><span class="sxs-lookup"><span data-stu-id="3e326-117">Creating an XName in a Namespace</span></span>  
 <span data-ttu-id="3e326-118">Comme avec XML, un <xref:System.Xml.Linq.XName> peut se trouver dans un espace de noms, ou il peut être dans aucun espace de noms.</span><span class="sxs-lookup"><span data-stu-id="3e326-118">As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace.</span></span>  
  
 <span data-ttu-id="3e326-119">Pour c#, l’approche recommandée pour la création d’un <xref:System.Xml.Linq.XName> dans un espace de noms consiste à déclarer le <xref:System.Xml.Linq.XNamespace> de l’objet, puis utilisez la substitution de l’opérateur d’addition.</span><span class="sxs-lookup"><span data-stu-id="3e326-119">For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator.</span></span>  
  
 <span data-ttu-id="3e326-120">Pour Visual Basic, l’approche recommandée consiste à utiliser des littéraux XML et les déclarations d’espace de noms global pour créer du code XML qui se trouve dans un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="3e326-120">For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <ElementName>content</ElementName>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="3e326-121">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-121">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
## <a name="creating-an-xname-in-no-namespace"></a><span data-ttu-id="3e326-122">Création d’un XName dans aucun Namespace</span><span class="sxs-lookup"><span data-stu-id="3e326-122">Creating an XName in no Namespace</span></span>  
 <span data-ttu-id="3e326-123">Le <xref:System.Xml.Linq.XName.Namespace%2A> propriété d’un <xref:System.Xml.Linq.XName> objet est garanti ne pas être null.</span><span class="sxs-lookup"><span data-stu-id="3e326-123">The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null.</span></span> <span data-ttu-id="3e326-124">Si le <xref:System.Xml.Linq.XName> dans aucun espace de noms, puis le <xref:System.Xml.Linq.XName.Namespace%2A> propriété sera définie <xref:System.Xml.Linq.XNamespace.None%2A>.</span><span class="sxs-lookup"><span data-stu-id="3e326-124">If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span> <span data-ttu-id="3e326-125">Le code suivant illustre cela :</span><span class="sxs-lookup"><span data-stu-id="3e326-125">The following code demonstrates this:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("The element is in no namespace.");  
else  
    Console.WriteLine("The element is in a namespace.");  
```  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
If (root.Name.Namespace Is XNamespace.None) Then  
    Console.WriteLine("The element is in no namespace.")  
Else  
    Console.WriteLine("The element is in a namespace.")  
End If  
```  
  
 <span data-ttu-id="3e326-126">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-126">This example produces the following output:</span></span>  
  
```  
The element is in no namespace.  
```  
  
## <a name="using-expanded-names"></a><span data-ttu-id="3e326-127">À l’aide des noms développés</span><span class="sxs-lookup"><span data-stu-id="3e326-127">Using Expanded Names</span></span>  
 <span data-ttu-id="3e326-128">Vous pouvez également créer un <xref:System.Xml.Linq.XName> à partir d’un nom XML développé sous la forme `{namespace}localname`:</span><span class="sxs-lookup"><span data-stu-id="3e326-128">You can also create an <xref:System.Xml.Linq.XName> from a expanded XML name in the form `{namespace}localname`:</span></span>  
  
```csharp  
XElement root = new XElement("{http://www.adventure-works.com}ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = New XElement("{http://www.adventure-works.com}ElementName", "content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="3e326-129">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-129">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
 <span data-ttu-id="3e326-130">N’oubliez pas que la création un <xref:System.Xml.Linq.XName> via un nom développé est moins efficace que la création d’un <xref:System.Xml.Linq.XNamespace> objet et à l’aide de la substitution de l’opérateur d’addition.</span><span class="sxs-lookup"><span data-stu-id="3e326-130">Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator.</span></span> <span data-ttu-id="3e326-131">Il est également moins efficace que l’importation d’un espace de noms global et à l’aide de littéraux XML en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="3e326-131">It is also less efficient than importing a global namespace and using XML literals in Visual Basic.</span></span>  
  
 <span data-ttu-id="3e326-132">Si vous créez un <xref:System.Xml.Linq.XName> à l’aide d’un nom développé, LINQ to XML doit rechercher l’instance atomisée d’un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="3e326-132">If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace.</span></span> <span data-ttu-id="3e326-133">Cette opération doit être répétée pour chaque utilisation d’un nom développé.</span><span class="sxs-lookup"><span data-stu-id="3e326-133">This work must be repeated for every use of an expanded name.</span></span> <span data-ttu-id="3e326-134">Ce temps supplémentaire est susceptible d’être négligeable lors de l’écriture de requêtes LINQ ; Toutefois, il peut être important lors de la création d’une grande arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="3e326-134">This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.</span></span>  
  
## <a name="xname-objects-are-atomized"></a><span data-ttu-id="3e326-135">L’atomisation des objets XName</span><span class="sxs-lookup"><span data-stu-id="3e326-135">XName Objects are Atomized</span></span>  
 <span data-ttu-id="3e326-136"><xref:System.Xml.Linq.XName> les objets sont assurés d’être atomisés ; Autrement dit, si deux <xref:System.Xml.Linq.XName> objets ont exactement le même espace de noms et exactement le même nom local, ils partageront la même instance.</span><span class="sxs-lookup"><span data-stu-id="3e326-136"><xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance.</span></span> <span data-ttu-id="3e326-137">Les opérateurs d’égalité et de comparaison sont également fournis explicitement dans ce but.</span><span class="sxs-lookup"><span data-stu-id="3e326-137">The equality and comparison operators are also provided explicitly for this purpose.</span></span>  
  
 <span data-ttu-id="3e326-138">Entre autres avantages, cette fonctionnalité permet une exécution plus rapide des requêtes.</span><span class="sxs-lookup"><span data-stu-id="3e326-138">Among other benefits, this feature allows for faster execution of queries.</span></span> <span data-ttu-id="3e326-139">Lors du filtrage sur le nom des éléments ou attributs, les comparaisons exprimées dans les prédicats utilisent comparaison d’identité, comparaison de valeurs pas.</span><span class="sxs-lookup"><span data-stu-id="3e326-139">When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.</span></span> <span data-ttu-id="3e326-140">Il est beaucoup plus rapide pour déterminer que deux références référencent le même objet que de comparer deux chaînes.</span><span class="sxs-lookup"><span data-stu-id="3e326-140">It is much faster to determine that two references actually refer to the same object than to compare two strings.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xName.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="3e326-141">
            <see cref="T:System.Xml.Linq.XName" /> à comparer à l'objet <see cref="T:System.Xml.Linq.XName" /> actuel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-141">The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e326-142">Détermine si le <see cref="T:System.Xml.Linq.XName" /> spécifié est égal à ce <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-142">Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e326-143">
            <see langword="true" /> si le <see cref="T:System.Xml.Linq.XName" /> spécifié est égal au <see cref="T:System.Xml.Linq.XName" /> actuel ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-143">
              <see langword="true" /> if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-144">Pour deux <xref:System.Xml.Linq.XName> objets soit égale, ils doivent avoir le même nom développé.</span><span class="sxs-lookup"><span data-stu-id="3e326-144">For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Get">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3e326-145">Obtient un objet <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-145">Gets an <see cref="T:System.Xml.Linq.XName" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-146">Cette méthode fournit des surcharges qui vous permettent de créer un <xref:System.Xml.Linq.XName> à partir d’un nom XML développé.</span><span class="sxs-lookup"><span data-stu-id="3e326-146">This method provides overloads that allow you to create an <xref:System.Xml.Linq.XName> from a expanded XML name.</span></span> <span data-ttu-id="3e326-147">Vous pouvez créer un <xref:System.Xml.Linq.XName> à partir d’une chaîne sous la forme `{namespace}localname`, ou à partir d’un espace de noms et un nom local, spécifiés séparément.</span><span class="sxs-lookup"><span data-stu-id="3e326-147">You can create an <xref:System.Xml.Linq.XName> from a string in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="3e326-148">Un moyen beaucoup plus courante et plus facile de créer un <xref:System.Xml.Linq.XName> consiste à utiliser la conversion implicite de chaîne.</span><span class="sxs-lookup"><span data-stu-id="3e326-148">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span> <span data-ttu-id="3e326-149">Pour créer un nom qui se trouve dans un espace de noms, l’approche courante consiste à utiliser la surcharge d’opérateur addition qui vous permet de combiner un <xref:System.Xml.Linq.XNamespace> objet et une chaîne.</span><span class="sxs-lookup"><span data-stu-id="3e326-149">To create a name that is in a namespace, the common approach is to use the addition operator overload that allows you to combine an <xref:System.Xml.Linq.XNamespace> object and a string.</span></span>  
  
 <span data-ttu-id="3e326-150">Pour plus d’informations et des exemples, consultez [Comment : créer un Document avec des espaces de noms (c#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span><span class="sxs-lookup"><span data-stu-id="3e326-150">For more information and examples, see [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span></span>  
  
 <span data-ttu-id="3e326-151">Pour plus d’informations sur l’utilisation des espaces de noms dans Visual Basic, consultez [espaces de noms dans Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span><span class="sxs-lookup"><span data-stu-id="3e326-151">For more information on using namespaces in Visual Basic, see [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span></span>  
  
 <span data-ttu-id="3e326-152">Étant donné que <xref:System.Xml.Linq.XName> objets sont atomisés, s’il existe un <xref:System.Xml.Linq.XName> avec exactement le même nom, la variable assignée fera référence à l’objet de <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-152">Because <xref:System.Xml.Linq.XName> objects are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="3e326-153">S’il n’existe pas encore <xref:System.Xml.Linq.XName>, une nouvelle un est créé et initialisé.</span><span class="sxs-lookup"><span data-stu-id="3e326-153">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ expandedName);" />
      <MemberSignature Language="F#" Value="static member Get : string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.Get expandedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName">
          <span data-ttu-id="3e326-154">
            <see cref="T:System.String" /> qui contient un nom XML développé au format <c>{namespace}localname</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-154">A <see cref="T:System.String" /> that contains an expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e326-155">Obtient un objet <see cref="T:System.Xml.Linq.XName" /> à partir d'un nom développé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-155">Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e326-156">Objet <see cref="T:System.Xml.Linq.XName" /> construit à partir du nom développé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-156">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-157">Cette méthode contient des surcharges qui vous permettent de créer un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-157">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="3e326-158">Vous pouvez le créer à partir d’un nom XML développé sous la forme `{namespace}localname`, ou à partir d’un espace de noms et un nom local, spécifiés séparément.</span><span class="sxs-lookup"><span data-stu-id="3e326-158">You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="3e326-159">Un moyen beaucoup plus courante et plus facile de créer un <xref:System.Xml.Linq.XName> consiste à utiliser la conversion implicite de chaîne.</span><span class="sxs-lookup"><span data-stu-id="3e326-159">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="3e326-160">Étant donné que <xref:System.Xml.Linq.XName> sont atomisés, s’il existe un <xref:System.Xml.Linq.XName> avec exactement le même nom, la variable assignée fera référence à l’objet de <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-160">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="3e326-161">S’il n’existe pas encore <xref:System.Xml.Linq.XName>, une nouvelle un est créé et initialisé.</span><span class="sxs-lookup"><span data-stu-id="3e326-161">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e326-162">L’exemple suivant illustre l’utilisation de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="3e326-162">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("{http://www.adventure-works.com}Root");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred approach for specifying the XName in the  
// constructor of XElement.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="3e326-163">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-163">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string localName, string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string localName, string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (localName As String, namespaceName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ localName, System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member Get : string * string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.Get (localName, namespaceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="3e326-164">Nom local (non qualifié).</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-164">A local (unqualified) name.</span>
          </span>
        </param>
        <param name="namespaceName">
          <span data-ttu-id="3e326-165">Espace de noms XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-165">An XML namespace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e326-166">Obtient un objet <see cref="T:System.Xml.Linq.XName" /> à partir d'un nom local et d'un espace de noms.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-166">Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e326-167">Objet <see cref="T:System.Xml.Linq.XName" /> créé à partir du nom local et de l'espace de noms spécifiés.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-167">An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-168">Cette méthode contient des surcharges qui vous permettent de créer un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-168">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="3e326-169">Vous pouvez le créer à partir d’un nom XML développé sous la forme `{namespace}localname`, ou à partir d’un espace de noms et un nom local, spécifiés séparément.</span><span class="sxs-lookup"><span data-stu-id="3e326-169">You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="3e326-170">Un moyen beaucoup plus courante et plus facile de créer un <xref:System.Xml.Linq.XName> consiste à utiliser la conversion implicite de chaîne.</span><span class="sxs-lookup"><span data-stu-id="3e326-170">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="3e326-171">Étant donné que <xref:System.Xml.Linq.XName> sont atomisés, s’il existe un <xref:System.Xml.Linq.XName> avec exactement le même nom, la variable assignée fera référence à l’objet de <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-171">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="3e326-172">S’il n’existe pas encore <xref:System.Xml.Linq.XName>, une nouvelle un est créé et initialisé.</span><span class="sxs-lookup"><span data-stu-id="3e326-172">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e326-173">L’exemple suivant illustre l’utilisation de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="3e326-173">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("Root", "http://www.adventure-works.com");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred form.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="3e326-174">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-174">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xName.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e326-175">Obtient un code de hachage pour ce <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-175">Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e326-176">
            <see cref="T:System.Int32" /> qui contient le code de hachage pour le <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-176">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-177">Cette méthode sert de fonction de hachage pour <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-177">This method serves as a hash function for <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="3e326-178">Vous pouvez utiliser <xref:System.Xml.Linq.XName.GetHashCode%2A> dans des algorithmes de hachage, ou dans les structures de données comme une table de hachage.</span><span class="sxs-lookup"><span data-stu-id="3e326-178">You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.Linq.XName.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e326-179">Obtient la partie locale (non qualifiée) du nom.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-179">Gets the local (unqualified) part of the name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e326-180">
            <see cref="T:System.String" /> qui contient la partie locale (non qualifiée) du nom.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-180">A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-181">Cette propriété est garantie ne pas être `null`.</span><span class="sxs-lookup"><span data-stu-id="3e326-181">This property is guaranteed to not be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e326-182">L’exemple suivant illustre l’utilisation de cette propriété.</span><span class="sxs-lookup"><span data-stu-id="3e326-182">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="3e326-183">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-183">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XName.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNamespace Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNamespace ^ Namespace { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XName.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e326-184">Obtient la partie de l'espace de noms du nom qualifié complet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-184">Gets the namespace part of the fully qualified name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e326-185">
            <see cref="T:System.Xml.Linq.XNamespace" /> qui contient la partie de l'espace de noms du nom.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-185">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-186">La propriété <xref:System.Xml.Linq.XName.Namespace%2A> est assurée de ne pas être `null`.</span><span class="sxs-lookup"><span data-stu-id="3e326-186">The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`.</span></span> <span data-ttu-id="3e326-187">Si un <xref:System.Xml.Linq.XName> est dans aucun espace de noms, cette propriété retourne <xref:System.Xml.Linq.XNamespace.None%2A>.</span><span class="sxs-lookup"><span data-stu-id="3e326-187">If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e326-188">L’exemple suivant illustre l’utilisation de cette propriété.</span><span class="sxs-lookup"><span data-stu-id="3e326-188">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="3e326-189">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-189">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Xml.Linq.XName.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3e326-190">Retourne l'URI du <see cref="T:System.Xml.Linq.XNamespace" /> pour ce <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-190">Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3e326-191">URI du <see cref="T:System.Xml.Linq.XNamespace" /> pour ce <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-191">The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-192">Il s’agit d’une propriété de commodité pour obtenir le nom de l’espace de noms à partir d’un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-192">This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3e326-193">Cet exemple crée un élément dans un espace de noms, puis imprime l’espace de noms.</span><span class="sxs-lookup"><span data-stu-id="3e326-193">This example creates an element in a namespace, and then prints the element's namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root.Name.NamespaceName);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="3e326-194">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-194">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xml.Linq.XName * System.Xml.Linq.XName -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="3e326-195">Premier <see cref="T:System.Xml.Linq.XName" /> à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-195">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="3e326-196">Deuxième <see cref="T:System.Xml.Linq.XName" /> à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-196">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e326-197">Retourne une valeur indiquant si deux instances de <see cref="T:System.Xml.Linq.XName" /> sont égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-197">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e326-198">
            <see langword="true" /> si <paramref name="left" /> est égal à <paramref name="right" /> ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-198">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-199">Les surcharges d’opérateur `==` et `!=` sont inclus afin d’activer les comparaisons entre <xref:System.Xml.Linq.XName> et un `string`, tel que`element.Name == "SomeElementName"`.</span><span class="sxs-lookup"><span data-stu-id="3e326-199">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="3e326-200">Les opérateurs d’égalité de référence prédéfinis en c# requièrent qu’un opérande puisse être converti vers le type de l’autre par le biais des conversions de référence uniquement.</span><span class="sxs-lookup"><span data-stu-id="3e326-200">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="3e326-201">Ces opérateurs ne considèrent pas la conversion implicite de chaîne à <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-201">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="3e326-202">L’exemple suivant présente quelques comparaisons entre <xref:System.Xml.Linq.XName> objets et des chaînes.</span><span class="sxs-lookup"><span data-stu-id="3e326-202">The following example shows some comparisons between <xref:System.Xml.Linq.XName> objects and strings.</span></span>  
  
```csharp  
XName xn;  
xn = XName.Get("Root");  
Console.WriteLine(xn == "Root");  
  
xn = XName.Get("Root", "http://www.adventure-works.com");  
Console.WriteLine(xn == "{http://www.adventure-works.com}Root");  
  
XElement root = new XElement("Root", "content");  
Console.WriteLine(root.Name == "Root");  
```  
  
```vb  
Dim xn As XName  
xn = XName.Get("Root")  
Console.WriteLine(xn = "Root")  
  
xn = XName.Get("Root", "http://www.adventure-works.com")  
Console.WriteLine(xn = "{http://www.adventure-works.com}Root")  
  
Dim root As XElement = New XElement("Root", "content")  
Console.WriteLine(root.Name = "Root")  
```  
  
 <span data-ttu-id="3e326-203">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-203">This example produces the following output:</span></span>  
  
```  
True  
True  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XName (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Implicit(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XName ^(System::String ^ expandedName);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Xml.Linq.XName" Usage="System.Xml.Linq.XName.op_Implicit expandedName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName">
          <span data-ttu-id="3e326-204">Chaîne qui contient un nom XML développé au format <c>{namespace}localname</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-204">A string that contains an expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e326-205">Convertit une chaîne mise en forme en tant que nom XML développé (c’est-à-dire, <c>{namespace}localname</c>) en objet <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-205">Converts a string formatted as an expanded XML name (that is,<c>{namespace}localname</c>) to an <see cref="T:System.Xml.Linq.XName" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e326-206">Objet <see cref="T:System.Xml.Linq.XName" /> construit à partir du nom développé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-206">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-207">Vous utilisez cet opérateur implicite lorsque vous créez un <xref:System.Xml.Linq.XElement> ou <xref:System.Xml.Linq.XAttribute> en passant une chaîne au constructeur approprié.</span><span class="sxs-lookup"><span data-stu-id="3e326-207">You are using this implicit operator when you create an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> by passing a string to the appropriate constructor.</span></span>  
  
## Examples  
 <span data-ttu-id="3e326-208">L’exemple suivant crée un <xref:System.Xml.Linq.XName> en lui assignant une chaîne, qui appelle cet opérateur de conversion implicite.</span><span class="sxs-lookup"><span data-stu-id="3e326-208">The following example creates an <xref:System.Xml.Linq.XName> by assigning a string to it, which invokes this implicit conversion operator.</span></span>  
  
```csharp  
XElement el = new XElement("{http://www.adventure-works.com}Root", "content");  
Console.WriteLine(el);  
  
// The preferred approach is to initialize an XNamespace object  
// and use the overload of the addition operator.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el As XElement = New XElement("{http://www.adventure-works.com}Root", "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach is to import a global namespace and   
        ' use an XML literal.  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="3e326-209">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-209">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xml.Linq.XName * System.Xml.Linq.XName -&gt; bool" Usage="System.Xml.Linq.XName.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="3e326-210">Premier <see cref="T:System.Xml.Linq.XName" /> à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-210">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="3e326-211">Deuxième <see cref="T:System.Xml.Linq.XName" /> à comparer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-211">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e326-212">Retourne une valeur indiquant si deux instances de <see cref="T:System.Xml.Linq.XName" /> ne sont pas égales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-212">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e326-213">
            <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ne sont pas égaux ; sinon <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-213">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-214">Les surcharges d’opérateur `==` et `!=` sont inclus afin d’activer les comparaisons entre <xref:System.Xml.Linq.XName> et une chaîne, tel que`element.Name == "SomeElementName"`.</span><span class="sxs-lookup"><span data-stu-id="3e326-214">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="3e326-215">Les opérateurs d’égalité de référence prédéfinis en c# requièrent qu’un opérande puisse être converti vers le type de l’autre par le biais des conversions de référence uniquement.</span><span class="sxs-lookup"><span data-stu-id="3e326-215">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="3e326-216">Ces opérateurs ne considèrent pas la conversion implicite de chaîne à <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-216">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="3e326-217">L’exemple c# suivant compare un <xref:System.Xml.Linq.XName> objet en une chaîne, qui appelle cet opérateur.</span><span class="sxs-lookup"><span data-stu-id="3e326-217">The following C# example compares an <xref:System.Xml.Linq.XName> object to a string, which invokes this operator.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
  
Console.WriteLine(root.Name != "{http://www.adventure-works.com}Root");  
  
// the following is the preferred idiom  
Console.WriteLine(root.Name != aw + "Root");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name <> "{http://www.adventure-works.com}Root")  
  
        ' the following is the preferred idiom  
        Console.WriteLine(root.Name <> GetXmlNamespace() + "Root")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="3e326-218">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-218">This example produces the following output:</span></span>  
  
```  
False  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals">
      <MemberSignature Language="C#" Value="bool IEquatable&lt;XName&gt;.Equals (System.Xml.Linq.XName other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(class System.Xml.Linq.XName other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#IEquatable&lt;System#Xml#Linq#XName&gt;#Equals(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As XName) As Boolean Implements IEquatable(Of XName).Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(System::Xml::Linq::XName ^ other) = IEquatable&lt;System::Xml::Linq::XName ^&gt;::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="3e326-219">
            <see cref="T:System.Xml.Linq.XName" /> à comparer à ce <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-219">The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e326-220">Indique si le <see cref="T:System.Xml.Linq.XName" /> actuel est égal au <see cref="T:System.Xml.Linq.XName" /> spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-220">Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e326-221">
            <see langword="true" /> si ce <see cref="T:System.Xml.Linq.XName" /> est égal au <see cref="T:System.Xml.Linq.XName" /> spécifié ; sinon, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-221">
              <see langword="true" /> if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="3e326-222">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à remplir de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-222">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="3e326-223">Destination (voir <see cref="T:System.Runtime.Serialization.StreamingContext" />) de cette sérialisation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-223">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3e326-224">Remplit un <see cref="T:System.Runtime.Serialization.SerializationInfo" /> avec les données nécessaires pour sérialiser l'objet cible.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-224">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3e326-225">Cette méthode est utilisée en interne pour sérialiser des graphiques d’objets qui contiennent des LINQ to objets XML.</span><span class="sxs-lookup"><span data-stu-id="3e326-225">This method is used internally to serialize object graphs that contain LINQ to XML objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xName.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3e326-226">Retourne le nom XML développé au format <c>{namespace}localname</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-226">Returns the expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3e326-227">
            <see cref="T:System.String" /> qui contient le nom XML développé au format <c>{namespace}localname</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3e326-227">A <see cref="T:System.String" /> that contains the expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3e326-228">L’exemple suivant appelle <xref:System.Console.WriteLine%2A>, en passant un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="3e326-228">The following example calls <xref:System.Console.WriteLine%2A>, passing an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="3e326-229">Cela entraîne le <xref:System.Xml.Linq.XName.ToString%2A> méthode à appeler.</span><span class="sxs-lookup"><span data-stu-id="3e326-229">This causes the <xref:System.Xml.Linq.XName.ToString%2A> method to be called.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="3e326-230">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="3e326-230">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>