<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XStreamingElement.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b0336162d5331cff04e4eb89149363780070c382.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0336162d5331cff04e4eb89149363780070c382</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Represents elements in an XML tree that supports deferred streaming output.</source>
          <target state="translated">Représente les éléments d’une arborescence XML qui prend en charge la sortie de diffusion en continu différée.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This class allows you to create an XML tree that supports deferred streaming output.</source>
          <target state="translated">Cette classe vous permet de créer une arborescence XML qui prend en charge la sortie de diffusion en continu différée.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>You use this class to create an XML tree in a very similar fashion to creating an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Cette classe vous permet de créer une arborescence XML de façon très similaire à la création d’une arborescence XML à l’aide <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>However, there is a fundamental difference.</source>
          <target state="translated">Toutefois, il est d’une différence fondamentale.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>When you use a LINQ query to specify content when creating an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, the query variable is iterated at the time of construction of the XML tree, and the results of the query are added to the XML tree.</source>
          <target state="translated">Lorsque vous utilisez une requête LINQ pour spécifier le contenu lors de la création d’un document XML à l’aide d’une arborescence <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, la variable de requête est parcourue au moment de la construction de l’arborescence XML, et les résultats de la requête sont ajoutés à l’arborescence XML.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>In contrast, when you create an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, a reference to the query variable is stored in the XML tree without being iterated.</source>
          <target state="translated">En revanche, lorsque vous créez une arborescence XML à l’aide <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, une référence à la variable de requête est stockée dans l’arborescence XML sans être parcourue.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Queries are iterated only upon serialization.</source>
          <target state="translated">Les requêtes sont parcourues uniquement lors de la sérialisation.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This allows you to create larger XML trees while maintaining a smaller memory footprint.</source>
          <target state="translated">Cela vous permet de vous permet de créer de plus grandes arborescences XML tout en conservant un encombrement mémoire.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you are streaming from an input source, such as a text file, then you can read a very large text file, and generate a very large XML document while maintaining a small memory footprint.</source>
          <target state="translated">Si vous diffusiez en continu à partir d’une source d’entrée, tels qu’un fichier texte, vous pouvez lire un fichier texte très volumineux et générer un document XML très volumineux tout en conservant un faible encombrement mémoire.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Another scenario is that you have a large XML tree that has been loaded into memory, and you want to create a transformed version of the document.</source>
          <target state="translated">Un autre scénario est que vous avez une grande arborescence XML qui a été chargée en mémoire, et que vous souhaitez créer une version transformée du document.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you create a new document using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, then you will have two large XML trees in memory upon completion of the transformation.</source>
          <target state="translated">Si vous créez un document à l’aide <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, vous aurez deux grandes arborescences XML en mémoire à l’achèvement de la transformation.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>However, if you create the new XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, then your working set will be effectively cut in half.</source>
          <target state="translated">Toutefois, si vous créez la nouvelle arborescence XML à l’aide <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, puis votre jeu de travail sera effectivement diminuer de moitié.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">Notez que lors du débogage d’un programme qui utilise <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, affichage de la valeur d’un objet entraîne son <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> méthode à appeler.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">Ainsi, le code XML à sérialiser.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">Si la sémantique de votre requête d’élément diffusion en continu est telles que l’élément de diffusion en continu peut être diffusé uniquement une fois, cela peut entraîner un comportement indésirable dans votre expérience de débogage.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following example first creates a source XML tree.</source>
          <target state="translated">L’exemple suivant crée d’abord une arborescence XML source.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>It then creates a transform of the source XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Il crée ensuite une transformation de l’arborescence de la source XML à l’aide <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This transform creates a new tree in memory.</source>
          <target state="translated">Cette transformation crée une nouvelle arborescence dans la mémoire.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>It then creates a transform of the source XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">Il crée ensuite une transformation de l’arborescence de la source XML à l’aide <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This transform doesn't execute the query until the transformed tree is serialized to the console.</source>
          <target state="translated">Cette transformation n’exécute pas la requête jusqu'à ce que l’arborescence transformée est sérialisée vers la console.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Its memory usage is less.</source>
          <target state="translated">Son utilisation de la mémoire est inférieure.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>One approach to processing a text file is to write an extension method that streams the text file a line at a time using the <ph id="ph1">`yield return`</ph> construct.</source>
          <target state="translated">L'une des façons de traiter un fichier texte consiste à écrire une méthode d'extension qui diffuse en continu le fichier texte une ligne à la fois à l'aide de la construction <ph id="ph1">`yield return`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>You then can write a LINQ query that processes the text file in a lazy deferred fashion.</source>
          <target state="translated">Vous pouvez alors écrire une requête LINQ qui traite le fichier texte de manière différée.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you then use the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> to stream output, you then can create a transform from the text file to XML that uses a minimal amount of memory, regardless of the size of the source text file.</source>
          <target state="translated">Si vous utilisez ensuite le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> pour diffuser la sortie, vous pouvez ensuite créer une transformation du fichier texte en XML qui utilise une quantité minimale de mémoire, quelle que soit la taille du fichier texte source.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following text file, People.txt, is the source for this example.</source>
          <target state="translated">Le fichier texte suivant, People.txt, est la source pour cet exemple.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following code contains an extension method that streams the lines of the text file in a deferred fashion.</source>
          <target state="translated">Le code suivant contient une méthode d'extension qui diffuse en continu les lignes du fichier texte de manière différée.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Sometimes you have to transform large XML files, and write your application so that the memory footprint of the application is predictable.</source>
          <target state="translated">Vous devez parfois transformer des fichiers XML volumineux et écrire votre application de sorte que son encombrement mémoire soit prévisible.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If you try to populate an XML tree with a very large XML file, your memory usage will be proportional to the size of the file (that is, excessive).</source>
          <target state="translated">Si vous tentez de remplir une arborescence XML avec un très grand fichier XML, l'utilisation de la mémoire sera proportionnelle à la taille du fichier (c'est-à-dire excessive).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Therefore, you should use a streaming technique instead.</source>
          <target state="translated">Par conséquent, vous devez utiliser une technique de diffusion en continu à la place.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Certain standard query operators, such as <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence.</source>
          <target state="translated">Certains opérateurs de requête standard, tels que <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, itèrent au sein de leur source, recueillent toutes les données, les trient, puis produisent le premier élément de la séquence.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that if you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint for your application.</source>
          <target state="translated">Notez que si vous utilisez un opérateur de requête qui matérialise sa source avant de produire le premier élément, vous ne conserverez pas un faible encombrement mémoire pour votre application.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Even if you use the technique described in , if you try to assemble an XML tree that contains the transformed document, memory usage may be too great.</source>
          <target state="translated">Même si vous utilisez la technique décrite dans, si vous tentez d’assembler une arborescence XML qui contient le document transformé, l’utilisation de mémoire peut être trop importante.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following example builds on the example in <bpt id="p1">[</bpt>How to: Stream XML Fragments with Access to Header Information<ept id="p1">](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092)</ept>.</source>
          <target state="translated">L’exemple suivant s’appuie sur l’exemple de <bpt id="p1">[</bpt>Comment : diffuser des fragments XML en continu avec accès aux informations d’en-tête<ept id="p1">](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092)</ept>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example uses the deferred execution capabilities of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> to stream the output.</source>
          <target state="translated">Il utilise les capacités d'exécution différée de <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> pour diffuser la sortie en continu.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that the custom axis (<ph id="ph1">`StreamCustomerItem`</ph>) is specifically written so that it expects a document that has <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph>, and <ph id="ph4">`Item`</ph> elements, and that those elements will be arranged as in the following Source.xml document.</source>
          <target state="translated">Notez que l'axe personnalisé (<ph id="ph1">`StreamCustomerItem`</ph>) est spécifiquement écrit de sorte qu'il s'attende à recevoir un document possédant des éléments <ph id="ph2">`Customer`</ph>, <ph id="ph3">`Name`</ph> et <ph id="ph4">`Item`</ph>, et que ces éléments seront disposés comme dans le document  Source.xml suivant.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>A more robust implementation, however, would either validate the source document with an XSD, or would be prepared to parse an invalid document.</source>
          <target state="translated">Une implémentation plus robuste, toutefois, validerait le document source avec un fichier XSD ou serait préparée à analyser un document non valide.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following is the source document, Source.xml:</source>
          <target state="translated">Voici le document source, Source.xml :</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The following code contains a method that uses an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to stream the source XML.</source>
          <target state="translated">Le code suivant contient une méthode qui utilise un <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> pour diffuser du code XML source.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>It uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> to stream the new XML.</source>
          <target state="translated">Il utilise <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> pour transmettre le nouveau code XML en continu.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">Les requêtes ne sont pas parcourues tant que le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> est sérialisé.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Cette approche s’oppose à l’aide de requêtes pour le contenu pour un <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, où les requêtes sont parcourues au moment de la construction de la nouvelle <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>For details about the valid content that can be passed to this constructor, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">Pour plus d’informations sur le contenu valide qui peut être passé à ce constructeur, consultez <bpt id="p1">[</bpt>valide le contenu des objets XElement et XDocument<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the name of the element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> qui contient le nom de l'élément.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> class from the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> à partir du <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>This constructor creates a streaming element with no content and no attributes.</source>
          <target state="translated">Ce constructeur crée un élément de diffusion en continu avec aucun contenu et aucun attribut.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Il existe une conversion implicite d’une chaîne en <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Une utilisation typique de ce constructeur consiste à spécifier une chaîne comme paramètre au lieu de créer un nouveau <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the element name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> qui contient le nom de l'élément.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>The contents of the element.</source>
          <target state="translated">Contenu de l'élément.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> class with the specified name and content.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> avec le nom et le contenu spécifiés.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This constructor creates a streaming element with the specified content and attributes.</source>
          <target state="translated">Ce constructeur crée un élément de diffusion en continu avec les attributs et le contenu spécifié.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Il existe une conversion implicite d’une chaîne en <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Une utilisation typique de ce constructeur consiste à spécifier une chaîne comme paramètre au lieu de créer un nouveau <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">Les requêtes ne sont pas parcourues tant que le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> est sérialisé.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Cette approche s’oppose à l’aide de requêtes pour le contenu pour un <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, où les requêtes sont parcourues au moment de la construction de la nouvelle <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>For details about the valid content that can be passed to this constructor, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">Pour plus d’informations sur le contenu valide qui peut être passé à ce constructeur, consultez <bpt id="p1">[</bpt>valide le contenu des objets XElement et XDocument<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
          <source>This example uses the following XML file, named Source.xml:</source>
          <target state="translated">Cet exemple utilise le fichier XML suivant, nommé Source.xml :</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the element name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> qui contient le nom de l'élément.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>The contents of the element.</source>
          <target state="translated">Contenu de l'élément.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> class with the specified name and content.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> avec le nom et le contenu spécifiés.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This constructor creates a streaming element with the specified content and attributes.</source>
          <target state="translated">Ce constructeur crée un élément de diffusion en continu avec les attributs et le contenu spécifié.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>There is an implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Il existe une conversion implicite d’une chaîne en <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>Typical use of this constructor is to specify a string as the parameter instead of creating a new <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Une utilisation typique de ce constructeur consiste à spécifier une chaîne comme paramètre au lieu de créer un nouveau <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">Les requêtes ne sont pas parcourues tant que le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> est sérialisé.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Cette approche s’oppose à l’aide de requêtes pour le contenu pour un <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, où les requêtes sont parcourues au moment de la construction de la nouvelle <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez <bpt id="p1">[</bpt>valide le contenu des objets XElement et XDocument<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
          <source>This example uses the following XML file, named Source.xml:</source>
          <target state="translated">Cet exemple utilise le fichier XML suivant, nommé Source.xml :</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Adds the specified content as children to this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</source>
          <target state="translated">Ajoute le contenu spécifié en tant qu'enfants à ce <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>Content to be added to the streaming element.</source>
          <target state="translated">Contenu à ajouter à l'élément de diffusion en continu.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>Adds the specified content as children to this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</source>
          <target state="translated">Ajoute le contenu spécifié en tant qu'enfants à ce <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>This constructor adds the specified content and attributes to the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">Ce constructeur ajoute le contenu spécifié et les attributs dans le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>While it is often possible to construct the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.</source>
          <target state="translated">Alors qu’il est souvent possible de construire le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> dans une instruction unique, il est parfois plus pratique d’ajouter du contenu à l’élément de diffusion en continu incrémentielle.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">Les requêtes ne sont pas parcourues tant que le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> est sérialisé.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Cette approche s’oppose à l’aide de requêtes pour le contenu pour un <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, où les requêtes sont parcourues au moment de la construction de la nouvelle <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez <bpt id="p1">[</bpt>valide le contenu des objets XElement et XDocument<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>The following example creates a new <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">L’exemple suivant crée un nouveau <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>It then adds two queries to the streaming element.</source>
          <target state="translated">Il ajoute ensuite deux requêtes à l’élément de diffusion en continu.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>The queries are not iterated until the streaming element is serialized.</source>
          <target state="translated">Les requêtes ne sont pas parcourues jusqu'à ce que l’élément de diffusion en continu est sérialisé.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>Content to be added to the streaming element.</source>
          <target state="translated">Contenu à ajouter à l'élément de diffusion en continu.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>Adds the specified content as children to this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</source>
          <target state="translated">Ajoute le contenu spécifié en tant qu'enfants à ce <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>This constructor adds the specified content and attributes to the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">Ce constructeur ajoute le contenu spécifié et les attributs dans le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>While it is often possible to construct the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> in a single statement, it is sometimes more convenient to add content to the streaming element incrementally.</source>
          <target state="translated">Alors qu’il est souvent possible de construire le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> dans une instruction unique, il est parfois plus pratique d’ajouter du contenu à l’élément de diffusion en continu incrémentielle.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>Queries are not iterated until the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> is serialized.</source>
          <target state="translated">Les requêtes ne sont pas parcourues tant que le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> est sérialisé.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>This is in contrast to using queries for content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, where queries are iterated at the time of construction of the new <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Cette approche s’oppose à l’aide de requêtes pour le contenu pour un <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, où les requêtes sont parcourues au moment de la construction de la nouvelle <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>For details about the valid content that can be passed to this function, see <bpt id="p1">[</bpt>Valid Content of XElement and XDocument Objects<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</source>
          <target state="translated">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez <bpt id="p1">[</bpt>valide le contenu des objets XElement et XDocument<ept id="p1">](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae)</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>The following example creates a new <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">L’exemple suivant crée un nouveau <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>It then adds two queries to the streaming element.</source>
          <target state="translated">Il ajoute ensuite deux requêtes à l’élément de diffusion en continu.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>The queries are not iterated until the streaming element is serialized.</source>
          <target state="translated">Les requêtes ne sont pas parcourues jusqu'à ce que l’élément de diffusion en continu est sérialisé.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>Gets or sets the name of this streaming element.</source>
          <target state="translated">Obtient ou définit le nom de cet élément de diffusion en continu.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> that contains the name of this streaming element.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> qui contient le nom de cet élément de diffusion en continu.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>This example creates a new streaming element, and then prints the name of the element.</source>
          <target state="translated">Cet exemple crée un nouvel élément de diffusion en continu, puis imprime le nom de l’élément.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XStreamingElement.Name">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Serialize this streaming element.</source>
          <target state="translated">Sérialiser cet élément de diffusion en continu.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>The output can be saved to a file, an <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph>, a <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, or an <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">La sortie peut être enregistrée vers un fichier, un <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph>, un <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> ou un <ph id="ph3">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Optionally, formatting (indenting) can be disabled.</source>
          <target state="translated">Éventuellement, la mise en forme (mise en retrait) peut être désactivée.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to.</source>
          <target state="translated">Flux vers lequel générer ce <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>.</source>
          <target state="translated">Renvoie ce <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> vers le <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> spécifié.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">Le code XML sérialisé est en retrait.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">Tous les espaces blancs non significatifs sera supprimé et un espace supplémentaire sera ajouté afin que le code XML mis en retrait correctement.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>The behavior of this method is that insignificant white space will not be preserved.</source>
          <target state="translated">Le comportement de cette méthode est que l’espace blanc non significatif ne sera pas préservé.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>If you want to control white space, use the overload of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that takes <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">Si vous souhaitez contrôler les espaces blancs, utilisez la surcharge de <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> qui accepte <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> en tant que paramètre.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> option to save unindented XML.</source>
          <target state="translated">Utilisez la <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> option pour enregistrer le code XML.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">Cela entraîne le writer à écrire tous les espaces blancs exactement comme représenté dans l’arborescence XML.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">Utilisez <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option si vous souhaitez supprimer les déclarations d’espace de noms en double.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> will be written to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> dans lequel le <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> sera écrit.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>Serialize this streaming element to a <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">Sérialiser cet élément de diffusion en continu vers un <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">Le code XML sérialisé est en retrait.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">Tous les espaces blancs non significatifs sera supprimé et un espace supplémentaire sera ajouté afin que le code XML mis en retrait correctement.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</source>
          <target state="translated">Le comportement de cette méthode est que les nœuds dans l’arborescence XML ne seront pas préservés espaces non significatifs.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>If you want to control white space, use one of the overloads of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that take <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">Si vous souhaitez contrôler les espaces blancs, utilisez une des surcharges de <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> acceptant <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> en tant que paramètre.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>conserver les espaces lors du chargement ou de l’analyse de XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> et <bpt id="p2">[</bpt>conserver un espace blanc tandis que sérialisation<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>The following example creates a source XML tree, then instantiates an <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> using a query on the source XML tree.</source>
          <target state="translated">L’exemple suivant crée une arborescence XML source, puis instancie un <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> à l’aide d’une requête sur l’arborescence XML source.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>It then writes the streaming element to a <ph id="ph1">&lt;xref:System.IO.StringWriter&gt;</ph>.</source>
          <target state="translated">Il écrit ensuite l’élément de diffusion en continu à un <ph id="ph1">&lt;xref:System.IO.StringWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the name of the file.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> qui contient le nom du fichier.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>Serialize this streaming element to a file.</source>
          <target state="translated">Sérialiser cet élément de diffusion en continu vers un fichier.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>The serialized XML will be indented.</source>
          <target state="translated">Le code XML sérialisé est en retrait.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</source>
          <target state="translated">Tous les espaces blancs non significatifs sera supprimé et un espace supplémentaire sera ajouté afin que le code XML mis en retrait correctement.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</source>
          <target state="translated">Le comportement de cette méthode est que les nœuds dans l’arborescence XML ne seront pas préservés espaces non significatifs.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>If you want to control white space, use one of the overloads of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> that take <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> as a parameter.</source>
          <target state="translated">Si vous souhaitez contrôler les espaces blancs, utilisez une des surcharges de <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.Save%2A&gt;</ph> acceptant <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions&gt;</ph> en tant que paramètre.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>conserver les espaces lors du chargement ou de l’analyse de XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> et <bpt id="p2">[</bpt>conserver un espace blanc tandis que sérialisation<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>The following example creates a streaming XML tree.</source>
          <target state="translated">L’exemple suivant crée une arborescence XML en continu.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>It then serializes the streaming XML tree to a file.</source>
          <target state="translated">Il sérialise ensuite l’arborescence XML en continu vers un fichier.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> will be written to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> dans lequel le <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XElement" /&gt;</ph> sera écrit.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>Serialize this streaming element to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">Sérialiser cet élément de diffusion en continu vers un <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> and writes it to an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">L’exemple suivant crée un <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> et écrit dans un <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>The stream to output this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph> to.</source>
          <target state="translated">Flux vers lequel générer ce <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XDocument" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> object that specifies formatting behavior.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> qui spécifie le comportement de mise en forme.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Outputs this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> to the specified <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph>, optionally specifying formatting behavior.</source>
          <target state="translated">Génère ce <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XStreamingElement" /&gt;</ph> vers le <ph id="ph2">&lt;see cref="T:System.IO.Stream" /&gt;</ph> spécifié, en précisant le cas échéant le comportement de mise en forme.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>By default the <ph id="ph1">`options`</ph> are set to <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>.</source>
          <target state="translated">Par défaut le <ph id="ph1">`options`</ph> ont la valeur <ph id="ph2">&lt;xref:System.Xml.Linq.SaveOptions.None&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">Cette option supprime tous les espaces non significatifs superflus et ajouter des espaces blancs non significatifs approprié afin que le code XML est mis en retrait correctement.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">Si vous souhaitez enregistrer le code XML, spécifiez la <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> indicateur pour <ph id="ph2">`options`</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white spaces exactly as represented in the XML tree.</source>
          <target state="translated">Cela entraîne le writer à écrire tous les espaces blancs exactement comme représenté dans l’arborescence XML.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
          <source>Use <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option if you want to remove duplicate namespace declarations.</source>
          <target state="translated">Utilisez <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces&gt;</ph> option si vous souhaitez supprimer les déclarations d’espace de noms en double.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to output the XML to.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> vers lequel exporter le code XML.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> qui spécifie le comportement de mise en forme.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>Serialize this streaming element to a <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, optionally disabling formatting.</source>
          <target state="translated">Sérialiser cet élément de diffusion en continu vers un <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>, en désactivant éventuellement la mise en forme.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">Si vous souhaitez enregistrer le code XML, spécifiez la <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> indicateur pour <ph id="ph2">`options`</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">Cela entraîne le writer à écrire tous les espaces blancs exactement comme représenté dans l’arborescence XML.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">Si vous souhaitez enregistrer le code XML mis en retrait, ne spécifiez pas le <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> indicateur pour <ph id="ph2">`options`</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">Cela supprime tous les espaces non significatifs superflus et ajouter des espaces blancs non significatifs approprié afin que le code XML est mis en retrait correctement.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">Il s’agit du comportement par défaut et le comportement des surcharges de la <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> les méthodes qui ne prennent pas <ph id="ph2">`options`</ph> en tant que paramètre.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>conserver les espaces lors du chargement ou de l’analyse de XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> et <bpt id="p2">[</bpt>conserver un espace blanc tandis que sérialisation<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">L’exemple suivant montre deux utilisations de cette méthode.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">La première utilisation conserve l’espace blanc.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">La seconde sérialise le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> avec mise en forme.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the name of the file.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> qui contient le nom du fichier.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> object that specifies formatting behavior.</source>
          <target state="translated">Objet <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> qui spécifie le comportement de mise en forme.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>Serialize this streaming element to a file, optionally disabling formatting.</source>
          <target state="translated">Sérialiser cet élément de diffusion en continu vers un fichier, en désactivant éventuellement la mise en forme.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save unindented XML, specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">Si vous souhaitez enregistrer le code XML, spécifiez la <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> indicateur pour <ph id="ph2">`options`</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will cause the writer to write all white space exactly as represented in the XML tree.</source>
          <target state="translated">Cela entraîne le writer à écrire tous les espaces blancs exactement comme représenté dans l’arborescence XML.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>If you want to save indented XML, do not specify the <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> flag for <ph id="ph2">`options`</ph>.</source>
          <target state="translated">Si vous souhaitez enregistrer le code XML mis en retrait, ne spécifiez pas le <ph id="ph1">&lt;xref:System.Xml.Linq.SaveOptions.DisableFormatting&gt;</ph> indicateur pour <ph id="ph2">`options`</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</source>
          <target state="translated">Cela supprime tous les espaces non significatifs superflus et ajouter des espaces blancs non significatifs approprié afin que le code XML est mis en retrait correctement.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This is the default behavior, and the behavior of the overloads of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> methods that do not take <ph id="ph2">`options`</ph> as a parameter.</source>
          <target state="translated">Il s’agit du comportement par défaut et le comportement des surcharges de la <ph id="ph1">&lt;xref:System.Xml.Linq.XElement.Save%2A&gt;</ph> les méthodes qui ne prennent pas <ph id="ph2">`options`</ph> en tant que paramètre.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>For more information, see <bpt id="p1">[</bpt>Preserving White Space while Loading or Parsing XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> and <bpt id="p2">[</bpt>Preserving White Space While Serializing<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>conserver les espaces lors du chargement ou de l’analyse de XML<ept id="p1">](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d)</ept> et <bpt id="p2">[</bpt>conserver un espace blanc tandis que sérialisation<ept id="p2">](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939)</ept>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of this method.</source>
          <target state="translated">L’exemple suivant montre deux utilisations de cette méthode.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">La première utilisation conserve l’espace blanc.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">La seconde sérialise le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> avec mise en forme.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Returns the XML for this streaming element, optionally disabling formatting.</source>
          <target state="translated">Retourne le code XML pour cet élément de diffusion en continu, en désactivant éventuellement la mise en forme.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">Notez que lors du débogage d’un programme qui utilise <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, affichage de la valeur d’un objet entraîne son <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> méthode à appeler.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">Ainsi, le code XML à sérialiser.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XStreamingElement">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">Si la sémantique de votre requête d’élément diffusion en continu est telles que l’élément de diffusion en continu peut être diffusé uniquement une fois, cela peut entraîner un comportement indésirable dans votre expérience de débogage.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>Returns the formatted (indented) XML for this streaming element.</source>
          <target state="translated">Retourne le code XML mis en forme (en retrait) pour cet élément de diffusion en continu.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the indented XML.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> contenant le code XML mis en retrait.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">Notez que lors du débogage d’un programme qui utilise <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, affichage de la valeur d’un objet entraîne son <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> méthode à appeler.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">Ainsi, le code XML à sérialiser.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">Si la sémantique de votre requête d’élément diffusion en continu est telles que l’élément de diffusion en continu peut être diffusé uniquement une fois, cela peut entraîner un comportement indésirable dans votre expérience de débogage.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>The following example shows two uses of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>.</source>
          <target state="translated">L’exemple suivant montre deux utilisations de <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>The first use preserves white space.</source>
          <target state="translated">La première utilisation conserve l’espace blanc.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">La seconde sérialise le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> avec mise en forme.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> that specifies formatting behavior.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.SaveOptions" /&gt;</ph> qui spécifie le comportement de mise en forme.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>Returns the XML for this streaming element, optionally disabling formatting.</source>
          <target state="translated">Retourne le code XML pour cet élément de diffusion en continu, en désactivant éventuellement la mise en forme.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> containing the XML.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> contenant le code XML.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>Note that when debugging a program that uses <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, displaying the value of an object causes its <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">Notez que lors du débogage d’un programme qui utilise <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>, affichage de la valeur d’un objet entraîne son <ph id="ph2">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph> méthode à appeler.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>This causes the XML to be serialized.</source>
          <target state="translated">Ainsi, le code XML à sérialiser.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>If the semantics of your streaming element query are such that the streaming element can only be streamed once, this may cause undesirable behavior in your debugging experience.</source>
          <target state="translated">Si la sémantique de votre requête d’élément diffusion en continu est telles que l’élément de diffusion en continu peut être diffusé uniquement une fois, cela peut entraîner un comportement indésirable dans votre expérience de débogage.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>The following example shows two uses of <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>.</source>
          <target state="translated">L’exemple suivant montre deux utilisations de <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement.ToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>The first use preserves white space.</source>
          <target state="translated">La première utilisation conserve l’espace blanc.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>The second one serializes the <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> with formatting.</source>
          <target state="translated">La seconde sérialise le <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph> avec mise en forme.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> into which this method will write.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> dans lequel cette méthode écrira.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>Writes this streaming element to an <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</source>
          <target state="translated">Écrit cet élément de diffusion en continu vers un <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>The following example creates an XML tree using <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</source>
          <target state="translated">L’exemple suivant crée une arborescence XML à l’aide <ph id="ph1">&lt;xref:System.Xml.Linq.XStreamingElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>It then writes the streaming element to an <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
          <target state="translated">Il écrit ensuite l’élément de diffusion en continu à un <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
          <source>This example produces the following output:</source>
          <target state="translated">Cet exemple génère la sortie suivante :</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>