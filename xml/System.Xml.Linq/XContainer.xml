<Type Name="XContainer" FullName="System.Xml.Linq.XContainer">
  <TypeSignature Language="C#" Value="public abstract class XContainer : System.Xml.Linq.XNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XContainer extends System.Xml.Linq.XNode" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XContainer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XContainer&#xA;Inherits XNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class XContainer abstract : System::Xml::Linq::XNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c9739-101">Représente un nœud qui peut contenir d'autres nœuds.</span><span class="sxs-lookup"><span data-stu-id="c9739-101">Represents a node that can contain other nodes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-102">Cette classe fournit des fonctionnalités telles que la recherche du nœud frère suivant ou précédent ou énumérer les enfants directs d’un nœud.</span><span class="sxs-lookup"><span data-stu-id="c9739-102">This class provides functionality such as finding the next or previous sibling node, or enumerating the direct children of a node.</span></span>  
  
 <span data-ttu-id="c9739-103">Les deux classes qui dérivent de <xref:System.Xml.Linq.XContainer> sont <xref:System.Xml.Linq.XDocument> et <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="c9739-103">The two classes that derive from <xref:System.Xml.Linq.XContainer> are <xref:System.Xml.Linq.XDocument> and <xref:System.Xml.Linq.XElement>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9739-104">Ajoute le contenu spécifié en tant qu'enfants à ce <see cref="T:System.Xml.Linq.XContainer" />.</span><span class="sxs-lookup"><span data-stu-id="c9739-104">Adds the specified content as children to this <see cref="T:System.Xml.Linq.XContainer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-105">Cette méthode ajoute le nouveau contenu après le contenu existant de la <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="c9739-105">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="c9739-106">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="c9739-106">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c9739-107">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="c9739-107">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-108">L’exemple suivant crée deux arborescences XML et utilise ensuite cette méthode pour ajouter les résultats d’une requête à un d’eux.</span><span class="sxs-lookup"><span data-stu-id="c9739-108">The following example creates two XML trees, and then uses this method to add the results of a query to one of them.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("NewElement", "Content")  
);  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _  
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
Dim xmlTree As XElement = _   
        <Root>  
            <NewElement>Content</NewElement>  
        </Root>  
xmlTree.Add( _  
    From el In srcTree.Elements _  
    Where CInt(el) >= 3 _  
    Select el)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="c9739-109">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-109">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <NewElement>Content</NewElement>  
  <Element3>3</Element3>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="c9739-110">Objet de contenu contenant du contenu simple ou collection d'objets de contenu à ajouter.</span><span class="sxs-lookup"><span data-stu-id="c9739-110">A content object containing simple content or a collection of content objects to be added.</span></span></param>
        <summary><span data-ttu-id="c9739-111">Ajoute le contenu spécifié en tant qu'enfants de ce <see cref="T:System.Xml.Linq.XContainer" />.</span><span class="sxs-lookup"><span data-stu-id="c9739-111">Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-112">Cette méthode ajoute le nouveau contenu après le contenu existant de la <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="c9739-112">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="c9739-113">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="c9739-113">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c9739-114">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="c9739-114">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-115">L’exemple suivant crée deux arborescences XML, puis utilise cette méthode pour ajouter un <xref:System.Xml.Linq.XElement> objet à un d’eux.</span><span class="sxs-lookup"><span data-stu-id="c9739-115">The following example creates two XML trees, and then uses this method to add an <xref:System.Xml.Linq.XElement> object to one of them.</span></span> <span data-ttu-id="c9739-116">Il ajoute également les résultats d’une [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] requête à l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="c9739-116">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.Add(new XElement("NewChild", "new content"));  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree.  
xmlTree.Add(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.Add(New XElement("NewChild", "new content"))  
xmlTree.Add( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree.  
xmlTree.Add(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
  
```  
  
 <span data-ttu-id="c9739-117">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-117">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <NewChild>new content</NewChild>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Add(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="c9739-118">Liste de paramètres d'objets de contenu.</span><span class="sxs-lookup"><span data-stu-id="c9739-118">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="c9739-119">Ajoute le contenu spécifié en tant qu'enfants de ce <see cref="T:System.Xml.Linq.XContainer" />.</span><span class="sxs-lookup"><span data-stu-id="c9739-119">Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-120">Cette méthode ajoute le nouveau contenu après le contenu existant de la <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="c9739-120">This method adds the new content after the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="c9739-121">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="c9739-121">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c9739-122">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="c9739-122">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-123">L’exemple suivant crée deux arborescences XML, qu’il utilise cette méthode pour ajouter un <xref:System.Xml.Linq.XElement> objet à un d’eux.</span><span class="sxs-lookup"><span data-stu-id="c9739-123">The following example creates two XML trees, uses this method to add an <xref:System.Xml.Linq.XElement> object to one of them.</span></span> <span data-ttu-id="c9739-124">Il ajoute également les résultats d’une [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] requête à l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="c9739-124">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.Add(new XElement("NewChild", "new content"));  
xmlTree.Add(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree  
xmlTree.Add(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.Add(New XElement("NewChild", "new content"))  
xmlTree.Add( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree  
xmlTree.Add(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="c9739-125">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-125">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <NewChild>new content</NewChild>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.AddFirst" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AddFirst">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9739-126">Ajoute le contenu spécifié en tant que premiers enfants de ce document ou élément.</span><span class="sxs-lookup"><span data-stu-id="c9739-126">Adds the specified content as the first children of this document or element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-127">Cette méthode ajoute le nouveau contenu avant le contenu existant de la <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="c9739-127">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="c9739-128">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="c9739-128">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c9739-129">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="c9739-129">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-130">L’exemple suivant crée deux arborescences XML et utilise ensuite cette méthode pour ajouter les résultats d’une requête à un d’eux.</span><span class="sxs-lookup"><span data-stu-id="c9739-130">The following example creates two XML trees, and then uses this method to add the results of a query to one of them.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("NewElement", "Content")  
);  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
Dim xmlTree As XElement = <Root>  
                              <NewElement>Content</NewElement>  
                          </Root>  
xmlTree.AddFirst( _  
    From el In srcTree.Elements _  
    Where CInt(el) >= 3 _  
    Select el)  
Console.WriteLine(xmlTree)  
  
```  
  
 <span data-ttu-id="c9739-131">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-131">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element3>3</Element3>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewElement>Content</NewElement>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AddFirst">
      <MemberSignature Language="C#" Value="public void AddFirst (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddFirst(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.AddFirst(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddFirst (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddFirst(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="c9739-132">Objet de contenu contenant du contenu simple ou collection d'objets de contenu à ajouter.</span><span class="sxs-lookup"><span data-stu-id="c9739-132">A content object containing simple content or a collection of content objects to be added.</span></span></param>
        <summary><span data-ttu-id="c9739-133">Ajoute le contenu spécifié en tant que premiers enfants de ce document ou élément.</span><span class="sxs-lookup"><span data-stu-id="c9739-133">Adds the specified content as the first children of this document or element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-134">Cette méthode ajoute le nouveau contenu avant le contenu existant de la <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="c9739-134">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="c9739-135">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="c9739-135">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c9739-136">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="c9739-136">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-137">L’exemple suivant crée deux arborescences XML, qu’il utilise cette méthode pour ajouter un <xref:System.Xml.Linq.XElement> objet en tant que premier élément à un d’eux.</span><span class="sxs-lookup"><span data-stu-id="c9739-137">The following example creates two XML trees, uses this method to add an <xref:System.Xml.Linq.XElement> object as the first element to one of them.</span></span> <span data-ttu-id="c9739-138">Il ajoute également les résultats d’une [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] requête à l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="c9739-138">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.AddFirst(new XElement("NewChild", "new content"));  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree  
xmlTree.AddFirst(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.AddFirst(New XElement("NewChild", "new content"))  
xmlTree.AddFirst( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree  
xmlTree.AddFirst(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="c9739-139">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-139">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewChild>new content</NewChild>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <Member MemberName="AddFirst">
      <MemberSignature Language="C#" Value="public void AddFirst (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddFirst(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.AddFirst(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddFirst (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddFirst(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="c9739-140">Liste de paramètres d'objets de contenu.</span><span class="sxs-lookup"><span data-stu-id="c9739-140">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="c9739-141">Ajoute le contenu spécifié en tant que premiers enfants de ce document ou élément.</span><span class="sxs-lookup"><span data-stu-id="c9739-141">Adds the specified content as the first children of this document or element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-142">Cette méthode ajoute le nouveau contenu avant le contenu existant de la <xref:System.Xml.Linq.XContainer>.</span><span class="sxs-lookup"><span data-stu-id="c9739-142">This method adds the new content before the existing content of the <xref:System.Xml.Linq.XContainer>.</span></span>  
  
 <span data-ttu-id="c9739-143">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="c9739-143">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c9739-144">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="c9739-144">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-145">L’exemple suivant crée deux arborescences XML et utilise cette méthode pour ajouter un <xref:System.Xml.Linq.XElement> objet en tant que premier élément à un d’eux.</span><span class="sxs-lookup"><span data-stu-id="c9739-145">The following example creates two XML trees, and uses this method to add an <xref:System.Xml.Linq.XElement> object as the first element to one of them.</span></span> <span data-ttu-id="c9739-146">Il ajoute également les résultats d’une [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] requête à l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="c9739-146">It also adds the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the XML tree.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
xmlTree.AddFirst(new XElement("NewChild", "new content"));  
xmlTree.AddFirst(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
// Even though Child9 does not exist in srcTree, the following statement will not  
// throw an exception, and nothing will be added to xmlTree.  
xmlTree.AddFirst(srcTree.Element("Child9"));  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
xmlTree.AddFirst(New XElement("NewChild", "new content"))  
xmlTree.AddFirst( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
' Even though Child9 does not exist in srcTree, the following statement will not  
' throw an exception, and nothing will be added to xmlTree.  
xmlTree.AddFirst(srcTree.<Child9>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="c9739-147">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-147">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <NewChild>new content</NewChild>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c9739-148">Le parent est <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9739-148">The parent is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <Member MemberName="CreateWriter">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriter CreateWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriter CreateWriter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.CreateWriter" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWriter () As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriter ^ CreateWriter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9739-149">Crée un <see cref="T:System.Xml.XmlWriter" /> qui peut être utilisé pour ajouter des nœuds au <see cref="T:System.Xml.Linq.XContainer" />.</span><span class="sxs-lookup"><span data-stu-id="c9739-149">Creates an <see cref="T:System.Xml.XmlWriter" /> that can be used to add nodes to the <see cref="T:System.Xml.Linq.XContainer" />.</span></span></summary>
        <returns><span data-ttu-id="c9739-150"><see cref="T:System.Xml.XmlWriter" /> prêt à recevoir l'écriture de contenu.</span><span class="sxs-lookup"><span data-stu-id="c9739-150">An <see cref="T:System.Xml.XmlWriter" /> that is ready to have content written to it.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-151">Lors de la sérialisation, les préfixes d’espace de noms sont déduits à partir des attributs d’espace de noms dans l’arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="c9739-151">While serializing, namespace prefixes are inferred from the namespace attributes in the XML tree.</span></span>  
  
 <span data-ttu-id="c9739-152">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="c9739-152">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-153">Vous pouvez utiliser cette méthode pour effectuer une transformation XSLT.</span><span class="sxs-lookup"><span data-stu-id="c9739-153">You can use this method to perform an XSLT transformation.</span></span> <span data-ttu-id="c9739-154">Vous pouvez créer une arborescence XML, créer un <xref:System.Xml.XmlReader> à partir de l’arborescence XML, créer un nouveau document, puis créer un <xref:System.Xml.XmlWriter> qui écrira dans le nouveau document.</span><span class="sxs-lookup"><span data-stu-id="c9739-154">You can create an XML tree, create an <xref:System.Xml.XmlReader> from the XML tree, create a new document, and create a <xref:System.Xml.XmlWriter> that will write into the new document.</span></span> <span data-ttu-id="c9739-155">Ensuite, vous pouvez appeler la transformation XSLT, en passant le <xref:System.Xml.XmlReader> et <xref:System.Xml.XmlWriter> à la transformation.</span><span class="sxs-lookup"><span data-stu-id="c9739-155">Then, you can invoke the XSLT transformation, passing the <xref:System.Xml.XmlReader> and <xref:System.Xml.XmlWriter> to the transform.</span></span> <span data-ttu-id="c9739-156">Une fois la transformation terminée avec succès, la nouvelle arborescence XML est remplie avec les résultats de la transformation.</span><span class="sxs-lookup"><span data-stu-id="c9739-156">After the transformation successfully completes, the new XML tree is populated with the results of the transformation.</span></span>  
  
```csharp  
string xslMarkup = @"<?xml version='1.0'?>  
<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
    <xsl:template match='/Parent'>  
        <Root>  
            <C1><xsl:value-of select='Child1'/></C1>  
            <C2><xsl:value-of select='Child2'/></C2>  
        </Root>  
    </xsl:template>  
</xsl:stylesheet>";  
  
XDocument xmlTree = new XDocument(  
    new XElement("Parent",  
        new XElement("Child1", "Child1 data"),  
        new XElement("Child2", "Child2 data")  
    )  
);  
  
XDocument newTree = new XDocument();  
using (XmlWriter writer = newTree.CreateWriter()) {  
    // Load the style sheet.  
    XslCompiledTransform xslt = new XslCompiledTransform();  
    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  
  
    // Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer);  
}  
  
Console.WriteLine(newTree);  
```  
  
```vb  
Dim xslMarkup As XDocument = _   
    <?xml version='1.0'?>  
    <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
        <xsl:template match='/Parent'>  
            <Root>  
                <C1><xsl:value-of select='Child1'/></C1>  
                <C2><xsl:value-of select='Child2'/></C2>  
            </Root>  
        </xsl:template>  
    </xsl:stylesheet>  
  
Dim xmlTree As XElement = _   
    <Parent>  
        <Child1>Child1 data</Child1>  
        <Child2>Child2 data</Child2>  
    </Parent>  
  
Dim newTree As XDocument = New XDocument()  
  
Using writer As XmlWriter = newTree.CreateWriter()  
    ' Load the style sheet.  
    Dim xslt As XslCompiledTransform = _  
        New XslCompiledTransform()  
    xslt.Load(xslMarkup.CreateReader())  
  
    ' Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer)  
End Using  
  
Console.WriteLine(newTree)  
```  
  
 <span data-ttu-id="c9739-157">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-157">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <C1>Child1 data</C1>  
  <C2>Child2 data</C2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.DescendantNodes" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantNodes () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9739-158">Retourne une collection des nœuds descendants pour ce document ou cet élément, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-158">Returns a collection of the descendant nodes for this document or element, in document order.</span></span></summary>
        <returns><span data-ttu-id="c9739-159"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XNode" /> contenant les nœuds descendants du <see cref="T:System.Xml.Linq.XContainer" />, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-159">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the descendant nodes of the <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-160">Notez que les attributs ne sont pas considérés comme nœuds dans [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], ils seront donc pas partie de la collection retournée par cette méthode.</span><span class="sxs-lookup"><span data-stu-id="c9739-160">Note that attributes are not considered to be nodes in [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], so they will not be part of the collection that is returned by this method.</span></span>  
  
 <span data-ttu-id="c9739-161">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="c9739-161">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-162">L’exemple suivant crée une arborescence XML, puis itère au sein du <xref:System.Xml.Linq.XContainer.DescendantNodes%2A> axe.</span><span class="sxs-lookup"><span data-stu-id="c9739-162">The following example creates an XML tree, and then iterates through the <xref:System.Xml.Linq.XContainer.DescendantNodes%2A> axis.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    // Attributes are not nodes, so will not be returned by DescendantNodes.  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XNode> dnas =  
    from node in xmlTree.DescendantNodes()  
    select node;  
foreach (XNode node in dnas)  
{  
    if (node is XElement)  
        Console.WriteLine((node as XElement).Name);  
    else  
        Console.WriteLine(node);  
}  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by DescendantNodes.  
Dim xmlTree As XElement = _   
    <Root Att1="AttributeContent">  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim dnas = From node In xmlTree.DescendantNodes _  
           Select node  
  
For Each node In dnas  
    If TypeOf node Is XElement Then  
        Console.WriteLine(DirectCast(node, XElement).Name)  
    Else  
        Console.WriteLine(node)  
    End If  
Next  
```  
  
 <span data-ttu-id="c9739-163">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-163">This example produces the following output:</span></span>  
  
```  
Child  
GrandChild  
element content  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Descendants">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9739-164">Retourne une collection des éléments descendants pour ce document ou cet élément, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-164">Returns a collection of the descendant elements for this document or element, in document order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-165">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="c9739-165">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Descendants" />
      <MemberSignature Language="VB.NET" Value="Public Function Descendants () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9739-166">Retourne une collection des éléments descendants pour ce document ou cet élément, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-166">Returns a collection of the descendant elements for this document or element, in document order.</span></span></summary>
        <returns><span data-ttu-id="c9739-167"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> contenant les éléments descendants du <see cref="T:System.Xml.Linq.XContainer" />.</span><span class="sxs-lookup"><span data-stu-id="c9739-167">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-168">Notez que cette méthode ne se retournera pas elle-même dans résultant <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="c9739-168">Note that this method will not return itself in the resulting <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="c9739-169">Consultez <xref:System.Xml.Linq.XElement.DescendantsAndSelf%2A> si vous devez inclure actuel <xref:System.Xml.Linq.XElement> dans les résultats.</span><span class="sxs-lookup"><span data-stu-id="c9739-169">See <xref:System.Xml.Linq.XElement.DescendantsAndSelf%2A> if you need to include the current <xref:System.Xml.Linq.XElement> in the results.</span></span>  
  
 <span data-ttu-id="c9739-170">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="c9739-170">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-171">L’exemple suivant crée une arborescence XML et utilise ensuite cette méthode d’axe pour récupérer les descendants.</span><span class="sxs-lookup"><span data-stu-id="c9739-171">The following example creates an XML tree, and then uses this axis method to retrieve the descendants.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants()  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by DescendantNodes.  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
Dim de = From el In xmlTree.Descendants _  
         Select el  
  
For Each el In de  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="c9739-172">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-172">This example produces the following output:</span></span>  
  
```  
Child  
GrandChild  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <Member MemberName="Descendants">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Descendants (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Descendants(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Descendants (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Descendants(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c9739-173"><see cref="T:System.Xml.Linq.XName" /> à mettre en correspondance.</span><span class="sxs-lookup"><span data-stu-id="c9739-173">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="c9739-174">Retourne une collection filtrée des éléments descendants pour ce document ou cet élément, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-174">Returns a filtered collection of the descendant elements for this document or element, in document order.</span></span> <span data-ttu-id="c9739-175">Seuls les éléments avec un <see cref="T:System.Xml.Linq.XName" /> correspondant sont inclus dans la collection.</span><span class="sxs-lookup"><span data-stu-id="c9739-175">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="c9739-176"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> contenant les éléments descendants du <see cref="T:System.Xml.Linq.XContainer" /> qui correspond au <see cref="T:System.Xml.Linq.XName" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="c9739-176">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" /> that match the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-177">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="c9739-177">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-178">L’exemple suivant imprime tous les descendants d’un élément.</span><span class="sxs-lookup"><span data-stu-id="c9739-178">The following example prints all descendants of an element.</span></span>  
  
```csharp  
// Attributes are not nodes, so will not be returned by DescendantNodes.  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants("Child")  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
' Attributes are not nodes, so will not be returned by the descendants axis.  
Dim xmlTree As XElement = _   
    <Root Att1="AttributeContent">  
         <Child>Some text  
             <GrandChild>element content</GrandChild>  
         </Child>  
     </Root>  
  
Dim de = From el In xmlTree...<Child> _  
         Select el  
  
For Each el In de  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="c9739-179">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-179">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 <span data-ttu-id="c9739-180">Voici le même exemple, mais dans ce cas le XML est un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c9739-180">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="c9739-181">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="c9739-181">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
// Attributes are not nodes, so will not be returned by DescendantNodes.  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(aw + "Att1", "AttributeContent"),  
    new XElement(aw + "Child",  
        new XText("Some text"),  
        new XElement(aw + "GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> de =  
    from el in xmlTree.Descendants(aw + "Child")  
    select el;  
foreach (XElement el in de)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Imports <xmlns:aw = "http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        ' Attributes are not nodes, so will not be returned by the descendants axis.  
        Dim xmlTree As XElement = _   
            <aw:Root aw:Att1="AttributeContent">  
                 <aw:Child>Some text  
                     <aw:GrandChild>element content</aw:GrandChild>  
                 </aw:Child>  
             </aw:Root>  
  
        Dim de = From el In xmlTree...<aw:Child> _  
                 Select el  
  
        For Each el In de  
            Console.WriteLine(el.Name)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c9739-182">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-182">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Child  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <Member MemberName="Element">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XElement Element (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XElement Element(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Element (name As XName) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XElement ^ Element(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c9739-183"><see cref="T:System.Xml.Linq.XName" /> à mettre en correspondance.</span><span class="sxs-lookup"><span data-stu-id="c9739-183">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="c9739-184">Obtient le premier (dans l'ordre des documents) élément enfant avec le <see cref="T:System.Xml.Linq.XName" /> spécifié.</span><span class="sxs-lookup"><span data-stu-id="c9739-184">Gets the first (in document order) child element with the specified <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="c9739-185"><see cref="T:System.Xml.Linq.XElement" /> qui correspond au <see cref="T:System.Xml.Linq.XName" /> spécifié ou <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c9739-185">A <see cref="T:System.Xml.Linq.XElement" /> that matches the specified <see cref="T:System.Xml.Linq.XName" />, or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-186">Retourne `null` s’il n’existe aucun élément avec le nom spécifié.</span><span class="sxs-lookup"><span data-stu-id="c9739-186">Returns `null` if there is no element with the specified name.</span></span>  
  
 <span data-ttu-id="c9739-187">Certaines méthodes d’axe retournent des collections d’éléments ou attributs.</span><span class="sxs-lookup"><span data-stu-id="c9739-187">Some axis methods return collections of elements or attributes.</span></span> <span data-ttu-id="c9739-188">Cette méthode retourne un seul élément.</span><span class="sxs-lookup"><span data-stu-id="c9739-188">This method returns only a single element.</span></span>  
  
 <span data-ttu-id="c9739-189">Cette méthode retourne `null` si l’élément avec le nom spécifié est introuvable.</span><span class="sxs-lookup"><span data-stu-id="c9739-189">This method returns `null` if the element with the specified name is not found.</span></span> <span data-ttu-id="c9739-190">Toutes les méthodes qui vous permettent de construire des éléments (le constructeur de <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XContainer.Add%2A>, et ainsi de suite) accepter `null` comme un argument valide.</span><span class="sxs-lookup"><span data-stu-id="c9739-190">All of the methods that allow you to construct elements (the constructor of <xref:System.Xml.Linq.XElement>, <xref:System.Xml.Linq.XContainer.Add%2A>, and so on) accept `null` as a valid argument.</span></span> <span data-ttu-id="c9739-191">Cela vous permet d’utiliser un idiome pratique : vous pouvez appeler cette méthode dans le cadre de la construction fonctionnelle, et l’élément est ajouté à l’arborescence XML en cours de construction si et seulement si l’élément existe dans l’arborescence de la source.</span><span class="sxs-lookup"><span data-stu-id="c9739-191">This allows you to use a convenient idiom: you can call this method as part of functional construction, and the element is added to the XML tree being constructed if and only if the element exists in the source tree.</span></span> <span data-ttu-id="c9739-192">L’exemple suivant illustre cet idiome.</span><span class="sxs-lookup"><span data-stu-id="c9739-192">The following example shows this idiom.</span></span>  
  
 <span data-ttu-id="c9739-193">Contrairement à <xref:System.Xml.Linq.XContainer.Elements%2A>, cette méthode n’est pas une méthode d’axe.</span><span class="sxs-lookup"><span data-stu-id="c9739-193">In contrast to <xref:System.Xml.Linq.XContainer.Elements%2A>, this method is not an axis method.</span></span> <span data-ttu-id="c9739-194">Il n’utilise pas l’exécution différée. Il renvoie simplement un élément lorsqu’elle est appelée.</span><span class="sxs-lookup"><span data-stu-id="c9739-194">It does not use deferred execution; it simply returns an element when called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-195">L’exemple suivant montre deux utilisations de cette méthode.</span><span class="sxs-lookup"><span data-stu-id="c9739-195">The following example shows two uses of this method.</span></span> <span data-ttu-id="c9739-196">Dans certains cas, la méthode recherche l’élément dans `srcTree`.</span><span class="sxs-lookup"><span data-stu-id="c9739-196">In one case, the method finds the element in `srcTree`.</span></span> <span data-ttu-id="c9739-197">Dans le second cas, la méthode ne trouve pas l’élément dans l’arborescence source, aucun élément n’est ajouté à `xmlTree`, et aucune exception n’est levée.</span><span class="sxs-lookup"><span data-stu-id="c9739-197">In the second case, the method does not find the element in the source tree, no element is added to `xmlTree`, and no exception is thrown.</span></span>  
  
 <span data-ttu-id="c9739-198">Notez que l’exemple Visual Basic utilise la propriété XML enfant.</span><span class="sxs-lookup"><span data-stu-id="c9739-198">Note that the Visual Basic example uses the child XML property.</span></span> <span data-ttu-id="c9739-199">Il est également possible d’utiliser le <xref:System.Xml.Linq.XContainer.Element%2A> (méthode) directement dans Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c9739-199">It is also allowable to use the <xref:System.Xml.Linq.XContainer.Element%2A> method directly in Visual Basic.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    srcTree.Element("Element3"),  
    // Even though Element9 does not exist in srcTree, the following line  
    // will not throw an exception.  
    srcTree.Element("Element9")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <%= srcTree.<Element3> %>  
            <%= srcTree.<Element9> %>  
        </Root>  
  
' Even though Element9 does not exist in srcTree, adding it to the tree  
' will not throw an exception.  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="c9739-200">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-200">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
  <Element3>3</Element3>  
</Root>  
```  
  
 <span data-ttu-id="c9739-201">Voici le même exemple, mais dans ce cas le XML est un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c9739-201">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="c9739-202">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="c9739-202">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement srcTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Element1", 1),  
    new XElement(aw + "Element2", 2),  
    new XElement(aw + "Element3", 3),  
    new XElement(aw + "Element4", 4),  
    new XElement(aw + "Element5", 5)  
);  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5),  
    srcTree.Element(aw + "Element3"),  
    // Even though Element9 does not exist in srcTree, the following line  
    // will not throw an exception.  
    srcTree.Element(aw + "Element9")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim srcTree As XElement = _   
            <aw:Root>  
                <aw:Element1>1</aw:Element1>  
                <aw:Element2>2</aw:Element2>  
                <aw:Element3>3</aw:Element3>  
                <aw:Element4>4</aw:Element4>  
                <aw:Element5>5</aw:Element5>  
            </aw:Root>  
  
        Dim xmlTree As XElement = _  
            <aw:Root>  
                <aw:Child1>1</aw:Child1>  
                <aw:Child2>2</aw:Child2>  
                <aw:Child3>3</aw:Child3>  
                <aw:Child4>4</aw:Child4>  
                <aw:Child5>5</aw:Child5>  
                <%= srcTree.<aw:Element3> %>  
                <%= srcTree.<aw:Element9> %>  
            </aw:Root>  
  
        ' Even though Element9 does not exist in srcTree, adding it to the tree  
        ' will not throw an exception.  
  
        Console.WriteLine(xmlTree)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c9739-203">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-203">This example produces the following output:</span></span>  
  
```xml  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child1>1</aw:Child1>  
  <aw:Child2>2</aw:Child2>  
  <aw:Child3>3</aw:Child3>  
  <aw:Child4>4</aw:Child4>  
  <aw:Child5>5</aw:Child5>  
  <aw:Element3>3</aw:Element3>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Elements">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9739-204">Retourne une collection des éléments enfants de cet élément ou de ce document, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-204">Returns a collection of the child elements of this element or document, in document order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-205">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="c9739-205">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Elements" />
      <MemberSignature Language="VB.NET" Value="Public Function Elements () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9739-206">Retourne une collection des éléments enfants de cet élément ou de ce document, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-206">Returns a collection of the child elements of this element or document, in document order.</span></span></summary>
        <returns><span data-ttu-id="c9739-207"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> contenant les éléments enfants de ce <see cref="T:System.Xml.Linq.XContainer" />, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-207">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the child elements of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-208">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="c9739-208">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-209">L’exemple suivant crée une arborescence XML, puis sélectionne certains éléments à l’aide de cette méthode d’axe.</span><span class="sxs-lookup"><span data-stu-id="c9739-209">The following example creates an XML tree, and then selects some elements using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements()  
    where (int)el <= 3  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim elements = From el In xmlTree.Elements _  
               Where el.Value <= 3 _  
               Select el  
  
For Each el In elements  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="c9739-210">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-210">This example produces the following output:</span></span>  
  
```  
<Child1>1</Child1>  
<Child2>2</Child2>  
<Child3>3</Child3>  
```  
  
 <span data-ttu-id="c9739-211">Voici le même exemple, mais dans ce cas le XML est un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c9739-211">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="c9739-212">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="c9739-212">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements()  
    where (int)el <= 3  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _  
            <aw:Root>  
                <aw:Child1>1</aw:Child1>  
                <aw:Child2>2</aw:Child2>  
                <aw:Child3>3</aw:Child3>  
                <aw:Child4>4</aw:Child4>  
                <aw:Child5>5</aw:Child5>  
            </aw:Root>  
  
        Dim elements = From el In xmlTree.Elements _  
                       Where el.Value <= 3 _  
                       Select el  
  
        For Each el In elements  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c9739-213">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-213">This example produces the following output:</span></span>  
  
```  
<aw:Child1 xmlns:aw="http://www.adventure-works.com">1</aw:Child1>  
<aw:Child2 xmlns:aw="http://www.adventure-works.com">2</aw:Child2>  
<aw:Child3 xmlns:aw="http://www.adventure-works.com">3</aw:Child3>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </Member>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Elements (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Elements(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Elements (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Elements(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c9739-214"><see cref="T:System.Xml.Linq.XName" /> à mettre en correspondance.</span><span class="sxs-lookup"><span data-stu-id="c9739-214">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="c9739-215">Retourne une collection filtrée des éléments enfants de cet élément ou de ce document, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-215">Returns a filtered collection of the child elements of this element or document, in document order.</span></span> <span data-ttu-id="c9739-216">Seuls les éléments avec un <see cref="T:System.Xml.Linq.XName" /> correspondant sont inclus dans la collection.</span><span class="sxs-lookup"><span data-stu-id="c9739-216">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="c9739-217"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XElement" /> contenant les enfants du <see cref="T:System.Xml.Linq.XContainer" /> qui ont un <see cref="T:System.Xml.Linq.XName" /> correspondant, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-217">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the children of the <see cref="T:System.Xml.Linq.XContainer" /> that have a matching <see cref="T:System.Xml.Linq.XName" />, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-218">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="c9739-218">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-219">L’exemple suivant crée une arborescence XML, puis sélectionne plusieurs éléments enfants à l’aide de cette méthode d’axe.</span><span class="sxs-lookup"><span data-stu-id="c9739-219">The following example creates an XML tree, and then selects several child elements using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Type1", 1),  
    new XElement("Type1", 2),  
    new XElement("Type2", 3),  
    new XElement("Type2", 4),  
    new XElement("Type2", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements("Type2")  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Type1>1</Type1>  
            <Type1>2</Type1>  
            <Type2>3</Type2>  
            <Type2>4</Type2>  
            <Type2>5</Type2>  
        </Root>  
  
Dim elements = From el In xmlTree.<Type2> _  
               Select el  
  
For Each el In elements  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="c9739-220">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-220">This example produces the following output:</span></span>  
  
```  
<Type2>3</Type2>  
<Type2>4</Type2>  
<Type2>5</Type2>  
```  
  
 <span data-ttu-id="c9739-221">Voici le même exemple, mais dans ce cas le XML est un espace de noms.</span><span class="sxs-lookup"><span data-stu-id="c9739-221">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="c9739-222">Pour plus d’informations, consultez [utilisation des espaces de noms XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="c9739-222">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Type1", 1),  
    new XElement(aw + "Type1", 2),  
    new XElement(aw + "Type2", 3),  
    new XElement(aw + "Type2", 4),  
    new XElement(aw + "Type2", 5)  
);  
IEnumerable<XElement> elements =  
    from el in xmlTree.Elements(aw + "Type2")  
    select el;  
foreach (XElement el in elements)  
    Console.WriteLine(el);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = _   
            <aw:Root>  
                <aw:Type1>1</aw:Type1>  
                <aw:Type1>2</aw:Type1>  
                <aw:Type2>3</aw:Type2>  
                <aw:Type2>4</aw:Type2>  
                <aw:Type2>5</aw:Type2>  
            </aw:Root>  
  
        Dim elements = From el In xmlTree.<aw:Type2> _  
                       Select el  
  
        For Each el In elements  
            Console.WriteLine(el)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="c9739-223">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-223">This example produces the following output:</span></span>  
  
```  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">3</aw:Type2>  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">4</aw:Type2>  
<aw:Type2 xmlns:aw="http://www.adventure-works.com">5</aw:Type2>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </Member>
    <Member MemberName="FirstNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode FirstNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode FirstNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XContainer.FirstNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ FirstNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9739-224">Obtient le premier nœud enfant de ce nœud.</span><span class="sxs-lookup"><span data-stu-id="c9739-224">Get the first child node of this node.</span></span></summary>
        <value><span data-ttu-id="c9739-225"><see cref="T:System.Xml.Linq.XNode" /> qui contient le premier nœud enfant du <see cref="T:System.Xml.Linq.XContainer" />.</span><span class="sxs-lookup"><span data-stu-id="c9739-225">An <see cref="T:System.Xml.Linq.XNode" /> containing the first child node of the <see cref="T:System.Xml.Linq.XContainer" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c9739-226">L’exemple suivant crée un élément qui contienne des éléments enfants.</span><span class="sxs-lookup"><span data-stu-id="c9739-226">The following example creates an element that contains child elements.</span></span> <span data-ttu-id="c9739-227">Il obtient ensuite le premier nœud enfant de l’élément parent.</span><span class="sxs-lookup"><span data-stu-id="c9739-227">It then gets the first child node of the parent element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XNode firstNode = xmlTree.FirstNode;  
Console.WriteLine(firstNode);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim firstNode As XNode = xmlTree.FirstNode  
Console.WriteLine(firstNode)  
```  
  
 <span data-ttu-id="c9739-228">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-228">This example produces the following output:</span></span>  
  
```xml  
<Child1>1</Child1>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XContainer.LastNode" />
        <altmember cref="M:System.Xml.Linq.XContainer.Nodes" />
      </Docs>
    </Member>
    <Member MemberName="LastNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode LastNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode LastNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XContainer.LastNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ LastNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c9739-229">Obtient le dernier nœud enfant de ce nœud.</span><span class="sxs-lookup"><span data-stu-id="c9739-229">Get the last child node of this node.</span></span></summary>
        <value><span data-ttu-id="c9739-230"><see cref="T:System.Xml.Linq.XNode" /> qui contient le dernier nœud enfant du <see cref="T:System.Xml.Linq.XContainer" />.</span><span class="sxs-lookup"><span data-stu-id="c9739-230">An <see cref="T:System.Xml.Linq.XNode" /> containing the last child node of the <see cref="T:System.Xml.Linq.XContainer" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c9739-231">L’exemple suivant crée un élément qui contienne des éléments enfants.</span><span class="sxs-lookup"><span data-stu-id="c9739-231">The following example creates an element that contains child elements.</span></span> <span data-ttu-id="c9739-232">Il obtient ensuite le dernier nœud enfant de l’élément parent.</span><span class="sxs-lookup"><span data-stu-id="c9739-232">It then gets the last child node of the parent element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XNode lastNode = xmlTree.LastNode;  
Console.WriteLine(lastNode);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim lastNode As XNode = xmlTree.LastNode  
Console.WriteLine(lastNode)  
```  
  
 <span data-ttu-id="c9739-233">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-233">This example produces the following output:</span></span>  
  
```xml  
<Child5>5</Child5>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XContainer.FirstNode" />
        <altmember cref="M:System.Xml.Linq.XContainer.Nodes" />
      </Docs>
    </Member>
    <Member MemberName="Nodes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; Nodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; Nodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.Nodes" />
      <MemberSignature Language="VB.NET" Value="Public Function Nodes () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ Nodes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9739-234">Retourne une collection des nœuds enfants de cet élément ou de ce document, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-234">Returns a collection of the child nodes of this element or document, in document order.</span></span></summary>
        <returns><span data-ttu-id="c9739-235"><see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Xml.Linq.XNode" /> contenant le contenu de ce <see cref="T:System.Xml.Linq.XContainer" />, dans l'ordre des documents.</span><span class="sxs-lookup"><span data-stu-id="c9739-235">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the contents of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-236">Notez que le contenu n’inclut pas d’attributs.</span><span class="sxs-lookup"><span data-stu-id="c9739-236">Note that the content does not include attributes.</span></span> <span data-ttu-id="c9739-237">Dans [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], les attributs ne sont pas considérés comme des nœuds de l’arborescence.</span><span class="sxs-lookup"><span data-stu-id="c9739-237">In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], attributes are not considered to be nodes of the tree.</span></span> <span data-ttu-id="c9739-238">Ils sont des paires nom/valeur associées à un élément.</span><span class="sxs-lookup"><span data-stu-id="c9739-238">They are name/value pairs associated with an element.</span></span>  
  
 <span data-ttu-id="c9739-239">Cette méthode utilise l'exécution différée.</span><span class="sxs-lookup"><span data-stu-id="c9739-239">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-240">L’exemple suivant crée une arborescence XML avec un large éventail de types de nœuds.</span><span class="sxs-lookup"><span data-stu-id="c9739-240">The following example creates an XML tree with a variety of types of nodes.</span></span> <span data-ttu-id="c9739-241">Il interroge ensuite cette méthode d’axe pour énumérer et imprimer les nœuds.</span><span class="sxs-lookup"><span data-stu-id="c9739-241">It then queries this axis method to enumerate and print the nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XComment("a comment"),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XText("mixed content"),  
    new XElement("Child5", 5)  
);  
IEnumerable<XNode> nodes =  
    from nd in xmlTree.Nodes()  
    select nd;  
foreach (XNode node in nodes)  
    Console.WriteLine(node);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <!--a comment-->  
            <Child3>3</Child3>  
            <Child4>4</Child4>mixed content<Child5>5</Child5>  
            </Root>  
  
Dim nodes = From nd In xmlTree.Nodes() _  
            Select nd  
  
For Each node In nodes  
    Console.WriteLine(node)  
Next  
```  
  
 <span data-ttu-id="c9739-242">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-242">This example produces the following output:</span></span>  
  
```  
<Child1>1</Child1>  
<Child2>2</Child2>  
<!--a comment-->  
<Child3>3</Child3>  
<Child4>4</Child4>  
mixed content  
<Child5>5</Child5>  
```  
  
 <span data-ttu-id="c9739-243">L’exemple suivant crée une arborescence XML qui contient une variété de types de nœuds.</span><span class="sxs-lookup"><span data-stu-id="c9739-243">The following example creates an XML tree that contains a variety of types of nodes.</span></span> <span data-ttu-id="c9739-244">Il énumère ensuite les parties de l’arborescence, l’impression les types de nœuds.</span><span class="sxs-lookup"><span data-stu-id="c9739-244">It then enumerates through portions of the tree, printing the node types.</span></span>  
  
```csharp  
XDocument xmlTree = new XDocument(  
    new XComment("a comment"),  
    new XProcessingInstruction("xml-stylesheet", "type=\"text/xsl\" href=\"hello.xsl\""),  
    new XElement("Root",  
        new XAttribute("Att", "attContent"),  
        new XElement("Child1",  
            new XCData("CDATA content")  
        ),  
        new XElement("Child2",  
            new XText("Text content")  
        )  
    )  
);  
  
foreach (XNode node in xmlTree.Nodes())  
{  
    Console.WriteLine(node.NodeType);  
    if (node.NodeType == XmlNodeType.Element)  
    {  
        foreach (XAttribute att in ((XElement)node).Attributes())  
            Console.WriteLine(att.NodeType);  
        foreach (XNode node2 in ((XElement)node).Nodes())  
        {  
            Console.WriteLine(node2.NodeType);  
            if (node2.NodeType == XmlNodeType.Element)  
                foreach (XNode node3 in ((XElement)node2).Nodes())  
                    Console.WriteLine(node3.NodeType);  
        }  
    }  
}  
```  
  
```vb  
Dim xmlTree As XDocument = _   
    <?xml version="1.0" encoding="utf-8"?>  
    <!--a comment-->  
    <?xml-stylesheet type='text/xsl' href='hello.xsl'?>  
    <Root Att="attContent">  
        <Child1><![CDATA[CDATA content]]]><![CDATA[]></Child1>  
        <Child2>Text content</Child2>  
    </Root>  
  
' Note that XNode uses XmlNodeType, which is in the System.Xml namespace  
For Each node In xmlTree.Nodes  
    Console.WriteLine(node.NodeType.ToString())  
    If node.NodeType = XmlNodeType.Element Then  
        For Each att In DirectCast(node, XElement).Attributes  
            Console.WriteLine(att.NodeType.ToString())  
        Next  
        For Each node2 In DirectCast (node, XElement).Nodes()  
            Console.WriteLine(node2.NodeType.ToString())  
            If node2.NodeType = XmlNodeType.Element Then  
                For Each node3 In DirectCast (node2, XElement).Nodes  
                    Console.WriteLine(node3.NodeType.ToString())  
                Next  
            End If  
        Next  
    End If  
Next  
```  
  
 <span data-ttu-id="c9739-245">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-245">This example produces the following output:</span></span>  
  
```  
Comment  
ProcessingInstruction  
Element  
Attribute  
Element  
CDATA  
Element  
Text  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.Attributes" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.Descendants" />
        <altmember cref="M:System.Xml.Linq.XContainer.DescendantNodes" />
      </Docs>
    </Member>
    <Member MemberName="RemoveNodes">
      <MemberSignature Language="C#" Value="public void RemoveNodes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveNodes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.RemoveNodes" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveNodes ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveNodes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c9739-246">Supprime les nœuds enfants de ce document ou de cet élément.</span><span class="sxs-lookup"><span data-stu-id="c9739-246">Removes the child nodes from this document or element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-247">Si vous appelez cette méthode sur un élément qui contient des attributs, cette méthode ne supprime pas les attributs.</span><span class="sxs-lookup"><span data-stu-id="c9739-247">If you call this method on an element that contains attributes, this method will not remove the attributes.</span></span> <span data-ttu-id="c9739-248">Pour supprimer les attributs d’un élément, utilisez <xref:System.Xml.Linq.XElement.RemoveAttributes%2A>.</span><span class="sxs-lookup"><span data-stu-id="c9739-248">To remove the attributes of an element, use <xref:System.Xml.Linq.XElement.RemoveAttributes%2A>.</span></span>  
  
 <span data-ttu-id="c9739-249">Le <xref:System.Xml.Linq.Extensions.Remove%2A> méthode a des fonctionnalités connexes.</span><span class="sxs-lookup"><span data-stu-id="c9739-249">The <xref:System.Xml.Linq.Extensions.Remove%2A> method has related functionality.</span></span> <span data-ttu-id="c9739-250">Elle supprime les nœuds enfants de chaque nœud dans une collection.</span><span class="sxs-lookup"><span data-stu-id="c9739-250">It removes the child nodes of every node in a collection.</span></span>  
  
 <span data-ttu-id="c9739-251">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="c9739-251">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-252">L’exemple suivant crée une arborescence XML qui contient des nœuds enfants.</span><span class="sxs-lookup"><span data-stu-id="c9739-252">The following example creates an XML tree that contains some child nodes.</span></span> <span data-ttu-id="c9739-253">Il appelle ensuite cette méthode pour supprimer les nœuds enfants.</span><span class="sxs-lookup"><span data-stu-id="c9739-253">It then calls this method to remove the child nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XComment("a comment"),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XText("mixed content"),  
    new XElement("Child5", 5)  
);  
xmlTree.RemoveNodes();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmltree As XElement = _   
    <Root>  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <!--a comment-->  
        <Child3>3</Child3>  
        <Child4>4</Child4>mixed content<Child5>5</Child5>  
    </Root>  
  
xmltree.RemoveNodes()  
Console.WriteLine(xmltree)  
```  
  
 <span data-ttu-id="c9739-254">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-254">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="Overload:System.Xml.Linq.XContainer.ReplaceNodes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceNodes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c9739-255">Remplace les nœuds enfants de ce document ou de cet élément par le contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="c9739-255">Replaces the children nodes of this document or element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-256">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="c9739-256">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c9739-257">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="c9739-257">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="c9739-258">Cette méthode a la sémantique des instantanés.</span><span class="sxs-lookup"><span data-stu-id="c9739-258">This method has snapshot semantics.</span></span> <span data-ttu-id="c9739-259">Il crée d’abord une copie du nouveau contenu.</span><span class="sxs-lookup"><span data-stu-id="c9739-259">It first creates a copy of the new content.</span></span> <span data-ttu-id="c9739-260">Il supprime ensuite tous les nœuds enfants de ce nœud.</span><span class="sxs-lookup"><span data-stu-id="c9739-260">It then removes all children nodes of this node.</span></span> <span data-ttu-id="c9739-261">Enfin, il ajoute le nouveau contenu en tant que nœuds enfants.</span><span class="sxs-lookup"><span data-stu-id="c9739-261">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="c9739-262">Cela signifie que vous pouvez remplacer les nœuds enfants à l’aide d’une requête sur les nœuds enfants eux-mêmes.</span><span class="sxs-lookup"><span data-stu-id="c9739-262">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-263">L’exemple suivant crée deux arborescences XML, puis utilise cette méthode pour remplacer le contenu d’un d’eux avec les résultats d’une requête.</span><span class="sxs-lookup"><span data-stu-id="c9739-263">The following example creates two XML trees, and then uses this method to replace the contents of one of them with the results of a query.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c9739-264">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-264">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceNodes">
      <MemberSignature Language="C#" Value="public void ReplaceNodes (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceNodes(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceNodes (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceNodes(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="c9739-265">Objet de contenu contenant du contenu simple ou collection d'objets de contenu qui remplacent les nœuds enfants.</span><span class="sxs-lookup"><span data-stu-id="c9739-265">A content object containing simple content or a collection of content objects that replace the children nodes.</span></span></param>
        <summary><span data-ttu-id="c9739-266">Remplace les nœuds enfants de ce document ou de cet élément par le contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="c9739-266">Replaces the children nodes of this document or element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-267">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="c9739-267">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c9739-268">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="c9739-268">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="c9739-269">Cette méthode a la sémantique des instantanés.</span><span class="sxs-lookup"><span data-stu-id="c9739-269">This method has snapshot semantics.</span></span> <span data-ttu-id="c9739-270">Il crée d’abord une copie du nouveau contenu.</span><span class="sxs-lookup"><span data-stu-id="c9739-270">It first creates a copy of the new content.</span></span> <span data-ttu-id="c9739-271">Il supprime ensuite tous les nœuds enfants de ce nœud.</span><span class="sxs-lookup"><span data-stu-id="c9739-271">It then removes all children nodes of this node.</span></span> <span data-ttu-id="c9739-272">Enfin, il ajoute le nouveau contenu en tant que nœuds enfants.</span><span class="sxs-lookup"><span data-stu-id="c9739-272">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="c9739-273">Cela signifie que vous pouvez remplacer les nœuds enfants à l’aide d’une requête sur les nœuds enfants eux-mêmes.</span><span class="sxs-lookup"><span data-stu-id="c9739-273">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-274">L’exemple suivant crée une arborescence XML qui contient des nœuds enfants.</span><span class="sxs-lookup"><span data-stu-id="c9739-274">The following example creates an XML tree that contains children nodes.</span></span> <span data-ttu-id="c9739-275">Il remplace ensuite tous les nœuds enfants avec un seul élément.</span><span class="sxs-lookup"><span data-stu-id="c9739-275">It then replaces all of the children nodes with a single element.</span></span>  
  
 <span data-ttu-id="c9739-276">Pour voir un exemple de remplacement des nœuds enfants avec les résultats d’une [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] de requête, consultez <xref:System.Xml.Linq.XContainer.ReplaceNodes%2A>.</span><span class="sxs-lookup"><span data-stu-id="c9739-276">To see an example of replacing the children nodes with the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query, see <xref:System.Xml.Linq.XContainer.ReplaceNodes%2A>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c9739-277">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-277">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </Member>
    <Member MemberName="ReplaceNodes">
      <MemberSignature Language="C#" Value="public void ReplaceNodes (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceNodes(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceNodes (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceNodes(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="c9739-278">Liste de paramètres d'objets de contenu.</span><span class="sxs-lookup"><span data-stu-id="c9739-278">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="c9739-279">Remplace les nœuds enfants de ce document ou de cet élément par le contenu spécifié.</span><span class="sxs-lookup"><span data-stu-id="c9739-279">Replaces the children nodes of this document or element with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c9739-280">Pour plus d’informations sur le contenu valide qui peut être passé à cette fonction, consultez [valide le contenu des objets XElement et XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="c9739-280">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="c9739-281">Cette méthode lève la <xref:System.Xml.Linq.XObject.Changed> et <xref:System.Xml.Linq.XObject.Changing> les événements.</span><span class="sxs-lookup"><span data-stu-id="c9739-281">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="c9739-282">Cette méthode a la sémantique des instantanés.</span><span class="sxs-lookup"><span data-stu-id="c9739-282">This method has snapshot semantics.</span></span> <span data-ttu-id="c9739-283">Il crée d’abord une copie du nouveau contenu.</span><span class="sxs-lookup"><span data-stu-id="c9739-283">It first creates a copy of the new content.</span></span> <span data-ttu-id="c9739-284">Il supprime ensuite tous les nœuds enfants de ce nœud.</span><span class="sxs-lookup"><span data-stu-id="c9739-284">It then removes all children nodes of this node.</span></span> <span data-ttu-id="c9739-285">Enfin, il ajoute le nouveau contenu en tant que nœuds enfants.</span><span class="sxs-lookup"><span data-stu-id="c9739-285">Finally, it adds the new content as children nodes.</span></span> <span data-ttu-id="c9739-286">Cela signifie que vous pouvez remplacer les nœuds enfants à l’aide d’une requête sur les nœuds enfants eux-mêmes.</span><span class="sxs-lookup"><span data-stu-id="c9739-286">This means that you can replace children nodes using a query on the children nodes themselves.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c9739-287">L’exemple suivant crée un dictionnaire et une arborescence XML.</span><span class="sxs-lookup"><span data-stu-id="c9739-287">The following example creates a dictionary and an XML tree.</span></span> <span data-ttu-id="c9739-288">Ensuite, il interroge le dictionnaire, projette les résultats à un <xref:System.Collections.Generic.IEnumerable%601> de <xref:System.Xml.Linq.XElement>et remplace le contenu de l’arborescence XML avec les résultats de la requête.</span><span class="sxs-lookup"><span data-stu-id="c9739-288">It then queries the dictionary, projects the results to an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, and replaces the contents of the XML tree with the results of the query.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5)  
);  
root.ReplaceNodes(  
    from el in root.Elements()  
    where (int)el >= 3  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>1</Child>  
        <Child>2</Child>  
        <Child>3</Child>  
        <Child>4</Child>  
        <Child>5</Child>  
    </Root>  
root.ReplaceNodes( _  
    From el In root.Elements _  
    Where el.Value >= 3 _  
    Select el)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="c9739-289">Cet exemple génère la sortie suivante :</span><span class="sxs-lookup"><span data-stu-id="c9739-289">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XContainer.Add" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </Member>
  </Members>
</Type>