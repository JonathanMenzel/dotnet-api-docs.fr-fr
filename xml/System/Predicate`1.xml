<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4d5c7551e524b5bca53c8809fe4a5d86b71bc330" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728013" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Type de l'objet à comparer.</typeparam>
    <param name="obj">Objet à comparer par rapport aux critères définis dans la méthode représentée par ce délégué.</param>
    <summary>Représente la méthode qui définit un ensemble de critères et détermine si l'objet spécifié répond à ces critères.</summary>
    <returns>
      <see langword="true" /> si <paramref name="obj" /> correspond aux critères définis dans la méthode représentée par ce délégué ; sinon, <see langword="false" />.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ce délégué est utilisé par plusieurs méthodes de la <xref:System.Array> et <xref:System.Collections.Generic.List%601> classes pour rechercher des éléments dans la collection.  
  
 En règle générale, le <xref:System.Predicate%601> délégué est représenté par une expression lambda. Étant donné que les variables ayant une étendue locale sont disponibles à l’expression lambda, il est facile de tester une condition qui n’est pas précisément connue au moment de la compilation. Cela est simulé dans l’exemple suivant, qui définit un `HockeyTeam` classe qui contient des informations sur une équipe et la ligue Hockey National et l’année dans laquelle il a été créé. L’exemple définit un tableau d’entiers qui représentent des années et affecte de manière aléatoire un élément du tableau à `foundedBeforeYear`, qui est une variable définie localement pour l’exemple `Main` (méthode). Étant donné que les variables ayant une étendue locale ne peut être une expression lambda, l’expression lambda passée à la <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> (méthode) est en mesure de retourner un `HockeyTeam` objet pour chaque équipe fondée sur ou avant cette année.  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 Le de code suivant montre comment utiliser un <xref:System.Predicate%601> délégué avec le <xref:System.Array.Find%2A?displayProperty=nameWithType> méthode pour rechercher un tableau de <xref:System.Drawing.Point> structures. L’exemple définit explicitement une <xref:System.Predicate%601> délégué nommé `predicate` et lui attribue une méthode nommée `FindPoints` qui retourne `true` si le produit de la <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> et <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> champs est supérieur à 100 000. Notez qu’il est habituel d’utiliser une expression lambda au lieu de définir explicitement un délégué du type <xref:System.Predicate%601>, comme l’illustre le deuxième exemple.  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 L’exemple suivant est identique à l’exemple précédent, sauf qu’elle utilise une expression lambda pour représenter le <xref:System.Predicate%601> déléguer.  Chaque élément de la `points` tableau est passé à l’expression lambda jusqu'à ce que l’expression de recherche un élément qui répond aux critères de recherche. Dans ce cas, l’expression lambda retourne `true` si le produit des champs X et Y est supérieur à 100 000.  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>