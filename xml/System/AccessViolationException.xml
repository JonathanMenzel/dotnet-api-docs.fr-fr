<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AccessViolationException.xml" source-language="en-US" target-language="fr-FR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5eb360adfc3670886a06c5f3ab2daa2470318896a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb360adfc3670886a06c5f3ab2daa2470318896a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AccessViolationException">
          <source>The exception that is thrown when there is an attempt to read or write protected memory.</source>
          <target state="translated">Exception levée lors d’une tentative de lecture ou d’écriture dans une mémoire protégée.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An access violation occurs in unmanaged or unsafe code when the code attempts to read or write to memory that has not been allocated, or to which it does not have access.</source>
          <target state="translated">Une violation d’accès se produit dans le code non managé ou unsafe lorsque le code tente de lire ou écrire dans la mémoire qui n’a pas été allouée, ou vers lequel il n’a pas accès.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>This usually occurs because a pointer has a bad value.</source>
          <target state="translated">Cela se produit généralement parce que le pointeur a une valeur incorrecte.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Not all reads or writes through bad pointers lead to access violations, so an access violation usually indicates that several reads or writes have occurred through bad pointers, and that memory might be corrupted.</source>
          <target state="translated">Toutes les opérations de lecture ou d'écriture avec des pointeurs erronés ne provoquent pas des violations d'accès, une violation d'accès indique donc habituellement que plusieurs opérations de lecture ou d'écriture ont été exécutées par le biais de pointeurs erronés et que cette mémoire est peut-être endommagée.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Thus, access violations almost always indicate serious programming errors.</source>
          <target state="translated">Par conséquent, les violations d’accès indiquent presque toujours des erreurs de programmation graves.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> clearly identifies these serious errors.</source>
          <target state="translated">Une <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> identifie clairement ces erreurs graves.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>In programs consisting entirely of verifiable managed code, all references are either valid or null, and access violations are impossible.</source>
          <target state="translated">Dans les programmes entièrement composée de code managé vérifiable, toutes les références sont valides ou null, et les violations d’accès sont impossibles.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Any operation that attempts to reference a null reference in verifiable code throws a <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> exception.</source>
          <target state="translated">Toute opération qui tente de référencer une référence null dans du code vérifiable lève une <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> occurs only when verifiable managed code interacts with unmanaged code or with unsafe managed code.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> se produit uniquement lorsque le code managé vérifiable interagit avec le code non managé ou avec du code managé unsafe.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Troubleshooting AccessViolationException exceptions</source>
          <target state="translated">Dépannage des exceptions de AccessViolationException</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception can occur only in unsafe managed code or when verifiable managed code interacts with unmanaged code:</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception peut se produire uniquement dans du code managé unsafe ou lorsque gérés vérifiable code interagit avec le code non managé :</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An access violation that occurs in unsafe managed code can be expressed as either a <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> exception or an <ph id="ph2">&lt;xref:System.AccessViolationException&gt;</ph> exception, depending on the platform.</source>
          <target state="translated">Une violation d’accès qui se produit dans du code managé unsafe peut être exprimée comme une <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> exception ou un <ph id="ph2">&lt;xref:System.AccessViolationException&gt;</ph> exception, selon la plateforme.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An access violation in unmanaged code that bubbles up to managed code is always wrapped in an <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception.</source>
          <target state="translated">Une violation d’accès dans le code non managé qui se propage au code managé est toujours encapsulée dans une <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>In either case, you can identify and correct the cause of the <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception as follows:</source>
          <target state="translated">Dans les deux cas, vous pouvez identifier et corriger la cause de le <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception comme suit :</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Make sure that the memory that you are attempting to access has been allocated.</source>
          <target state="translated">Assurez-vous que la mémoire à laquelle vous tentez d'accéder a été allouée.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception is always thrown by an attempt to access protected memory -- that is, to access memory that is not allocated or that is not owned by a process.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception est toujours renvoyée par une tentative d’accéder à une mémoire protégée, qui est, pour accéder à la mémoire qui n’est pas allouée ou qui n’est pas détenu par un processus.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Automatic memory management is one of the services that the common language runtime provides.</source>
          <target state="translated">La gestion automatique de la mémoire est un des services que le Common Language Runtime fournit.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>If managed code provides the same functionality as your unmanagede code, you may wish to move to managed code to take advantage of this functionality.</source>
          <target state="translated">Si le code managé fournit les mêmes fonctionnalités que votre code unmanagede, vous pouvez souhaiter passer à du code managé pour tirer parti de cette fonctionnalité.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>For more information, see <bpt id="p1">[</bpt>Automatic Memory Management<ept id="p1">](~/docs/standard/automatic-memory-management.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>gestion automatique de la mémoire<ept id="p1">](~/docs/standard/automatic-memory-management.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Make sure that the memory that you are attempting to access has not been corrupted.</source>
          <target state="translated">Assurez-vous que la mémoire à laquelle vous tentez d'accéder n'a pas été endommagée.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>If several read or write operations have occurred through bad pointers, memory may be corrupted.</source>
          <target state="translated">Si plusieurs opérations de lecture et d'écriture ont été effectuées par le biais de pointeurs erronés, la mémoire peut être endommagée.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>This typically occurs when reading or writing to addresses outside of a predefined buffer.</source>
          <target state="translated">Cela se produit généralement lors de la lecture ou écriture aux adresses en dehors d’une mémoire tampon prédéfinie.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>AccessViolationException and try/catch blocks</source>
          <target state="translated">Blocs AccessViolationException et try/catch</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.AccessViolationException&gt;</ph> exceptions thrown by the common language runtime are not handled by the <ph id="ph3">`catch`</ph> statement in a structured exception handler if the exception occurs outside of the memory reserved by the common language runtime.</source>
          <target state="translated">En commençant par le <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.AccessViolationException&gt;</ph> les exceptions levées par le common language runtime ne sont pas gérées par la <ph id="ph3">`catch`</ph> instruction dans un gestionnaire d’exceptions structuré si l’exception se produit en dehors de la mémoire réservée par le common language Runtime.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>To handle such an <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception, you should apply the  <ph id="ph2">&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</ph> attribute to the method in which the exception is thrown.</source>
          <target state="translated">Pour gérer un <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception, vous devez appliquer le <ph id="ph2">&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</ph> d’attribut à la méthode dans laquelle l’exception est levée.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>This change does not affect <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exceptions thrown by user code, which can continue to be caught by a <ph id="ph2">`catch`</ph> statement.</source>
          <target state="translated">Cette modification n’affecte pas <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> les exceptions levées par le code utilisateur, qui peut continuer à être interceptée par un <ph id="ph2">`catch`</ph> instruction.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>For code written for previous versions of the .NET Framework that you want to recompile and run without modification on the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, you can add the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>legacyCorruptedStateExceptionsPolicy&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md)</ept> element to your app's configuration file.</source>
          <target state="translated">Pour le code écrit pour les versions antérieures du .NET Framework que vous souhaitez recompiler et s’exécuter sans modification le <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, vous pouvez ajouter la <bpt id="p1">[</bpt> <ph id="ph2">\&lt;</ph>legacyCorruptedStateExceptionsPolicy &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md)</ept> élément à votre fichier de configuration de l’application.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Note that you can also receive notification of the exceptions if you have defined a handler for the <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">Notez que vous pouvez également recevoir la notification des exceptions si vous avez défini un gestionnaire pour le <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType&gt;</ph> ou <ph id="ph2">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> événement.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Version Information</source>
          <target state="translated">Informations sur la version</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>This exception is thrown in the .NET Framework 2.0 and later versions.</source>
          <target state="translated">Cette exception est levée dans le .NET Framework 2.0 et versions ultérieures.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>In earlier versions of the .NET Framework, an access violation in unmanaged code or unsafe managed code is represented by a <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> in managed code.</source>
          <target state="translated">Dans les versions antérieures du .NET Framework, une violation d’accès dans le code non managé ou du code managé unsafe est représentée par un <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> dans du code managé.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>A <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> is also thrown when a null reference is dereferenced in verifiable managed code, an occurrence that does not involve data corruption, and there is no way to distinguish between the two situations in versions 1.0 or 1.1.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> est également levée lors de la suppression d’une référence null dans du code managé vérifiable, une situation qui n’implique pas la corruption des données, et il n’existe aucun moyen de faire la distinction entre les deux cas dans les versions 1.0 ou 1.1.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Administrators can allow selected applications to revert to the behavior of the .NET Framework version 1.1.</source>
          <target state="translated">Les administrateurs peuvent autoriser des applications sélectionnées rétablir le comportement de la version 1.1 du .NET Framework.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Place the following line in the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>runtime<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the configuration file for the application:</source>
          <target state="translated">Placez la ligne suivante dans le <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>runtime<ph id="ph2">&amp;gt;</ph> élément<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section du fichier de configuration de l’application :</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="T:System.AccessViolationException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> class.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> class with a system-supplied message that describes the error.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> avec un message système qui décrit l'erreur.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "Attempted to read or write protected memory.</source>
          <target state="translated">Ce constructeur initialise la <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> propriété de la nouvelle instance à un message système qui décrit l’erreur, tel que « a tenté de lire ou écrire la mémoire protégée.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>This is often an indication that other memory has been corrupted."</source>
          <target state="translated">Cela indique souvent une autre mémoire est endommagée. »</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">Ce message prend en compte la culture système en cours.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>.</source>
          <target state="translated">Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>Value</source>
          <target state="translated">Value</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>The localized error message string.</source>
          <target state="translated">Chaîne du message d'erreur localisé.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>The message that describes the exception.</source>
          <target state="translated">Message décrivant l'exception.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> class with a specified message that describes the error.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> avec un message spécifié décrivant l'erreur.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>.</source>
          <target state="translated">Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">Value</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>The error message string specified in <ph id="ph1">`message`</ph>.</source>
          <target state="translated">Chaîne de message d'erreur spécifiée dans <ph id="ph1">`message`</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> that holds the serialized object data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> qui contient les données sérialisées de l’objet.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> that contains contextual information about the source or destination.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> qui contient des informations contextuelles relatives à la source ou à la destination.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> class with serialized data.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> avec des données sérialisées.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">Ce constructeur est appelé lors de la désérialisation pour reconstituer l’objet exception transmis sur un flux.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</source>
          <target state="translated">Pour plus d’informations, consultez <bpt id="p1">[</bpt>sérialisation XML et SOAP<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The message that describes the exception.</source>
          <target state="translated">Message décrivant l'exception.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">L'appelant de ce constructeur doit vérifier que cette chaîne a été localisée pour la culture en cours du système.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">Exception ayant provoqué l'exception actuelle.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> parameter is not <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated">Si le paramètre <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> n’est pas <ph id="ph1">&lt;see langword="null" /&gt;</ph>, l’exception actuelle est levée dans un bloc <ph id="ph2">&lt;see langword="catch" /&gt;</ph> qui gère l’exception interne.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">Initialise une nouvelle instance de la classe <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">Une exception levée en conséquence directe d'une exception précédente doit contenir une référence à celle-ci dans la propriété <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated">La propriété <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> retourne la même valeur que celle qui a été passée dans le constructeur ou retourne <ph id="ph2">`null`</ph> si la propriété <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> ne fournit pas la valeur d'exception interne au constructeur.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>.</source>
          <target state="translated">Le tableau suivant montre les valeurs initiales des propriétés d'une instance de <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">Value</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The error message string specified in <ph id="ph1">`message`</ph>.</source>
          <target state="translated">Chaîne de message d'erreur spécifiée dans <ph id="ph1">`message`</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>